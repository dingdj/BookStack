{
  "title" : "Object-Oriented vs. Functional Programming",
  "type" : "book",
  "htmlContent" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html><html xmlns:epub=\"http://www.idpf.org/2007/ops\" xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>Cover</title><link rel=\"stylesheet\" type=\"text/css\" href=\"epub.css\"/></head><body><figure data-type=\"cover\"><img alt=\"cover\" src=\"assets/cover.png\"/></figure></body></html>\n",
  "slug" : "object-oriented-vs-functional-programming",
  "contents" : [ {
    "title" : "Introduction",
    "type" : "chapter",
    "htmlContent" : "<div class=\"preface\" id=\"ch1\">  \n <p>One of my favorite professional activities is speaking at software conferences. It’s great fun because you get to meet developers who are passionate about their craft, and it gives you as a speaker the opportunity to share knowledge with them.</p> \n <p>A talk that I’ve enjoyed giving recently is called “Twins: FP and OOP.” I’ve given it at a number of conferences and user group sessions, and I’ve even had the pleasure of giving it as O’Reilly webcast. Developers enjoy the talk both because it has a large number of references to the film “Twins” and because it discusses one of the age-old relationships between functional and object-oriented programming.</p> \n <p>There’s only so much you can say in a conference talk though, so I was really excited when Brian Foster from O’Reilly contacted me to ask if I wanted to expand upon the topic in a report. You can also think of this as a short followup to my earlier O’Reilly published book <a class=\"orm:hideurl\" href=\"http://shop.oreilly.com/product/0636920030713.do\"><em>Java 8 Lambdas (O’Reilly)</em></a>.</p> \n <p>You can watch the talk delivered at a conference <a href=\"https://vimeo.com/111041651\">online</a> or delivered as an <a href=\"https://www.oreilly.com/learning/object-oriented-and-functional-programming\">O’Reilly webcast</a>.</p> \n <section data-type=\"sect1\" data-pdf-bookmark=\"What Object-Oriented and Functional Programmers Can Learn From Each Other\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"What’s in This Report\"></section> \n</div>",
    "textContent" : "One of my favorite professional activities is speaking at software conferences. It’s great fun because you get to meet developers who are passionate about their craft, and it gives you as a speaker the opportunity to share knowledge with them.\r\n\r\nA talk that I’ve enjoyed giving recently is called “Twins: FP and OOP.” I’ve given it at a number of conferences and user group sessions, and I’ve even had the pleasure of giving it as O’Reilly webcast. Developers enjoy the talk both because it has a large number of references to the film “Twins” and because it discusses one of the age-old relationships between functional and object-oriented programming.\r\n\r\nThere’s only so much you can say in a conference talk though, so I was really excited when Brian Foster from O’Reilly contacted me to ask if I wanted to expand upon the topic in a report. You can also think of this as a short followup to my earlier O’Reilly published book Java 8 Lambdas (O’Reilly) <http://shop.oreilly.com/product/0636920030713.do> .\r\n\r\nYou can watch the talk delivered at a conference online <https://vimeo.com/111041651> or delivered as an O’Reilly webcast <https://www.oreilly.com/learning/object-oriented-and-functional-programming> .",
    "slug" : "introduction",
    "pages" : [ {
      "title" : "Object-Oriented vs. Functional Programming",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <!--?xml version=\"1.0\" encoding=\"UTF-8\"?--> \n  <title>Cover</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"epub.css\">\n  <figure data-type=\"cover\">\n   <img alt=\"cover\" src=\"/book_res/object-oriented-vs-functional-programming/assets/cover.png\">\n  </figure> \n </body>\n</html>",
      "slug" : "object-oriented-vs-functional-programming"
    }, {
      "title" : "What Object-Oriented and Functional Programmers Can Learn From Each Other",
      "type" : "page",
      "htmlContent" : "<p>Before we get into the technical nitty-gritty of lambdas and design patterns, let’s take a look at the technical communities. This will explain why comparing the relationship between functional and object-oriented is so important and relevant.</p> \n<p>If you’ve ever read Hacker News, a programming subreddit, or any other online forum, you might have noticed there’s often a touch of friction between functional programmers and developers practicing the object-oriented style. They often sound like they’re talking in a different language to each other, sometimes even going so far as to throw the odd snarky insult around.</p> \n<p>On the one hand, functional programmers can often look down on their OO counterparts. Functional programs can be very terse and elegant, packing a lot of behavior into very few lines of code. Functional programmers will make the case that in a multicore world, you need to avoid mutable state in order to scale out your programs, that programming is basically just math, and that now is the time for everyone to think in terms of functions.</p> \n<p>Object-oriented programmers will retort that in actual business environments, very few programmers use functional languages. Object-oriented programming scales out well in terms of developers, and as an industry, we know how to do it. While programming can be viewed as a discipline of applied math, software engineering requires us to match technical solutions to business problems. The domain modelling and focus on representing real-world objects that OOP encourages in developers helps narrow that gap.</p> \n<p>Of course, these stereotypes are overplaying the difference. Both groups of programmers are employed to solve similar business problems. Both groups are working in the same industry. Are they really so different?</p> \n<p>I don’t think so, and I think there’s a lot that we can learn from each other.</p>",
      "slug" : "what-object-oriented-and-functional-programmers-can-learn-from-each-other"
    }, {
      "title" : "What’s in This Report",
      "type" : "page",
      "htmlContent" : "<p>This report makes the case that a lot of the constructs of good object-oriented design also exist in functional programming. In order to make sure that we’re all on the same page, <a data-type=\"xref\" href=\"ch01.html#ch2\">Chapter&nbsp;1</a> explains a little bit about functional programming and the basics of lambda expressions in Java 8.</p> \n<p>In <a data-type=\"xref\" href=\"ch02.html#ch3\">Chapter&nbsp;2</a>, we take a look at the SOLID principles, identified by Robert Martin, and see how they map to functional languages and paradigms. This demonstrates the similarity in terms of higher-level concepts.</p> \n<p>In <a data-type=\"xref\" href=\"ch03.html#ch4\">Chapter&nbsp;3</a>, we look at some behavioral design patterns. Design patterns are commonly used as a vocabulary of shared knowledge amongst object-oriented programmers. They’re also often criticized by functional programmers. Here we’ll look at how some of the most common object-oriented design patterns exist in the functional world.</p> \n<p>Most of the examples in this guide are written in the Java programming language. That’s not to say that Java is the only language that could have been used or that it’s even a good one! It is perfectly adequate for this task though and understood by many people. This guide is also motivated by the release of Java 8 and its introduction of lambda expressions to the language. Having said all that, a lot of principles and concepts apply to many other programming languages as well, and I hope that whatever your programming language is, you take something away.</p>",
      "slug" : "whats-in-this-report"
    } ]
  }, {
    "title" : "1. Lambdas: Parameterizing Code by Behavior",
    "type" : "chapter",
    "htmlContent" : "<div class=\"chapter\" id=\"ch2\">  \n <section data-type=\"sect1\" data-pdf-bookmark=\"Why Do I Need to Learn About Lambda Expressions?\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"The Basics of Lambda Expressions\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"Summary\"></section> \n</div>",
    "textContent" : "",
    "slug" : "1-lambdas-parameterizing-code-by-behavior",
    "pages" : [ {
      "title" : "Why Do I Need to Learn About Lambda Expressions?",
      "type" : "page",
      "htmlContent" : "<p>Over the next two chapters, we’re going to be talking in depth about the relationship between functional and object-oriented programming principles, but first let’s cover some of the basics. We’re going to talk about a couple of the key language features that are related to functional programming: lambda expressions and method references.</p> \n<div data-type=\"note\" epub:type=\"note\">\n <h6>Note</h6> \n <p>If you already have a background in functional programming, then you might want to skip this chapter and move along to the next one.</p> \n</div> \n<p>We’re also going to talk about the change in thinking that they enable which is key to functional thinking: parameterizing code by behavior. It’s this thinking in terms of functions and parameterizing by behavior rather than state which is key to differentiating functional programming from object-oriented programming. Theoretically this is something that we could have done in Java before with anonymous classes, but it was rarely done because they were so bulky and verbose.</p> \n<p>We shall also be looking at the syntax of lambda expressions in the Java programming language. As I mentioned in the <a data-type=\"xref\" href=\"preface02.html#ch1\">Introduction</a>, a lot of these ideas go beyond Java; we are just using Java as a lingua-franca: a common language that many developers know well.</p>",
      "slug" : "why-do-i-need-to-learn-about-lambda-expressions"
    }, {
      "title" : "The Basics of Lambda Expressions",
      "type" : "page",
      "htmlContent" : "<p>We will define a lambda expression as a concise way of describing an anonymous function. I appreciate that’s quite a lot to take in at once, so we’re going to explain what lambda expressions are by working through an example of some existing Java code. <em>Swing</em> is a platform-agnostic Java library for writing graphical user interfaces (GUIs). It has a fairly common idiom in which, in order to find out what your user did, you register an <em>event listener</em>. The event listener can then perform some action in response to the user input (see <a data-type=\"xref\" href=\"#lambda_button_class\">Example&nbsp;1-1</a>).</p> \n<div data-type=\"example\" id=\"lambda_button_class\"> \n <h5><span class=\"label\">Example 1-1. </span>Using an anonymous inner class to associate behavior with a button click</h5> \n <pre data-type=\"programlisting\">\nbutton.addActionListener(new ActionListener() {\n    public void actionPerformed(ActionEvent event) {\n        System.out.println(\"button clicked\");\n    }\n});\n</pre> \n</div> \n<p>In this example, we’re creating a new object that provides an implementation of the <code>ActionListener</code> class. This interface has a single method, <code>actionPerformed</code>, which is called by the <code>button</code> instance when a user actually clicks the on-screen button. The anonymous inner class provides the implementation of this method. In <a data-type=\"xref\" href=\"#lambda_button_class\">Example&nbsp;1-1</a>, all it does is print out a message to say that the button has been clicked.</p> \n<div data-type=\"note\" epub:type=\"note\">\n <h6>Note</h6>\n <p>This is actually an example of <em>behavior parameterization</em>—we’re giving the button an object that represents an action.</p>\n</div> \n<p>Anonymous inner classes were designed to make it easier for Java programmers to represent and pass around behaviors. Unfortunately, they don’t make it easy enough. There are still four lines of boilerplate code required in order to call the single line of important logic.</p> \n<p>Boilerplate isn’t the only issue, though: this code is fairly hard to read because it obscures the programmer’s intent. We don’t want to pass in an object; what we really want to do is pass in some behavior. In Java 8, we would write this code example as a lambda expression, as shown in <a data-type=\"xref\" href=\"#lambda_button_lambda\">Example&nbsp;1-2</a>.</p> \n<div data-type=\"example\" id=\"lambda_button_lambda\"> \n <h5><span class=\"label\">Example 1-2. </span>Using a lambda expression to associate behavior with a button click</h5> \n <pre data-type=\"programlisting\">\nbutton.addActionListener(event -&gt; System.out.println(\"button clicked\"));\n</pre> \n</div> \n<p>Instead of passing in an object that implements an interface, we’re passing in a block of code—a function without a name. <code>event</code> is the name of a parameter, the same parameter as in the anonymous inner class example. <code>-&gt;</code> separates the parameter from the body of the lambda expression, which is just some code that is run when a user clicks our button.</p> \n<p>Another difference between this example and the anonymous inner class is how we declare the variable <code>event</code>. Previously, we needed to explicitly provide its type—<code>ActionEvent event</code>. In this example, we haven’t provided the type at all, yet this example still compiles. What is happening under the hood is that <code>javac</code> is inferring the type of the variable <code>event</code> from its context—here, from the signature of <code>add<span class=\"keep-together\">ActionListener</span></code>. What this means is that you don’t need to explicitly write out the type when it’s obvious. We’ll cover this inference in more detail soon, but first let’s take a look at the different ways we can write lambda expressions.</p> \n<div data-type=\"note\" epub:type=\"note\">\n <h6>Note</h6>\n <p>Although lambda method parameters require less boilerplate code than was needed previously, they are still statically typed. For the sake of readability and familiarity, you have the option to include the type declarations, and sometimes the compiler just can’t work it out!</p>\n</div> \n<section data-type=\"sect2\" data-pdf-bookmark=\"Method References\"></section> \n<!--\n    <section data-type=\"sect2\">\n    <h2>How to Spot a Lambda in a Haystack</h2>\n\n        <p>\n        There are a number of variations of the basic format for writing\n        lambda expressions, which are listed in <a data-type=\"xref\" href=\"#all_lambda_forms\">all_lambda_forms</a>.\n        </p>\n\n        <div id=\"all_lambda_forms\" data-type=\"example\">\n        <h5>Some different ways of writing lambda expressions</h5>\n        <pre data-type=\"programlisting\">\n         Runnable noArguments = () -&gt; System.out.println(\"Hello World\"); // 1\n\n         ActionListener oneArgument = event -&gt; System.out.println(\"button clicked\"); // 2\n\n         Runnable multiStatement = () -&gt; { // 3\n            System.out.print(\"Hello\");\n            System.out.println(\" World\");\n         };\n\n         BinaryOperator&lt;Long&gt; add = (x, y) -&gt; x + y; // 4\n\n         BinaryOperator&lt;Long&gt; addExplicit = (Long x, Long y) -&gt; x + y; // 5\n        </pre>\n        </div>\n\n        <p>\n        <a data-type=\"xref\" href=\"#CO1-1\">CO1-1</a> shows how it's possible to have a lambda expression with no arguments at\n        all.  You can use an empty pair of parentheses, <code>()</code>, to signify that there are no\n        arguments.  This is a lambda expression implementing <code>Runnable</code>, whose only method,\n        <code>run</code>, takes no arguments and is a <code>void</code> return type.\n        </p>\n\n        <p>\n        <a data-type=\"xref\" href=\"#CO1-2\">CO1-2</a> we have only one argument to the lambda expression, which lets us leave out the\n        parentheses around the arguments.  This is actually the same form that we used in\n        <a data-type=\"xref\" href=\"#lambda_button_lambda\">lambda_button_lambda</a>.\n        </p>\n\n        <p>\n        Instead of the body of the lambda expression being just an expression, in <a data-type=\"xref\" href=\"#CO1-3\">CO1-3</a>\n        it's a full block of code, bookended by curly braces (<code>{}</code>).  These code blocks follow\n        the usual rules that you would expect from a method.  For example, you can return\n        or throw exceptions to exit them.  It's also possible to use braces with a single-line\n        lambda, for example to clarify where it begins and ends.\n        </p>\n\n        <p>\n        Lambda expressions can also be used to represent methods that take more than\n        one argument, as in <a data-type=\"xref\" href=\"#CO1-4\">CO1-4</a>. At this juncture, it's worth reflecting on\n        how to _read_ this lambda expression. This line of code doesn't add up two\n        numbers; it creates a function that adds together two numbers. The variable called\n        <code>add</code> that's a <code>BinaryOperator&lt;Long &gt;</code> isn't the result of adding up two numbers;\n        it is code that adds together two numbers.\n        </p>\n\n        <p>\n        So far, all the types for lambda expression parameters have been inferred for us\n        by the compiler. This is great, but it's sometimes good to have the option of\n        explicitly writing the type, and when you do that you need to surround the\n        arguments to the lambda expression with parentheses.  The parentheses are also\n        necessary if you've got multiple arguments.  This approach is demonstrated in\n        <a data-type=\"xref\" href=\"#CO1-5\">CO1-5</a>.\n        </p>\n\n        <div data-type=\"note\">\n        <h1>Target types of lambda expressions</h1>\n        The _target type_ of a lambda expression is the type of the context in which the \n        lambda expression appears—for example, a local variable that it's assigned to or\n        a method parameter that it gets passed into.\n        </div>\n\n        <p>\n        What is implicit in all these examples is that a lambda expression's type is\n        context dependent. It gets inferred by the compiler. This target typing isn't\n        entirely new, either. As shown in <a data-type=\"xref\" href=\"#ARRAY_INFERENCE\">ARRAY_INFERENCE</a>, the types of array\n        initializers in Java have always been inferred from their contexts. Another\n        familiar example is <code>null</code>. You can know what the type of <code>null</code> is only once\n        you actually assign it to something.\n        </p>\n\n    </section>\n\n    <div id=\"lambda_button_class\" data-type=\"example\">\n    <h5>The righthand side doesn't specify it's type; it is inferred from the context</h5>\n    <pre data-type=\"programlisting\">\n    final String[] array = { \"hello\", \"world\" };\n    </pre>\n    </div>\n    -->",
      "slug" : "the-basics-of-lambda-expressions"
    }, {
      "title" : "Summary",
      "type" : "page",
      "htmlContent" : "<p>Well, at one level we’ve learnt a little bit of new syntax that has been introduced in Java 8, which reduces boilerplate for callbacks and event handlers. But actually there’s a bigger picture to these changes. We can now reduce the boilerplate around passing blocks of behavior: we’re treating functions as first-class citizens. This makes parameterizing code by behavior a lot more attractive. This is key to functional programming, so key in fact that it has an associated name: higher-order functions.</p> \n<p>Higher-order functions are just functions, methods, that return other functions or take functions as a parameter. In the next chapter we’ll see that a lot of design principles in object-oriented programming can be simplified by the adoption of functional concepts like higher-order functions. Then we’ll look at how many of the behavioral design patterns are actually doing a similar job to higher-order functions.</p>",
      "slug" : "summary"
    } ]
  }, {
    "title" : "2. SOLID Principles",
    "type" : "chapter",
    "htmlContent" : "<div class=\"chapter\" id=\"ch3\">  \n <section data-type=\"sect1\" data-pdf-bookmark=\"Lambda-Enabled SOLID Principles\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"The Single-Responsibility Principle\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"The Open/Closed Principle\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"The Liskov Substitution Principle\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"The Interface-Segregation Principle\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"The Dependency-Inversion Principle\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"Summary\"></section> \n</div>",
    "textContent" : "",
    "slug" : "2-solid-principles",
    "pages" : [ {
      "title" : "Lambda-Enabled SOLID Principles",
      "type" : "page",
      "htmlContent" : "<p>The SOLID principles are a set of basic principles for designing OO programs. The name itself is an acronym, with each of the five principles named after one of the letters: Single responsibility, Open/closed, Liskov substitution, Interface segregation, and Dependency inversion. The principles act as a set of guidelines to help you implement code that is easy to maintain and extend over time.</p> \n<p>Each of the principles corresponds to a set of potential code smells that can exist in your code, and they offer a route out of the problems caused. Many books have been written on this topic, and I’m not going to cover the principles in comprehensive detail.</p> \n<p>In the case of all these object-oriented principles, I’ve tried to find a conceptually related approach from the functional-programming realm. The goal here is to both show functional and object-oriented programming are related, and also what object-oriented programmers can learn from a functional style.</p>",
      "slug" : "lambda-enabled-solid-principles"
    }, {
      "title" : "The Single-Responsibility Principle",
      "type" : "page",
      "htmlContent" : "<p><em>Every class or method in your program should have only a single reason to change.</em></p> \n<p>An inevitable fact of software development is that requirements change over time. Whether because a new feature needs to be added, your understanding of your problem domain or customer has changed, or you need your application to be faster, over time software must evolve.</p> \n<p>When the requirements of your software change, the responsibilities of the classes and methods that implement these requirements also change. If you have a class that has more than one responsibility, when a responsibility changes, the resulting code changes can affect the other responsibilities that the class possesses. This possibly introduces bugs and also impedes the ability of the code base to evolve.</p> \n<p>Let’s consider a simple example program that generates a <code>BalanceSheet</code>. The program needs to tabulate the <code>BalanceSheet</code> from a list of assets and render the <code>BalanceSheet</code> to a PDF report. If the implementer chose to put both the responsibilities of tabulation and rendering into one class, then that class would have two reasons for change. You might wish to change the rendering in order to generate an alternative output, such as HTML. You might also wish to change the level of detail in the <code>BalanceSheet</code> itself. This is a good motivation to decompose this problem at the high level into two classes: one to tabulate the <code>BalanceSheet</code> and one to render it.</p> \n<p>The single-responsibility principle is stronger than that, though. A class should not just have a single responsibility: it should also encapsulate it. In other words, if I want to change the output format, then I should have to look at only the rendering class and not at the tabulation class.</p> \n<p>This is part of the idea of a design exhibiting strong <em>cohesion</em>. A class is cohesive if its methods and fields should be treated together because they are closely related. If you tried to divide up a cohesive class, you would result in accidentally coupling the classes that you have just created.</p> \n<p>Now that you’re familiar with the single-responsibility principle, the question arises, what does this have to do with lambda expressions? Well lambda expressions make it a lot easier to implement the single-responsibility principle at the method level. Let’s take a look at some code that counts the number of prime numbers up to a certain value (<a data-type=\"xref\" href=\"#srp_imperative_single_method\">Example&nbsp;2-1</a>).</p> \n<div data-type=\"example\" id=\"srp_imperative_single_method\"> \n <h5><span class=\"label\">Example 2-1. </span>Counting prime numbers with multiple responsibilities in a method</h5> \n <pre data-type=\"programlisting\">\npublic long countPrimes(int upTo) {\n    long tally = 0;\n    for (int i = 1; i &lt; upTo; i++) {\n        boolean isPrime = true;\n        for (int j = 2; j &lt; i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n            }\n        }\n        if (isPrime) {\n            tally++;\n        }\n    }\n    return tally;\n}\n    </pre> \n</div> \n<p>It’s pretty obvious that we’re really doing two different responsibilities in <a data-type=\"xref\" href=\"#srp_imperative_single_method\">Example&nbsp;2-1</a>: we’re counting numbers with a certain property, and we’re checking whether a number is a prime. As shown in <a data-type=\"xref\" href=\"#srp_imperative_refactored\">Example&nbsp;2-2</a>, we can easily refactor this to split apart these two responsibilities.</p> \n<div data-type=\"example\" id=\"srp_imperative_refactored\"> \n <h5><span class=\"label\">Example 2-2. </span>Counting prime numbers after refactoring out the isPrime check</h5> \n <pre data-type=\"programlisting\">\npublic long countPrimes(int upTo) {\n    long tally = 0;\n    for (int i = 1; i &lt; upTo; i++) {\n        if (isPrime(i)) {\n            tally++;\n        }\n    }\n    return tally;\n}\n\nprivate boolean isPrime(int number) {\n    for (int i = 2; i &lt; number; i++) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n    </pre> \n</div> \n<p>Unfortunately, we’re still left in a situation where our code has two responsibilities. For the most part, our code here is dealing with looping over numbers. If we follow the single-responsibility principle, then iteration should be encapsulated elsewhere. There’s also a good practical reason to improve this code. If we want to count the number of primes for a very large <code>upTo</code> value, then we want to be able to perform this operation in parallel. That’s right—the threading model is a responsibility of the code!</p> \n<p>We can refactor our code to use the Java 8 streams library (see <a data-type=\"xref\" href=\"#SingleResponsibilityPrinciple_functional\">Example&nbsp;2-3</a>), which delegates the responsibility for controlling the loop to the library itself. Here we use the <code>range</code> method to count the numbers between <code>0</code> and <code>upTo</code>, <code>filter</code> them to check that they really are prime, and then <code>count</code> the result.</p> \n<div data-type=\"example\" id=\"SingleResponsibilityPrinciple_functional\"> \n <h5><span class=\"label\">Example 2-3. </span>Counting primes using the Java 8 streams API</h5> \n <pre data-type=\"programlisting\">\npublic long countPrimes(int upTo) {\n    return IntStream.range(1, upTo)\n                    .filter(this::isPrime)\n                    .count();\n}\n\nprivate boolean isPrime(int number) {\n    return IntStream.range(2, number)\n                    .allMatch(x -&gt; (number % x) != 0);\n}\n    </pre> \n</div> \n<p>So, we can use higher-order functions in order to help us easily implement the single-responsibility principle.</p>",
      "slug" : "the-single-responsibility-principle"
    }, {
      "title" : "The Open/Closed Principle",
      "type" : "page",
      "htmlContent" : "<blockquote data-type=\"epigraph\" epub:type=\"epigraph\"> \n <p>Software entities should be open for extension, <span class=\"keep-together\">but closed for modification</span>.</p> \n <p data-type=\"attribution\">Bertrand Meyer</p> \n</blockquote> \n<p>The overarching goal of the open/closed principle is similar to that of the single-responsibility principle: to make your software less brittle to change. Again, the problem is that a single feature request or change to your software can ripple through the code base in a way that is likely to introduce new bugs. The open/closed principle is an effort to avoid that problem by ensuring that existing classes can be extended without their internal implementation being modified.</p> \n<p>When you first hear about the open/closed principle, it sounds like a bit of a pipe dream. How can you extend the functionality of a class without having to change its implementation? The actual answer is that you rely on an abstraction and can plug in new functionality that fits into this abstraction. We can also use higher-order functions and immutability to achieve similar aims in a functional style.</p> \n<section data-type=\"sect2\" data-pdf-bookmark=\"Abstraction\"></section> \n<section data-type=\"sect2\" data-pdf-bookmark=\"Higher-Order Functions\"></section> \n<section data-type=\"sect2\" data-pdf-bookmark=\"Immutability\"></section>",
      "slug" : "the-open-closed-principle"
    }, {
      "title" : "The Liskov Substitution Principle",
      "type" : "page",
      "htmlContent" : "<p><em>Let q(x) be a property provable about objects x of type T. Then q(y) should be true for objects y of type S where S is a subtype of T. </em></p> \n<p>The Liskov substitution principle is often stated in these very formal terms, but is actually a very simple concept. Informally we can think of this as meaning that child classes should maintain the behavior they inherit from their parents. We can split out that property into four distinct areas:</p> \n<ul> \n <li>Preconditions cannot be strengthened in a subtype. Where the parent worked, the child should.</li> \n <li>Postconditions cannot be weakened in a subtype. Where the parent caused an effect, then the child should.</li> \n <li>Invariants of the supertype must be preserved in a subtype. Where parent always stuck left or maintained something, then the child should as well.</li> \n <li>Rule from history: don’t allow state changes that your parent didn’t. For example, a mutable point can’t subclass an immutable point.</li> \n</ul> \n<p>Functional programming tends to take a different perspective to LSP. In functional programming inheritance of behavior isn’t a key trait. If you avoid inheritance hierachies then you avoid the problems that are associated with them, which is the antipattern that the Liskov substitution principle is designed to solve. This is actually becoming increasing accepted within the object-oriented community as well through the composite reuse principle: compose, don’t inherit.</p>",
      "slug" : "the-liskov-substitution-principle"
    }, {
      "title" : "The Interface-Segregation Principle",
      "type" : "page",
      "htmlContent" : "<p><em>The dependency of one class to another one should depend on the smallest possible interface</em></p> \n<p>In order to properly understand the interface-segregation principle, let’s consider a worked example in which we have people who work in a factory during the day and go home in the evening. We might define our worker interface as follows:</p> \n<div data-type=\"example\" id=\"dip_nodip_headings1\"> \n <h5><span class=\"label\">Example 2-8. </span>Parsing the headings out of a file</h5> \n <pre data-type=\"programlisting\">\n    interface Worker {\n        public void goHome();\n        public void work();\n    }\n    </pre> \n</div> \n<p>Initially our <code>AssemblyLine</code> requires two types of <code>Worker</code>: an <code><span class=\"keep-together\">AssemblyWorker</span></code> and a <code>Manager</code>. Both of these go home in the evening but have different implementations of their work method depending upon what they do.</p> \n<p>As time passes, however, and the factory modernizes, they start to introduce robots. Our robots also do work in the factory, but they don’t go home at the end of the day. We can see now that our worker interface isn’t meeting the ISP, since the <code>goHome()</code> method isn’t really part of the minimal interface.</p> \n<p>Now the interesting point about this example is that it all relates to subtyping. Most statically typed object-oriented languages, such as Java and C++, have what’s known as nominal subtyping. This means that for a class called <code>Foo</code> to extend a class called <code>Bar</code>, you need to see <code>Foo extends Bar</code> in your code. The relationship is explicit and based upon the name of the class. This applies equally to interfaces as well as classes. In our worked example, we have code like <a data-type=\"xref\" href=\"#dip_nodip_headings2\">Example&nbsp;2-9</a> in order to let our compiler know what the relationship is between classes.</p> \n<div data-type=\"example\" id=\"dip_nodip_headings2\"> \n <h5><span class=\"label\">Example 2-9. </span>Parsing the headings out of a file</h5> \n <pre data-type=\"programlisting\">\n    class AssemblyWorker implements Worker\n    class Manager implements Worker\n    class Robot implements Worker\n    </pre> \n</div> \n<p>When the compiler comes to check whether a parameter argument is type checked, it can identify the parent type, <code>Worker</code>, and check based upon these explicit named relationships. This is shown in <a data-type=\"xref\" href=\"#dip_nodip_headings3\">Example&nbsp;2-10</a>.</p> \n<div data-type=\"example\" id=\"dip_nodip_headings3\"> \n <h5><span class=\"label\">Example 2-10. </span>Parsing the headings out of a file</h5> \n <pre data-type=\"programlisting\">\n    public void addWorker(Worker worker) {\n        workers.add(worker);\n    }\n\n    public static AssemblyLine newLine() {\n        AssemblyLine line = new AssemblyLine();\n        line.addWorker(new Manager());\n        line.addWorker(new AssemblyWorker());\n        line.addWorker(new Robot());\n        return line;\n    }\n    </pre> \n</div> \n<p>The alternative approach is called structural subtyping, and here the relationship is implicit between types based on the shape/structure of the type. So if you call a method called <code>getFoo()</code> on a variable, then that variable just needs a <code>getFoo</code> method; it doesn’t need to implement an interface or extend another class. You see this a lot in functional programming languages and also in systems like the C++ template framework. The duck typing in languages like Ruby and Python is a dynamically typed variant of structural subtyping.</p> \n<p>If we think about this hypothetical example in a language which uses structural subtyping, then our example might be re-written like <a data-type=\"xref\" href=\"#dip_nodip_headings4\">Example&nbsp;2-11</a>. The key is that the parameter <code>worker</code> has no explicit type, and the <code>StructuralWorker</code> implementation doesn’t need to say explicitly that it implements or extends anything.</p> \n<div data-type=\"example\" id=\"dip_nodip_headings4\"> \n <h5><span class=\"label\">Example 2-11. </span>Parsing the headings out of a file</h5> \n <pre data-type=\"programlisting\">\n    class StructuralWorker {\n        def work(step:ProductionStep) {\n            println(\"I'm working on: \" + step.getName)\n        }\n    }\n\n    def addWorker(worker) {\n      workers += worker\n    }\n\n    def newLine() = {\n        val line = new AssemblyLine\n        line.addWorker(new Manager())\n        line.addWorker(new StructuralWorker())\n        line.addWorker(new Robot())\n        line\n    }\n    </pre> \n</div> \n<p>Structural subtyping removes the need for the interface-segregation principle, since it removes the explicit nature of these interfaces. A minimal interface is automatically inferred by the compiler from the use of these parameters.</p>",
      "slug" : "the-interface-segregation-principle"
    }, {
      "title" : "The Dependency-Inversion Principle",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p><em>Abstractions should not depend on details; details should depend on abstractions.</em></p> \n  <p>On of the ways in which we can make rigid and fragile programs that are resistant to change is by coupling high-level business logic and low-level code designed to glue modules together. This is because these are two different concerns that may change over time.</p> \n  <p>The goal of the dependency-inversion principle is to allow programmers to write high-level business logic that is independent of low-level glue code. This allows us to reuse the high-level code in a way that is abstract of the details upon which it depends. This modularity and reuse goes both ways: we can substitute in different details in order to reuse the high-level code, and we can reuse the implementation details by layering alternative business logic on top.</p> \n  <p>Let’s look at a concrete example of how the dependency-inversion principle is traditionally used by thinking through the high-level decomposition involved in implementing an application that builds up an address book automatically. Our application takes in a sequence of electronic business cards as input and accumulates our address book in some storage mechanism.</p> \n  <p>It’s fairly obvious that we can separate this code into three basic modules:</p> \n  <ul> \n   <li>The business card reader that understands an electronic business card format</li> \n   <li>The address book storage that stores data into a text file</li> \n   <li>The accumulation module that takes useful information from the business cards and puts it into the address book</li> \n  </ul> \n  <p>We can visualize the relationship between these modules as shown in <a data-type=\"xref\" href=\"#jvld_0803\">Figure&nbsp;2-1</a>.</p> \n  <figure> \n   <div id=\"jvld_0803\" class=\"figure\"> \n    <img alt=\"Dependencies\" src=\"/book_res/object-oriented-vs-functional-programming/assets/oofp_0301.png\"> \n    <h6><span class=\"label\">Figure 2-1. </span>Dependencies</h6> \n   </div> \n  </figure> \n  <p>In this system, while reuse of the accumulation model is more complex, the business card reader and the address book storage do not depend on any other components. We can therefore easily reuse them in another system. We can also change them; for example, we might want to use a different reader, such as reading from people’s Twitter profiles; or we might want to store our address book in something other than a text file, such as a database.</p> \n  <p>In order to give ourselves the flexibility to change these components within our system, we need to ensure that the implementation of our accumulation module doesn’t depend upon the specific details of either the business card reader or the address book storage. So, we introduce an abstraction for reading information and an abstraction for writing information. The implementation of our accumulation module depends upon these abstractions. We can pass in the specific details of these implementations at runtime. This is the dependency-inversion principle at work.</p> \n  <p>In the context of lambda expressions, many of the higher-order functions that we’ve encountered enable a dependency inversion. A function such as <code>map</code> allows us to reuse code for the general concept of transforming a stream of values between different specific transformations. The <code>map</code> function doesn’t depend upon the details of any of these specific transformations, but upon an abstraction. In this case, the abstraction is the functional interface <code>Function</code>.</p> \n  <p>A more complex example of dependency inversion is resource management. Obviously, there are lots of resources that can be managed, such as database connections, thread pools, files, and network connections. I’ll use files as an example because they are a relatively simple resource, but the principle can easily be applied to more complex resources within your application.</p> \n  <p>Let’s look at some code that extracts headings from a hypothetical markup language where each heading is designated by being suffixed with a colon (<code>:</code>). Our method is going to extract the headings from a file by reading the file, looking at each of the lines in turn, filtering out the headings, and then closing the file. We shall also wrap any <code>Exception</code> related to the file I/O into a friendly domain exception called a <code>HeadingLookupException</code>. The code looks like <a data-type=\"xref\" href=\"#dip_nodip_headings5\">Example&nbsp;2-12</a>.</p> \n  <div data-type=\"example\" id=\"dip_nodip_headings5\" class=\"pagebreak-before\"> \n   <h5><span class=\"label\">Example 2-12. </span>Parsing the headings out of a file</h5> \n   <pre data-type=\"programlisting\">\npublic List&lt;String&gt; findHeadings(Reader input) {\n    try (BufferedReader reader = new BufferedReader(input)) {\n        return reader.lines()\n                     .filter(line -&gt; line.endsWith(\":\"))\n                     .map(line -&gt; line.substring(0, line.length() - 1))\n                     .collect(toList());\n    } catch (IOException e) {\n        throw new HeadingLookupException(e);\n    }\n}\n</pre> \n  </div> \n  <p>Unfortunately, our heading-finding code is coupled with the resource-management and file-handling code. What we really want to do is write some code that finds the headings and delegates the details of a file to another method. We can use a <code>Stream&lt;String&gt;</code> as the abstraction we want to depend upon rather than a file. A <code>Stream</code> is much safer and less open to abuse. We also want to be able to a pass in a function that creates our domain exception if there’s a problem with the file. This approach, shown in <a data-type=\"xref\" href=\"#dip_refactored_headings\">Example&nbsp;2-13</a>, allows us to segregate the domain-level error handling from the resource-management-level error handling.</p> \n  <div data-type=\"example\" id=\"dip_refactored_headings\"> \n   <h5><span class=\"label\">Example 2-13. </span>The domain logic with file handling split out</h5> \n   <pre data-type=\"programlisting\">\npublic List&lt;String&gt; findHeadings(Reader input) {\n  return withLinesOf(\n    input, \n    lines -&gt; lines.filter(line -&gt; line.endsWith(\":\"))\n                  .map(line -&gt; line.substring(0, line.length()-1))\n                  .collect(toList()),\n    HeadingLookupException::new);\n}\n    </pre> \n  </div> \n  <p>I expect that you’re now wondering what that <code>withLinesOf</code> method looks like! It’s shown in <a data-type=\"xref\" href=\"#dip_with_lines_Of\">Example&nbsp;2-14</a>.</p> \n  <div data-type=\"example\" id=\"dip_with_lines_Of\"> \n   <h5><span class=\"label\">Example 2-14. </span>The definition of withLinesOf</h5> \n   <pre data-type=\"programlisting\">\nprivate &lt;T&gt; T withLinesOf(\n   Reader input,\n   Function&lt;Stream&lt;String&gt;, T&gt; handler,\n   Function&lt;IOException, RuntimeException&gt; error) {\n   \n   try (BufferedReader reader = new BufferedReader(input)) {\n       return handler.apply(reader.lines());\n   } catch (IOException e) {\n       throw error.apply(e);\n    }\n}\n    </pre> \n  </div> \n  <p><code>withLinesOf</code> takes in a reader that handles the underlying file I/O. This is wrapped up in <code>BufferedReader</code>, which lets us read the file line by line. The <code>handler</code> function represents the body of whatever code we want to use with this function. It takes the <code>Stream</code> of the file’s lines as its argument. We also take another handler called <code>error</code> that gets called when there’s an exception in the I/O code. This constructs whatever domain exception we want. This exception then gets thrown in the event of a problem.</p> \n  <p>To summarize, higher-order functions provide an inversion of control, which is a form of dependency-inversion. We can easily use them with lambda expressions. The other observation to note with the dependency-inversion principle is that the abstraction that we depend upon doesn’t have to be an <code>interface</code>. Here we’ve relied upon the existing <code>Stream</code> as an abstraction over raw reader and file handling. This approach also fits into the way that resource management is performed in functional languages—usually a higher-order function manages the resource and takes a callback function that is applied to an open resource, which is closed afterward. In fact, if lambda expressions had been available at the time, it’s arguable that the <code>try-with-resources</code> feature of Java 7 could have been implemented with a single library function.</p>\n </body>\n</html>",
      "slug" : "the-dependency-inversion-principle"
    }, {
      "title" : "Summary",
      "type" : "page",
      "htmlContent" : "<p>We’ve now reached the end of this section on SOLID, but I think it’s worth going over a brief recap of the relationships that we’ve exposed. We talked about how the single-responsibility principle means that classes should only have a single reason to change. We’ve talked about how we can use functional-programming ideas to achieve that end, for example, by decoupling the threading model from application logic. The open/closed principle is normally interpreted as a call to use polymorphism to allow classes to be written in a more flexible way. We’ve talked about how immutability and higher-order functions are both functional programming techniques which exhibit this same open/closed dynamic.</p> \n<p>The Liskov substitution principle imposes a set of constraints around subclassing that defines what it means to implement a correct subclass. In functional programming, we de-emphasize inheritance in our programming style. No inheritance, no problem! The interface-segregation principle encourages us to minimize the dependency on large interfaces that have multiple responsibilities. By moving to functional languages that encourage structural subtyping, we remove the need to declare these interfaces.</p> \n<p>Finally we talked about how higher-order functions were really a form of dependency inversion. In all cases, the SOLID principles offer us a way of writing effective object-oriented programs, but we can also think in functional terms and see what the equivalent approach would be in that style.</p>",
      "slug" : "summary"
    } ]
  }, {
    "title" : "3. Design Patterns",
    "type" : "chapter",
    "htmlContent" : "<div class=\"chapter\" id=\"ch4\">  \n <section data-type=\"sect1\" data-pdf-bookmark=\"Functional Design Patterns\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"The Command Pattern\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"Strategy Pattern\"></section> \n <!--\n<section data-type=\"sect1\">\n<h1>Observer Pattern</h1>\n\n    <p>\n    The observer pattern is another behavioral pattern that\n    can be improved and simplified through the use of lambda expressions.  In the\n    observer pattern, an object, called the\n    <em>subject</em>, maintains a list of other objects, which are its <em>observers</em>.  When\n    the state of the subject changes, its observers are notified.  It is heavily\n    used in MVC-based GUI toolkits in order to allow view components to be updated\n    when state changes in the model without coupling the two classes together.\n    </p>\n\n    <p>\n    Seeing GUI components update is a bit boring, so the subject that\n    we'll be observing is the moon!  Both NASA and some aliens want to keep track\n    of things landing on the moon.  NASA wants to make sure its\n    Apollo astronauts have landed safely; the aliens want to\n    invade Earth when NASA is distracted.\n    </p>\n\n    <p>\n    Let's start by defining the API of our observers, which I'll give the name\n    <code>LandingObserver</code>. This has a single <code>observeLanding</code> method, which will be\n    called when something lands on the moon (<a data-type=\"xref\" href=\"#LandingObserver\">LandingObserver</a>).\n    </p>\n\n    <div id=\"LandingObserver\" data-type=\"example\">\n    <h5>An interface for observing organizations that land on the moon</h5>\n    <pre data-type=\"programlisting\">\ninterface LandingObserver {\n\n    void observeLanding(String name);\n\n}\n    </pre>\n    </div>\n\n    <p>\n    Our subject class is the <code>Moon</code>, which keeps a list of <code>LandingObserver</code>\n    instances, notifies them of landings, and can add new <code>LandingObserver</code>\n    instances to spy on the <code>Moon</code> object (<a data-type=\"xref\" href=\"#Moon\">Moon</a>).\n    </p>\n\n    <div id=\"Moon\" data-type=\"example\">\n    <h5>Our Moon domain class—not as pretty as the real thing</h5>\n    <pre data-type=\"programlisting\">\n    </pre>\n    </div>\n\n    <p>\n    We have two concrete implementations of the <code>LandingObserver</code> class that\n    represent the aliens' (<a data-type=\"xref\" href=\"#Aliens\">Aliens</a>) and NASA's views \n    (<a data-type=\"xref\" href=\"#Nasa\">Nasa</a>) of the landing event.  As mentioned\n    earlier, they both have different interpretations of what this situation\n    brings them.\n    </p>\n\n    <div id=\"Aliens\" data-type=\"example\">\n    <h5>The aliens can observe people landing on the moon</h5>\n    <pre data-type=\"programlisting\">\nclass Aliens implements LandingObserver {\n\n    @Override\n    public void observeLanding(String name) {\n        if (name.contains(\"Apollo\")) {\n            System.out.println(\"They're distracted, lets invade earth!\");\n        }\n    }\n\n}\n    </pre>\n    </div>\n\n    <div id=\"Nasa\" data-type=\"example\">\n    <h5>NASA can also observe people landing on the moon</h5>\n    <pre data-type=\"programlisting\">\nclass Nasa implements LandingObserver {\n    @Override\n    public void observeLanding(String name) {\n        if (name.contains(\"Apollo\")) {\n            System.out.println(\"We made it!\");\n        }\n    }\n}\n    </pre>\n    </div>\n\n    <p>\n    In a similar vein to the previous patterns, in our traditional example our\n    client code specifically wires up a layer of boilerplate classes that don't\n    need to exist if we use lambda expressions (see Examples pass:[<xref\n    linkend=\"Moon_classBasedExample\" xrefstyle=\"select: labelnumber\"></xref>] and\n    pass:[<xref linkend=\"Moon_lambdaBasedExample\" xrefstyle=\"select:\n    labelnumber\"></xref>]).\n    </p>\n\n    <div id=\"Moon_classBasedExample\" data-type=\"example\">\n    <h5>Client code building up a Moon using classes and things landing on it</h5>\n    <pre data-type=\"programlisting\">\nMoon moon = new Moon();\nmoon.startSpying(new Nasa());\nmoon.startSpying(new Aliens());\n\nmoon.land(\"An asteroid\");\nmoon.land(\"Apollo 11\");\n    </pre>\n    </div>\n\n    <div id=\"Moon_lambdaBasedExample\" data-type=\"example\">\n    <h5>Client code building up a Moon using lambdas and things landing on it</h5>\n    <pre data-type=\"programlisting\">\nMoon moon = new Moon();\n\nmoon.startSpying(name -&gt; {\n    if (name.contains(\"Apollo\"))\n        System.out.println(\"We made it!\");\n});\n\nmoon.startSpying(name -&gt; {\n    if (name.contains(\"Apollo\"))\n        System.out.println(\"They're distracted, lets invade earth!\");\n});\n\nmoon.land(\"An asteroid\");\nmoon.land(\"Apollo 11\");\n    </pre>\n    </div>\n\n    <p>\n    One thing to think about with both the observer and the strategy patterns is that\n    whether to go down the lambda design route or the class route depends a lot on\n    the complexity of the strategy or observer code that needs to be implemented.\n    In the cases I've presented here, the code is simple in nature, just a method\n    call or two, and fits the new language features well. In some situations, though, the\n    observer can be a complex class in and of itself, and in those situations trying\n    to squeeze a lot of code into one method can lead to poor readability.\n    </p>\n\n    <div data-type=\"note\">\n    In some respects, _trying to squeeze a lot of code into\n    one method leads to poor readability_ is the golden rule governing how to apply\n    lambda expressions. The only reason I haven't pushed this so much is that it's\n    also the golden rule of writing normal methods!\n    </div>\n\n</section>\n--> \n <section data-type=\"sect1\" data-pdf-bookmark=\"Summary\"></section> \n</div>",
    "textContent" : "",
    "slug" : "3-design-patterns",
    "pages" : [ {
      "title" : "Functional Design Patterns",
      "type" : "page",
      "htmlContent" : "<p>One of the other bastions of design we’re all familiar with is the idea of <em>design patterns</em>. Patterns document reusable templates that solve common problems in software architecture. If you spot a problem and you’re familiar with an appropriate pattern, then you can take the pattern and apply it to your situation. In a sense, patterns codify what people consider to be a best-practice approach to a given problem.</p> \n<p>In this section, we’re instead going to look at how existing design patterns have become better, simpler, or in some cases, implementable in a different way. In all cases, the application of lambda expressions and a more functional approach are the driving factor behind the pattern changing.</p>",
      "slug" : "functional-design-patterns"
    }, {
      "title" : "The Command Pattern",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>A <em>command object</em> is an object that encapsulates all the information required to call another method later. The <em>command pattern</em> is a way of using this object in order to write generic code that sequences and executes methods based on runtime decisions. There are four classes that take part in the command pattern, as shown in <a data-type=\"xref\" href=\"#jvld_0801\">Figure&nbsp;3-1</a>:</p> \n  <dl class=\"pagebreak-before\"> \n   <dt>\n     Receiver \n   </dt> \n   <dd>\n     Performs the actual work \n   </dd> \n   <dt>\n     Command \n   </dt> \n   <dd>\n     Encapsulates all the information required to call the receiver \n   </dd> \n   <dt>\n     Invoker \n   </dt> \n   <dd>\n     Controls the sequencing and execution of one or more commands \n   </dd> \n   <dt>\n     Client \n   </dt> \n   <dd>\n     Creates concrete command instances \n   </dd> \n  </dl> \n  <figure> \n   <div id=\"jvld_0801\" class=\"figure\"> \n    <img src=\"/book_res/object-oriented-vs-functional-programming/assets/oofp_0401.png\"> \n    <h6><span class=\"label\">Figure 3-1. </span>The command pattern</h6> \n   </div> \n  </figure> \n  <p>Let’s look at a concrete example of the command pattern and see how it improves with lambda expressions. Suppose we have a GUI <code>Editor</code> component that has actions upon it that we’ll be calling, such as <code>open</code> or <code>save</code>, like in <a data-type=\"xref\" href=\"#Editor\">Example&nbsp;3-1</a>. We want to implement macro functionality—that is, a series of operations that can be recorded and then run later as a single operation. This is our receiver.</p> \n  <div data-type=\"example\" id=\"Editor\"> \n   <h5><span class=\"label\">Example 3-1. </span>Common functions a text editor may have</h5> \n   <pre data-type=\"programlisting\">\ninterface Editor {\n\n    void save();\n\n    void open();\n\n    void close();\n\n}\n    </pre> \n  </div> \n  <p>In this example, each of the operations, such as <code>open</code> and <code>save</code>, are commands. We need a generic command interface to fit these different operations into. I’ll call this interface <code>Action</code>, as it represents performing a single action within our domain. This is the interface that all our command objects implement (<a data-type=\"xref\" href=\"#Action_interface\">Example&nbsp;3-2</a>).</p> \n  <div data-type=\"example\" id=\"Action_interface\"> \n   <h5><span class=\"label\">Example 3-2. </span>All our actions implement the Action interface</h5> \n   <pre data-type=\"programlisting\">\ninterface Action {\n\n    void perform();\n\n}\n    </pre> \n  </div> \n  <p>We can now implement our <code>Action</code> interface for each of the operations. All these classes need to do is call a single method on our <code><span class=\"keep-together\">Editor</span></code> and wrap this call into our <code>Action</code> interface. I’ll name the classes after the operations that they wrap, with the appropriate class naming convention—so, the <code>save</code> method corresponds to a class called <code>Save</code>. <a data-type=\"xref\" href=\"#SaveAction\">Example&nbsp;3-3</a> and <a data-type=\"xref\" href=\"#OpenAction\">Example&nbsp;3-4</a> are our command objects.</p> \n  <div data-type=\"example\" id=\"SaveAction\"> \n   <h5><span class=\"label\">Example 3-3. </span>Our save action delegates to the underlying method call on Editor</h5> \n   <pre data-type=\"programlisting\">\nclass Save implements Action {\n\n    private final Editor editor;\n\n    public Save(Editor editor) {\n        this.editor = editor;\n    }\n\n    @Override\n    public void perform() {\n        editor.save();\n    }\n}\n    </pre> \n  </div> \n  <div data-type=\"example\" id=\"OpenAction\"> \n   <h5><span class=\"label\">Example 3-4. </span>Our open action also delegates to the underlying method call on Editor</h5> \n   <pre data-type=\"programlisting\">\nclass Open implements Action {\n\n    private final Editor editor;\n\n    public Open(Editor editor) {\n        this.editor = editor;\n    }\n\n    @Override\n    public void perform() {\n        editor.open();\n    }\n}\n    </pre> \n  </div> \n  <p>Now we can implement our <code>Macro</code> class. This class can <code>record</code> actions and run them as a group. We use a <code>List</code> to store the sequence of actions and then call <code>forEach</code> in order to execute each <code>Action</code> in turn. <a data-type=\"xref\" href=\"#Macro\">Example&nbsp;3-5</a> is our invoker.</p> \n  <div data-type=\"example\" id=\"Macro\"> \n   <h5><span class=\"label\">Example 3-5. </span>A macro consists of a sequence of actions that can be invoked in turn</h5> \n   <pre data-type=\"programlisting\">\nclass Macro {\n\n    private final List&lt;Action&gt; actions;\n\n    public Macro() {\n        actions = new ArrayList&lt;&gt;();\n    }\n\n    public void record(Action action) {\n        actions.add(action);\n    }\n\n    public void run() {\n        actions.forEach(Action::perform);\n    }\n\n}\n    </pre> \n  </div> \n  <p>When we come to build up a macro programmatically, we add an instance of each command that has been recorded to the <code>Macro</code> object. We can then just run the macro, and it will call each of the commands in turn. As a lazy programmer, I love the ability to define common workflows as macros. Did I say “lazy?” I meant focused on improving my productivity. The <code>Macro</code> object is our client code and is shown in <a data-type=\"xref\" href=\"#classBasedCommand\">Example&nbsp;3-6</a>.</p> \n  <div data-type=\"example\" id=\"classBasedCommand\"> \n   <h5><span class=\"label\">Example 3-6. </span>Building up a macro with the command pattern</h5> \n   <pre data-type=\"programlisting\">\nMacro macro = new Macro();\nmacro.record(new Open(editor));\nmacro.record(new Save(editor));\nmacro.record(new Close(editor));\nmacro.run();\n    </pre> \n   <p>How do lambda expressions help? Actually, all our command classes, such as <code>Save</code> and <code>Open</code>, are really just lambda expressions wanting to get out of their shells. They are blocks of behavior that we’re creating classes in order to pass around. This whole pattern becomes a lot simpler with lambda expressions because we can entirely dispense with these classes. <a data-type=\"xref\" href=\"#lambdaBasedCommand\">Example&nbsp;3-7</a> shows how to use our <code>Macro</code> class without these command classes and with lambda expressions instead.</p> \n   <div data-type=\"example\" id=\"lambdaBasedCommand\"> \n    <h5><span class=\"label\">Example 3-7. </span>Using lambda expressions to build up a macro</h5> \n   </div> \n   <pre data-type=\"programlisting\">\nMacro macro = new Macro();\nmacro.record(() -&gt; editor.open());\nmacro.record(() -&gt; editor.save());\nmacro.record(() -&gt; editor.close());\nmacro.run();\n    </pre> \n  </div> \n  <p>In fact, we can do this even better by recognizing that each of these lambda expressions is performing a single method call. So, we can actually use method references in order to wire the editor’s commands to the macro object (see <a data-type=\"xref\" href=\"#referenceBasedCommand\">Example&nbsp;3-8</a>).</p> \n  <div data-type=\"example\" id=\"referenceBasedCommand\"> \n   <h5><span class=\"label\">Example 3-8. </span>Using method references to build up a macro</h5> \n   <pre data-type=\"programlisting\">\nMacro macro = new Macro();\nmacro.record(editor::open);\nmacro.record(editor::save);\nmacro.record(editor::close);\nmacro.run();\n    </pre> \n  </div> \n  <p>The command pattern is really just a poor man’s lambda expression to begin with. By using actual lambda expressions or method references, we can clean up the code, reducing the amount of boilerplate required and making the intent of the code more obvious.</p> \n  <p>Macros are just one example of how we can use the command pattern. It’s frequently used in implementing component-based GUI systems, undo functions, thread pools, transactions, and wizards.</p> \n  <div data-type=\"note\" epub:type=\"note\"> \n   <h6>Note</h6> \n   <p>There is already a functional interface with the same structure as our interface <code>Action</code> in core Java—<code><span class=\"keep-together\">Runnable</span></code>. We could have chosen to use that in our macro class, but in this case, it seemed more appropriate to consider an <code>Action</code> to be part of the vocabulary of our domain and create our own interface.</p> \n  </div>\n </body>\n</html>",
      "slug" : "the-command-pattern"
    }, {
      "title" : "Strategy Pattern",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>The strategy pattern is a way of changing the algorithmic behavior of software based upon a runtime decision. How you implement the strategy pattern depends upon your circumstances, but in all cases, the main idea is to be able to define a common problem that is solved by different algorithms and then encapsulate all the algorithms behind the same programming interface.</p> \n  <p>An example algorithm we might want to encapsulate is compressing files. We’ll give our users the choice of compressing our files using either the <code>zip</code> algorithm or the <code>gzip</code> algorithm and implement a generic <code>Compressor</code> class that can compress using either algorithm.</p> \n  <p>First we need to define the API for our strategy (see <a data-type=\"xref\" href=\"#jvld_0802\">Figure&nbsp;3-2</a>), which I’ll call <code>CompressionStrategy</code>. Each of our compression algorithms will implement this interface. They have the <code>compress</code> method, which takes and returns an <code>OutputStream</code>. The returned <code>OutputStream</code> is a compressed version of the input (see <a data-type=\"xref\" href=\"#CompressionStrategy\">Example&nbsp;3-9</a>).</p> \n  <figure> \n   <div id=\"jvld_0802\" class=\"figure\"> \n    <img src=\"/book_res/object-oriented-vs-functional-programming/assets/oofp_0402.png\"> \n    <h6><span class=\"label\">Figure 3-2. </span>The Strategy Pattern</h6> \n   </div> \n  </figure> \n  <div data-type=\"example\" id=\"CompressionStrategy\"> \n   <h5><span class=\"label\">Example 3-9. </span>Defining a strategy interface for compressing data</h5> \n   <pre data-type=\"programlisting\">\ninterface CompressionStrategy {\n\n    OutputStream compress(OutputStream data) throws IOException;\n\n}\n    </pre> \n  </div> \n  <p>We have two concrete implementations of this interface, one for <code>gzip</code> and one for <code>zip</code>, which use the built-in Java classes to write <code>gzip</code> (<a data-type=\"xref\" href=\"#GzipCompressionStrategy\">Example&nbsp;3-10</a>) and <code>zip</code> (<a data-type=\"xref\" href=\"#ZipCompressionStrategy\">Example&nbsp;3-11</a>) files.</p> \n  <div data-type=\"example\" id=\"GzipCompressionStrategy\"> \n   <h5><span class=\"label\">Example 3-10. </span>Using the gzip algorithm to compress data</h5> \n   <pre data-type=\"programlisting\">\nclass GzipCompressionStrategy implements CompressionStrategy {\n\n    @Override\n    public OutputStream compress(OutputStream data) throws IOException {\n        return new GZIPOutputStream(data);\n    }\n\n}\n    </pre> \n  </div> \n  <div data-type=\"example\" id=\"ZipCompressionStrategy\"> \n   <h5><span class=\"label\">Example 3-11. </span>Using the zip algorithm to compress data</h5> \n   <pre data-type=\"programlisting\">\nclass ZipCompressionStrategy implements CompressionStrategy {\n\n    @Override\n    public OutputStream compress(OutputStream data) throws IOException {\n        return new ZipOutputStream(data);\n    }\n\n}\n    </pre> \n  </div> \n  <p>Now we can implement our <code>Compressor</code> class, which is the <em>context</em> in which we use our strategy. This has a <code>compress</code> method on it that takes input and output files and writes a compressed version of the input file to the output file. It takes the <code>CompressionStrategy</code> as a constructor parameter that its calling code can use to make a runtime choice as to which compression strategy to use—for example, getting user input that would make the decision (see <a data-type=\"xref\" href=\"#Compressor\">Example&nbsp;3-12</a>).</p> \n  <div data-type=\"example\" id=\"Compressor\"> \n   <h5><span class=\"label\">Example 3-12. </span>Our compressor is provided with a compression strategy at construction time</h5> \n   <pre data-type=\"programlisting\">\nclass Compressor {\n\n    private final CompressionStrategy strategy;\n\n    public Compressor(CompressionStrategy strategy) {\n        this.strategy = strategy;\n    }\n\n    public void compress(Path inFile, File outFile) throws IOException {\n        try (OutputStream outStream = new FileOutputStream(outFile)) {\n            Files.copy(inFile, strategy.compress(outStream));\n        }\n    }\n}\n    </pre> \n  </div> \n  <p>If we have a traditional implementation of the strategy pattern, then we can write client code that creates a new <code>Compressor</code> with whichever strategy we want (<a data-type=\"xref\" href=\"#classBasedExample\">Example&nbsp;3-13</a>).</p> \n  <div data-type=\"example\" id=\"classBasedExample\"> \n   <h5><span class=\"label\">Example 3-13. </span>Instantiating the Compressor using concrete strategy classes</h5> \n   <pre data-type=\"programlisting\">\nCompressor gzipCompressor = \n  new Compressor(new GzipCompressionStrategy());\ngzipCompressor.compress(inFile, outFile);\n\nCompressor zipCompressor = new Compressor(new ZipCompressionStrategy());\nzipCompressor.compress(inFile, outFile);\n    </pre> \n  </div> \n  <p>As with the command pattern discussed earlier, using either lambda expressions or method references allows us to remove a whole layer of boilerplate code from this pattern. In this case, we can remove each of the concrete strategy implementations and refer to a method that implements the algorithm. Here the algorithms are represented by the constructors of the relevant <code>OutputStream</code> implementation. We can totally dispense with the <code>GzipCompressionStrategy</code> and <code>ZipCompressionStrategy</code> classes when taking this approach. <a data-type=\"xref\" href=\"#lambdaBasedExample\">Example&nbsp;3-14</a> is what the code would look like if we used method references.</p> \n  <div data-type=\"example\" id=\"lambdaBasedExample\"> \n   <h5><span class=\"label\">Example 3-14. </span>Instantiating the Compressor using method references</h5> \n   <pre data-type=\"programlisting\">\nCompressor gzipCompressor = new Compressor(GZIPOutputStream::new);\ngzipCompressor.compress(inFile, outFile);\n        \nCompressor zipCompressor = new Compressor(ZipOutputStream::new);\nzipCompressor.compress(inFile, outFile);\n    </pre> \n  </div> \n  <p>Yet again thinking in a more functional way—modelling in terms of functions rather than classes and objects—has allowed us to reduce the boilerplate and simplify an existing design pattern. This is the great win about being able to combine the functional and object-oriented world view: you get to pick the right approach for the right situation.</p>\n </body>\n</html>",
      "slug" : "strategy-pattern"
    }, {
      "title" : "Summary",
      "type" : "page",
      "htmlContent" : "<p>In this section, we have evaluated a series of design patterns and talked about how they could all be used differently with lambda expressions. In some respect, a lot of these patterns are really object-oriented embodiments of functional ideas. Take the command pattern. It’s called a pattern and has some different interacting components, but the essence of the pattern is the passing around and invoking of behavior. The command pattern is all about first-class functions.</p> \n<p>The same thing with the Strategy pattern. Its really all about putting together some behavior and passing it around; again it’s a design pattern that’s mimicking first-class functions. Programming languages that have a first-class representation of functions often don’t talk about the strategy or command patterns, but this is what developers are doing. This is an important theme in this report. Often times, both functional and object-oriented programming languages end up with similar patterns of code, but with different names associated with them.</p>",
      "slug" : "summary"
    } ]
  }, {
    "title" : "4. Conclusions",
    "type" : "chapter",
    "htmlContent" : "<div class=\"chapter\" id=\"ch5\">  \n <section data-type=\"sect1\" data-pdf-bookmark=\"Object-Oriented vs. Functional Languages\"></section> \n <section data-type=\"sect1\" data-pdf-bookmark=\"Programming Language Evolution\"></section> \n</div>",
    "textContent" : "",
    "slug" : "4-conclusions",
    "pages" : [ {
      "title" : "Object-Oriented vs. Functional Languages",
      "type" : "page",
      "htmlContent" : "<p> In this report, we’ve covered a lot of ways in which ideas from functional programming relate to existing object-oriented design principles. These idioms aren’t as different as a lot of people make them out to be. Definitely functional programming emphasizes the power of reuse and composition of behavior through higher-order functions. And there’s no doubt that immutable data structures improve the safety of our code. But these features can be supported in an object-oriented context as well, the common theme being the benefits that be achieved are universal to both approaches. We’re always seeking to write code that is safer and offers more opportunity for composing together behavior in a flexible manner. </p> \n<p> Functional programming is about a thought process. It’s not necessarily the case that you need a new language in order to program in a functional style. Some language features often help though. The introduction of lambda expressions in Java 8 makes it a language more suited to functional programming. While object-oriented programming traditionally has been about encapsulating data and behavior together, it is now adding more support for behavior on its own thanks to ideas from functional programming. </p> \n<p> Other languages such as Scala or Haskell take functional ideas further. Scala offers a mix of both functional and object-oriented programming facilities, whilst Haskell focuses purely on functional programming. It’s well worth exploring these languages and seeing what set of language features you find useful in your problem domain. However, there’s no need to necessarily move to Scala or Haskell thinking that they’re the only way to program in a functional style. However, they certainly offer some features that Java lacks, and it’s sometimes worth using different programming languages. </p> \n<p> I appreciate that this maybe is a controversial opinion to those who have spent their careers advocating functional programming, but software development isn’t about idealism or religious evangelism: it’s about producing reliable software that works for our clients and business. A functional style of programming can help us achieve this end, but it is not the end in and of itself. </p>",
      "slug" : "object-oriented-vs-functional-languages"
    }, {
      "title" : "Programming Language Evolution",
      "type" : "page",
      "htmlContent" : "<p> One of the interesting trends over time in programming languages is the gradual shift between languages that are more object-oriented and more functional. If we jump in our Delorean and go back in time to the 1980s, a lot of interesting changes were going on. Older procedural programming lanugages were being phased out and there was a growth in the popularity of both object-oriented and functional programming languages. </p> \n<p> Interestingly enough, a lot of the early advocates of both functional and object-oriented languages combined features of the other. If you ask any object-oriented purist what her ideal programming language is, she’ll tell you it’s Smalltalk. Smalltalk 80 had lambda expressions, and Smalltalk’s collections library was inherently functional in nature, and equivalent operations to map, reduce, and filter existed (albeit under different names). </p> \n<p> A lot of purist functional programmers from the period would tell you that Common LISP is the ideal functional language. Interestingly enough, it had a system for object orientation called CLOS (Common LISP Object System). So back in the 1980s, there was reasonable recognition that neither paradigm was the only true way to enlightenment. </p> \n<p> During the 1990s, programming changed. Object-oriented programming became established as a dominant programming approach for business users. Languages such as Java and C++ grew in popularity. In the late 1990s and early 2000s, Java became a hugely popular language. In 2001, the JavaOne conference had 28,000 attendees. That’s the size of a rock concert! </p> \n<p> At the time of writing, the trend has changed again. Popular programming languages are moving away from being specifically object-oriented or functional. You will no doubt get the old holdout such as Haskell or Clojure, but by and large, languages are going hybrid. Both C++ and Java 8 have added lambda expressions and started to retrofit useful elements of functional programming to their existing object-oriented capabilities. Not only that but the underlying ideas which have been adopted in terms of generics in Java and templating in C++ originated in functional programming languages. </p> \n<p> Newer languages are multiparadigm from the get-go. F# is a great example of a language which has a functional style but also maintains parity with C# in terms of its object-oriented features. Languages such as Ruby, Python, and Groovy can be written in both a functional and object-oriented style, all having functional features in their collections API. There are a number of newer languages on the JVM that have developed over the last decade or so, and they predominantly have a mixture of functional and object-oriented features. Scala, Ceylon, and Kotlin all come to mind in this regard. </p> \n<p> The future is hybrid: pick the best features and ideas from both functional and object-oriented approaches in order to solve the problem at hand. </p>",
      "slug" : "programming-language-evolution"
    } ]
  } ]
}