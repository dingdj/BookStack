{
  "title" : "RESTful Web Services",
  "type" : "book",
  "htmlContent" : "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>Cover</title><style type=\"text/css\"> img { max-width: 100%; }</style></head><body><div id=\"cover-image\"><img src=\"orm_front_cover.jpg\" alt=\"First Edition\"/></div></body></html>\n",
  "slug" : "restful-web-services",
  "contents" : [ {
    "title" : "RESTful Web Services - Introduction",
    "type" : "chapter",
    "htmlContent" : "Introduction pages",
    "textContent" : "Introduction pages",
    "slug" : "restful-web-services-introduction",
    "pages" : [ {
      "title" : "RESTful Web Services",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <!--?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?--> \n  <title>Cover</title>\n  <style type=\"text/css\"> img { max-width: 100%; }</style>\n  <div id=\"cover-image\">\n   <img src=\"/book_res/restful-web-services/orm_front_cover.jpg\" alt=\"First Edition\">\n  </div> \n </body>\n</html>",
      "slug" : "restful-web-services"
    }, {
      "title" : "Dedication",
      "type" : "page",
      "htmlContent" : "<div class=\"titlepage\"></div>\n<div class=\"blockquote\">\n <blockquote class=\"blockquote\">\n  <p>For Woot, Moby, and Beet.</p>\n  <div class=\"attribution\">\n   <p>—<span class=\"attribution\">Leonard</span></p>\n  </div>\n </blockquote>\n</div>\n<div class=\"blockquote\">\n <blockquote class=\"blockquote\">\n  <p>For Christopher, Catherine, and Carolyn.</p>\n  <div class=\"attribution\">\n   <p>—<span class=\"attribution\">Sam</span></p>\n  </div>\n </blockquote>\n</div>",
      "slug" : "dedication"
    }, {
      "title" : "A Note Regarding Supplemental Files",
      "type" : "page",
      "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">A Note Regarding Supplemental Files</h2>\n  </div>\n </div>\n</div>\n<p>Supplemental files and examples for this book can be found at <a class=\"ulink\" href=\"http://examples.oreilly.com/9780596529260/\" target=\"_top\">http://examples.oreilly.com/9780596529260/</a>. Please use a standard desktop web browser to access these files, as they may not be accessible from all ereader devices.</p>\n<p>All code files or examples referenced in the book will be available online. For physical books that ship with an accompanying disc, whenever possible, we’ve posted all CD/DVD content. Note that while we provide as much of the media content as we are able via free download, we are sometimes limited by licensing restrictions. Please direct any questions or concerns to <span class=\"email\"><a class=\"email\" href=\"mailto:booktech@oreilly.com\">booktech@oreilly.com</a></span>.</p>",
      "slug" : "a-note-regarding-supplemental-files"
    }, {
      "title" : "Foreword",
      "type" : "page",
      "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Foreword</h2>\n  </div>\n  <div>\n   <div class=\"author\">\n    <h3 class=\"author\"><span class=\"firstname\">David</span> <span class=\"surname\">Heinemeier Hansson</span></h3>\n   </div>\n  </div>\n </div>\n</div>\n<p>The world of web services has been on a fast track to supernova ever since the architect astronauts spotted another meme to rocket out of pragmatism and into the universe of enterprises. But, thankfully, all is not lost. A renaissance of HTTP appreciation is building and, under the banner of REST, shows a credible alternative to what the merchants of complexity are trying to ram down everyone’s throats; a simple set of principles that every day developers can use to connect applications in a style native to the Web.</p>\n<p><span class=\"emphasis\"><em>RESTful Web Services</em></span> shows you how to use those principles without the drama, the big words, and the miles of indirection that have scared a generation of web developers into thinking that web services are so hard that you have to rely on BigCo implementations to get anything done. Every developer working with the Web needs to read this book.</p>",
      "slug" : "foreword"
    }, {
      "title" : "Index",
      "type" : "page",
      "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Index</h2>\n  </div>\n </div>\n</div>\n<div class=\"note\" title=\"A note on the digital index\">\n <h3 class=\"title\">A note on the digital index</h3>\n <p>A link in an index entry is displayed as the section title in which that entry appears. Because some sections have multiple index markers, it is not unusual for an entry to have several links to the same section. Clicking on any link will take you directly to the place in the text in which the marker appears.</p>\n</div>\n<div class=\"index\">\n <div class=\"indexdiv\">\n  <h3>Symbols</h3>\n  <dl>\n   <dt>\n    , (commas)\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      scoping information, \n      <a class=\"indexterm\" href=\"ch05.html#ch05_CMMA\">No Hierarchy? Use Commas or Semicolons</a>–\n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt439\">Scale</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      URI design and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt709\">URI Design</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    / (forward slash)\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Django “house style” and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1068\">Define Resources and Give Them URIs</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      using XPath, using, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt107\">Web Services Are Web Sites</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    // XPath expressions, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt52\">Method Information</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ; (semicolons) scoping information, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_SEMI\">No Hierarchy? Use Commas or Semicolons</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt437\">Scale</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    [ ] (square brackets), using XPath, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt105\">Web Services Are Web Sites</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    100 “Continue” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1094\">100 (“Continue”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    101 “Switching Protocols” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1096\">101 (“Switching Protocols”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    200 “OK” response code, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt274\">HTTP Response Codes</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt462\">What’s Supposed to Happen?</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt476\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1099\">200 (“OK”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt885\">PUT</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      modifying resources, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt609\">What’s Supposed to Happen?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    201 “Created” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1101\">201 (“Created”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      creating resources, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt607\">What’s Supposed to Happen?</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt893\">PUT</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    202 “Accepted” response code, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt699\">Asynchronous Operations</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1103\">202 (“Accepted”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    203 “Non-Authoritative Information” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1105\">203 (“Non-Authoritative Information”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    204 “No Content” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1107\">204 (“No Content”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    206 “Partial Content” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1109\">206 (“Partial Content”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    207 “Multi-Status” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1111\">207 (“Multi-Status”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    300 “Multiple Choices” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1115\">300 (“Multiple Choices”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    301 “Moved Permanently” response code, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt883\">PUT</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1085\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1117\">301 (“Moved Permanently”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    302 “Found” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1119\">302 (“Found”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    303 “See Other” response code, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt472\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1121\">303 (“See Other”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    304 “Not Modified” response code, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt757\">Conditional GET</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1123\">304 (“Not Modified”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    305 “Use Proxy” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1125\">305 (“Use Proxy”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    306 “Unused” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1127\">306: Unused</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    307 “Temporary Redirect” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1129\">307 (“Temporary Redirect”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    400 “Bad Request” response code, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt474\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1133\">400 (“Bad Request”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt877\">Database-Backed Control Flow</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      restrictions and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt620\">What Might Go Wrong?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    401 “Unauthorized” response code, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt519\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt615\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt734\">Basic authentication</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1135\">401 (“Unauthorized”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    402 “Payment Required” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1137\">402 (“Payment Required”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    403 “Forbidden” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1139\">403 (“Forbidden”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    404 “Not Found” response code, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt278\">HTTP Response Codes</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt470\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt622\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1087\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1141\">404 (“Not Found”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt887\">PUT</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    405 “Method Not Allowed” response code, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt910\">POST Once Exactly</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1143\">405 (“Method Not Allowed”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    406 “Not Acceptable” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1146\">406 (“Not Acceptable”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    407 “Proxy Authentication Required” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1148\">407 (“Proxy Authentication Required”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    408 “Request Timeout” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1150\">408 (“Request Timeout”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    409 “Conflict” response code, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt518\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1091\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1152\">409 (“Conflict”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt881\">PUT</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      unauthorized access and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt618\">What Might Go Wrong?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    410 “Gone” response code, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt889\">PUT</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1089\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1154\">410 (“Gone”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    411 “Length Required” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1156\">411 (“Length Required”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    412 “Precondition Failed” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1158\">412 (“Precondition Failed”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    413 “Request Entity Too Large” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1160\">413 (“Request Entity Too Large”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    414 “Request-URI Too Long” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1162\">414 (“Request-URI Too Long”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    415 “Unsupported Media Type” response code, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt515\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt624\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1164\">415 (“Unsupported Media Type”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt875\">Database-Backed Control Flow</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    416 “Requested Range Not Satisfiable” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1166\">416 (“Requested Range Not Satisfiable”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    417 “Expectation Failed” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1168\">417 (“Expectation Failed”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    500 “Internal Server Error” response code, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt276\">HTTP Response Codes</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt480\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt522\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1083\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1175\">500 (“Internal Server Error”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    501 “Not Implemented” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1177\">501 (“Not Implemented”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    502 “Bad Gateway” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1179\">502 (“Bad Gateway”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    503 “Service Unavailable” response code, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt478\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt524\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1181\">503 (“Service Unavailable”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    504 “Gateway Timeout” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1183\">504 (“Gateway Timeout”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    505 “HTTP Version Not Supported” response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1185\">505 (“HTTP Version Not Supported”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Abusing Amazon Images” (Gertler, Nat), \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt420\">Designing Read-Only Resource-Oriented Services</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Universal Resource Identifiers-Axioms of Web Architecture” (Berners-Lee, Tim), \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt355\">URIs</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>A</h3>\n  <dl>\n   <dt>\n    Accept request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1188\">Accept</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Accept-Charset request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1189\">Accept-Charset</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Accept-Encoding request header, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt135\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1190\">Accept-Encoding</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      compression algorithms and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt749\">Compression</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Accept-Language request header, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt385\">Deciding Between Representations</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1191\">Accept-Language</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Accept-Ranges request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1192\">Accept-Ranges</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Accepted” 202 response code, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt700\">Asynchronous Operations</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1104\">202 (“Accepted”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    access control, \n    <a class=\"indexterm\" href=\"ch03.html#ch03_accesscontrol\">Request Signing and Access Control</a>–\n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt314\">Setting Access Policy</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Access Key ID” (Amazon), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt282\">An S3 Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    access policies, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt306\">Setting Access Policy</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ActionScript, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt178\">Other Languages</a>, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt978\">From AJAX to Ajax</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt233\">Other Languages</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    ActiveRecord, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt587\">Design the Representation(s) Accepted from the Client</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt592\">Design the Representation(s) Accepted from the Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ActiveResource, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt113\">Wrappers, WADL, and ActiveResource</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      clients, making transparent with, \n      <a class=\"indexterm\" href=\"ch03.html#ch03_active\">Clients Made Transparent with ActiveResource</a>–\n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt343\">Parting Words</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    acts_as_taggable plugin, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt549\">A Social Bookmarking Web Service</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt639\">Model Code</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ad hoc XHTML, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt850\">Ad Hoc XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    addressability of URIs, \n    <a class=\"indexterm\" href=\"ch04.html#ch04_address\">Addressability</a>–\n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt367\">Addressability</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt655\">Addressability</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt688\">Why Addressability Matters</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Age request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1193\">Age</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Ajax, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt363\">Addressability</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      advantages/disadvantages, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt986\">The Advantages of Ajax</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      architecture, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt982\">The Ajax Architecture</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      cross-browser issues and, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1006\">Cross-Browser Issues and Ajax Libraries</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      request proxying, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1014\">Request Proxying</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      requests, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt990\">Making the Request</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      responses, handling, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt998\">Handling the Response</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      REST clients, as, \n      <a class=\"indexterm\" href=\"ch11.html#ch11_ajax\">Ajax Applications as REST Clients</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    AllegroServe web server library (Lisp), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt186\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Allow request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1194\">Allow</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Amazon Web Services, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt19\">The Programmable Web and Its Inhabitants</a>, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt255\">Introducing the Simple Storage Service</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      addressablity, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt362\">Addressability</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt67\">RESTful, Resource-Oriented Architectures</a>, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt263\">Resources</a>\n     </dt>\n     <dd>\n      <dl>\n       <dt>\n        client library, using, \n        <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt320\">Using the S3 Client Library</a>\n       </dt>\n       <dd></dd>\n      </dl>\n     </dd>\n     <dt>\n      wrappers, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt110\">Wrappers, WADL, and ActiveResource</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Apache Tomcat, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1047\">Restlet</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    API keys, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt485\">User Accounts as Resources</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    APP (Atom Publishing Protocol), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt65\">RESTful, Resource-Oriented Architectures</a>, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt254\">Introducing the Simple Storage Service</a>, \n    <a class=\"indexterm\" href=\"ch09.html#ch09_hahaha\">The Atom Publishing Protocol</a>–\n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt902\">Summary</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      collections, describing, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt935\">Describing an APP collection</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    application forms, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt918\">Hypermedia Technologies</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    application state, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt375\">Application State Versus Resource State</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt664\">State and Statelessness</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    application/atom+xml media types, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt822\">Atom</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    application/json media type, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt836\">JSON</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    application/x-www-form-urlencoded media type, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt833\">Form-Encoded Key-Value Pairs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    application/xhtml+xml media type, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt792\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    application/xml media type, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt847\">Framework-Specific Serialization Formats</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt858\">Other XML Standards and Ad Hoc Vocabularies</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    applications and web interfaces, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_appweb\">Applications with a Web Interface</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt788\">Applications with No Web Interface</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    applicaton/xhtml+xml\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ad hoc XHTML, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt852\">Ad Hoc XHTML</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Architecture of the World Wide Web, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt352\">What’s a Resource?</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Asynchronous JavaScript And XML (see Ajax)\n   </dt>\n   <dd></dd>\n   <dt>\n    asynchronous operations, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt698\">Asynchronous Operations</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    AsyncWeb, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1046\">Restlet</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Atom, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt552\">A Social Bookmarking Web Service</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt600\">Design the Representation(s) Served to the Client</a>, \n    <a class=\"indexterm\" href=\"ch09.html#ch09_atom\">Atom</a>–\n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt829\">OpenSearch</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Atom Authentication” (Pilgrim, Mark), \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt742\">WSSE username token</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    atom-tools Ruby gem, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt551\">A Social Bookmarking Web Service</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “authenticated” messages, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt510\">Link This Resource to Existing Resources</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    authenticated-read access policy, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt312\">Setting Access Policy</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    authentication (HTTP), \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt495\">Authentication, Authorization, Privacy, and Trust</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      authorization and, \n      <a class=\"indexterm\" href=\"ch08.html#ch08_authhttp\">Authentication and Authorization</a>–\n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt747\">WSSE username token</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    authorization, \n    <a class=\"indexterm\" href=\"ch06.html#ch06_authorization\">Authentication, Authorization, Privacy, and Trust</a>–\n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt502\">Authentication, Authorization, Privacy, and Trust</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      authentication and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt728\">Authentication and Authorization</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      unauthorized access and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt613\">What Might Go Wrong?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Authorization request header, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt143\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt733\">Basic authentication</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1195\">Authorization</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      S3 and, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt302\">Request Signing and Access Control</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      unauthorized access and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt617\">What Might Go Wrong?</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      WSSE HTTP authentication, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt740\">WSSE username token</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    authorization token, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt784\">Why Should a User Trust the HTTP Client?</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    AWS::S3, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt256\">Introducing the Simple Storage Service</a>, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt281\">An S3 Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Axioms of Web Architecture (Berners-Lee, Tim), \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt726\">Permanent URIs Versus Readable URIs</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>B</h3>\n  <dl>\n   <dt>\n    “Bad Gateway” 502 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1180\">502 (“Bad Gateway”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Bad Request” 400 response code, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt475\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1134\">400 (“Bad Request”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt878\">Database-Backed Control Flow</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      restrictions and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt621\">What Might Go Wrong?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    base 64 encoding, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt732\">Basic authentication</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Basic HTTP authentication, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt139\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt490\">Authentication, Authorization, Privacy, and Trust</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt729\">Basic authentication</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    batch operations, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt701\">Batch Operations</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Beautiful Soup XML parser, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt208\">Python: ElementTree</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Berners-Lee, Tim, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt354\">URIs</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt725\">Permanent URIs Versus Readable URIs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    best practices for REST, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_bestpractices\">REST and ROA Best Practices</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt790\">What Problem Does this Solve?</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Big Web Services, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt31\">Kinds of Things on the Programmable Web</a>, \n    <a class=\"indexterm\" href=\"ch10.html#ch10_bigwebservice\">The Resource-Oriented Architecture Versus Big Web Services</a>–\n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt971\">Conclusion</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    binary documents, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt901\">Binary documents as APP members</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    bookmarks, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt114\">del.icio.us: The Sample Application</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      controllers for, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt571\">The Bookmarks Controller</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      management for, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt583\">Remodeling the REST Way</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    BPEL (Business Process Execution Language), \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt963\">BPEL, ESB, and SOA</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    browser issues, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1004\">Cross-Browser Issues and Ajax Libraries</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    buckets, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt25\">The Programmable Web and Its Inhabitants</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      access policies, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt307\">Setting Access Policy</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    buckets (S3), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt259\">Object-Oriented Design of S3</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Builder::XmlMarkup (Ruby), \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt636\">The CalendarController</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Bunardzic, Alex, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt350\">Resource-Oriented What Now?</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    bundlers controller, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt580\">The Bundles Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Business Process Execution Language (BPEL), \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt964\">BPEL, ESB, and SOA</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>C</h3>\n  <dl>\n   <dt>\n    C programming language, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt181\">Other Languages</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt234\">Other Languages</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    C#, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt166\">C#: System.Web.HTTPWebRequest</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt221\">C#: System.Xml.XmlReader</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    C++ programming language, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt182\">Other Languages</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt236\">Other Languages</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Cache-Control header, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt766\">Please cache</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1196\">Cache-Control</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    caching, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_caching\">Caching</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt772\">Default caching rules</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    calendar controller, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt577\">The Calendar Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    __call__ method, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1072\">The bookmark detail view</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    category documents (APP), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt900\">Category documents</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    character encoding, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt860\">Encoding Issues</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    class HTML attribute, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt802\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    client-side errors, \n    <a class=\"indexterm\" href=\"apb.html#appb_client\">4xx: Client-Side Error</a>–\n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1171\">417 (“Expectation Failed”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    clients, \n    <a class=\"indexterm\" href=\"ch02.html#ch01_clients\">Web Services Are Web Sites</a>–\n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt252\">Clients Made Easy with WADL</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ActiveResource, making transparent with, \n      <a class=\"indexterm\" href=\"ch03.html#ch03_cwsar\">Clients Made Transparent with ActiveResource</a>–\n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt344\">Parting Words</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Python, using for, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt340\">A Python Client for the Simple Service</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      representations, \n      <a class=\"indexterm\" href=\"ch06.html#ch06_crep\">Design the Representation(s) Accepted from the Client</a>–\n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt508\">Design the Representation(s) Accepted from the Client</a>, \n      <a class=\"indexterm\" href=\"ch06.html#ch06_clients\">Design the Representation(s) Accepted from the Client</a>–\n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt539\">Design the Representation(s) Served to the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#ch03_clientss3\">An S3 Client</a>–\n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt298\">The S3 Object</a>\n     </dt>\n     <dd>\n      <dl>\n       <dt>\n        library, using, \n        <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt319\">Using the S3 Client Library</a>\n       </dt>\n       <dd></dd>\n      </dl>\n     </dd>\n     <dt>\n      writing, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt134\">Optional Features</a>, \n      <a class=\"indexterm\" href=\"ch12.html#ch12_writingclients\">Writing Restlet Clients</a>–\n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1055\">Writing Restlet Clients</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    CLR (Common Language Runtime), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt169\">C#: System.Web.HTTPWebRequest</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt223\">C#: System.Xml.XmlReader</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    collections (APP), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt897\">Collections</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    commas (,)\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      scoping information, \n      <a class=\"indexterm\" href=\"ch05.html#ch05_commas\">No Hierarchy? Use Commas or Semicolons</a>–\n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt438\">Scale</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      URI design and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt708\">URI Design</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Common Language Runtime (CLR), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt168\">C#: System.Web.HTTPWebRequest</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt224\">C#: System.Xml.XmlReader</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Common Lisp, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt183\">Other Languages</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt238\">Other Languages</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    compression, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt748\">Compression</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    conditional GET, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt466\">Conditional HTTP GET</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt627\">Conditional GET</a>, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_conditional\">Conditional GET</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt760\">Conditional GET</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      caching and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt761\">Caching</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “Conflict” 409 response code, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt517\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1092\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1153\">409 (“Conflict”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt882\">PUT</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      unauthorized access and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt619\">What Might Go Wrong?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    connectedness, \n    <a class=\"indexterm\" href=\"ch04.html#ch04_connectedness\">Links and Connectedness</a>–\n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt393\">Links and Connectedness</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt667\">Connectedness</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt691\">Why Connectedness Matters</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      service versioning, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt718\">Service Versioning</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Connection request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1197\">Connection</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    content negotiation, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt384\">Deciding Between Representations</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Content-Encoding header, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt753\">Compression</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1200\">Content-Encoding</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Content-Language request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1201\">Content-Language</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Content-Length request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1202\">Content-Length</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Content-Location header, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt770\">Default caching rules</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1203\">Content-Location</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Content-MD5 request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1204\">Content-MD5</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Content-Range request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1205\">Content-Range</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Content-Type header, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt42\">HTTP: Documents in Envelopes</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1206\">Content-Type</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      compression algorithms and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt751\">Compression</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      encodings and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt869\">XML and HTTP: Battle of the encodings</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      HTTP response and, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt464\">What’s Supposed to Happen?</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      outgoing representations and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt715\">Outgoing Representations</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt295\">The S3 Object</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “Continue” 100 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1095\">100 (“Continue”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    control flows (prepackaged), \n    <a class=\"indexterm\" href=\"ch09.html#ch09_controlflows\">Prepackaged Control Flows</a>–\n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt914\">POST Once Exactly</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    controllers, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt560\">REST in Rails</a>, \n    <a class=\"indexterm\" href=\"ch07.html#ch07_controllers\">The Bookmarks Controller</a>–\n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt581\">The Bundles Controller</a>, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1032\">Resources, Controllers, and Views</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      code, \n      <a class=\"indexterm\" href=\"ch07.html#ch07_controllercode\">Controller Code</a>–\n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt637\">The UrisController</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Cookie request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1242\">Cookie</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    cookies, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt373\">Statelessness</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt783\">The Trouble with Cookies</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    CPAN\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt240\">Other Languages</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “Created” 201 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1102\">201 (“Created”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      creating resources, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt608\">What’s Supposed to Happen?</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt894\">PUT</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    cross-browser issues, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1005\">Cross-Browser Issues and Ajax Libraries</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Crypt:SSLeay module, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt190\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    CSS, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt199\">Processing the Response: XML Parsers</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    curl, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt176\">The Command Line: curl</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>D</h3>\n  <dl>\n   <dt>\n    data sets, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_datasets\">Figure Out the Data Set</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt429\">General Lessons</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt503\">Figure Out the Data Set</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt528\">Figure Out the Data Set</a>, \n    <a class=\"indexterm\" href=\"ch07.html#ch07_datasets\">Figuring Out the Data Set</a>–\n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt557\">Figuring Out the Data Set</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      resources, splitting into, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt529\">Split the Data Set into Resources</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    databases, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt555\">Figuring Out the Data Set</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt606\">What’s Supposed to Happen?</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ActiveRecord and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt593\">Design the Representation(s) Accepted from the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      control flow and, \n      <a class=\"indexterm\" href=\"ch09.html#ch09_databasescontrol\">Database-Backed Control Flow</a>–\n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt896\">DELETE</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Date request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1207\">Date</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    DCMI (Dublin Core Metadata Initiative), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt844\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    dd tag (HTML), \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt453\">Representing Planets and Other Places</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Debian GNU/Linux, installing net/https library, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt150\">Ruby: rest-open-uri and net/http</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    del.icio.us web service, \n    <a class=\"indexterm\" href=\"ch02.html#ch02_delicious\">del.icio.us: The Sample Application</a>–\n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt121\">What the Sample Clients Do</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    DELETE method, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt47\">Method Information</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt129\">Making the Request: HTTP Libraries</a>, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt399\">GET, PUT, and DELETE</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ActiveResource clients and, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt338\">An ActiveResource Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      APP resources and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt906\">Summary</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      caching and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt769\">Default caching rules</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      faking, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt779\">Faking PUT and DELETE</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt269\">Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3::Bucket#delete method, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt291\">The Bucket</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      safety and idempotence, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt410\">Safety and Idempotence</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      uniform interface and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt672\">The Uniform Interface</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      user controllers and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt569\">The User Controller</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      UsersController and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt634\">The UsersController</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      web applications and web services and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1039\">Web Applications as Web Services</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    DELETE statement (SQL), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt334\">An ActiveResource Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Digest HTTP authentication, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt140\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt489\">Authentication, Authorization, Privacy, and Trust</a>, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_digesthttp\">Digest authentication</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt738\">Digest authentication</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Django (Python), \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt545\">A Service Implementation</a>, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1025\">Frameworks for RESTful Services</a>, \n    <a class=\"indexterm\" href=\"ch12.html#ch12_django\">Django</a>–\n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1076\">Conclusion</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      implementing resources as views, \n      <a class=\"indexterm\" href=\"ch12.html#ch12_impleme\">Implement Resources as Django Views</a>–\n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1074\">Further directions</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    dl HTML tag, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt798\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    document (entity-body), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt39\">HTTP: Documents in Envelopes</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    document-based protocol, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt34\">HTTP: Documents in Envelopes</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Dojo, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt245\">JSON Parsers: Handling Serialized Data</a>, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1012\">Dojo</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    DOM parsers, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt195\">Processing the Response: XML Parsers</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    DOMIT! DOM parser (PHP), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt229\">PHP</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Dublin Core Metadata Initiative (DCMI), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt843\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>E</h3>\n  <dl>\n   <dt>\n    ECMAScript standards, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt246\">JSON Parsers: Handling Serialized Data</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ElementTree (Python), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt206\">Python: ElementTree</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    encoding issues, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt859\">Encoding Issues</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Enterprise Service Bus (ESB), \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt966\">BPEL, ESB, and SOA</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    entity-body, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt38\">HTTP: Documents in Envelopes</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt506\">Design the Representation(s) Accepted from the Client</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      batch operations and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt702\">Batch Operations</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      form-encoding and, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt507\">Design the Representation(s) Accepted from the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      HTTP libraries and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt133\">Making the Request: HTTP Libraries</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Look-Before-You-Leap (LBYL) requests and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt775\">Look-Before-You-Leap Requests</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      PUT/DELETE, faking, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt782\">Faking PUT and DELETE</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      scoping informations and, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt61\">Scoping Information</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XML documents and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt118\">What the Sample Clients Do</a>, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt192\">Processing the Response: XML Parsers</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    entries (Atom lists), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt824\">Atom</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    EntriesController class, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1029\">Routing</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    eRDF, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt845\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    error (status codes)\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      client-side, \n      <a class=\"indexterm\" href=\"apb.html#appb_errors\">4xx: Client-Side Error</a>–\n      <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1170\">417 (“Expectation Failed”)</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      server-side, \n      <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1173\">5xx: Server-Side Error</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    ESB (Enterprise Service Bus), \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt965\">BPEL, ESB, and SOA</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ETag HTTP header, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt136\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt612\">What’s Supposed to Happen?</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1208\">ETag</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      conditional GET and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt630\">Conditional GET</a>, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt755\">Conditional GET</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Expat XML parser, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt235\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Expect request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1209\">Expect</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Expectation Failed” 417 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1169\">417 (“Expectation Failed”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    expiration dates, signing URIs, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt305\">Signing a URI</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Expires request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1210\">Expires</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Extensible Open XHTML Outlines (XOXO), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt814\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>F</h3>\n  <dl>\n   <dt>\n    federation, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt955\">Security</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    feeds (Atom lists), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt823\">Atom</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Firefox, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt499\">Authentication, Authorization, Privacy, and Trust</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Flash, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt179\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Flickr\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      API, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt49\">Method Information</a>, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt77\">REST-RPC Hybrid Architectures</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      statelessness and, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt377\">Application State Versus Resource State</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      user accounts and, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt486\">User Accounts as Resources</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    FOAF, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt846\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Forbidden” 403 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1140\">403 (“Forbidden”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    form-encoding, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt588\">Design the Representation(s) Accepted from the Client</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      key-value pairs, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt180\">Other Languages</a>, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt832\">Form-Encoded Key-Value Pairs</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    forms (HTML)\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      encoded representation of user accounts, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt595\">Design the Representation(s) Accepted from the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      form-encoded key-value pairs and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt835\">Form-Encoded Key-Value Pairs</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      hypermedia and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt917\">Hypermedia Technologies</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      linking resources and, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt458\">Link the Resources to Each Other</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      user accounts and, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt488\">Why Should User Accounts Be Resources?</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XHTML 4, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt927\">XHTML 4 forms</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    forward slash (/)\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Django “house style” and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1069\">Define Resources and Give Them URIs</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XPath, using, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt106\">Web Services Are Web Sites</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “Found” 302 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1120\">302 (“Found”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    4Suite, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt207\">Python: ElementTree</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Framework-specific serialization formats, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt848\">Framework-Specific Serialization Formats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    frameworks for RESTful services, \n    <a class=\"indexterm\" href=\"ch12.html#ch12_frameworks\">Frameworks for RESTful Services</a>–\n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1078\">Conclusion</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    From request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1211\">From</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>G</h3>\n  <dl>\n   <dt>\n    “Gateway Timeout” 504 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1184\">504 (“Gateway Timeout”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    GData, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt66\">RESTful, Resource-Oriented Architectures</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt907\">GData</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    gem program, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt153\">Ruby: rest-open-uri and net/http</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    geo microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt815\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Gertler, Nat, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt419\">Designing Read-Only Resource-Oriented Services</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    GET method, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt35\">HTTP: Documents in Envelopes</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt125\">Making the Request: HTTP Libraries</a>, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt397\">GET, PUT, and DELETE</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ActiveResource clients and, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt335\">An ActiveResource Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      APP resources and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt903\">Summary</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      conditional HTTP, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt465\">Conditional HTTP GET</a>, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt628\">Conditional GET</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      database-backed control flow and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt879\">GET</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      open-uri library and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt152\">Ruby: rest-open-uri and net/http</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      partial, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt776\">Partial GET</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      read-only resources and, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt426\">Turning Requirements Into Read-Only Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Ruby controllers and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1033\">Resources, Controllers, and Views</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt265\">Resources</a>, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt293\">The Bucket</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      safety and idempotence, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt407\">Safety and Idempotence</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      scoping information, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt60\">Scoping Information</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      uniform interface and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt669\">The Uniform Interface</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      user controllers and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt562\">The User Controller</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Gmail, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt365\">Addressability</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Ajax and, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt972\">Ajax Applications as REST Clients</a>, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1002\">Don’t Bogart the Benefits of REST</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “Gone” 410 response code, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt890\">PUT</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1090\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1155\">410 (“Gone”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Google, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt53\">Method Information</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Calendar, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt785\">Applications with a Web Interface</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      GData, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt908\">GData</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      links and connectedness, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt390\">Links and Connectedness</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      maps, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt450\">Representing Maps and Points on Maps</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      representations and, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt386\">Deciding Between Representations</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Resource-Oriented Architecture and, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt364\">Addressability</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      SOAP and, \n      <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt943\">SOAP</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Web Accelerator and, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt411\">Why safety and idempotence matter</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Gourley, David, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt763\">Caching</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Gregorio, Joe, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt161\">Python: httplib2</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt424\">Turning Requirements Into Read-Only Resources</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    gs:doGoogleSearch remote procedure, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt944\">SOAP</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    GUI elements, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt983\">The Ajax Architecture</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    gzip, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt750\">Compression</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>H</h3>\n  <dl>\n   <dt>\n    Hadley, Marc, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt934\">Describing a del.icio.us resource</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    hAtom microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt816\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    hCalendar microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt805\">XHTML with Microformats</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt854\">Ad Hoc XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    hCard microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt804\">XHTML with Microformats</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt806\">XHTML with Microformats</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt853\">Ad Hoc XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    HEAD method, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt126\">Making the Request: HTTP Libraries</a>, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt400\">HEAD and OPTIONS</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      caching and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt765\">Caching</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      read-only resources and, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt427\">Turning Requirements Into Read-Only Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt266\">Resources</a>, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt296\">The S3 Object</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      safety and idempotence, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt408\">Safety and Idempotence</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      uniform interface and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt670\">The Uniform Interface</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    headers, \n    <a class=\"indexterm\" href=\"apc.html#appc_headers\">The HTTP Header Top Infinity</a>–\n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1250\">X-WSSE</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      nonstandard, \n      <a class=\"indexterm\" href=\"apc.html#appc_non\">Nonstandard Headers</a>–\n      <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1249\">X-WSSE</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      standard, \n      <a class=\"indexterm\" href=\"apc.html#appc_standard\">Standard Headers</a>–\n      <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1240\">WWW-Authenticate</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    hierarchy into path variables, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_hierarchy\">Encode Hierarchy into Path Variables</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt433\">Scale</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    High REST, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt95\">Leftover Terminology</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Host request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1212\">Host</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    How to create a REST Protocol (Gregorio, Joe), \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt425\">Turning Requirements Into Read-Only Resources</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    hpricot gem, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt202\">Ruby: REXML, I Guess</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    href attribute (link tag), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt924\">XHTML 4 links</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    hResume microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt817\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    hReview microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt818\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    HTML, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt29\">Kinds of Things on the Programmable Web</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt929\">XHTML 5</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      linking resources, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt457\">Link the Resources to Each Other</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XHTML and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt794\">XHTML</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    HTTP, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt27\">Kinds of Things on the Programmable Web</a>, \n    <a class=\"indexterm\" href=\"ch01.html#ch01_http\">HTTP: Documents in Envelopes</a>–\n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt44\">HTTP: Documents in Envelopes</a>, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt79\">HTTP</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      authentication, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt496\">Authentication, Authorization, Privacy, and Trust</a>, \n      <a class=\"indexterm\" href=\"ch08.html#ch08_aaa\">Authentication and Authorization</a>–\n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt746\">WSSE username token</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Basic authentication, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt491\">Authentication, Authorization, Privacy, and Trust</a>, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt730\">Basic authentication</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      data sets and, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt430\">Split the Data Set into Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Digest authentication, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt492\">Authentication, Authorization, Privacy, and Trust</a>, \n      <a class=\"indexterm\" href=\"ch08.html#ch08_httpdigest\">Digest authentication</a>–\n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt737\">Digest authentication</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      encodings, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt868\">XML and HTTP: Battle of the encodings</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      libraries, \n      <a class=\"indexterm\" href=\"ch02.html#ch02_httplibraries\">Making the Request: HTTP Libraries</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      methods, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt396\">The Uniform Interface</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      RPC-style architectures and, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt70\">RPC-Style Architectures</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      sessions, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt371\">Statelessness</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      standard features of, \n      <a class=\"indexterm\" href=\"ch08.html#ch08_httpstandard\">Standard Features of HTTP</a>–\n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt777\">Partial GET</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      WSSE authentication, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt142\">Optional Features</a>, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt494\">Authentication, Authorization, Privacy, and Trust</a>, \n      <a class=\"indexterm\" href=\"ch08.html#ch08_httpwsse\">WSSE username token</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    HTTP Basic authentication, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt497\">Authentication, Authorization, Privacy, and Trust</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    HTTP response codes (see response codes (HTTP))\n   </dt>\n   <dd></dd>\n   <dt>\n    “HTTP Version Not Supported” 505 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1186\">505 (“HTTP Version Not Supported”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    HTTP+POX (HTTP plus Plain Old XML), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt92\">Leftover Terminology</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    HTTP: The Definitive Guide (Totty, Gourley), \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt764\">Caching</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    HttpClient (Java), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt163\">Java: HttpClient</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    httplib2 (Python), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt158\">Python: httplib2</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    HTTPS, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt498\">Authentication, Authorization, Privacy, and Trust</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      certificates, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt123\">Making the Request: HTTP Libraries</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    HttpURLConnection class, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1048\">Restlet</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    HTTPWebRequest, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt170\">C#: System.Web.HTTPWebRequest</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    http_authentication Ruby plugin, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt550\">A Social Bookmarking Web Service</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Hybrid architectures (RPC), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt76\">REST-RPC Hybrid Architectures</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    hypermedia, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt392\">Links and Connectedness</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt511\">Link This Resource to Existing Resources</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt538\">Design the Representation(s) Served to the Client</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      descriptions, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt647\">Hypermedia Descriptions</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      natural-language description and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt645\">Natural-Language Service Description</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      technologies, \n      <a class=\"indexterm\" href=\"ch09.html#ch09_hypermedia\">Hypermedia Technologies</a>–\n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt939\">Is WADL evil?</a>\n     </dt>\n     <dd>\n      <dl>\n       <dt>\n        WADL and, \n        <a class=\"indexterm\" href=\"ch09.html#ch09_hw\">WADL</a>–\n        <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt938\">Is WADL evil?</a>\n       </dt>\n       <dd></dd>\n      </dl>\n     </dd>\n    </dl>\n   </dd>\n   <dt>\n    hypermedia as engine of application state (see connectedness)\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>I</h3>\n  <dl>\n   <dt>\n    iCalendar, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt856\">Ad Hoc XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    idempotence, \n    <a class=\"indexterm\" href=\"ch04.html#ch04_idempotence\">Safety and Idempotence</a>–\n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt413\">Why safety and idempotence matter</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      uniform interface, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt675\">Safety and Idempotence</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    If-Match HTTP header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1213\">If-Match</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    If-Modified-Since HTTP header, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt137\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt468\">Conditional HTTP GET</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt759\">Conditional GET</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1214\">If-Modified-Since</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    If-None-Match HTTP header, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt469\">Conditional HTTP GET</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1215\">If-None-Match</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      conditional GET and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt756\">Conditional GET</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    If-Range HTTP header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1216\">If-Range</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    If-Unmodified-Since header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1217\">If-Unmodified-Since</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    image/svg+xml media type, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt831\">SVG</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    incoming representations, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt716\">Incoming Representations</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    INSERT statement (SQL), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt332\">An ActiveResource Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Internal Server Error” 500 response code, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt277\">HTTP Response Codes</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt481\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt523\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1084\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1176\">500 (“Internal Server Error”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ISO 8859-1 encoding, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt864\">Encoding Issues</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    itemsPerPage element (OpenSearch), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt827\">OpenSearch</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>J</h3>\n  <dl>\n   <dt>\n    JAR files, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1058\">Compiling, running, and testing</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Java, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt162\">Java: HttpClient</a>, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt979\">From AJAX to Ajax</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt211\">Java: javax.xml, Xerces, or XMLPull</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    java.net.HttpURLConnection HTTP client, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt164\">Java: HttpClient</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    java.net.URL object, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt165\">Java: HttpClient</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    JavaScript, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt174\">JavaScript: XMLHttpRequest</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Ajax and, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt977\">From AJAX to Ajax</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      on Demand, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1018\">JavaScript on Demand</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XML parsers, \n      <a class=\"indexterm\" href=\"ch02.html#ch02_javascriptxml\">JavaScript: responseXML</a>–\n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt248\">JSON Parsers: Handling Serialized Data</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    JavaScript Object Notation (see JSON)\n   </dt>\n   <dd></dd>\n   <dt>\n    javax.xml.* package, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt214\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    javax.xml.stream package, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt219\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    jbucket, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt111\">Wrappers, WADL, and ActiveResource</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Jetty, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1045\">Restlet</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    JSON (JavaScript Object Notation), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt30\">Kinds of Things on the Programmable Web</a>, \n    <a class=\"indexterm\" href=\"ch02.html#ch02_json\">JSON Parsers: Handling Serialized Data</a>–\n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt249\">JSON Parsers: Handling Serialized Data</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt445\">Representing the List of Planets</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt837\">JSON</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Ajax and, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1001\">JSON</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      bookmarks, representing, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt596\">Design the Representation(s) Accepted from the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      encoding and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt871\">The character encoding of a JSON document</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    json Ruby gem, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt247\">JSON Parsers: Handling Serialized Data</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>K</h3>\n  <dl>\n   <dt>\n    key-value pairs, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt591\">Design the Representation(s) Accepted from the Client</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt834\">Form-Encoded Key-Value Pairs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    keys (S3), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt261\">A Few Words About Objects</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>L</h3>\n  <dl>\n   <dt>\n    language (natural) description, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt644\">Natural-Language Service Description</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Last-Modified HTTP header, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt138\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt467\">Conditional HTTP GET</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt611\">What’s Supposed to Happen?</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1218\">Last-Modified</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      conditional GET and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt629\">Conditional GET</a>, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt754\">Conditional GET</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    LBYL (Look-Before-You-Leap) requests, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt774\">Look-Before-You-Leap Requests</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Length Required” 411 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1157\">411 (“Length Required”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    li HTML tag, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt797\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    libcurl, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt173\">PHP: libcurl</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    libgmail library, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt973\">Ajax Applications as REST Clients</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    libopenssl-ruby, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt151\">Ruby: rest-open-uri and net/http</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    libraries\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      HTTP, \n      <a class=\"indexterm\" href=\"ch02.html#ch02_libs\">Making the Request: HTTP Libraries</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, using, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt318\">Using the S3 Client Library</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      standard, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt15\">The Programmable Web and Its Inhabitants</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    libwww-perl (LWP), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt189\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    libxml2 library, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt201\">Ruby: REXML, I Guess</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      PHP XML parsers and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt228\">PHP</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    limit parameter, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt632\">The ApplicationController</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    link tag, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt923\">XHTML 4 links</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    links, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt287\">The Bucket List</a>, \n    <a class=\"indexterm\" href=\"ch04.html#ch04_links\">Links and Connectedness</a>–\n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt394\">Links and Connectedness</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      hypermedia and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt916\">Hypermedia Technologies</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      resources to existing resources, \n      <a class=\"indexterm\" href=\"ch06.html#ch06_buddyholly\">Link This Resource to Existing Resources</a>–\n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt514\">Link This Resource to Existing Resources</a>, \n      <a class=\"indexterm\" href=\"ch06.html#ch06_linkxxx\">Link This Resource to Existing Resources</a>–\n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt540\">What’s Supposed to Happen?</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3 clients and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt695\">Why Connectedness Matters</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XHTML 4, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt922\">XHTML 4 links</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Linux, installing net/https library, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt149\">Ruby: rest-open-uri and net/http</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Lisp, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt184\">Other Languages</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt237\">Other Languages</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Location response header, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt771\">Default caching rules</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1114\">3xx: Redirection</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1219\">Location</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Look-Before-You-Leap (LBYL) requests, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt773\">Look-Before-You-Leap Requests</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Lovett, Chris, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt225\">C#: System.Xml.XmlReader</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Low REST, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt96\">Leftover Terminology</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    LWP (libwww-perl), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt188\">Other Languages</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>M</h3>\n  <dl>\n   <dt>\n    Max-Forwards header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1220\">Max-Forwards</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    media types, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt43\">HTTP: Documents in Envelopes</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    members (APP), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt898\">Collections</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    metadata, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt383\">Representations</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    method information, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt45\">Method Information</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Method Not Allowed” 405 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1144\">405 (“Method Not Allowed”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    methods, \n    <a class=\"indexterm\" href=\"ch01.html#ch01_methods\">Method Information</a>–\n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt57\">Method Information</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt270\">Resources</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    microformats with XHMTL, \n    <a class=\"indexterm\" href=\"ch09.html#ch09_micro\">XHTML with Microformats</a>–\n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt820\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    model classes, \n    <a class=\"indexterm\" href=\"ch07.html#ch07_modelclasses\">Model Code</a>–\n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt640\">The Bookmark Model</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Moved Permanently” 301 response code, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt884\">PUT</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1086\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1118\">301 (“Moved Permanently”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Multi-Status” 207 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1112\">207 (“Multi-Status”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Multiple Choices” 300 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1116\">300 (“Multiple Choices”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    MySQL, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt556\">Figuring Out the Data Set</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>N</h3>\n  <dl>\n   <dt>\n    names for resources, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_names\">Name the Resources</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt442\">URI Recap</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    natural-language description, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt643\">Natural-Language Service Description</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    .NET Common Language Runtime (CLR), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt167\">C#: System.Web.HTTPWebRequest</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt222\">C#: System.Xml.XmlReader</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    net/http library, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt148\">Ruby: rest-open-uri and net/http</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Net::HTTP class, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt156\">Ruby: rest-open-uri and net/http</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt193\">Processing the Response: XML Parsers</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    NetworkCredential, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt171\">C#: System.Web.HTTPWebRequest</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Nielsen, Jakob, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt723\">Permanent URIs Versus Readable URIs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “No Content” 204 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1108\">204 (“No Content”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Noelios Restlet Engine (NRE), \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1043\">Restlet</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Non-Authoritative Information” 203 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1106\">203 (“Non-Authoritative Information”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Not Acceptable” 406 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1147\">406 (“Not Acceptable”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Not Found” 404 response code, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt279\">HTTP Response Codes</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt471\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt623\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1088\">Three to Seven Status Codes: The Bare Minimum</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1142\">404 (“Not Found”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt888\">PUT</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “Not Implemented” 501 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1178\">501 (“Not Implemented”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Not Modified” 304 response code, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt758\">Conditional GET</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1124\">304 (“Not Modified”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Nottingham, Mark, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt912\">POST Once Exactly</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    NRE (Noelios Restlet Engine), \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1044\">Restlet</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>O</h3>\n  <dl>\n   <dt>\n    object (RDF assertion), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt842\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    object-oriented design of S3, \n    <a class=\"indexterm\" href=\"ch03.html#ch03_oods3\">Object-Oriented Design of S3</a>–\n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt262\">What If S3 Was a Standalone Library?</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    object-relational mapping (ORM), \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1064\">Create the Data Model</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    objects, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt24\">The Programmable Web and Its Inhabitants</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt258\">Object-Oriented Design of S3</a>, \n      <a class=\"indexterm\" href=\"ch03.html#ch03_s3objects\">The S3 Object</a>–\n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt299\">The S3 Object</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “OK” 200 response code, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt275\">HTTP Response Codes</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt463\">What’s Supposed to Happen?</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt477\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt886\">PUT</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1100\">200 (“OK”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      modifying resources, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt610\">What’s Supposed to Happen?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    open-uri library, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt145\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt194\">Processing the Response: XML Parsers</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    OpenSearch, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt825\">OpenSearch</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Method Not Allowed” 405 response code, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt911\">POST Once Exactly</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    OPTIONS method, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt130\">Making the Request: HTTP Libraries</a>, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt401\">HEAD and OPTIONS</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      uniform interface and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt674\">The Uniform Interface</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    org.w3c.dom.* package, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt215\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    org.xml.sax.* package, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt216\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ORM (object-relational mapping), \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1065\">Create the Data Model</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    outgoing representations, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt714\">Outgoing Representations</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    overloaded POST, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt405\">Overloaded POST: The not-so-uniform interface</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt681\">Overloading POST</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      PUT/DELETE, faking, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt780\">Faking PUT and DELETE</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      safety and idempotence, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt676\">Safety and Idempotence</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      URI design and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt711\">URI Design</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>P</h3>\n  <dl>\n   <dt>\n    params parameter, using list item resources and, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt631\">param[:id] for things that aren’t IDs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Park Place, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt342\">Parting Words</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    parsers (XML), \n    <a class=\"indexterm\" href=\"ch02.html#ch02_parsersxml\">Processing the Response: XML Parsers</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Partial Content” 206 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1110\">206 (“Partial Content”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    path variables\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      designing URIs, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt707\">URI Design</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      encoding hierarchy into, \n      <a class=\"indexterm\" href=\"ch05.html#ch05_pathvariables\">Encode Hierarchy into Path Variables</a>–\n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt434\">Scale</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    paths (URI), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt36\">HTTP: Documents in Envelopes</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Payment Required” 402 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1138\">402 (“Payment Required”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Perl, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt187\">Other Languages</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt239\">Other Languages</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    permanent URIs, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt720\">Permanent URIs Versus Readable URIs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    PHP, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt172\">PHP: libcurl</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      XML parsers, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt226\">PHP</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Pilgrim, Mark, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt741\">WSSE username token</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    places as resources, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt431\">Split the Data Set into Resources</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    PNG format, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt448\">Representing Maps and Points on Maps</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    POE (POST Once Exactly), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt909\">POST Once Exactly</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    POE request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1243\">POE</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    POE-Links header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1244\">POE-Links</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    POST method, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt48\">Method Information</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt127\">Making the Request: HTTP Libraries</a>, \n    <a class=\"indexterm\" href=\"ch04.html#ch04_post\">POST</a>–\n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt406\">Overloaded POST: The not-so-uniform interface</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt535\">Expose a Subset of the Uniform Interface</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ActiveResource clients and, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt336\">An ActiveResource Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      APP resources and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt904\">Summary</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      caching and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt768\">Default caching rules</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      objects, creating, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt575\">The Bookmarks Controller</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Once Exactly (POE), \n      <a class=\"indexterm\" href=\"ch09.html#ch09_POST\">POST Once Exactly</a>–\n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt913\">POST Once Exactly</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      overloading, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt404\">Overloaded POST: The not-so-uniform interface</a>, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt677\">Safety and Idempotence</a>, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt680\">Overloading POST</a>, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt712\">URI Design</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      resources, creating/appending, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt895\">POST for creating a new resource</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Ruby controllers and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1034\">Resources, Controllers, and Views</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt267\">Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      subordinate resources, creating, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt537\">Design the Representation(s) Accepted from the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      uniform interface and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt673\">The Uniform Interface</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      user controllers and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt564\">The User Controller</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      versus PUT, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt679\">New Resources: PUT Versus POST</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      web applications and web services and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1040\">Web Applications as Web Services</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    postNewAtomMember method (Atom), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt936\">Describing an APP collection</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Pragma header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1221\">Pragma</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Precondition Failed” 412 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1159\">412 (“Precondition Failed”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    prepackaged control flows, \n    <a class=\"indexterm\" href=\"ch09.html#ch09_prepackagedcontrolflows\">Prepackaged Control Flows</a>–\n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt915\">POST Once Exactly</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    privacy (user accounts), \n    <a class=\"indexterm\" href=\"ch06.html#ch06_privacy\">Authentication, Authorization, Privacy, and Trust</a>–\n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt501\">Authentication, Authorization, Privacy, and Trust</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    private access policy, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt309\">Setting Access Policy</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    programmable web, \n    <a class=\"indexterm\" href=\"ch01.html#ch01_progweb\">The Programmable Web and Its Inhabitants</a>–\n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt97\">Leftover Terminology</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      technologies on, \n      <a class=\"indexterm\" href=\"ch01.html#ch01_tech\">Technologies on the Programmable Web</a>–\n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt89\">WADL</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Prototype, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1010\">Prototype</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Proxy Authentication Required” 407 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1149\">407 (“Proxy Authentication Required”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    proxy caches, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt359\">Addressability</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Proxy-Authenticate header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1222\">Proxy-Authenticate</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Proxy-Authorization header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1223\">Proxy-Authorization</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ProxyPass, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1015\">Request Proxying</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    public-read access policy, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt310\">Setting Access Policy</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    public-write access policy, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt311\">Setting Access Policy</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    pull parsers, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt200\">Processing the Response: XML Parsers</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    PUT method, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt46\">Method Information</a>, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt398\">GET, PUT, and DELETE</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ActiveResource clients and, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt337\">An ActiveResource Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      APP resources and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt905\">Summary</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      caching and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt767\">Default caching rules</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      database-backed control flow and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt880\">PUT</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      faking, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt778\">Faking PUT and DELETE</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      HTTP libraries and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt128\">Making the Request: HTTP Libraries</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      overloading\n     </dt>\n     <dd>\n      <dl>\n       <dt>\n        PUT/DELETE, faking, \n        <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt781\">Faking PUT and DELETE</a>\n       </dt>\n       <dd></dd>\n      </dl>\n     </dd>\n     <dt>\n      Ruby controllers and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1035\">Resources, Controllers, and Views</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt268\">Resources</a>, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt297\">The S3 Object</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3::Bucket#put, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt290\">The Bucket</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      safety and idempotence, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt409\">Safety and Idempotence</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      uniform interface and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt671\">The Uniform Interface</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      user controllers and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt567\">The User Controller</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      UsersController and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt633\">The UsersController</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      versus POST, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt403\">Creating subordinate resources</a>, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt678\">New Resources: PUT Versus POST</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      web applications and web services and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1038\">Web Applications as Web Services</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Python\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      clients, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt339\">A Python Client for the Simple Service</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      httplib2, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt157\">Python: httplib2</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XML parsers, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt205\">Python: ElementTree</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>Q</h3>\n  <dl>\n   <dt>\n    query strings, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt589\">Design the Representation(s) Accepted from the Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    query variables, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_query\">Algorithmic Resource? Use Query Variables</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt440\">Algorithmic Resource? Use Query Variables</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      URI design and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt710\">URI Design</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>R</h3>\n  <dl>\n   <dt>\n    Rails, \n    <a class=\"indexterm\" href=\"ch12.html#ch12_rails\">Ruby on Rails</a>–\n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1077\">Conclusion</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Range request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1224\">Range</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    RDF (Resource Description Framework), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt838\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    read-only resource-oriented services, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_readonlyresource\">Designing Read-Only Resource-Oriented Services</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt484\">Conclusion</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    read-only web services, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt78\">REST-RPC Hybrid Architectures</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    read/write resource-oriented services, \n    <a class=\"indexterm\" href=\"ch06.html#ch06_readwriteresource\">Designing Read/Write Resource-Oriented Services</a>–\n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt544\">A Look Back at the Map Service</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    readable URIs, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt721\">Permanent URIs Versus Readable URIs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    recent bookmark controller, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt579\">The Recent Bookmarks Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    redirect loops, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt144\">Optional Features</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    redirection, \n    <a class=\"indexterm\" href=\"apb.html#appa_redirection\">3xx: Redirection</a>–\n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1131\">307 (“Temporary Redirect”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Referer request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1225\">Referer</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    regular expressions (Django), \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1070\">The bookmark list view</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rel attribute (link tag), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt925\">XHTML 4 links</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rel HTML attributes, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt800\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rel-license microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt807\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rel-nofollow microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt808\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rel-tag microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt809\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    reliable messaging, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt960\">Reliable Messaging</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Remote Procedure Calls (RPC), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt82\">URI</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    repetition model (XHTML), \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt459\">Link the Resources to Each Other</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    representations, \n    <a class=\"indexterm\" href=\"ch04.html#ch04_representations\">Representations</a>–\n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt387\">Deciding Between Representations</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt651\">Resource-Oriented Basics</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      addressability and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt658\">Representations Should Be Addressable</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      designing, \n      <a class=\"indexterm\" href=\"ch05.html#ch05_representations\">Design Your Representations</a>–\n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt456\">Representing Lists of Search Results</a>, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt509\">Design the Representation(s) to Be Served to the Client</a>, \n      <a class=\"indexterm\" href=\"ch07.html#ch07_rep1\">Design the Representation(s) Accepted from the Client</a>–\n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt601\">Design the Representation(s) Served to the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      entity-body, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt40\">HTTP: Documents in Envelopes</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      formats, \n      <a class=\"indexterm\" href=\"ch09.html#ch09_repformats\">Representation Formats</a>–\n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt872\">The character encoding of a JSON document</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      incoming, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1037\">Incoming Representations</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      outgoing, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1036\">Outgoing Representations</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      outgoing/incoming, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt713\">Outgoing Representations</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt286\">The Bucket List</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “Request Entity Too Large” 413 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1161\">413 (“Request Entity Too Large”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    request headers, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt37\">HTTP: Documents in Envelopes</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    request signing, \n    <a class=\"indexterm\" href=\"ch03.html#ch03_requestsigning\">Request Signing and Access Control</a>–\n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt313\">Setting Access Policy</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Request Timeout” 408 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1151\">408 (“Request Timeout”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Request-URI Too Long” 414 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1163\">414 (“Request-URI Too Long”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Requested Range Not Satisfiable” 416 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1167\">416 (“Requested Range Not Satisfiable”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    resource\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      design, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt422\">Resource Design</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      forms, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt919\">Hypermedia Technologies</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      state, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt376\">Application State Versus Resource State</a>, \n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt444\">The Representation Talks About the State of the Resource</a>, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt663\">State and Statelessness</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Resource Description Framework (RDF), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt839\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Resource-Oriented Architecture (ROA), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt63\">RESTful, Resource-Oriented Architectures</a>, \n    <a class=\"indexterm\" href=\"ch04.html#ch04_resourceoriented\">The Resource-Oriented Architecture</a>–\n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt418\">That’s It!</a>, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_resourceoriented\">REST and ROA Best Practices</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt791\">What Problem Does this Solve?</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      addressability, \n      <a class=\"indexterm\" href=\"ch04.html#ch04_rexxx\">Addressability</a>–\n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt366\">Addressability</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      basics, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt649\">Resource-Oriented Basics</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      procedure, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt653\">The Generic ROA Procedure</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      read/write, designing, \n      <a class=\"indexterm\" href=\"ch06.html#ch06_resourceoriented\">Designing Read/Write Resource-Oriented Services</a>–\n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt543\">A Look Back at the Map Service</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      representations and, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt382\">Representations</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      URIs, \n      <a class=\"indexterm\" href=\"ch04.html#ch04_roauris\">URIs</a>–\n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt356\">The Relationship Between URIs and Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      versus Big Web Services, \n      <a class=\"indexterm\" href=\"ch10.html#ch10_resource\">The Resource-Oriented Architecture Versus Big Web Services</a>–\n      <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt970\">Conclusion</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    resources, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt264\">Resources</a>, \n    <a class=\"indexterm\" href=\"ch06.html#ch06_oneresource\">Designing Read/Write Resource-Oriented Services</a>–\n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt542\">A Look Back at the Map Service</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt650\">Resource-Oriented Basics</a>, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1031\">Resources, Controllers, and Views</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      connecting, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt603\">Connect Resources to Each Other</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      data sets, splitting into, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt530\">Split the Data Set into Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      design, \n      <a class=\"indexterm\" href=\"ch07.html#ch07_resources\">Resource Design</a>–\n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt585\">Implementation: The routes.rb File</a>, \n      <a class=\"indexterm\" href=\"ch08.html#ch08_rd\">Resource Design</a>–\n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt704\">When In Doubt, Make It a Resource</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Django, implementing views, \n      <a class=\"indexterm\" href=\"ch12.html#ch12_Dresources\">Implement Resources as Django Views</a>–\n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1075\">Further directions</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      relationships between, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt697\">Relationships Between Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      URIs, naming resources with, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt532\">Name the Resources with URIs</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      user accounts, \n      <a class=\"indexterm\" href=\"ch06.html#ch06_resusr\">User Accounts as Resources</a>–\n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt526\">What Might Go Wrong?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    resources, defining, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1066\">Define Resources and Give Them URIs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    response codes (HTTP), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt41\">HTTP: Documents in Envelopes</a>, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt273\">HTTP Response Codes</a>, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_responsecode\">The HTTP Response</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt483\">Conclusion</a>, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt999\">Handling the Response</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1081\">The HTTP Response Code Top 42</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt892\">PUT</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    responseXML parser (JavaScript), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt231\">JavaScript: responseXML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    REST (Representational State Transfer), sending representations and, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt665\">State and Statelessness</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rest-open-uri library, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt147\">Ruby: rest-open-uri and net/http</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rest-open-uri, installing, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt154\">Ruby: rest-open-uri and net/http</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Restlet (Java), \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt546\">A Service Implementation</a>, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1024\">Frameworks for RESTful Services</a>, \n    <a class=\"indexterm\" href=\"ch12.html#ch12_restlet\">Restlet</a>–\n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1062\">Conclusion</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      services, writing, \n      <a class=\"indexterm\" href=\"ch12.html#ch12_restletwriting\">Writing Restlet Services</a>–\n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1060\">Compiling, running, and testing</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Retry-After response header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1226\">Retry-After</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rev attribute (link tag), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt926\">XHTML 4 links</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    rev HTML attributes, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt801\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    REXML, \n    <a class=\"indexterm\" href=\"ch02.html#ch02_rexml\">Ruby: REXML, I Guess</a>–\n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt204\">Python: ElementTree</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    REXML::document parser, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt155\">Ruby: rest-open-uri and net/http</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ROA (see Resource-Oriented Architecture)\n   </dt>\n   <dd></dd>\n   <dt>\n    routing (Rails), \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1027\">Routing</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    RPC (Remote Procedure Calls), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt81\">URI</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    RPC-style architectures, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt69\">RPC-Style Architectures</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Ruby\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Amazon Web Services and, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt20\">The Programmable Web and Its Inhabitants</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      HTTP client libraries, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt146\">Ruby: rest-open-uri and net/http</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      on Rails, \n      <a class=\"indexterm\" href=\"ch12.html#ch12_rubyonrails\">Ruby on Rails</a>–\n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1041\">The Rails/ROA Design Procedure</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XML parsers and, \n      <a class=\"indexterm\" href=\"ch02.html#ch02_rubyxmlparsers\">Ruby: REXML, I Guess</a>–\n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt203\">Python: ElementTree</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>S</h3>\n  <dl>\n   <dt>\n    S3 (Simple Storage Service), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt23\">The Programmable Web and Its Inhabitants</a>, \n    <a class=\"indexterm\" href=\"ch03.html#ch03_s3\">Introducing the Simple Storage Service</a>–\n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt345\">Parting Words</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      addressability, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt360\">Addressability</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      client, \n      <a class=\"indexterm\" href=\"ch03.html#ch03_s3client\">An S3 Client</a>–\n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt301\">The S3 Object</a>\n     </dt>\n     <dd>\n      <dl>\n       <dt>\n        library, using, \n        <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt321\">Using the S3 Client Library</a>\n       </dt>\n       <dd></dd>\n      </dl>\n     </dd>\n     <dt>\n      connectedness and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt692\">Why Connectedness Matters</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      request signing and access control, \n      <a class=\"indexterm\" href=\"ch03.html#ch03_s3req\">Request Signing and Access Control</a>–\n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt316\">Setting Access Policy</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    S3::Bucket#delete method, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt289\">The Bucket</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    S3::Bucket#put method, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt288\">The Bucket</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    s3sh (command shell for Ruby), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt21\">The Programmable Web and Its Inhabitants</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt112\">Wrappers, WADL, and ActiveResource</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    safety (HTTP methods), \n    <a class=\"indexterm\" href=\"ch04.html#ch04_safety\">Safety and Idempotence</a>–\n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt414\">Why safety and idempotence matter</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    SAX parsers, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt196\">Processing the Response: XML Parsers</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    scoping information, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt59\">Scoping Information</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      encoding hierarchy into path variables and, \n      <a class=\"indexterm\" href=\"ch05.html#ch05_scoping\">Encode Hierarchy into Path Variables</a>–\n      <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt435\">Scale</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    script tag, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1022\">Dynamically writing the script tag</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    search results, representing lists of, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_search\">Representing Lists of Search Results</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt455\">Representing Lists of Search Results</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Secret Access Key” (Amazon), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt283\">An S3 Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    secret keys (S3 requests), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt303\">Request Signing and Access Control</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Secure Socket Layer (see SSL)\n   </dt>\n   <dd></dd>\n   <dt>\n    security, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt952\">Security</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “See Other” 303 response code, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt473\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1122\">303 (“See Other”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    SELECT statement (SQL), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt331\">An ActiveResource Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    semicolons (;) scoping information, \n    <a class=\"indexterm\" href=\"ch05.html#ch05_semicolons\">No Hierarchy? Use Commas or Semicolons</a>–\n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt436\">Scale</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    server-side errors, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1174\">5xx: Server-Side Error</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    service documents (APP), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt899\">Service document</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Service Unavailable” 503 response code, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt479\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt525\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1182\">503 (“Service Unavailable”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    service versioning, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt717\">Service Versioning</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Service-Oriented Architecture (see SOA)\n   </dt>\n   <dd></dd>\n   <dt>\n    Service-Trampled REST (STREST), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt93\">Leftover Terminology</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    services, \n    <a class=\"indexterm\" href=\"ch09.html#ch09_services\">The Building Blocks of Services</a>–\n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt940\">Is WADL evil?</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Restlet, writing, \n      <a class=\"indexterm\" href=\"ch12.html#ch12_services\">Writing Restlet Services</a>–\n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1061\">Compiling, running, and testing</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    session affinity, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt379\">Application State Versus Resource State</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    session replication, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt378\">Application State Versus Resource State</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    sessions (HTTP), \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt372\">Statelessness</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Set-Cookie response header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1245\">Set-Cookie</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    signatures, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt954\">Security</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Simple Storage Service (S3), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt22\">The Programmable Web and Its Inhabitants</a>, \n    <a class=\"indexterm\" href=\"ch03.html#ch03_simple\">Introducing the Simple Storage Service</a>–\n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt346\">Parting Words</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      addressability, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt361\">Addressability</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      client, \n      <a class=\"indexterm\" href=\"ch03.html#ch03_client\">An S3 Client</a>–\n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt300\">The S3 Object</a>\n     </dt>\n     <dd>\n      <dl>\n       <dt>\n        library, using, \n        <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt322\">Using the S3 Client Library</a>\n       </dt>\n       <dd></dd>\n      </dl>\n     </dd>\n     <dt>\n      connectedness and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt693\">Why Connectedness Matters</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      request signing and access control, \n      <a class=\"indexterm\" href=\"ch03.html#ch03_sssreq\">Request Signing and Access Control</a>–\n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt315\">Setting Access Policy</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    simple-http (Common Lisp), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt185\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Slug request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1246\">Slug</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Snell, James, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt349\">Resource-Oriented What Now?</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    SOA (Service-Oriented Architecture), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt90\">Leftover Terminology</a>, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt967\">BPEL, ESB, and SOA</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    SOAP, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt54\">Method Information</a>, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt84\">SOAP</a>, \n    <a class=\"indexterm\" href=\"ch10.html#ch10_soap\">SOAP</a>–\n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt948\">The Resource-Oriented Alternative</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      POST method, overloading, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt683\">Overloading POST</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      REST as a competitor to, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt91\">Leftover Terminology</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3 and, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt271\">Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      security and, \n      <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt953\">Security</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    SQL databases, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt330\">An ActiveResource Client</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt874\">Database-Backed Control Flow</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    square brackets ([ ]), using XPath, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt104\">Web Services Are Web Sites</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    SSL (Secure Sockets Layer), \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt959\">The Resource-Oriented Alternative</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      certificates, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt124\">Making the Request: HTTP Libraries</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    standard libraries, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt16\">The Programmable Web and Its Inhabitants</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    standardization, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt646\">Description Through Standardization</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    startindex element (OpenSearch), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt828\">OpenSearch</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    state (see statelessness)\n   </dt>\n   <dd></dd>\n   <dt>\n    statelessness, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt661\">State and Statelessness</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt689\">Why Statelessness Matters</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      application state versus resource state, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt374\">Application State Versus Resource State</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      ROA, \n      <a class=\"indexterm\" href=\"ch04.html#ch04_statelessness\">Statelessness</a>–\n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt380\">Application State Versus Resource State</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    STREST (Service-Trampled REST), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt94\">Leftover Terminology</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    subject (RDF assertion), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt841\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    subordinate resources, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt534\">Expose a Subset of the Uniform Interface</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      creating, \n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt402\">Creating subordinate resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      HTTP POST requests, creating with, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt536\">Design the Representation(s) Accepted from the Client</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Sun Web Services Developer Pack, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt217\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    SVG format, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt449\">Representing Maps and Points on Maps</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt830\">SVG</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Switching Protocols” 101 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1097\">101 (“Switching Protocols”)</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>T</h3>\n  <dl>\n   <dt>\n    table HTML tag, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt799\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    tags, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt115\">del.icio.us: The Sample Application</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      management for, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt584\">Remodeling the REST Way</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    TagSoup XML parser, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt220\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    TCP/IP sockets, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt117\">What the Sample Clients Do</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    TE request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1227\">TE</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Temporary Redirect” 307 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1130\">307 (“Temporary Redirect”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    terminology of web services, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt33\">Kinds of Things on the Programmable Web</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    text/html media, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt793\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    text/xml media, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt870\">XML and HTTP: Battle of the encodings</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    TLS (Transport Layer Security), \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt956\">The Resource-Oriented Alternative</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    totalResults element (OpenSearch), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt826\">OpenSearch</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Totty, Brian, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt762\">Caching</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    to_xml (Rails), \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt598\">Design the Representation(s) Served to the Client</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      connecting resources and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt604\">Connect Resources to Each Other</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Framework-specific serialization formats, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt849\">Framework-Specific Serialization Formats</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    TRACE method, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt131\">Making the Request: HTTP Libraries</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Trailer response header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1228\">Trailer</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    transactions, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt703\">Transactions</a>, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt962\">Transactions</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Transfer-Encoding header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1230\">Transfer-Encoding</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Transport Layer Security (TLS), \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt957\">The Resource-Oriented Alternative</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    tree-style parsers, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt197\">Processing the Response: XML Parsers</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    triple (RDF assertion), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt840\">RDF and RDFa</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    trust (user accounts), \n    <a class=\"indexterm\" href=\"ch06.html#ch06_trust\">Authentication, Authorization, Privacy, and Trust</a>–\n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt500\">Authentication, Authorization, Privacy, and Trust</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>U</h3>\n  <dl>\n   <dt>\n    UDDI, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt951\">UDDI</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    ul HTML tag, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt796\">XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Unauthorized” 401 response code, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt735\">Basic authentication</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Unauthorized” 401 response code, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt520\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt616\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1136\">401 (“Unauthorized”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    unauthorized access, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt614\">What Might Go Wrong?</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Unicode, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt865\">Encoding Issues</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      parsing XML and, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt209\">Python: ElementTree</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Uniform class (Restlet), \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1049\">Basic Concepts</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    uniform interface, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt347\">The Resource-Oriented Architecture</a>, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt415\">Why the Uniform Interface Matters</a>, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_uniform\">The Uniform Interface</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt686\">Overloading POST</a>, \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt690\">Why the Uniform Interface Matters</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      exposing subsets of, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt505\">Expose a Subset of the Uniform Interface</a>, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt533\">Expose a Subset of the Uniform Interface</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Universal Encoding Detector, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt866\">Encoding Issues</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Universal Product Codes (UPCs), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt72\">RPC-Style Architectures</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Universal Resource Identifier (see URIs)\n   </dt>\n   <dd></dd>\n   <dt>\n    “Unsupported Media Type” 415 response code, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt516\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt625\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1165\">415 (“Unsupported Media Type”)</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      database-backed control flow, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt876\">Database-Backed Control Flow</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “Unused” 306 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1128\">306: Unused</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UPCs (Universal Product Codes), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt73\">RPC-Style Architectures</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UPDATE statement (SQL), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt333\">An ActiveResource Client</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Upgrade request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1231\">Upgrade</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    URI Templating, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt512\">Link This Resource to Existing Resources</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    URIs (Universal Resource Identifier), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt18\">The Programmable Web and Its Inhabitants</a>, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt75\">RPC-Style Architectures</a>, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt80\">URI</a>, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt441\">URI Recap</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      addressability and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt656\">Addressability</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      bookmarks and, \n      <a class=\"indexterm\" href=\"ch02.html#ch02_book\">del.icio.us: The Sample Application</a>–\n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt120\">What the Sample Clients Do</a>, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt572\">The Bookmarks Controller</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      controller, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt578\">The URI Controller</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      design, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt706\">URI Design</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Django and, \n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1067\">Define Resources and Give Them URIs</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      permanent versus readable, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt722\">Permanent URIs Versus Readable URIs</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      resources, naming, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt504\">Name the Resources with URIs</a>, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt531\">Name the Resources with URIs</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      ROAs and, \n      <a class=\"indexterm\" href=\"ch04.html#ch04_uris\">URIs</a>–\n      <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt357\">The Relationship Between URIs and Resources</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      signing, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt304\">Signing a URI</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      templates, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt921\">URI Templates</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      using maximum length workarounds, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt685\">Overloading POST</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      web clients, writing, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt101\">Web Services Are Web Sites</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    “URL as UI” (Nielsen, Jakob), \n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt724\">Permanent URIs Versus Readable URIs</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    urllib2 HTTP client, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt159\">Python: httplib2</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt160\">Python: httplib2</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    URLs (see URIs)\n   </dt>\n   <dd></dd>\n   <dt>\n    US-ASCII encoding, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt862\">Encoding Issues</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    “Use Proxy” 305 response code, \n    <a class=\"indexterm\" href=\"apb.html#I_indexterm_tt1126\">305 (“Use Proxy”)</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    user accounts, \n    <a class=\"indexterm\" href=\"ch06.html#ch06_useraccounts\">User Accounts as Resources</a>–\n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt527\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt582\">Remodeling the REST Way</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      linking resources, \n      <a class=\"indexterm\" href=\"ch06.html#ch06_linking\">Link This Resource to Existing Resources</a>–\n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt513\">Link This Resource to Existing Resources</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    user controllers, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt561\">The User Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    user tags controller, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt576\">The User Tags Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    User-Agent request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1233\">User-Agent</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UsersController, \n    <a class=\"indexterm\" href=\"ch07.html#ch07_userscontroller\">The UsersController</a>–\n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt635\">The UsersController</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UsersController#create Rails method, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt565\">The User Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UsersController#destroy Rails method, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt570\">The User Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UsersController#index Rails method, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt563\">The User Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UsersController#show Rails method, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt566\">The User Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UsersController#update Rails method, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt568\">The User Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    UTF-8 encoding, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt861\">Encoding Issues</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>V</h3>\n  <dl>\n   <dt>\n    values (S3), \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt260\">A Few Words About Objects</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Vary response header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1234\">Vary</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    VBScript, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt980\">From AJAX to Ajax</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    vCard, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt855\">Ad Hoc XHTML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Via header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1236\">Via</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    views, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1030\">Resources, Controllers, and Views</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Django, implementing resources as, \n      <a class=\"indexterm\" href=\"ch12.html#ch12_views\">Implement Resources as Django Views</a>–\n      <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1073\">Further directions</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    VirturalHost class (Restlet), \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1051\">Basic Concepts</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    VoteLinks, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt810\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>W</h3>\n  <dl>\n   <dt>\n    W-* technologies, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt85\">WS-*</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    W3C’s HTML validator, \n    <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt573\">The Bookmarks Controller</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    WADL (Web Application Description Language), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt87\">WADL</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt109\">Wrappers, WADL, and ActiveResource</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt250\">Clients Made Easy with WADL</a>, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt323\">Clients Made Transparent with ActiveResource</a>, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt950\">The Resource-Oriented Alternative</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      hypermedia technologies and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt920\">Hypermedia Technologies</a>, \n      <a class=\"indexterm\" href=\"ch09.html#ch09_wadl\">WADL</a>–\n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt937\">Is WADL evil?</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    Warning response header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1237\">Warning</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Web Accelerator, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt412\">Why safety and idempotence matter</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Web Application Description Language (see WADL)\n   </dt>\n   <dd></dd>\n   <dt>\n    Web Hypertext Application Technology Working Group (WHATWG), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt932\">XHTML 5</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    web interfaces and applications, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_webapp\">Applications with a Web Interface</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt789\">Applications with No Web Interface</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    web service clients (see clients)\n   </dt>\n   <dd></dd>\n   <dt>\n    Web Service Description Language (see WSDL)\n   </dt>\n   <dd></dd>\n   <dt>\n    Web Services Developer Pack (Sun), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt218\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    WebDAV, \n    <a class=\"indexterm\" href=\"ch04.html#I_indexterm4_tt416\">Why the Uniform Interface Matters</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    WeblogsController class, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1028\">Routing</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    WHATWG (Web Hypertext Application Technology Working Group), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt933\">XHTML 5</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Windows-1252 encoding, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt863\">Encoding Issues</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    wrapper libraries, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt99\">Web Services Are Web Sites</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    wrappers, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt108\">Wrappers, WADL, and ActiveResource</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    WS-Addressing standard, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt32\">Kinds of Things on the Programmable Web</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    WS-ReliableMessaging, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt961\">Reliable Messaging</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    WS-Security Extension (see WSSE HTTP authentication)\n   </dt>\n   <dd></dd>\n   <dt>\n    WSDL (Web Service Description Language), \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt55\">Method Information</a>, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt86\">WSDL</a>, \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt949\">WSDL</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      POST method, overloading, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt684\">Overloading POST</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    WSSE HTTP authentication, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt141\">Optional Features</a>, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt493\">Authentication, Authorization, Privacy, and Trust</a>, \n    <a class=\"indexterm\" href=\"ch08.html#ch08_wssehttp\">WSSE username token</a>–\n    <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt745\">WSSE username token</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    WWW-Authenticate header, \n    <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt521\">What Might Go Wrong?</a>, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1239\">WWW-Authenticate</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      Basic authentication and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt731\">Basic authentication</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      Digest authentication and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt736\">Digest authentication</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      WSSE HTTP authentication and, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt739\">WSSE username token</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>X</h3>\n  <dl>\n   <dt>\n    x-amz-acl header, \n    <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt308\">Setting Access Policy</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    X-HTTP-Method-Override request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1247\">X-HTTP-Method-Override</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    X-WSSE request header, \n    <a class=\"indexterm\" href=\"apc.html#I_indexterm_tt1248\">X-WSSE</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Xerces, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt212\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XFN (XHTML Friends Network), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt811\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    xFolk microformat specification, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt819\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XHTML, \n    <a class=\"indexterm\" href=\"ch05.html#I_indexterm5_tt447\">Representing the List of Planets</a>, \n    <a class=\"indexterm\" href=\"ch09.html#ch09_xhtml\">XHTML</a>–\n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt803\">XHTML</a>, \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt930\">XHTML 5</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ad hoc, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt851\">Ad Hoc XHTML</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      microformats, \n      <a class=\"indexterm\" href=\"ch09.html#ch09_xmicro\">XHTML with Microformats</a>–\n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt821\">XHTML with Microformats</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XHTML 4, \n      <a class=\"indexterm\" href=\"ch09.html#ch09_xhtml4\">XHTML 4</a>–\n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt928\">Shortcomings of XHTML 4</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    XMDP (XHTML Meta Data Profiles), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt812\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XML, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt28\">Kinds of Things on the Programmable Web</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      ActiveRecord and, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt599\">Design the Representation(s) Served to the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      ad hoc vocabularies, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt857\">Other XML Standards and Ad Hoc Vocabularies</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      encodings and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt867\">XML and HTTP: Battle of the encodings</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      parsers, \n      <a class=\"indexterm\" href=\"ch02.html#ch02_xmlparsers\">Processing the Response: XML Parsers</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      representation of user accounts, \n      <a class=\"indexterm\" href=\"ch07.html#I_indexterm7_tt594\">Design the Representation(s) Accepted from the Client</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      SOAP, using, \n      <a class=\"indexterm\" href=\"ch10.html#ch10_xmlsoap\">SOAP</a>–\n      <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt947\">The Resource-Oriented Alternative</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XHTML and, \n      <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt795\">XHTML</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      XML-RPC requests and, \n      <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt74\">RPC-Style Architectures</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    XML for &lt;SCRIPT&gt;, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt232\">JavaScript: responseXML</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XML-RPC, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt71\">RPC-Style Architectures</a>, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt83\">XML-RPC</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      POST method, overloading, \n      <a class=\"indexterm\" href=\"ch08.html#I_indexterm8_tt682\">Overloading POST</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    xml.sax module (Python), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt210\">Python: ElementTree</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XML::LibXML::Reader module (Perl), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt244\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XML::SAX::PurePerl module (Perl), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt243\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XML::Simple module (Perl), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt242\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XML::XPath modules (Perl), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt241\">Other Languages</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XMLHttpRequest (JavaScript), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt175\">JavaScript: XMLHttpRequest</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt230\">JavaScript: responseXML</a>, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt974\">Ajax Applications as REST Clients</a>, \n    <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt991\">Making the Request</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      cross-browser issues and, \n      <a class=\"indexterm\" href=\"ch11.html#I_indexterm11_tt1007\">Cross-Browser Issues and Ajax Libraries</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n   <dt>\n    XMLPull, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt213\">Java: javax.xml, Xerces, or XMLPull</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    xml_parser_create function (PHP), \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt227\">PHP</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XOXO (Extensible Open XHTML Outlines), \n    <a class=\"indexterm\" href=\"ch09.html#I_indexterm9_tt813\">XHTML with Microformats</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    XPath, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt51\">Method Information</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt119\">What the Sample Clients Do</a>, \n    <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt198\">Processing the Response: XML Parsers</a>, \n    <a class=\"indexterm\" href=\"ch12.html#I_indexterm12_tt1054\">Writing Restlet Clients</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      exposition, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt102\">Web Services Are Web Sites</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      S3 and, \n      <a class=\"indexterm\" href=\"ch03.html#I_indexterm3_tt285\">The Bucket List</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n  </dl>\n </div>\n <div class=\"indexdiv\">\n  <h3>Y</h3>\n  <dl>\n   <dt>\n    YAGNI (You Aren’t Gonna Need It), \n    <a class=\"indexterm\" href=\"ch10.html#I_indexterm10_tt969\">Conclusion</a>\n   </dt>\n   <dd></dd>\n   <dt>\n    Yahoo! web services, \n    <a class=\"indexterm\" href=\"ch01.html#I_indexterm1_tt68\">RESTful, Resource-Oriented Architectures</a>\n   </dt>\n   <dd>\n    <dl>\n     <dt>\n      searching the Web with, \n      <a class=\"indexterm\" href=\"ch02.html#I_indexterm2_tt100\">Web Services Are Web Sites</a>\n     </dt>\n     <dd></dd>\n     <dt>\n      user accounts and, \n      <a class=\"indexterm\" href=\"ch06.html#I_indexterm6_tt487\">User Accounts as Resources</a>\n     </dt>\n     <dd></dd>\n    </dl>\n   </dd>\n  </dl>\n </div>\n</div>",
      "slug" : "index"
    }, {
      "title" : "About the Authors",
      "type" : "page",
      "htmlContent" : "<h2 class=\"title\">About the Authors</h2>\n<p>Leonard Richardson (<a href=\"http://www.crummy.com/\">http://www.crummy.com/</a>) is the author of the Ruby Cookbook (O'Reilly) and of several open source libraries, including Beautiful Soup. A California native, he currently lives in New York.</p>\n<div>\n <p>Sam Ruby is a prominent software developer who has made significant contributions to the many of the Apache Software Foundation's open source projects, and to the standardization of web feeds via his involvement with the Atom web feed standard and the popular Feed Validator web service.</p>\n <p>He currently holds a Senior Technical Staff Member position in the Emerging Technologies Group of IBM. He resides in Raleigh, North Carolina.</p>\n</div>",
      "slug" : "about-the-authors"
    }, {
      "title" : "Colophon",
      "type" : "page",
      "htmlContent" : "",
      "slug" : "colophon"
    }, {
      "title" : "Copyright",
      "type" : "page",
      "htmlContent" : "",
      "slug" : "copyright"
    } ]
  }, {
    "title" : "Preface",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Preface</h2>\n  </div>\n </div>\n</div>\n<div class=\"epigraph\" epub:type=\"epigraph\">\n <p>A complex system that works is invariably found to have evolved from a simple system that worked.</p>\n <div class=\"attribution\">\n  <span>—<span class=\"attribution\">John Gall<em class=\"citetitle\">Systemantics</em></span></span>\n </div>\n</div>\n<p>We wrote this book to tell you about an amazing new technology. It’s here, it’s hot, and it promises to radically change the way we write distributed systems. We’re talking about the World Wide Web.</p>\n<p>Okay, it’s not a new technology. It’s not as hot as it used to be, and from a technical standpoint it’s not incredibly amazing. But everything else is true. In 10 years the Web has changed the way we live, but it’s got more change left to give. The Web is a simple, ubiquitous, yet overlooked platform for distributed programming. The goal of this book is to pull out that change and send it off into the world.</p>\n<p>It may seem strange to claim that the Web’s potential for distributed programming has been overlooked. After all, this book competes for shelf space with any number of other books about web services. The problem is, most of today’s “web services” have nothing to do with the Web. In opposition to the Web’s simplicity, they espouse a heavyweight architecture for distributed object access, similar to COM or CORBA. Today’s “web service” architectures reinvent or ignore every feature that makes the Web successful.</p>\n<p>It doesn’t have to be that way. We know the technologies behind the Web can drive useful remote services, because those services exist and we use them every day. We know such services can scale to enormous size, because they already do. Consider the Google search engine. What is it but a remote service for querying a massive database and getting back a formatted response? We don’t normally think of web sites as “services,” because that’s programming talk and a web site’s ultimate client is a human, but services are what they are.</p>\n<p>Every web application—every web site—is a service. You can harness this power for programmable applications if you work with the Web instead of against it, if you don’t bury its unique power under layers of abstraction. It’s time to put the “web” back into “web services.”</p>\n<p>The features that make a web site easy for a web surfer to use also make a web service API easy for a programmer to use. To find the principles underlying the design of these services, we can just translate the principles for human-readable web sites into terms that make sense when the surfers are computer programs.</p>\n<p>That’s what we do in this book. Our goal throughout is to show the power (and, where appropriate, the limitations) of the basic web technologies: the HTTP application protocol, the URI naming standard, and the XML markup language. Our topic is the set of principles underlying the Web: Representational State Transfer, or REST. For the first time, we set down best practices for “RESTful” web services. We cut through the confusion and guesswork, replacing folklore and implicit knowledge with concrete advice.</p>\n<p>We introduce the Resource-Oriented Architecture (ROA), a commonsense set of rules for designing RESTful web services. We also show you the view from the client side: how you can write programs to consume RESTful services. Our examples include real-world RESTful services like Amazon’s Simple Storage Service (S3), the various incarnations of the Atom Publishing Protocol, and Google Maps. We also take popular services that fall short of RESTfulness, like the del.icio.us social bookmarking API, and rehabilitate them.</p>",
    "textContent" : "Preface\r\n\r\nA complex system that works is invariably found to have evolved from a simple system that worked.\r\n\r\n—John GallSystemantics\r\n\r\nWe wrote this book to tell you about an amazing new technology. It’s here, it’s hot, and it promises to radically change the way we write distributed systems. We’re talking about the World Wide Web.\r\n\r\nOkay, it’s not a new technology. It’s not as hot as it used to be, and from a technical standpoint it’s not incredibly amazing. But everything else is true. In 10 years the Web has changed the way we live, but it’s got more change left to give. The Web is a simple, ubiquitous, yet overlooked platform for distributed programming. The goal of this book is to pull out that change and send it off into the world.\r\n\r\nIt may seem strange to claim that the Web’s potential for distributed programming has been overlooked. After all, this book competes for shelf space with any number of other books about web services. The problem is, most of today’s “web services” have nothing to do with the Web. In opposition to the Web’s simplicity, they espouse a heavyweight architecture for distributed object access, similar to COM or CORBA. Today’s “web service” architectures reinvent or ignore every feature that makes the Web successful.\r\n\r\nIt doesn’t have to be that way. We know the technologies behind the Web can drive useful remote services, because those services exist and we use them every day. We know such services can scale to enormous size, because they already do. Consider the Google search engine. What is it but a remote service for querying a massive database and getting back a formatted response? We don’t normally think of web sites as “services,” because that’s programming talk and a web site’s ultimate client is a human, but services are what they are.\r\n\r\nEvery web application—every web site—is a service. You can harness this power for programmable applications if you work with the Web instead of against it, if you don’t bury its unique power under layers of abstraction. It’s time to put the “web” back into “web services.”\r\n\r\nThe features that make a web site easy for a web surfer to use also make a web service API easy for a programmer to use. To find the principles underlying the design of these services, we can just translate the principles for human-readable web sites into terms that make sense when the surfers are computer programs.\r\n\r\nThat’s what we do in this book. Our goal throughout is to show the power (and, where appropriate, the limitations) of the basic web technologies: the HTTP application protocol, the URI naming standard, and the XML markup language. Our topic is the set of principles underlying the Web: Representational State Transfer, or REST. For the first time, we set down best practices for “RESTful” web services. We cut through the confusion and guesswork, replacing folklore and implicit knowledge with concrete advice.\r\n\r\nWe introduce the Resource-Oriented Architecture (ROA), a commonsense set of rules for designing RESTful web services. We also show you the view from the client side: how you can write programs to consume RESTful services. Our examples include real-world RESTful services like Amazon’s Simple Storage Service (S3), the various incarnations of the Atom Publishing Protocol, and Google Maps. We also take popular services that fall short of RESTfulness, like the del.icio.us social bookmarking API, and rehabilitate them.",
    "slug" : "preface",
    "pages" : [ {
      "title" : "The Web Is Simple",
      "type" : "page",
      "htmlContent" : "<p>Why are we so obsessed with the Web that we think it can do everything? Perhaps we are delusional, the victims of hype. The web is certainly the most-hyped part of the Internet, despite the fact that HTTP is not the most popular Internet protocol. Depending on who’s measuring, the bulk of the world’s Internet traffic comes from email (thanks to spam) or BitTorrent (thanks to copyright infringement). If the Internet were to disappear tomorrow, email is the application people would miss the most. So why the Web? What makes HTTP, a protocol designed to schlep project notes around a physics lab, also suited for distributed Internet applications?</p>\n<p>Actually, to say that HTTP was designed for <span class=\"emphasis\"><em>anything</em></span> is to pay it a pretty big compliment. HTTP and HTML have been called “the Whoopee Cushion and Joy Buzzer of Internet protocols, only comprehensible as elaborate practical jokes”—and that’s by someone who <span class=\"emphasis\"><em>likes</em></span> them.<sup>[<a id=\"id409157\" href=\"#ftn.id409157\" class=\"footnote\">1</a>]</sup>The first version of HTTP sure looked like a joke. Here’s a sample interaction between client and server:</p>\n<div class=\"informaltable\">\n <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n  <colgroup>\n   <col>\n   <col>\n  </colgroup>\n  <thead>\n   <tr>\n    <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Client request</td>\n    <td style=\"border-bottom: 0.5pt solid ; \">Server response</td>\n   </tr>\n  </thead>\n  <tbody>\n   <tr>\n    <td style=\"border-right: 0.5pt solid ; \"><pre class=\"screen\">GET /hello.txt</pre></td>\n    <td><pre class=\"screen\">Hello, world!</pre></td>\n   </tr>\n  </tbody>\n </table>\n</div>\n<p>That’s it. You connected to the server, gave it the path to a document, and then the server sent you the contents of that document. You could do little else with HTTP 0.9. It looked like a featureless rip-off of more sophisticated file transfer protocols like FTP.</p>\n<p>This is, surprisingly, a big part of the answer. With tongue only slightly in cheek we can say that HTTP is uniquely well suited to distributed Internet applications because it has no features to speak of. You tell it what you want, and it gives it to you. In a twist straight out of a kung-fu movie,<sup>[<a id=\"id394170\" href=\"#ftn.id394170\" epub:type=\"noteref\" class=\"footnote\">2</a>]</sup>HTTP’s weakness is its strength, its simplicity its power.</p>\n<p>In that first version of HTTP, cleverly disguised as a lack of features, we can see <span class=\"emphasis\"><em>addressability</em></span> and <span class=\"emphasis\"><em>statelessness</em></span>: the two basic design decisions that made HTTP an improvement on its rivals, and that keep it scalable up to today’s mega-sites. Many of the features lacking in HTTP 0.9 have since turned out to be unnecessary or counterproductive. Adding them back actually cripples the Web. Most of the rest were implemented in the 1.0 and 1.1 revisions of the protocol. The other two technologies essential to the success of the Web, URIs and HTML (and, later, XML), are also simple in important senses.</p>\n<p>Obviously, these “simple” technologies are powerful enough to give us the Web and the applications we use on it. In this book we go further, and claim that the World Wide Web is a simple and flexible environment for distributed <span class=\"emphasis\"><em>programming</em></span>. We also claim to know the reason for this: that there is no essential difference between the human web designed for our own use, and the “programmable web” designed for consumption by software programs. We say: if the Web is good enough for humans, it’s good enough for robots. We just need to make some allowances. Computer programs are good at building and parsing complex data structures, but they’re not as flexible as humans when it comes to interpreting documents.</p>",
      "slug" : "the-web-is-simple"
    }, {
      "title" : "Big Web Services Are Not Simple",
      "type" : "page",
      "htmlContent" : "<p>There are a number of protocols and standards, mostly built on top of HTTP, designed for building Web Services (note the capitalization). These standards are collectively called the WS-* stack. They include WS-Notification, WS-Security, WSDL, and SOAP. Throughout this book we give the name “Big Web Services” to this collection of technologies as a fairly gentle term of disparagement.</p>\n<p>This book does not cover these standards in any great detail. We believe you can implement web services without implementing Big Web Services: that the Web should be all the service you need. We believe the Web’s basic technologies are good enough to be considered the default platform for distributed services.</p>\n<p>Some of the WS-* standards (such as SOAP) can be used in ways compatible with REST and our Resource-Oriented Architecture. In practice, though, they’re used to implement Remote Procedure Call applications over HTTP. Sometimes an RPC style is appropriate, and sometimes other needs take precedence over the virtues of the Web. This is fine.</p>\n<p>What we don’t like is needless complexity. Too often a programmer or a company brings in Big Web Services for a job that plain old HTTP could handle just fine. The effect is that HTTP is reduced to a transport protocol for an enormous XML payload that explains what’s “really” going on. The resulting service is far too complex, impossible to debug, and won’t work unless your clients have the exact same setup as you do.</p>\n<p>Big Web Services do have one advantage: modern tools can create a web service from your code with a single click, especially if you’re developing in Java or C#. If you’re using these tools to generate RPC-style web services with the WS-* stack, it probably doesn’t matter to you that a RESTful web service would be much simpler. The tools hide all the complexity, so who cares? Bandwidth and CPU are cheap.</p>\n<p>This attitude works when you’re working in a homogeneous group, providing services behind a firewall for other groups like yours. If your group has enough political clout, you may be able to get people to play your way outside the firewall. But if you want your service to grow to Internet scale, you’ll have to handle clients you never planned for, using custom-built software stacks to do things to your service you never imagined were possible. Your users will want to integrate your service with other services you’ve never heard of. Sound difficult? This already happens on the Web every day.</p>\n<p>Abstractions are never perfect. Every new layer creates failure points, interoperability hassles, and scalability problems. New tools can hide complexity, but they can’t justify it—and they always add it. Getting a service to work with the Web as a whole means paying attention to adaptability, scalability, and maintainability. Simplicity—that despised virtue of HTTP 0.9—is a prerequisite for all three. The more complex the system, the more difficult it is to fix when something goes wrong.</p>\n<p>If you provide RESTful web services, you can spend your complexity on additional features, or on making multiple services interact. Success in providing services also means being part of the Web instead of just “on” the Web: making your information available under the same rules that govern well-designed web sites. The closer you are to the basic web protocols, the easier this is.</p>",
      "slug" : "big-web-services-are-not-simple"
    }, {
      "title" : "The Story of the REST",
      "type" : "page",
      "htmlContent" : "<p>REST is simple, but it’s well defined and not an excuse for implementing web services as half-assed web sites because “they’re the same.” Unfortunately, until now the main REST reference was chapter five of Roy Fielding’s 2000 Ph.D. dissertation, which is a good read for a Ph.D. dissertation, but leaves most of the real-world questions unanswered. <sup>[<a id=\"id382718\" href=\"#ftn.id382718\" class=\"footnote\">3</a>]</sup>That’s because it presents REST not as an architecture but as a way of judging architectures. The term “RESTful” is like the term “object-oriented.” A language, a framework, or an application may be designed in an object-oriented way, but that doesn’t make its architecture <span class=\"emphasis\"><em>the</em></span> object-oriented architecture.</p>\n<p>Even in object-oriented languages like C++ and Ruby, it’s possible to write programs that are not truly object-oriented. HTTP in the abstract does very well on the criteria of REST. (It ought to, since Fielding co-wrote the HTTP standard and wrote his dissertation to describe the architecture of the Web.) But real web sites, web applications, and web services often betray the principles of REST. How can you be sure you’re correctly applying the principles to the problem of designing a specific web service?</p>\n<p>Most other sources of information on REST are informal: mailing lists, wikis, and weblogs (I list some of the best in <a class=\"xref\" href=\"apa.html\" title=\"Appendix&nbsp;A.&nbsp;Some Resources for REST and Some RESTful Resources\">Appendix&nbsp;A</a>). Up to now, REST’s best practices have been a matter of folklore. What’s needed is a concrete architecture based on the REST meta-architecture: a set of simple guidelines for implementing typical services that fulfill the potential of the Web. We present one such architecture in this book as the Resource-Oriented Architecture (see <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a>). It’s certainly not the only possible high-level RESTful architecture, but we think it’s a good one for designing web services that are easy for clients to use.</p>\n<p>We wrote the ROA to bring the best practices of web service design out of the realm of folklore. What we’ve written is a suggested baseline. If you’ve tried to figure out REST in the past, we hope our architecture gives you confidence that what you’re doing is “really” REST. We also hope the ROA will help the community as a whole make faster progress in coming up with and codifying best practices. We want to make it easy for programmers to create distributed web applications that are elegant, that do the job they’re designed for, and that participate in the Web instead of merely living on top of it.</p>\n<p>We know, however, that it’s not enough to have all these technical facts at your disposal. We’ve both worked in organizations where major architectural decisions didn’t go our way. You can’t succeed with a RESTful architecture if you never get a chance to use it. In addition to the technical know-how, we must give you the vocabulary to argue for RESTful solutions. We’ve positioned the ROA as a simple alternative to the RPC-style architecture used by today’s SOAP+WSDL services. The RPC architecture exposes internal <span class=\"emphasis\"><em>algorithms</em></span> through a complex programming-language-like interface that’s different for every service. The ROA exposes internal <span class=\"emphasis\"><em>data</em></span> through a simple document-processing interface that’s always the same. In <a class=\"xref\" href=\"ch10.html\" title=\"Chapter&nbsp;10.&nbsp;The Resource-Oriented Architecture Versus Big Web Services\">Chapter&nbsp;10</a>, we compare the two architectures and show how to argue for the ROA.</p>",
      "slug" : "the-story-of-the-rest"
    }, {
      "title" : "Reuniting the Webs",
      "type" : "page",
      "htmlContent" : "<p>Programmers have been using web sites as web services for years—unofficially, of course.<sup>[<a id=\"id394228\" href=\"#ftn.id394228\" class=\"footnote\">4</a>]</sup>It’s difficult for a computer to understand web pages designed for human consumption, but that’s never stopped hackers from fetching pages with automated clients and screen-scraping the interesting bits. Over time, this drive was sublimated into programmer-friendly technologies for exposing a web site’s functionality in officially sanctioned ways—RSS, XML-RPC, and SOAP. These technologies formed a programmable web, one that extended the human web for the convenience of software programs.</p>\n<p>Our ultimate goal in this book is to reunite the programmable web with the human web. We envision a single interconnected network: a World Wide Web that runs on one set of servers, uses one set of protocols, and obeys one set of design principles. A network that you can use whether you’re serving data to human beings or computer programs.</p>\n<p>The Internet and the Web did not have to exist. They come to us courtesy of misallocated defense money, skunkworks engineering projects, worse-is-better engineering practices, big science, naive liberal idealism, cranky libertarian politics, techno-fetishism, and the sweat and capital of programmers and investors who thought they’d found an easy way to strike it rich.</p>\n<p>The result is, amazingly, a simple, open (for now), almost universal platform for networked applications. This platform contains much of human knowledge and supports most fields of human endeavor. We think it’s time to seriously start applying its rules to distributed programming, to open up that information and those processes to automatic clients. If you agree, this book will show you how to do it.</p>",
      "slug" : "reuniting-the-webs"
    }, {
      "title" : "What’s in This Book?",
      "type" : "page",
      "htmlContent" : "<p>In this book we focus on practical issues: how to design and implement RESTful web services, and clients for those services. Our secondary focus is on theory: what it means to be RESTful, and why web services should be more RESTful instead of less. We don’t cover everything, but we try to hit today’s big topics, and because this is the first book of its kind, we return to the core issue—how to design a RESTful service—over and over again.</p>\n<p>The first three chapters introduce web services from the client’s perspective and show what’s special about RESTful services.</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a>, The Programmable Web and Its Inhabitants</span>\n  </dt>\n  <dd>\n   <p>In this chapter we introduce web services in general: programs that go over the Web and ask a foreign server to provide data or run an algorithm. We demonstrate the three common web service architectures: RESTful, RPC-style, and REST-RPC hybrid. We show sample HTTP requests and responses for each architecture, along with typical client code.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, Writing Web Service Clients</span>\n  </dt>\n  <dd>\n   <p>In this chapter we show you how to write clients for existing web services, using an HTTP library and an XML parser. We introduce a popular REST-RPC service (the web service for the social bookmarking site del.icio.us) and demonstrate clients written in Ruby, Python, Java, C#, and PHP. We also give technology recommendations for several other languages, without actually showing code. JavaScript and Ajax are covered separately in <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>, What Makes RESTful Services Different?</span>\n  </dt>\n  <dd>\n   <p>We take the lessons of <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a> and apply them to a purely RESTful service: Amazon’s Simple Storage Service (S3). While building an S3 client we illustrate some important principles of REST: resources, representations, and the uniform interface.</p>\n  </dd>\n </dl>\n</div>\n<p>The next six chapters form the core of the book. They focus on designing and implementing your own RESTful services.</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a>, The Resource-Oriented Architecture</span>\n  </dt>\n  <dd>\n   <p>A formal introduction to REST, not in its abstract form but in the context of a specific architecture for web services. Our architecture is based on four important REST concepts: resources, their names, their representations, and the links between them. Its services should be judged by four RESTful properties: addressability, statelessness, connectedness, and the uniform interface.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>, Designing Read-Only Resource-Oriented Services</span>\n  </dt>\n  <dd>\n   <p>We present a procedure for turning an idea or a set of requirements into a set of RESTful resources. These resources are read-only: clients can get data from your service but they can’t send any data of their own. We illustrate the procedure by designing a web service for serving navigable maps, inspired by the Google Maps web application.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>, Designing Read/Write Resource-Oriented Services</span>\n  </dt>\n  <dd>\n   <p>We extend the procedure from the previous chapter so that clients can create, modify, and delete resources. We demonstrate by adding two new kinds of resource to the map service: user accounts and user-defined places.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, A Service Implementation</span>\n  </dt>\n  <dd>\n   <p>We remodel an RPC-style service (the del.icio.us REST-RPC hybrid we wrote clients for back in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>) as a purely RESTful service. Then we implement that service as a Ruby on Rails application. Fun for the whole family!</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, REST and ROA Best Practices</span>\n  </dt>\n  <dd>\n   <p>In this chapter we collect our earlier suggestions for service design into one place, and add new suggestions. We show how standard features of HTTP can help you with common problems and optimizations. We also give resource-oriented designs for tough features like transactions, which you may have thought were impossible to do in RESTful web services.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>, The Building Blocks of Services</span>\n  </dt>\n  <dd>\n   <p>Here we describe extra technologies that work on top of REST’s big three of HTTP, URI, and XML. Some of these technologies are file formats for conveying state, like XHTML and its microformats. Some are hypermedia formats for showing clients the levers of state, like WADL. Some are sets of rules for building RESTful web services, like the Atom Publishing Protocol.</p>\n  </dd>\n </dl>\n</div>\n<p>The last three chapters cover specialized topics, each of which could make for a book in its own right:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch10.html\" title=\"Chapter&nbsp;10.&nbsp;The Resource-Oriented Architecture Versus Big Web Services\">Chapter&nbsp;10</a>, The Resource-Oriented Architecture Versus Big Web Services</span>\n  </dt>\n  <dd>\n   <p>We compare our architecture, and REST in general, to another leading brand. We think that RESTful web services are simpler, more scalable, easier to use, better attuned to the philosophy of the Web, and better able to handle a wide variety of clients than are services based on SOAP, WSDL, and the WS-* stack.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>, Ajax Applications as REST Clients</span>\n  </dt>\n  <dd>\n   <p>Here we explain the Ajax architecture for web applications in terms of web services: an Ajax application is just a web service client that runs inside your web browser. That makes this chapter an extension of <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>. We show how to write clients for RESTful web services using <code class=\"classname\">XMLHttpRequest</code> and the standard JavaScript library.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">Chapter&nbsp;12</a>, Frameworks for RESTful Services</span>\n  </dt>\n  <dd>\n   <p>In the final chapter we cover three popular frameworks that make it easy to implement RESTful web services: Ruby on Rails, Restlet (for Java), and Django (for Python).</p>\n  </dd>\n </dl>\n</div>\n<p>We also have three appendixes we hope you find useful:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"apa.html\" title=\"Appendix&nbsp;A.&nbsp;Some Resources for REST and Some RESTful Resources\">Appendix&nbsp;A</a>, Some Resources for REST and Some RESTful Resources</span>\n  </dt>\n  <dd>\n   <p>The first part lists interesting standards, tutorials, and communities related to RESTful web services. The second part lists some existing, public RESTful web services that you can use and learn from.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"apb.html\" title=\"Appendix&nbsp;B.&nbsp;The HTTP Response Code Top 42\">Appendix&nbsp;B</a>, The HTTP Response Code Top 42</span>\n  </dt>\n  <dd>\n   <p>Describes every standard HTTP response code (plus one extension), and explains when you’d use each one in a RESTful web service.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><a class=\"xref\" href=\"apc.html\" title=\"Appendix&nbsp;C.&nbsp;The HTTP Header Top Infinity\">Appendix&nbsp;C</a>, The HTTP Header Top Infinity</span>\n  </dt>\n  <dd>\n   <p>Does the same thing for HTTP headers. It covers every standard HTTP header, and a few extension headers that are useful for web services.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"sidebar\">\n <a id=\"I_sidebar_tt8\"></a>\n <div class=\"sidebar-title\">\n  Which Parts Should You Read?\n </div>\n <p>We organized this book for the reader who’s interested in web services in general: someone who learns by doing, but who doesn’t have much experience with web services. If that describes you, the simplest path through this book is the best. You can start at the beginning, read through <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>, and then read onward as you’re interested.</p>\n <p>If you have more experience, you might take a different path through the book. If you’re only concerned with writing clients for existing services, you’ll probably focus on Chapters 1, 2, 3, and 11—the sections on service design won’t do you much good. If you want to create your own web service, or you’re trying to figure out what REST really means, you might start reading from <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>. If you want to compare REST to the WS-* technologies, you might start by reading Chapters 1, 3, 4, and 10.</p>\n</div>",
      "slug" : "whats-in-this-book"
    }, {
      "title" : "Administrative Notes",
      "type" : "page",
      "htmlContent" : "<p>This book has two authors (Leonard and Sam), but for the rest of the book we’ll be merging our identities into a single authorial “I.” In the final chapter (<a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">Chapter&nbsp;12</a>), the authorial “I” gets a little bit more crowded, as Django and Restlet developers join in to show how their frameworks let you build RESTful services.</p>\n<p>We assume that you’re a competent programmer, but not that you have any experience with web programming in particular. What we say in this book is not tied to any programming language, and we include sample code for RESTful clients and services in a variety of languages. But whenever we’re not demonstrating a specific framework or language, we use <a class=\"ulink\" href=\"http://www.ruby-lang.org/\" target=\"_top\">Ruby</a> as our implementation language.</p>\n<p>We chose Ruby because it’s concise and easy to read, even for programmers who don’t know the language. (And because it’s nice and confusing in conjunction with Sam’s last name.) Ruby’s standard web framework, Ruby on Rails, is also one of the leading implementation platforms for RESTful web services. If you don’t know Ruby, don’t worry: we include lots of comments explaining Ruby-specific idioms.</p>\n<p>The sample programs in this book are available for download from <a class=\"ulink\" href=\"http://www.oreilly.com/catalog/9780596529260\" target=\"_top\">this book’s official web site</a>. This includes the entire Rails application from <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, and the corresponding Restlet and Django applications from <a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">Chapter&nbsp;12</a>. It also includes Java implementations of many of the clients that only show up in the book as Ruby implementations. These client programs use the Restlet library, and were written by Restlet developers Jerome Louvel and Dave Pawson. If you’re more familiar with Java than with Ruby, these implementations may help you grasp the concepts behind the code. Most notably, there’s a full Java implementation of the Amazon S3 client from <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a> in there.</p>",
      "slug" : "administrative-notes"
    }, {
      "title" : "Conventions Used in This Book",
      "type" : "page",
      "htmlContent" : "<p>The following typographical conventions are used in this book:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">Italic</span>\n  </dt>\n  <dd>\n   <p>Indicates new terms, URLs, email addresses, filenames, and file extensions.</p>\n  </dd>\n  <dt>\n   <span class=\"term\"><code class=\"literal\">Constant width</code></span>\n  </dt>\n  <dd>\n   <p>Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.</p>\n  </dd>\n  <dt>\n   <span class=\"term\"><strong class=\"userinput\"><code>Constant width bold</code></strong></span>\n  </dt>\n  <dd>\n   <p>Shows commands or other text that should be typed literally by the user.</p>\n  </dd>\n  <dt>\n   <span class=\"term\"><em class=\"replaceable\"><code>Constant width italic</code></em></span>\n  </dt>\n  <dd>\n   <p>Shows text that should be replaced with user-supplied values or by values determined by context.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>This icon signifies a tip, suggestion, or general note.</p>\n</div>\n<div class=\"caution\" title=\"Caution\">\n <h3 class=\"title\">Caution</h3>\n <p>This icon indicates a warning or caution.</p>\n</div>",
      "slug" : "conventions-used-in-this-book"
    }, {
      "title" : "Using Code Examples",
      "type" : "page",
      "htmlContent" : "<p>This book is here to help you get your job done. In general, you may use the code in this book in your programs and documentation. You do not need to contact us for permission unless you’re reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from O’Reilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission.</p>\n<p>We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: “<span class=\"emphasis\"><em>RESTful Web Services</em></span> by Leonard Richardson and Sam Ruby. Copyright 2007 O’Reilly Media, Inc., 978-0-596-52926-0.”</p>\n<p>If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at <span class=\"email\"><a class=\"email\" href=\"mailto:permissions@oreilly.com\">permissions@oreilly.com</a></span>.</p>",
      "slug" : "using-code-examples"
    }, {
      "title" : "Safari® Enabled",
      "type" : "page",
      "htmlContent" : "<div class=\"note\" title=\"Note\">\n <h3 class=\"title\">Note</h3>\n <p>When you see a Safari® Enabled icon on the cover of your favorite technology book, that means the book is available online through the O’Reilly Network Safari Bookshelf.</p>\n</div>\n<p>Safari offers a solution that’s better than e-books. It’s a virtual library that lets you easily search thousands of top tech books, cut and paste code samples, download chapters, and find quick answers when you need the most accurate, current information. Try it for free at <span class=\"emphasis\"><em><a class=\"ulink\" href=\"http://safari.oreilly.com\" target=\"_top\">http://safari.oreilly.com</a></em></span>.</p>",
      "slug" : "safari-enabled"
    }, {
      "title" : "How to Contact Us",
      "type" : "page",
      "htmlContent" : "<p>Please address comments and questions concerning this book to the publisher:</p>\n<table style=\"border: 0; \" class=\"simplelist\">\n <tbody>\n  <tr>\n   <td>O’Reilly Media, Inc.</td>\n  </tr>\n  <tr>\n   <td>1005 Gravenstein Highway North</td>\n  </tr>\n  <tr>\n   <td>Sebastopol, CA 95472</td>\n  </tr>\n  <tr>\n   <td>800-998-9938 (in the United States or Canada)</td>\n  </tr>\n  <tr>\n   <td>707-829-0515 (international or local)</td>\n  </tr>\n  <tr>\n   <td>707 829-0104 (fax)</td>\n  </tr>\n </tbody>\n</table>\n<p>We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at:</p>\n<table style=\"border: 0; \" class=\"simplelist\">\n <tbody>\n  <tr>\n   <td><a class=\"ulink\" href=\"http://www.oreilly.com/catalog/9780596529260\" target=\"_top\">http://www.oreilly.com/catalog/9780596529260</a></td>\n  </tr>\n </tbody>\n</table>\n<p>To comment or ask technical questions about this book, send email to:</p>\n<table style=\"border: 0; \" class=\"simplelist\">\n <tbody>\n  <tr>\n   <td><span class=\"email\"><a class=\"email\" href=\"mailto:bookquestions@oreilly.com\">bookquestions@oreilly.com</a></span></td>\n  </tr>\n </tbody>\n</table>\n<p>For more information about our books, conferences, Resource Centers, and the O’Reilly Network, see our web site at:</p>\n<table style=\"border: 0; \" class=\"simplelist\">\n <tbody>\n  <tr>\n   <td><a class=\"ulink\" href=\"http://www.oreilly.com\" target=\"_top\">http://www.oreilly.com</a></td>\n  </tr>\n </tbody>\n</table>",
      "slug" : "how-to-contact-us"
    }, {
      "title" : "Acknowledgments",
      "type" : "page",
      "htmlContent" : "<p>We’re ultimately indebted to the people whose work made us see that we could program directly with HTTP. For Sam, it was Rael Dornfest with his Blosxom blogging application. Leonard’s experience stems from building screen-scraping applications in the mid-90s. His thanks go to those whose web design made their sites usable as web services: notably, the pseudonymous author of the online comic “Pokey the Penguin.”</p>\n<p>Once we had this insight, Roy Fielding was there to flesh it out. His thesis named and defined something that was for us only a feeling. Roy’s theoretical foundation is what we’ve tried to build on.</p>\n<p>In writing this book we had an enormous amount of help from the REST community. We’re grateful for the feedback we got from Benjamin Carlyle, David Gourley, Joe Gregorio, Marc Hadley, Chuck Hinson, Pete Lacey, Larry Liberto, Benjamin Pollack, Aron Roberts, Richard Walker, and Yohei Yamamoto. Others helped us unknowingly, through their writings: Mark Baker, Tim Berners-Lee, Alex Bunardzic, Duncan Cragg, David Heinemeier Hansson, Ian Hickson, Mark Nottingham, Koranteng Ofosu-Amaah, Uche Ogbuji, Mark Pilgrim, Paul Prescod, Clay Shirky, Brian Totty, and Jon Udell. Of course, all opinions in this book, and any errors and omissions, are our own.</p>\n<p>Our editor Michael Loukides was helpful and knowledgeable throughout the process of developing this book. We’d also like to thank Laurel Ruma and everyone else at O’Reilly for their production work.</p>\n<p>Finally, Jerome Louvel, Dave Pawson, and Jacob Kaplan-Moss deserve special thanks. Their knowledge of Restlet and Django made <a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">Chapter&nbsp;12</a> possible.</p>",
      "slug" : "acknowledgments"
    } ]
  }, {
    "title" : "1. The Programmable Web and Its Inhabitants",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants</h2>\n  </div>\n </div>\n</div>\n<p>When you write a <a id=\"ch01_progweb\" class=\"indexterm\"></a>computer program, you’re not limited to the algorithms you can think up. Your language’s standard library<a id=\"I_indexterm1_tt15\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt16\" class=\"indexterm\"></a> gives you some algorithms. You can get more from books, or in third-party libraries you find online. Only if you’re on the very cutting edge should you have to come up with your own algorithms.</p>\n<p>If you’re lucky, the same is true for data. Some applications are driven entirely by the data the users type in. Sometimes data just comes to you naturally: if you’re analyzing spam, you should have no problem getting all you need. You can download a few public data sets—word lists, geographical data, lists of prime numbers, public domain texts—as though they were third-party libraries. But if you need some other kind of data, it doesn’t look good. Where’s the data going to come from? More and more often, it’s coming from the programmable web.</p>\n<p>When you—a human being—want to find a book on a certain topic, you probably point your web browser to the URI of an online library or bookstore: say, <a class=\"ulink\" href=\"http://www.amazon.com/\" target=\"_top\">http://www.amazon.com/</a>. </p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>The common term for the address of something on the Web is “URL.” <a id=\"I_indexterm1_tt17\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt18\" class=\"indexterm\"></a>I say “URI” throughout this book because that’s what the HTTP standard says. Every HTTP URI on the Web is also a URL, so you can substitute “URL” wherever I say “URI” with no loss of meaning.</p>\n</div>\n<p>You’re served a web page, a document in HTML format that your browser renders graphically. You visually scan the page for a search form, type your topic (say, “web services”) into a text box, and submit the form. At this point your web browser makes a second HTTP request, to a URI that incorporates your topic. To continue the Amazon example, the second URI your browser requests would be something like <a class=\"ulink\" href=\"http://amazon.com/s?url=search-alias%3Dstripbooks&amp;field-keywords=web+services\" target=\"_top\">http://amazon.com/s?url=search-alias%3Dstripbooks&amp;field-keywords=web+services</a>.</p>\n<p>The web server at <code class=\"literal\">amazon.com</code> responds by serving a second document in HTML format. This document contains a description of your search results, links to additional search options, and miscellaneous commercial enticements (see <a class=\"xref\" href=\"ch01.html#amazon-html-respone\" title=\"Example&nbsp;1-1.&nbsp;Part of the HTML response from amazon.com\">Example&nbsp;1-1</a>). Again, your browser renders the document in graphical form, and you look at it and decide what to do from there.</p>\n<div class=\"example\">\n <a id=\"amazon-html-respone\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-1.&nbsp;Part of the HTML response from amazon.com\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">...\n&lt;a href=\"http://www.amazon.com/Restful-Web-Services-Leonard-Richardson/dp/...&gt;\n &lt;span class=\"srTitle\"&gt;RESTful Web Services&lt;/span&gt;\n&lt;/a&gt;\n  \nby Leonard Richardson and Sam Ruby\n    \n&lt;span class=\"bindingBlock\"&gt;\n (&lt;span class=\"binding\"&gt;Paperback&lt;/span&gt; - May 1, 2007)\n&lt;/span&gt;</pre>\n </div>\n</div>\n<p>The Web you use is full of data: book information, opinions, prices, arrival times, messages, photographs, and miscellaneous junk. It’s full of <span class=\"emphasis\"><em>services</em></span>: search engines, online stores, weblogs, wikis, calculators, and games. Rather than installing all this data and all these programs on your own computer, you install one program—a web browser—and access the data and services through it.</p>\n<p>The programmable web is just the same. The main difference is that instead of arranging its data in attractive HTML pages with banner ads and cute pastel logos, the programmable web usually serves stark, brutal XML documents. The programmable web is not necessarily for human consumption. Its data is intended as input to a software program that does something amazing.</p>\n<p><a class=\"xref\" href=\"ch01.html#amazonecsclient\" title=\"Example&nbsp;1-2.&nbsp;Searching for books with a Ruby script\">Example&nbsp;1-2</a> shows a Ruby script that uses the programmable web to do a traditional human web task: find the titles of books matching a keyword. It hides the web access under a programming language interface, using <a class=\"ulink\" href=\"http://www.caliban.org/ruby/ruby-amazon.shtml\" target=\"_top\">the Ruby/Amazon library</a>.</p>\n<div class=\"example\">\n <a id=\"amazonecsclient\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-2.&nbsp;Searching for books with a Ruby script\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# amazon-book-search.rb\nrequire 'amazon/search'\n\nif ARGV.size != 2\n  puts \"Usage: #{$0} [Amazon Web Services AccessKey ID] [text to search for]\"\n  exit\nend\naccess_key, search_request = ARGV\nreq = Amazon::Search::Request.new(access_key)\n# For every book in the search results...\nreq.keyword_search(search_request, 'books', Amazon::Search::LIGHT) do |book|\n  # Print the book's name and the list of authors.\n  puts %{\"#{book.product_name}\" by #{book.authors.join(', ')}}\nend</pre>\n </div>\n</div>\n<p>To run this program, you’ll need to sign up for an<a id=\"I_indexterm1_tt19\" class=\"indexterm\"></a> <a class=\"ulink\" href=\"http://aws.amazon.com/\" target=\"_top\">Amazon Web Services account</a> and <a id=\"I_indexterm1_tt20\" class=\"indexterm\"></a>pass in the Access Key ID as a command-line argument. Here’s a sample run of the program:</p>\n<pre class=\"screen\"><code class=\"prompt\">$</code> <strong class=\"userinput\"><code>ruby ruby amazon-book-search.rb C1D4NQS41IMK2 \"restful web services\"</code></strong>\n<code class=\"computeroutput\">\"RESTful Web Services\" by Leonard Richardson, Sam Ruby</code>\n<code class=\"computeroutput\">\"Hacking with Ruby: Ruby and Rails for the Real World\" by Mark Watson</code></pre>\n<p>At its best, the programmable web works the same way as the human web. When <em class=\"filename\">amazon-book-search.rb</em> calls the method <code class=\"function\">Amazon::Search::Request#keyword_search</code>, the Ruby program starts acting like a web browser. It makes an HTTP request to a URI: in this case, something like <a class=\"ulink\" href=\"http://xml.amazon.com/onca/xml3?KeywordSearch=restful+web+services&amp;mode=books&amp;f=xml&amp;type=lite&amp;page=1\" target=\"_top\">http://xml.amazon.com/onca/xml3?KeywordSearch=restful+web+services&amp;mode=books&amp;f=xml&amp;type=lite&amp;page=1</a>. The web server at <code class=\"literal\">xml.amazon.com</code> responds with an XML document. This document, shown in <a class=\"xref\" href=\"ch01.html#amazon-xml-response\" title=\"Example&nbsp;1-3.&nbsp;Part of the XML response from xml.amazon.com\">Example&nbsp;1-3</a>, describes the search results, just like the HTML document you see in your web browser, but in a more structured form.</p>\n<div class=\"example\">\n <a id=\"amazon-xml-response\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-3.&nbsp;Part of the XML response from xml.amazon.com\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">...\n&lt;ProductName&gt;RESTful Web Services&lt;/ProductName&gt;\n&lt;Catalog&gt;Book&lt;/Catalog&gt;\n&lt;Authors&gt;\n &lt;Author&gt;Leonard Richardson&lt;/Author&gt;\n &lt;Author&gt;Sam Ruby&lt;/Author&gt;\n&lt;/Authors&gt;\n&lt;ReleaseDate&gt;01 May, 2007&lt;/ReleaseDate&gt;\n...</pre>\n </div>\n</div>\n<p>Once a web browser has submitted its HTTP request, it has a fairly easy task. It needs to render the response in a way a human being can understand. It doesn’t need to figure out what the HTTP response means: that’s the human’s job. A web service client doesn’t have this luxury. It’s programmed in advance, so it has to be both the web browser that fetches the data, and the “human” who decides what the data means. Web service clients must automatically extract meaning from HTTP responses and make decisions based on that meaning.</p>\n<p>In <a class=\"xref\" href=\"ch01.html#amazonecsclient\" title=\"Example&nbsp;1-2.&nbsp;Searching for books with a Ruby script\">Example&nbsp;1-2</a>, the web service client parses the XML document, extracts some interesting information (book titles and authors), and prints that information to standard output. The program <em class=\"filename\">amazon-book-search.rb</em> is effectively a small, special-purpose web browser, relaying data to a human reader. It could easily do something else with the Amazon book data, something that didn’t rely on human intervention at all: stick the book titles into a database, maybe, or use the author information to drive a recommendation engine.</p>\n<p>And the data doesn’t have to always flow toward the client. Just as you can bend parts of the human web to your will (by posting on your weblog or buying a book), you can write clients that modify the programmable web. You can use it as a storage space or as another source of algorithms you don’t have to write yourself. It depends on what service you need, and whether you can find someone else to provide it.</p>\n<p><a class=\"xref\" href=\"ch01.html#s3sh-example\" title=\"Example&nbsp;1-4.&nbsp;Manipulating the programmable web with s3sh and S3\">Example&nbsp;1-4</a> is an example of a web service client that modifies the programmable web: <a id=\"I_indexterm1_tt21\" class=\"indexterm\"></a>the <a class=\"ulink\" href=\"http://amazon.rubyforge.org/\" target=\"_top\"><span class=\"application\">s3sh</span> command shell for Ruby</a>. It’s one of many clients written against another of Amazon’s web services: S3, <a id=\"I_indexterm1_tt22\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt23\" class=\"indexterm\"></a>or the <a class=\"ulink\" href=\"http://aws.amazon.com/s3\" target=\"_top\">Simple Storage Service</a>. In <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a> I cover S3’s workings in detail, so if you’re interested in using <span class=\"application\">s3sh</span> for yourself, you can read up on S3 there.</p>\n<p>To understand this <span class=\"application\">s3sh</span> transcript, all you need to know is that Amazon S3 lets its clients store labelled pieces of data (“objects”) <a id=\"I_indexterm1_tt24\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt25\" class=\"indexterm\"></a>in labelled containers (“buckets”). The <span class=\"application\">s3sh</span> program builds an interactive programming interface on top of S3. Other clients use S3 as a backup tool or a web host. It’s a very flexible service.</p>\n<div class=\"example\">\n <a id=\"s3sh-example\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-4.&nbsp;Manipulating the programmable web with \n  <span class=\"application\">s3sh</span> and S3\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\"><code class=\"prompt\">$</code> <strong class=\"userinput\"><code>s3sh</code></strong>\n<code class=\"prompt\">&gt;&gt; </code><strong class=\"userinput\"><code>Service.buckets.collect { |b| b.name }</code></strong>\n<code class=\"computeroutput\">=&gt; [\"example.com\"]</code>\n\n<code class=\"prompt\">&gt;&gt; </code><strong class=\"userinput\"><code>my_bucket = Bucket.find(\"example.com\")</code></strong>\n\n<code class=\"prompt\">&gt;&gt; </code><strong class=\"userinput\"><code>contents = open(\"disk_file.txt\").read</code></strong>\n<code class=\"computeroutput\">=&gt; \"This text is the contents of the file disk_file.txt\"</code>\n\n<code class=\"prompt\">&gt;&gt; </code><strong class=\"userinput\"><code>S3Object.store(\"mydir/mydocument.txt\", contents, my_bucket.name)</code></strong>\n\n<code class=\"prompt\">&gt;&gt; </code><strong class=\"userinput\"><code>my_bucket['directory/document.txt'].value</code></strong>\n<code class=\"computeroutput\">=&gt; \"This text is the contents of the file disk_file.txt\"</code></pre>\n </div>\n</div>\n<p>In this chapter I survey the current state of the programmable web. What technologies are being used, what architectures are they used to implement, and what design styles are the most popular? I show some real code and some real HTTP conversations, but my main goal in this chapter is to get you thinking about the World Wide Web as a way of connecting computer programs to each other, on the same terms as it connects human beings to each other.</p>",
    "textContent" : "Chapter 1. The Programmable Web and Its Inhabitants\r\n\r\nWhen you write a computer program, you’re not limited to the algorithms you can think up. Your language’s standard library gives you some algorithms. You can get more from books, or in third-party libraries you find online. Only if you’re on the very cutting edge should you have to come up with your own algorithms.\r\n\r\nIf you’re lucky, the same is true for data. Some applications are driven entirely by the data the users type in. Sometimes data just comes to you naturally: if you’re analyzing spam, you should have no problem getting all you need. You can download a few public data sets—word lists, geographical data, lists of prime numbers, public domain texts—as though they were third-party libraries. But if you need some other kind of data, it doesn’t look good. Where’s the data going to come from? More and more often, it’s coming from the programmable web.\r\n\r\nWhen you—a human being—want to find a book on a certain topic, you probably point your web browser to the URI of an online library or bookstore: say,<http://www.amazon.com/> .\r\n\r\n\r\nTip\r\n\r\nThe common term for the address of something on the Web is “URL.” I say “URI” throughout this book because that’s what the HTTP standard says. Every HTTP URI on the Web is also a URL, so you can substitute “URL” wherever I say “URI” with no loss of meaning.\r\n\r\nYou’re served a web page, a document in HTML format that your browser renders graphically. You visually scan the page for a search form, type your topic (say, “web services”) into a text box, and submit the form. At this point your web browser makes a second HTTP request, to a URI that incorporates your topic. To continue the Amazon example, the second URI your browser requests would be something like http://amazon.com/s?url=search-alias%3Dstripbooks&field-keywords=web+services <http://amazon.com/s?url=search-alias%3Dstripbooks&field-keywords=web+services> .\r\n\r\nThe web server at amazon.com responds by serving a second document in HTML format. This document contains a description of your search results, links to additional search options, and miscellaneous commercial enticements (see Example 1-1). Again, your browser renders the document in graphical form, and you look at it and decide what to do from there.\r\n\r\nExample 1-1. Part of the HTML response from amazon.com\r\n\r\n...\r\n<a href=\"http://www.amazon.com/Restful-Web-Services-Leonard-Richardson/dp/...>\r\n <span class=\"srTitle\">RESTful Web Services</span>\r\n</a>\r\n  \r\nby Leonard Richardson and Sam Ruby\r\n    \r\n<span class=\"bindingBlock\">\r\n (<span class=\"binding\">Paperback</span> - May 1, 2007)\r\n</span>\r\n\r\nThe Web you use is full of data: book information, opinions, prices, arrival times, messages, photographs, and miscellaneous junk. It’s full of services: search engines, online stores, weblogs, wikis, calculators, and games. Rather than installing all this data and all these programs on your own computer, you install one program—a web browser—and access the data and services through it.\r\n\r\nThe programmable web is just the same. The main difference is that instead of arranging its data in attractive HTML pages with banner ads and cute pastel logos, the programmable web usually serves stark, brutal XML documents. The programmable web is not necessarily for human consumption. Its data is intended as input to a software program that does something amazing.\r\n\r\nExample 1-2 shows a Ruby script that uses the programmable web to do a traditional human web task: find the titles of books matching a keyword. It hides the web access under a programming language interface, using the Ruby/Amazon library <http://www.caliban.org/ruby/ruby-amazon.shtml> .\r\n\r\nExample 1-2. Searching for books with a Ruby script\r\n\r\n#!/usr/bin/ruby -w\r\n# amazon-book-search.rb\r\nrequire 'amazon/search'\r\n\r\nif ARGV.size != 2\r\n  puts \"Usage: #{$0} [Amazon Web Services AccessKey ID] [text to search for]\"\r\n  exit\r\nend\r\naccess_key, search_request = ARGV\r\nreq = Amazon::Search::Request.new(access_key)\r\n# For every book in the search results...\r\nreq.keyword_search(search_request, 'books', Amazon::Search::LIGHT) do |book|\r\n  # Print the book's name and the list of authors.\r\n  puts %{\"#{book.product_name}\" by #{book.authors.join(', ')}}\r\nend\r\n\r\nTo run this program, you’ll need to sign up for an Amazon Web Services account <http://aws.amazon.com/> and pass in the Access Key ID as a command-line argument. Here’s a sample run of the program:\r\n\r\n$ ruby ruby amazon-book-search.rb C1D4NQS41IMK2 \"restful web services\"\r\n\"RESTful Web Services\" by Leonard Richardson, Sam Ruby\r\n\"Hacking with Ruby: Ruby and Rails for the Real World\" by Mark Watson\r\n\r\nAt its best, the programmable web works the same way as the human web. When amazon-book-search.rb calls the method Amazon::Search::Request#keyword_search, the Ruby program starts acting like a web browser. It makes an HTTP request to a URI: in this case, something like http://xml.amazon.com/onca/xml3?KeywordSearch=restful+web+services&mode=books&f=xml&type=lite&page=1 <http://xml.amazon.com/onca/xml3?KeywordSearch=restful+web+services&mode=books&f=xml&type=lite&page=1> . The web server at xml.amazon.com responds with an XML document. This document, shown in Example 1-3, describes the search results, just like the HTML document you see in your web browser, but in a more structured form.\r\n\r\nExample 1-3. Part of the XML response from xml.amazon.com\r\n\r\n...\r\n<ProductName>RESTful Web Services</ProductName>\r\n<Catalog>Book</Catalog>\r\n<Authors>\r\n <Author>Leonard Richardson</Author>\r\n <Author>Sam Ruby</Author>\r\n</Authors>\r\n<ReleaseDate>01 May, 2007</ReleaseDate>\r\n...\r\n\r\nOnce a web browser has submitted its HTTP request, it has a fairly easy task. It needs to render the response in a way a human being can understand. It doesn’t need to figure out what the HTTP response means: that’s the human’s job. A web service client doesn’t have this luxury. It’s programmed in advance, so it has to be both the web browser that fetches the data, and the “human” who decides what the data means. Web service clients must automatically extract meaning from HTTP responses and make decisions based on that meaning.\r\n\r\nIn Example 1-2, the web service client parses the XML document, extracts some interesting information (book titles and authors), and prints that information to standard output. The program amazon-book-search.rb is effectively a small, special-purpose web browser, relaying data to a human reader. It could easily do something else with the Amazon book data, something that didn’t rely on human intervention at all: stick the book titles into a database, maybe, or use the author information to drive a recommendation engine.\r\n\r\nAnd the data doesn’t have to always flow toward the client. Just as you can bend parts of the human web to your will (by posting on your weblog or buying a book), you can write clients that modify the programmable web. You can use it as a storage space or as another source of algorithms you don’t have to write yourself. It depends on what service you need, and whether you can find someone else to provide it.\r\n\r\nExample 1-4 is an example of a web service client that modifies the programmable web: the s3sh command shell for Ruby <http://amazon.rubyforge.org/> . It’s one of many clients written against another of Amazon’s web services: S3, or the Simple Storage Service <http://aws.amazon.com/s3> . In Chapter 3 I cover S3’s workings in detail, so if you’re interested in using s3sh for yourself, you can read up on S3 there.\r\n\r\nTo understand this s3sh transcript, all you need to know is that Amazon S3 lets its clients store labelled pieces of data (“objects”) in labelled containers (“buckets”). The s3sh program builds an interactive programming interface on top of S3. Other clients use S3 as a backup tool or a web host. It’s a very flexible service.\r\n\r\nExample 1-4. Manipulating the programmable web with s3sh and S3\r\n\r\n$ s3sh\r\n>> Service.buckets.collect { |b| b.name }\r\n=> [\"example.com\"]\r\n\r\n>> my_bucket = Bucket.find(\"example.com\")\r\n\r\n>> contents = open(\"disk_file.txt\").read\r\n=> \"This text is the contents of the file disk_file.txt\"\r\n\r\n>> S3Object.store(\"mydir/mydocument.txt\", contents, my_bucket.name)\r\n\r\n>> my_bucket['directory/document.txt'].value\r\n=> \"This text is the contents of the file disk_file.txt\"\r\n\r\nIn this chapter I survey the current state of the programmable web. What technologies are being used, what architectures are they used to implement, and what design styles are the most popular? I show some real code and some real HTTP conversations, but my main goal in this chapter is to get you thinking about the World Wide Web as a way of connecting computer programs to each other, on the same terms as it connects human beings to each other.",
    "slug" : "1-the-programmable-web-and-its-inhabitants",
    "pages" : [ {
      "title" : "Kinds of Things on the Programmable Web",
      "type" : "page",
      "htmlContent" : "<p>The programmable web is based on <a id=\"I_indexterm1_tt27\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt28\" class=\"indexterm\"></a>HTTP and XML. Some parts of it serve HTML<a id=\"I_indexterm1_tt29\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt30\" class=\"indexterm\"></a>, JavaScript Object Notation (JSON), plain text, or binary documents, but most parts use XML. And it’s all based on HTTP: if you don’t use HTTP, you’re not on the web.<sup>[<a id=\"id416553\" href=\"#ftn.id416553\" epub:type=\"noteref\" class=\"footnote\">5</a>]</sup>Beyond that small island of agreement there is little but controversy. The <a id=\"I_indexterm1_tt33\" class=\"indexterm\"></a>terminology isn’t set, and different people use common terms (like “REST,” the topic of this book) in ways that combine into a vague and confusing mess. What’s missing is a coherent way of classifying the programmable web. With that in place, the meanings of individual terms will become clear.</p>\n<p>Imagine the programmable web as an ecosystem, like the ocean, containing many kinds of strange creatures. Ancient scientists and sailors classified sea creatures by their superficial appearance: whales were lumped in with the fish. Modern scientists classify animals according to their position in the evolutionary tree of all life: whales are now grouped with the other mammals. There are two analogous ways of classifying the services that inhabit the programmable web: by the technologies they use (URIs, SOAP, XML-RPC, and so on), or by the underlying architectures and design philosophies.</p>\n<p>Usually the two systems for classifying sea creatures get along. You don’t need to do DNA tests to know that a tuna is more like a grouper than a sea anenome. But if you really want to understand why whales can’t breathe underwater, you need to stop classifying them as fish (by superficial appearance) and start classifying them as mammals (by underlying architecture).<sup>[<a id=\"id418150\" href=\"#ftn.id418150\" epub:type=\"noteref\" class=\"footnote\">6</a>]</sup></p>\n<p>When it comes to classifying the programmable web, most of today’s terminology sorts services by their superficial appearances: the technologies they use. These classifications work in most cases, but they’re conceptually lacking and they lead to whale-fish mistakes. I’m going to present a taxonomy based on architecture, which shows how technology choices follow from underlying design principles. I’m exposing divisions I’ll come back to throughout the book, but my main purpose is to zoom in on the parts of the programmable web that can reasonably be associated with the term “REST.”</p>",
      "slug" : "kinds-of-things-on-the-programmable-web"
    }, {
      "title" : "HTTP: Documents in Envelopes",
      "type" : "page",
      "htmlContent" : "<p>If I was <a id=\"ch01_http\" class=\"indexterm\"></a>classifying marine animals I’d start by talking about the things they have in common: DNA, cellular structure, the laws of embryonic development. Then I’d show how animals distinguish themselves from each other by specializing away from the common ground. To classify the programmable web, I’d like to start off with an overview of HTTP, the protocol that all web services have in common.</p>\n<p>HTTP is a <a id=\"I_indexterm1_tt34\" class=\"indexterm\"></a>document-based protocol, in which the client puts a document in an envelope and sends it to the server. The server returns the favor by putting a response document in an envelope and sending it to the client. HTTP has strict standards for what the envelopes should look like, but it doesn’t much care what goes inside. <a class=\"xref\" href=\"ch01.html#sample-get\" title=\"Example&nbsp;1-5.&nbsp;An HTTP GET request for http://www.oreilly.com/index.html\">Example&nbsp;1-5</a> shows a sample envelope: the HTTP request my web browser sends when I visit the homepage of <code class=\"literal\">oreilly.com</code>. I’ve truncated two lines to make the text fit on the printed page.</p>\n<div class=\"example\">\n <a id=\"sample-get\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-5.&nbsp;An HTTP GET request for http://www.oreilly.com/index.html\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">GET /index.html HTTP/1.1\nHost: www.oreilly.com\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.12)...\nAccept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,...\nAccept-Language: us,en;q=0.5\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-15,utf-8;q=0.7,*;q=0.7\nKeep-Alive: 300\nConnection: keep-alive</pre>\n </div>\n</div>\n<p>In case you’re not familiar with HTTP, now is a good time to point out the major parts of the HTTP request. I use these terms throughout the book.</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">The <em class=\"firstterm\">HTTP method</em></span>\n  </dt>\n  <dd>\n   <p>In this request, the method is “GET.”<a id=\"I_indexterm1_tt35\" class=\"indexterm\"></a> In other discussions of REST you may see this called the “HTTP verb” or “HTTP action.”</p>\n   <p>The name of the HTTP method is like a method name in a programming language: it indicates how the client expects the server to process this envelope. In this case, the client (my web browser) is trying to GET some information from the server (<code class=\"literal\">www.oreilly.com</code>).</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">The <em class=\"firstterm\">path</em> <a id=\"I_indexterm1_tt36\" class=\"indexterm\"></a></span>\n  </dt>\n  <dd>\n   <p>This is the portion of the URI to the right of the hostname: here, <a class=\"ulink\" href=\"http://www.oreilly.com/index.html\" target=\"_top\">http://www.oreilly.com/index.html</a> becomes “/index.html.” In terms of the envelope metaphor, the path is the address on the envelope. In this book I sometimes refer to the “URI” as shorthand for just the path.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">The <em class=\"firstterm\">request headers</em> <a id=\"I_indexterm1_tt37\" class=\"indexterm\"></a></span>\n  </dt>\n  <dd>\n   <p>These are bits of metadata: key-value pairs that act like informational stickers slapped onto the envelope. This request has eight headers: <code class=\"literal\">Host</code>, <code class=\"literal\">User-Agent</code>, <code class=\"literal\">Accept</code>, and so on. There’s a standard list of HTTP headers (see <a class=\"xref\" href=\"apc.html\" title=\"Appendix&nbsp;C.&nbsp;The HTTP Header Top Infinity\">Appendix&nbsp;C</a>), and applications can define their own.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">The <em class=\"firstterm\">entity-body</em>,<a id=\"I_indexterm1_tt38\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt39\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt40\" class=\"indexterm\"></a> also called the <em class=\"firstterm\">document</em> or <em class=\"firstterm\">representation</em></span>\n  </dt>\n  <dd>\n   <p>This is the document that inside the envelope. This particular request has no entity-body, which means the envelope is empty! This is typical for a GET request, where all the information needed to complete the request is in the path and the headers.</p>\n  </dd>\n </dl>\n</div>\n<p>The HTTP response is also a document in a envelope. It’s almost identical in form to the HTTP request. <a class=\"xref\" href=\"ch01.html#oreilly-http-response\" title=\"Example&nbsp;1-6.&nbsp;The response to an HTTP GET request for http://www.oreilly.com/index.html\">Example&nbsp;1-6</a> shows a trimmed version of what the server at <code class=\"literal\">oreilly.com</code> sends my web browser when I make the request in <a class=\"xref\" href=\"ch01.html#sample-get\" title=\"Example&nbsp;1-5.&nbsp;An HTTP GET request for http://www.oreilly.com/index.html\">Example&nbsp;1-5</a>.</p>\n<div class=\"example\">\n <a id=\"oreilly-http-response\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-6.&nbsp;The response to an HTTP GET request for http://www.oreilly.com/index.html\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">HTTP/1.1 200 OK\nDate: Fri, 17 Nov 2006 15:36:32 GMT\nServer: Apache\nLast-Modified: Fri, 17 Nov 2006 09:05:32 GMT\nEtag: \"7359b7-a7fa-455d8264\nAccept-Ranges: bytes\nContent-Length: 43302\nContent-Type: text/html\nX-Cache: MISS from www.oreilly.com\nKeep-Alive: timeout=15, max=1000\nConnection: Keep-Alive\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head&gt;\n...\n&lt;title&gt;oreilly.com -- Welcome to O'Reilly Media, Inc.&lt;/title&gt;\n...</pre>\n </div>\n</div>\n<p>The response can be divided into three parts:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">The <em class=\"firstterm\">HTTP response code</em> <a id=\"I_indexterm1_tt41\" class=\"indexterm\"></a></span>\n  </dt>\n  <dd>\n   <p>This numeric code tells the client whether its request went well or poorly, and how the client should regard this envelope and its contents. In this case the GET operation must have succeeded, since the response code is 200 (“OK”). I describe the HTTP response codes in <a class=\"xref\" href=\"apb.html\" title=\"Appendix&nbsp;B.&nbsp;The HTTP Response Code Top 42\">Appendix&nbsp;B</a>.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">The <em class=\"firstterm\">response headers</em></span>\n  </dt>\n  <dd>\n   <p>Just as with the request headers, these are informational stickers slapped onto the envelope. This response has 10 headers: <code class=\"literal\">Date</code>, <code class=\"literal\">Server</code>, and so on.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">The <span class=\"emphasis\"><em>entity-body</em></span> or <span class=\"emphasis\"><em>representation</em></span></span>\n  </dt>\n  <dd>\n   <p>Again, this is the document inside the envelope, and this time there actually is one! The entity-body is the fulfillment of my GET request. The rest of the response is just an envelope with stickers on it, telling the web browser how to deal with the document.</p>\n   <p>The most important of these stickers is worth mentioning separately. The response <a id=\"I_indexterm1_tt42\" class=\"indexterm\"></a>header <code class=\"literal\">Content-Type</code> gives the <em class=\"firstterm\">media type</em> of <a id=\"I_indexterm1_tt43\" class=\"indexterm\"></a>the entity-body. In this case, the media type is <code class=\"literal\">text/html</code>. This lets my web browser know it can render the entity-body as an HTML document: a web page.</p>\n   <p>There’s a standard list of media types (<a class=\"ulink\" href=\"http://www.iana.org/assignments/media-types/\" target=\"_top\">http://www.iana.org/assignments/media-types/</a>). The most common media types designate textual documents (<code class=\"literal\">text/html</code>), structured data documents (<code class=\"literal\">application/xml</code>), and images (<code class=\"literal\">image/jpeg</code>). In other discussions of REST or HTTP, you may see the media type called the “MIME type,” “content type,” or “<a id=\"I_indexterm1_tt44\" class=\"indexterm\"></a>data type.”</p>\n  </dd>\n </dl>\n</div>",
      "slug" : "http-documents-in-envelopes"
    }, {
      "title" : "Method Information",
      "type" : "page",
      "htmlContent" : "<p>HTTP is<a id=\"ch01_methods\" class=\"indexterm\"></a> the one thing that all “animals” on the programmable web have in common. Now I’ll show you how web services distinguish themselves from each other. There are two big questions that today’s web services answer differently. If you know how a web service answers these questions, you’ll have a good idea of how well it works with the Web.</p>\n<p>The first question is how the client can convey its intentions to the server. How does the server know a certain request is a request to retrieve some data, instead of a request to delete that same data or to overwrite it with different data? Why should the server do <span class=\"emphasis\"><em>this</em></span> instead of doing <span class=\"emphasis\"><em>that</em></span>?</p>\n<p>I call the information about what to do with the data the<a id=\"I_indexterm1_tt45\" class=\"indexterm\"></a> <em class=\"firstterm\">method information</em>. One way to convey method information in a web service is to put it in the HTTP method. Since this is how RESTful web services do it, I’ll have a lot more to say about this later. For now, note that the five most common HTTP methods are GET, HEAD, PUT, DELETE, <a id=\"I_indexterm1_tt46\" class=\"indexterm\"></a> <a id=\"I_indexterm1_tt47\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt48\" class=\"indexterm\"></a>and POST. This is enough to distinguish between “retrieve some data” (GET), “delete that same data” (DELETE), and “overwrite it with different data” (PUT).</p>\n<p>The great advantage of HTTP method names is that they’re standardized. Of course, the space of HTTP method names is much more limited than the space of method names in a programming language. Some web services prefer to look for application-specific method names elsewhere in the HTTP request: usually in the URI path or the request document.</p>\n<p><a class=\"xref\" href=\"ch01.html#flickr-photo-search\" title=\"Example&nbsp;1-7.&nbsp;Searching Flickr for pictures\">Example&nbsp;1-7</a> is a client for a web service that keeps its method information in the path: the web service for Flickr, Yahoo!’s online photo-sharing application. This sample application searches Flickr for photos. To run this program, you’ll need to create a<a id=\"I_indexterm1_tt49\" class=\"indexterm\"></a> Flickr account and <a class=\"ulink\" href=\"http://www.flickr.com/services/api/keys/apply/\" target=\"_top\">apply for an API key</a>.</p>\n<div class=\"example\">\n <a id=\"flickr-photo-search\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-7.&nbsp;Searching Flickr for pictures\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# flickr-photo-search.rb\nrequire 'open-uri'\nrequire 'rexml/document'\n\n# Returns the URI to a small version of a Flickr photo.\ndef small_photo_uri(photo)\n  server = photo.attribute('server')\n  id = photo.attribute('id')\n  secret = photo.attribute('secret')\n  return \"http://static.flickr.com/#{server}/#{id}_#{secret}_m.jpg\"\nend\n\n# Searches Flickr for photos matching a certain tag, and prints a URI\n# for each search result.\ndef print_each_photo(api_key, tag)\n  # Build the URI\n  uri = \"http://www.flickr.com/services/rest?method=flickr.photos.search\" +\n    \"&amp;api_key=#{api_key}&amp;tags=#{tag}\"\n\n  # Make the HTTP request and get the entity-body.\n  response = open(uri).read\n\n  # Parse the entity-body as an XML document.\n  doc = REXML::Document.new(response)\n\n  # For each photo found...\n  REXML::XPath.each(doc, '//photo') do |photo| \n    # ...generate and print its URI\n    puts small_photo_uri(photo) if photo\n  end\nend\n\n# Main program\n#\nif ARGV.size &lt; 2\n  puts \"Usage: #{$0} [Flickr API key] [search term]\"\n  exit\nend\n\napi_key, tag = ARGV\nprint_each_photo(api_key, tag)</pre>\n </div>\n</div>\n<div class=\"sidebar\">\n <a id=\"I_sidebar1_tt50\"></a>\n <div class=\"sidebar-title\">\n  XPath: The Bluffer’s Guide\n </div>\n <p>XPath <a id=\"I_indexterm1_tt51\" class=\"indexterm\"></a>is a domain-specific language for slicing up XML documents without writing a lot of code. It has many intimidating features, but you can get by with just a little bit of knowledge. The key is to think of an XPath expression as a rule for extracting tags or other elements from an XML document. There aren’t many XPath expressions in this book, but I’ll explain every one I use.</p>\n <p>To turn an XPath expression into English, read it from right to left. The expression<a id=\"I_indexterm1_tt52\" class=\"indexterm\"></a> <code class=\"literal\">//photo</code> means:</p>\n <div class=\"informaltable\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n   </colgroup>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Find every <code class=\"literal\">photo</code> tag</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">photo</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">no matter where it is in the document.</td>\n     <td>//</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n <p>The Ruby code <code class=\"literal\">REXML::XPath.each(doc, '//photo')</code> is a cheap way to iterate over every <code class=\"literal\">photo</code> tag without having to traverse the XML tree.</p>\n</div>\n<p>This program makes HTTP requests to URIs like <a class=\"ulink\" href=\"http://www.flickr.com/services/rest?method=flickr.photos.search&amp;api_key=xxx&amp;tag=penguins\" target=\"_top\">http://www.flickr.com/services/rest?method=flickr.photos.search&amp;api_key=xxx&amp;tag=penguins</a>. How does the server know what the client is trying to do? Well, the method name is pretty clearly <code class=\"function\">flickr.photos.search</code>. Except: the HTTP method is GET, and I am <span class=\"emphasis\"><em>get</em></span>ting information, so it might be that the <code class=\"literal\">method</code> thing is a red herring. Maybe the method information really goes in the HTTP action.</p>\n<p>This hypothesis doesn’t last for very long, because the Flickr API supports many methods, not just “get”-type methods such as <code class=\"function\">flickr.photos.search</code> and <code class=\"function\">flickr.people.findByEmail</code>, but also methods like <code class=\"function\">flickr.photos.addTags</code>, <code class=\"function\">flickr.photos.comments.deleteComment</code>, and so on. All of them are invoked with an HTTP GET request, regardless of whether or not they “get” any data. It’s pretty clear that Flickr is sticking the method information in the <code class=\"literal\">method</code> query variable, and expecting the client to ignore what the HTTP method says.</p>\n<p>By contrast, a typical SOAP service keeps its method information in the entity-body and in a HTTP header. <a class=\"xref\" href=\"ch01.html#googlewebsearchexample\" title=\"Example&nbsp;1-8.&nbsp;Searching the Web with Google’s search service\">Example&nbsp;1-8</a> is a Ruby script that searches the Web using<a id=\"I_indexterm1_tt53\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt54\" class=\"indexterm\"></a> Google’s SOAP-based API.</p>\n<div class=\"example\">\n <a id=\"googlewebsearchexample\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-8.&nbsp;Searching the Web with Google’s search service\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# google-search.rb\nrequire 'soap/wsdlDriver'\n\n# Do a Google search and print out the title of each search result\ndef print_page_titles(license_key, query)\n  wsdl_uri = 'http://api.google.com/GoogleSearch.wsdl'\n  driver = SOAP::WSDLDriverFactory.new(wsdl_uri).create_rpc_driver\n  result_set = driver.doGoogleSearch(license_key, query, 0, 10, true, ' ', \n                                     false, ' ', ' ', ' ')\n  result_set.resultElements.each { |result| puts result.title }\nend\n\n# Main program.\nif ARGV.size &lt; 2\n  puts \"Usage: #{$0} [Google license key] [query]\"\n  exit\nend\n\nlicense_key, query = ARGV\nprint_page_titles(license_key, query)</pre>\n </div>\n</div>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>While I was writing this book, Google announced that it was deprecating its SOAP search service in favor of a RESTful, resource-oriented service (which, unfortunately, is encumbered by legal restrictions on use in a way the SOAP service isn’t). I haven’t changed the example because Google’s SOAP service still makes the best example I know of, and because I don’t expect you to actually run this program. I just want you to look at the code, and the SOAP and WSDL documents the code relies on.</p>\n</div>\n<p>OK, that probably wasn’t very informative, because the<a id=\"I_indexterm1_tt55\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt56\" class=\"indexterm\"></a> WSDL library hides most of the details. Here’s what happens. When you call the <code class=\"function\">doGoogleSearch</code> method, the WSDL library makes a POST request to the “endpoint” of the Google SOAP service, located at the URI <a class=\"ulink\" href=\"http://api.google.com/search/beta2\" target=\"_top\">http://api.google.com/search/beta2</a>. This single URI is the destination for every API call, and only POST requests are ever made to it. All of these details are in the WSDL file found at <a class=\"ulink\" href=\"http://api.google.com/GoogleSearch.wsdl\" target=\"_top\">http://api.google.com/GoogleSearch.wsdl</a>, which contains details like the definition of <code class=\"literal\">doGoogleSearch</code> (<a class=\"xref\" href=\"ch01.html#samplewsdl\" title=\"Example&nbsp;1-9.&nbsp;Part of the WSDL description for Google’s search service\">Example&nbsp;1-9</a>).</p>\n<div class=\"example\">\n <a id=\"samplewsdl\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-9.&nbsp;Part of the WSDL description for Google’s search service\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;operation name=\"doGoogleSearch\"&gt;\n &lt;input message=\"typens:doGoogleSearch\"/&gt;\n &lt;output message=\"typens:doGoogleSearchResponse\"/&gt;\n&lt;/operation&gt;</pre>\n </div>\n</div>\n<p>Since the URI and the HTTP method never vary, the method information—that “doGoogleSearch”—can’t go in either place. Instead, it goes into the entity-body of the POST request. <a class=\"xref\" href=\"ch01.html#samplesoap\" title=\"Example&nbsp;1-10.&nbsp;A sample SOAP RPC call\">Example&nbsp;1-10</a> shows what HTTP request you might make to do a search for REST.</p>\n<div class=\"example\">\n <a id=\"samplesoap\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-10.&nbsp;A sample SOAP RPC call\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">POST search/beta2 HTTP/1.1\nHost: api.google.com\nContent-Type: application/soap+xml\nSOAPAction: urn:GoogleSearchAction\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soap:Body&gt;\n  &lt;gs:doGoogleSearch xmlns:gs=\"urn:GoogleSearch\"&gt;\n   &lt;q&gt;REST&lt;/q&gt;\n   ...\n  &lt;/gs:doGoogleSearch&gt;\n &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;</pre>\n </div>\n</div>\n<p>The method information is “doGoogleSearch.” That’s the name of the XML tag inside the SOAP <code class=\"literal\">Envelope</code>, it’s the name of the <code class=\"literal\">operation</code> in the WSDL file, and it’s the name of the Ruby method in <a class=\"xref\" href=\"ch01.html#googlewebsearchexample\" title=\"Example&nbsp;1-8.&nbsp;Searching the Web with Google’s search service\">Example&nbsp;1-8</a>.</p>\n<p>Let’s bring things full circle by considering not the Google SOAP search API, but the Google search engine itself. To use your web browser to search Google’s data set for REST, you’d send a GET request to <a class=\"ulink\" href=\"http://www.google.com/search?q=REST\" target=\"_top\">http://www.google.com/search?q=REST</a> and get an HTML response back. The method information is kept in the HTTP method: you’re<a id=\"I_indexterm1_tt57\" class=\"indexterm\"></a> GETting a list of search results.</p>",
      "slug" : "method-information"
    }, {
      "title" : "Scoping Information",
      "type" : "page",
      "htmlContent" : "<p>The other big <a id=\"I_indexterm1_tt59\" class=\"indexterm\"></a>question web services answer differently is how the client tells the server which part of the data set to operate on. Given that the server understands that the client wants to (say) delete some data, how can it know which data the client wants to delete? Why should the server operate on <span class=\"emphasis\"><em>this</em></span> data instead of <span class=\"emphasis\"><em>that</em></span> data?</p>\n<p>I call this information the <em class=\"firstterm\">scoping information</em>. One obvious place to put it is in the URI path. That’s what most web sites do. Think once again about a search engine URI like <a class=\"ulink\" href=\"http://www.google.com/search?q=REST\" target=\"_top\">http://www.google.com/search?q=REST</a>. There, the method information is “GET,” <a id=\"I_indexterm1_tt60\" class=\"indexterm\"></a>and the scoping information is “/search?q=REST.” The client is trying to GET a list of search results about REST, as opposed to trying to GET something else: say, a list of search results about jellyfish (the scoping information for that would be “/search?q=jellyfish”), or the Google home page (that would be “/”).</p>\n<p>Many web services put scoping information in the path. Flickr’s is one: most of the query variables in a Flickr API URI are scoping information. <code class=\"literal\">tags=penguin</code> scopes the <code class=\"literal\">flickr.photos.search</code> method so it only searches for photos tagged with “penguin.” In a service where the method information defines a method in the programming language sense, the scoping information can be seen as a set of arguments to that method. You could reasonably expect to see <code class=\"literal\">flickr.photos.search(tags=penguin)</code> as a line of code in some programming language.</p>\n<p>The alternative is to put the scoping information into the<a id=\"I_indexterm1_tt61\" class=\"indexterm\"></a> entity-body. A typical SOAP web service does it this way. <a class=\"xref\" href=\"ch01.html#samplesoap\" title=\"Example&nbsp;1-10.&nbsp;A sample SOAP RPC call\">Example&nbsp;1-10</a> contains a <code class=\"literal\">q</code> tag whose contents are the string “REST.” That’s the scoping information, nestled conveniently inside the <code class=\"literal\">doGoogleSearch</code> tag that provides the method information.</p>\n<p>The service design determines what information is method information and what’s scoping information. This is most obvious in cases like Flickr and Google, where the web site and the web service do the same thing but have different designs. These two URIs contain the same information:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://flickr.com/photos/tags/penguin\" target=\"_top\">http://flickr.com/photos/tags/penguin</a></p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://api.flickr.com/services/rest/?method=flickr.photos.search&amp;tags=penguin\" target=\"_top\">http://api.flickr.com/services/rest/?method=flickr.photos.search&amp;tags=penguin</a></p></li>\n </ul>\n</div>\n<p>In the first URI, the method information is “GET” and the scoping information is “photos tagged ‘penguin.’” In the second URI, the method information is “do a photo search” and the scoping information is “penguin.” From a technical standpoint, there’s no difference between the two: both of them use HTTP GET. The differences only become apparent at the level of architecture, when you take a step back and notice values for <code class=\"literal\">methodname</code> like <code class=\"function\">flickr.photos.delete</code>, which take HTTP’s GET method into places it wasn’t meant to go.</p>\n<p>Another example: in the Google SOAP API, the fact that you’re doing a search is method information (<code class=\"literal\">doGoogleSearch</code>). The search query is scoping information (<code class=\"literal\">q</code>). On the Google web site, both “search” and the value for “q” are scoping information. The method information is HTTP’s standard GET. (If the Google SOAP API offered a method called <code class=\"function\">doGoogleSearchForREST</code>, it would be defining the method information so expansively that you’d need no scoping information to do a search for REST.)</p>",
      "slug" : "scoping-information"
    }, {
      "title" : "The Competing Architectures",
      "type" : "page",
      "htmlContent" : "<p>Now that I’ve identified the two main questions that web services answer differently, I can group web services by their answers to the questions. In my studies I’ve identified three common web service architectures: RESTful resource-oriented, RPC-style, and REST-RPC hybrid. I’ll cover each in turn.</p>\n<h2>RESTful, Resource-Oriented Architectures</h2>\n<p>The main topic of this book is the web service architectures which can be considered RESTful: those which get a good score when judged on the criteria set forth in Roy Fielding’s dissertation. Now, lots of architectures are technically RESTful,<sup>[<a id=\"id396538\" href=\"#ftn.id396538\" epub:type=\"noteref\" class=\"footnote\">7</a>]</sup>but I want to focus on the architectures that are best for web services. So when I talk about RESTful web services, I mean services that look like the Web. I’m calling this kind of <a id=\"I_indexterm1_tt63\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt64\" class=\"indexterm\"></a>service <em class=\"firstterm\">resource-oriented</em>. In <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a> I’ll introduce the basic concepts of resource-oriented REST, in the context of a real web service: Amazon’s Simple Storage Service. Starting in <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a>, I’ll talk you through the defining characteristics of REST, and define a good architecture for RESTful web services: the Resource-Oriented Architecture.</p>\n<p>In RESTful architectures, the method information goes into the HTTP method. In resource-oriented architectures, the scoping information goes into the URI. The combination is powerful. Given the first line of an HTTP request to a resource-oriented RESTful web service (“GET /reports/open-bugs HTTP/1.1”), you should understand basically what the client wants to do. The rest of the request is just details; indeed, you can make many requests using only one line of HTTP. If the HTTP method doesn’t match the method information, the service isn’t RESTful. If the scoping information isn’t in the URI, the service isn’t resource-oriented. These aren’t the <span class=\"emphasis\"><em>only</em></span> requirements, but they’re good rules of thumb.</p>\n<p>A few well-known examples of RESTful, resource-oriented web services include:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>Services that expose<a id=\"I_indexterm1_tt65\" class=\"indexterm\"></a> <a id=\"I_indexterm1_tt66\" class=\"indexterm\"></a> the <a class=\"ulink\" href=\"http://www.ietf.org/html.charters/atompub-charter.html\" target=\"_top\">Atom Publishing Protocol</a> and its variants such <a id=\"I_indexterm1_tt67\" class=\"indexterm\"></a>as <a class=\"ulink\" href=\"http://code.google.com/apis/gdata/\" target=\"_top\">GData</a></p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://aws.amazon.com/s3\" target=\"_top\">Amazon’s Simple Storage Service (S3)</a></p></li>\n  <li class=\"listitem\"><p>Most<a id=\"I_indexterm1_tt68\" class=\"indexterm\"></a> of <a class=\"ulink\" href=\"http://developer.yahoo.com/\" target=\"_top\">Yahoo!’s web services</a></p></li>\n  <li class=\"listitem\"><p>Most other read-only web services that don’t use SOAP</p></li>\n  <li class=\"listitem\"><p>Static web sites</p></li>\n  <li class=\"listitem\"><p>Many web applications, especially read-only ones like search engines</p></li>\n </ul>\n</div>\n<p>Whenever I cover unRESTful architectures, as well as architectures that aren’t resource-oriented, I do it with some ulterior motive. In this chapter, I want to put RESTful web services into perspective, against the larger backdrop of the programmable web. In <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, I’m widening the book’s coverage of real web services, and showing that you can use the same client tools whether or not a service exactly fits my preferred architecture. In <a class=\"xref\" href=\"ch10.html\" title=\"Chapter&nbsp;10.&nbsp;The Resource-Oriented Architecture Versus Big Web Services\">Chapter&nbsp;10</a>, I’m making an argument in a long-running debate about what the programmable web <span class=\"emphasis\"><em>should</em></span> look like.</p>\n<h2>RPC-Style Architectures</h2>\n<p>An<a id=\"I_indexterm1_tt69\" class=\"indexterm\"></a> RPC-style web service accepts an envelope full of data from its client, and sends a similar envelope back. The method and the scoping information are kept inside the envelope, or on stickers applied to the envelope. What <span class=\"emphasis\"><em>kind</em></span> of envelope is not important to my classification, but<a id=\"I_indexterm1_tt70\" class=\"indexterm\"></a> HTTP is a popular envelope format, since any web service worthy of the name must use HTTP anyway. SOAP is another popular envelope format (transmitting a SOAP document over HTTP puts the SOAP envelope inside an HTTP envelope). Every RPC-style service defines a brand new vocabulary. Computer programs work this way as well: every time you write a program, you define functions with different names. By contrast, all RESTful web services share a standard vocabulary of HTTP methods. Every object in a RESTful service responds to the same basic interface.</p>\n<p>The <a id=\"I_indexterm1_tt71\" class=\"indexterm\"></a>XML-RPC protocol for web services is the most obvious example of the RPC architecture. XML-RPC is mostly a legacy protocol these days, but I’m going to start off with it because it’s relatively simple and easy to explain. <a class=\"xref\" href=\"ch01.html#xmlrpc-example\" title=\"Example&nbsp;1-11.&nbsp;An XML-RPC example: looking up a product by UPC\">Example&nbsp;1-11</a> shows a Ruby client for an XML-RPC service that lets you look up anything with a<a id=\"I_indexterm1_tt72\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt73\" class=\"indexterm\"></a> Universal Product Code.</p>\n<div class=\"example\">\n <a id=\"xmlrpc-example\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-11.&nbsp;An XML-RPC example: looking up a product by UPC\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# xmlrpc-upc.rb\n\nrequire 'xmlrpc/client'\ndef find_product(upc)\n  server = XMLRPC::Client.new2('http://www.upcdatabase.com/rpc')\n  begin\n    response = server.call('lookupUPC', upc)\n  rescue XMLRPC::FaultException =&gt; e\n    puts \"Error: \"\n    puts e.faultCode\n    puts e.faultString\n  end\nend\n\nputs find_product(\"001441000055\")['description']\n# \"Trader Joe's Thai Rice Noodles\"</pre>\n </div>\n</div>\n<p>An XML-RPC service models a programming language like C. You call a function (<code class=\"literal\">lookupUPC</code>) with some arguments (“001441000055”) and get a return value back. The method data (the function name) and the scoping data (the arguments) are put inside an XML document. <a class=\"xref\" href=\"ch01.html#xmlrpc-document\" title=\"Example&nbsp;1-12.&nbsp;An XML document describing an XML-RPC request\">Example&nbsp;1-12</a> gives a sample document.</p>\n<div class=\"example\">\n <a id=\"xmlrpc-document\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-12.&nbsp;An XML document describing an XML-RPC request\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;?xml version=\"1.0\" ?&gt;\n &lt;methodCall&gt;\n  &lt;methodName&gt;lookupUPC&lt;/methodName&gt;\n  &lt;params&gt;\n   &lt;param&gt;&lt;value&gt;&lt;string&gt;001441000055&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\n  &lt;/params&gt;\n &lt;/methodCall&gt;</pre>\n </div>\n</div>\n<p>This XML<a id=\"I_indexterm1_tt74\" class=\"indexterm\"></a> document is put into an envelope for transfer to the server. The envelope is an HTTP request with a method, URI, and headers (see <a class=\"xref\" href=\"ch01.html#xmlrpc-http-document\" title=\"Example&nbsp;1-13.&nbsp;An HTTP envelope that contains an XML document which describes an XML-RPC request\">Example&nbsp;1-13</a>). The XML document becomes the entity-body inside the HTTP envelope.</p>\n<div class=\"example\">\n <a id=\"xmlrpc-http-document\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-13.&nbsp;An HTTP envelope that contains an XML document which describes an XML-RPC request\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">POST /rpc HTTP/1.1\nHost: www.upcdatabase.com\nUser-Agent: XMLRPC::Client (Ruby 1.8.4)\nContent-Type: text/xml; charset=utf-8\nContent-Length: 158\nConnection: keep-alive\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;methodCall&gt;\n &lt;methodName&gt;lookupUPC&lt;/methodName&gt;\n ...\n&lt;/methodCall&gt;</pre>\n </div>\n</div>\n<p>The XML document changes depending on which method you’re calling, but the HTTP envelope is always the same. No matter what you do with the UPC database service, the URI is always <a class=\"ulink\" href=\"http://www.upcdatabase.com/rpc\" target=\"_top\">http://www.upcdatabase.com/rpc</a> and the HTTP method is always POST. Simply put, an XML-RPC service ignores most features of HTTP. It exposes only one<a id=\"I_indexterm1_tt75\" class=\"indexterm\"></a> URI (the “endpoint”), and supports only one method on that URI (POST).</p>\n<p>Where a RESTful service would expose different URIs for different values of the scoping information, an RPC-style service typically exposes a URI for each “document processor”: something that can open the envelopes and transform them into software commands. For purposes of comparison, <a class=\"xref\" href=\"ch01.html#example_1_14\" title=\"Example&nbsp;1-14.&nbsp;A hypothetical code sample: a RESTful UPC lookup service\">Example&nbsp;1-14</a> shows what that code might look like if the UPC database were a RESTful web service.</p>\n<div class=\"example\">\n <a id=\"example_1_14\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-14.&nbsp;A hypothetical code sample: a RESTful UPC lookup service\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">require 'open-uri'\nupc_data = open('http://www.upcdatabase.com/upc/00598491').read()\n...</pre>\n </div>\n</div>\n<p>Here, the method information is contained in the HTTP method. The default HTTP method is GET, which is equivalent in this scenario to <code class=\"literal\">lookupUPC</code>. The scoping information is contained in the URI. The hypothetical service exposes an enormous number of URIs: one for every possible UPC. By contrast, the HTTP envelope is empty: an HTTP GET request contains no entity-body at all.</p>\n<p class=\"keep-together\">For another example of a client for an RPC-style service, look back at <a class=\"xref\" href=\"ch01.html#googlewebsearchexample\" title=\"Example&nbsp;1-8.&nbsp;Searching the Web with Google’s search service\">Example&nbsp;1-8</a>. Google’s SOAP search API is an RPC-style service that uses SOAP as its envelope format.</p>\n<p>A service that uses HTTP POST heavily or exclusively is probably an RPC-style service. Again, this isn’t a sure sign, but it’s a tip-off that the service isn’t very interested in putting its method information in the HTTP method. An otherwise RESTful service that uses HTTP POST a lot tends to move toward a REST-RPC hybrid architecture.</p>\n<p>A few well-known examples of RPC-style web services:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>All services that use XML-RPC</p></li>\n  <li class=\"listitem\"><p>Just about every SOAP service (see the <a class=\"xref\" href=\"ch01.html#programmablewebtech\" title=\"Technologies on the Programmable Web\">Technologies on the Programmable Web</a>” section later in this chapter for a defense of this controversial statement)</p></li>\n  <li class=\"listitem\"><p>A few web applications (generally poorly designed ones)</p></li>\n </ul>\n</div>\n<h2>REST-RPC Hybrid Architectures</h2>\n<p>This is a term I made<a id=\"I_indexterm1_tt76\" class=\"indexterm\"></a> up for describing web services that fit somewhere in between the RESTful web services and the purely RPC-style services. These services are often created by programmers who know a lot about real-world web applications, but not much about the theory of REST.</p>\n<p>Take another look at this URI used by the <a id=\"I_indexterm1_tt77\" class=\"indexterm\"></a>Flickr web service: <a class=\"ulink\" href=\"http://www.flickr.com/services/rest?api_key=xxx&amp;method=flickr.photos.search&amp;tags=penguin\" target=\"_top\">http://www.flickr.com/services/rest?api_key=xxx&amp;method=flickr.photos.search&amp;tags=penguin</a>. Despite the “rest” in the URI, this was clearly designed as an RPC-style service, one that uses HTTP as its envelope format. It’s got the scoping information (“photos tagged ‘penguin’”) in the URI, just like a RESTful resource-oriented service. But the method information (“search for photos”) also goes in the URI. In a RESTful service, the method information would go into the HTTP method (GET), and whatever was leftover would become scoping information. As it is, this service is simply using HTTP as an envelope format, sticking the method and scoping information wherever it pleases. This is an RPC-style service. Case closed.</p>\n<p>Except…look at <a class=\"xref\" href=\"ch01.html#sample-flickr-http\" title=\"Example&nbsp;1-15.&nbsp;A sample HTTP request to the Flickr web service\">Example&nbsp;1-15</a>.</p>\n<div class=\"example\">\n <a id=\"sample-flickr-http\"></a>\n <div class=\"example-title\">\n  Example&nbsp;1-15.&nbsp;A sample HTTP request to the Flickr web service\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">GET services/rest?api_key=xxx&amp;method=flickr.photos.search&amp;tags=penguin HTTP/1.1\nHost: www.flickr.com</pre>\n </div>\n</div>\n<p>That’s the HTTP request a client makes when remotely calling this procedure. Now it looks like the method information is in the HTTP method. I’m sending a GET request to get something. What am I getting? A list of search results for photos tagged “penguin.” What used to look like method information (“photoSearch()”) now looks like scoping information (“photos/tag/penguin”). Now the web service looks RESTful.</p>\n<p>This optical illusion happens when an RPC-style service uses plain old HTTP as its envelope format, and when both the method and the scoping information happen to live in the URI portion of the HTTP request. If the HTTP method is GET, and the point of the web service request is to “get” information, it’s hard to tell whether the method information is in the HTTP method or in the URI. Look at the HTTP requests that go across the wire and you see the requests you’d see for a RESTful web service. They may contain elements like “method=flickr.photos.search” but that could be interpreted as scoping information, the way “photos/” and “search/” are scoping information. These RPC-style services have elements of RESTful web services, more or less by accident. They’re only using HTTP as a convenient envelope format, but they’re using it in a way that overlaps with what a RESTful service might do.</p>\n<p>Many <a id=\"I_indexterm1_tt78\" class=\"indexterm\"></a>read-only web services qualify as entirely RESTful and resource-oriented, even though they were designed in the RPC style! But if the service allows clients to write to the data set, there will be times when the client uses an HTTP method that doesn’t match up with the true method information. This keeps the service from being as RESTful as it could be. Services like these are the ones I consider to be REST-RPC hybrids.</p>\n<p>Here’s one example. The Flickr web API asks clients to use HTTP GET even when they want to modify the data set. To delete a photo you make a GET request to a URI that includes <code class=\"literal\">method=flickr.photos.delete</code>. That’s just not what GET is for, as I’ll show in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>. The Flickr web API is a REST-RPC hybrid: RESTful when the client is retrieving data through GET, RPC-style when the client is modifying the data set.</p>\n<p>A few well-known examples of REST-RPC hybrid services include:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The del.icio.us API</p></li>\n  <li class=\"listitem\"><p>The “REST” Flickr web API</p></li>\n  <li class=\"listitem\"><p>Many other allegedly RESTful web services</p></li>\n  <li class=\"listitem\"><p>Most web applications</p></li>\n </ul>\n</div>\n<p>From a design standpoint, I don’t think anybody sets out to to design a service as a REST-RPC hybrid. Because of the way HTTP works, any RPC-style service that uses plain HTTP and exposes multiple URIs tends to end up either RESTful or hybrid. Many programmers design web services exactly as they’d design web applications, and end up with hybrid services.</p>\n<p>The existence of hybrid architectures has caused a lot of confusion. The style comes naturally to people who’ve designed web applications, and it’s often claimed that hybrid architectures are RESTful: after all, they work “the same way” as the human web. A lot of time has been spent trying to distinguish RESTful web services from these mysterious others. My classification of the “others” as REST-RPC hybrids is just the latest in a long line of neologisms. I think this particular neologism is the most accurate and useful way to look at these common but baffling services. If you’ve encountered other ways of describing them (“HTTP+POX” is the most popular at the time of writing), you might want read on, where I explain those other phrases in terms of what I’m saying in this book.</p>\n<h2>The Human Web Is on the Programmable Web</h2>\n<p>In the previous sections I claimed that all static web sites are RESTful. I claimed that web applications fall into one of the three categories, the majority being REST-RPC hybrids. Since the human web is made entirely of static web sites and web applications, this means that the entire human web is also on the programmable web! By now this should not be surprising to you. A web browser is a software program that makes HTTP requests and processes the responses somehow (by showing them to a human). That’s exactly what a web service client is. <span class=\"emphasis\"><em>If it’s on the Web, it’s a web service.</em></span></p>\n<p>My goal in this book is not to make the programmable web bigger. That’s almost impossible: the programmable web already encompasses nearly everything with an HTTP interface. My goal is to help make the programmable web <span class=\"emphasis\"><em>better</em></span>: more uniform, better-structured, and using the features of HTTP to greatest advantage.</p>",
      "slug" : "the-competing-architectures"
    }, {
      "title" : "Technologies on the Programmable Web",
      "type" : "page",
      "htmlContent" : "<p>I’ve classified<a id=\"ch01_tech\" class=\"indexterm\"></a> web services by their underlying architectures, distinguishing the fish from the whales. Now I can examine the technologies they use, without confusing technology and architecture.</p>\n<h2>HTTP</h2>\n<p>All web <a id=\"I_indexterm1_tt79\" class=\"indexterm\"></a>services use HTTP, but they use it in different ways. A request to a RESTful web service puts the method information in the HTTP method and the scoping information in the URI. RPC-style web services tend to ignore the HTTP method, looking for method and scoping information in the URI, HTTP headers, or entity-body. Some RPC-style web services use HTTP as an envelope containing a document, and others only use it as an unlabelled envelope containing another envelope.</p>\n<h2>URI</h2>\n<p>Again, all web<a id=\"I_indexterm1_tt80\" class=\"indexterm\"></a> services use URIs, but in different ways. What I’m about to say is a generalization, but a fairly accurate one. A RESTful, resource-oriented service exposes a URI for every piece of data the client might want to operate on. A REST-RPC hybrid exposes a URI for every operation the client might perform: one URI to fetch a piece of data, a different URI to delete that same data. An RPC-style service exposes one URI for every processes capable of handling Remote Procedure Calls (RPC). <a id=\"I_indexterm1_tt81\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt82\" class=\"indexterm\"></a>There’s usually only one such URI: the service “endpoint.”</p>\n<h2>XML-RPC</h2>\n<p>A few,<a id=\"I_indexterm1_tt83\" class=\"indexterm\"></a> mostly legacy, web services use XML-RPC on top of HTTP. XML-RPC is a data structure format for representing function calls and their return values. As the name implies, it’s explicitly designed to use an RPC style.</p>\n<h2>SOAP</h2>\n<p>Lots of<a id=\"I_indexterm1_tt84\" class=\"indexterm\"></a> web services use SOAP on top of HTTP. SOAP is an envelope format, like HTTP, but it’s an XML-based envelope format.</p>\n<p>Now I’m going to say something controversial. <span class=\"emphasis\"><em>To a first approximation, every current web service that uses SOAP also has an RPC architecture.</em></span> This is controversial because many SOAP programmers think the RPC architecture is déclassé and prefer to call their services “message-oriented” or “document-oriented” services.</p>\n<p>Well, all web services are message-oriented, because HTTP itself is message-oriented. An HTTP request is just a message: an envelope with a document inside. The question is what that document says. SOAP-based services ask the client to stick a second envelope (a SOAP document) inside the HTTP envelope. Again, the real question is what it says inside the envelope. A SOAP envelope can contain any XML data, just as an HTTP envelope can contain any data in its entity-body. But in every <span class=\"emphasis\"><em>existing</em></span> SOAP service, the SOAP envelope contains a description of an RPC call in a format similar to that of XML-RPC.</p>\n<p>There are various ways of shuffling this RPC description around and giving it different labels—“document/literal” or “wrapped/literal”—but any way you slice it, you have a service with a large vocabulary of method information, a service that looks for scoping information inside the document rather than on the envelope. These are defining features of the RPC architecture.</p>\n<p>I emphasize that this is not a fact about SOAP, just a fact about how it’s currently used. SOAP, like HTTP, is just a way of putting data in an envelope. Right now, though, the only data that ever gets put in that envelope is XML-RPC-esque data about how to call a remote function, or what’s the return value from such a function. I argue this point in more detail in <a class=\"xref\" href=\"ch10.html\" title=\"Chapter&nbsp;10.&nbsp;The Resource-Oriented Architecture Versus Big Web Services\">Chapter&nbsp;10</a>.</p>\n<h2>WS-*</h2>\n<p>These standards<a id=\"I_indexterm1_tt85\" class=\"indexterm\"></a> define special XML “stickers” for the SOAP envelope. The stickers are analagous to HTTP headers.</p>\n<h2>WSDL</h2>\n<p>The<a id=\"I_indexterm1_tt86\" class=\"indexterm\"></a> Web Service Description Language (WSDL) is an XML vocabulary used to describe SOAP-based web services. A client can load a WSDL file and know exactly which RPC-style methods it can call, what arguments those methods expect, and which data types they return. Nearly every SOAP service in existence exposes a WSDL file, and most SOAP services would be very difficult to use without their WSDL files serving as guides. As I discuss in <a class=\"xref\" href=\"ch10.html\" title=\"Chapter&nbsp;10.&nbsp;The Resource-Oriented Architecture Versus Big Web Services\">Chapter&nbsp;10</a>, WSDL bears more responsiblity than any other technology for maintaining SOAP’s association with the RPC style.</p>\n<h2>WADL</h2>\n<p>The<a id=\"I_indexterm1_tt87\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt88\" class=\"indexterm\"></a> Web Application Description Language (WADL) is an XML vocabulary used to describe RESTful web services. As with WSDL, a generic client can load a WADL file and be immediately equipped to access the full functionality of the corresponding web service. I discuss WADL in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>.</p>\n<p>Since RESTful services have simpler interfaces, WADL is not nearly as necessary to these services as WSDL is to RPC-style SOAP services. This is a good thing, since as of the time of writing there are few real web services providing official WADL files. Yahoo!’s web search service is one that does.<a id=\"I_indexterm1_tt89\" class=\"indexterm\"></a></p>",
      "slug" : "technologies-on-the-programmable-web"
    }, {
      "title" : "Leftover Terminology",
      "type" : "page",
      "htmlContent" : "<p>Believe it not, there are some common terms used in discussions of REST that I haven’t mentioned yet. I haven’t mentioned them because I think they’re inaccurate or entirely outside the scope of this book. But I owe you explanations of <span class=\"emphasis\"><em>why</em></span> I think this, so you can decide whether or not you agree. Feel free to skip this section if you haven’t heard these terms.</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">Service-Oriented Architecture</span>\n  </dt>\n  <dd>\n   <p>This is<a id=\"I_indexterm1_tt90\" class=\"indexterm\"></a> a big industry buzzword. I’m not going to dwell on it for two reasons. First, the term is not very well defined. Second, to the extent that it is defined, it means something like: “a software architecture based on the production and consumption of web services.” In this book I talk about the design of individual services. A book on service-oriented architecture should work on a slightly higher level, showing how to use services as software components, how to integrate them into a coherent whole. I don’t cover that sort of thing in this book.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">SOAP as a competitor to REST</span>\n  </dt>\n  <dd>\n   <p>If you get<a id=\"I_indexterm1_tt91\" class=\"indexterm\"></a> involved with web service debates you’ll hear this one a lot. You won’t hear it here because it gives the wrong impression. The primary competitors to RESTful architectures are RPC architectures, not specific technologies like SOAP. It is true that basically every SOAP service that now exists has an RPC architecture, but SOAP is just a way of putting a document in an envelope with stickers on it, like HTTP. SOAP is tied to the RPC architecture mainly by historical contingency and the current generation of automated tools.</p>\n   <p>There is a real tension here, but it’s not one I’ll cover much in this book. Roughly speaking, it’s the tension between services that put their documents in a SOAP envelope and then an HTTP envelope; and services that only use the HTTP envelope.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">HTTP+POX</span>\n  </dt>\n  <dd>\n   <p>Stands <a id=\"I_indexterm1_tt92\" class=\"indexterm\"></a>for HTTP plus Plain Old XML. This term covers roughly those services I call REST-RPC hybrid services. They overlap with RESTful designs, especially when it comes to retrieving data, but their basic architecture is RPC-oriented.</p>\n   <p>I don’t like this term because Plain Old XML is inaccurate. The interesting thing about these services is not that they produce plain old XML documents (as opposed to XML documents wrapped in SOAP envelopes). Some of these services don’t serve XML at all: they serve JSON, plain text, or binary files. No, the interesting thing about these services is their RPC architecture. <span class=\"emphasis\"><em>That’s</em></span> what puts them in opposition to REST.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">STREST</span>\n  </dt>\n  <dd>\n   <p>Means <a id=\"I_indexterm1_tt93\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt94\" class=\"indexterm\"></a>Service-Trampled REST. This is another term for REST-RPC hybrid architectures. It’s more accurate than HTTP+POX since it conveys the notion of a RESTful architecture taken over by something else: in this case, the RPC style.</p>\n   <p>This is a cute acronym but I don’t like it, because it buys into a myth that the only true web services are RPC-style services. After all, the service that trampled your REST was an RPC service. If you think that REST services are real services, it doesn’t make sense to cry “Help! I had some REST but then this <span class=\"emphasis\"><em>Service</em></span> got into it!” RPC-Trampled REST would be more accurate, but that’s a lousy acronym.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">High and low REST</span>\n  </dt>\n  <dd>\n   <p>Yet another way<a id=\"I_indexterm1_tt95\" class=\"indexterm\"></a><a id=\"I_indexterm1_tt96\" class=\"indexterm\"></a> of distinguishing between truly RESTful services and the ones I call REST-RPC hybrids. High REST services are just those that adhere closely to the Fielding dissertation. Among other things, they put method information in the HTTP method and scoping information in the URI. Low REST services are presumed to have deviated. Since low REST services tend to deviate from orthodoxy in a particular direction (toward the RPC style), I prefer a more specific <a id=\"I_indexterm1_tt97\" class=\"indexterm\"></a>terminology.</p>\n  </dd>\n </dl>\n</div>",
      "slug" : "leftover-terminology"
    } ]
  }, {
    "title" : "2. Writing Web Service Clients",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;2.&nbsp;Writing Web Service Clients</h2>\n  </div>\n </div>\n</div>",
    "textContent" : "Chapter 2. Writing Web Service Clients",
    "slug" : "2-writing-web-service-clients",
    "pages" : [ {
      "title" : "Web Services Are Web Sites",
      "type" : "page",
      "htmlContent" : "<p>In <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a> I showed<a id=\"ch01_clients\" class=\"indexterm\"></a><a id=\"ch01_webservices\" class=\"indexterm\"></a> some quick examples of clients for existing, public web services. Some of the services had resource-oriented RESTful architectures, some had RPC-style architectures, and some were hybrids. Most of the time, I accessed these services through wrapper libraries instead of making the HTTP requests myself.</p>\n<p>You can’t always rely on the existence of a convenient wrapper library<a id=\"I_indexterm2_tt99\" class=\"indexterm\"></a> for your favorite web service, especially if you wrote the web service yourself. Fortunately, it’s easy to write programs that work directly with HTTP requests and responses. In this chapter I show how to write clients for RESTful and hybrid architecture services, in a variety of programming languages.</p>\n<p><a class=\"xref\" href=\"ch02.html#yahoowebsearch\" title=\"Example&nbsp;2-1.&nbsp;Searching the Web with Yahoo!’s web service\">Example&nbsp;2-1</a> is a bare HTTP client for a RESTful web service: <a id=\"I_indexterm2_tt100\" class=\"indexterm\"></a>Yahoo!’s web search. You might compare it to <a class=\"xref\" href=\"ch01.html#googlewebsearchexample\" title=\"Example&nbsp;1-8.&nbsp;Searching the Web with Google’s search service\">Example&nbsp;1-8</a>, the client from the previous chapter that runs against the RPC-style SOAP interface to Google’s web search.</p>\n<div class=\"example\">\n <a id=\"yahoowebsearch\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-1.&nbsp;Searching the Web with Yahoo!’s web service\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby\n# yahoo-web-search.rb\nrequire 'open-uri'\nrequire 'rexml/document'\nrequire 'cgi'\n\nBASE_URI = 'http://api.search.yahoo.com/WebSearchService/V1/webSearch'\n\ndef print_page_titles(term)\n  # Fetch a resource: an XML document full of search results.\n  term = CGI::escape(term)\n  xml = open(BASE_URI + \"?appid=restbook&amp;query=#{term}\").read\n  \n  # Parse the XML document into a data structure.\n  document = REXML::Document.new(xml)\n  \n  # Use XPath to find the interesting parts of the data structure.\n  REXML::XPath.each(document, '/ResultSet/Result/Title/[]') do |title|\n    puts title\n  end        \nend\n\n(puts \"Usage: #{$0} [search term]\"; exit) if ARGV.empty?\nprint_page_titles(ARGV.join(' '))</pre>\n </div>\n</div>\n<p>This “web service” code looks just like generic HTTP client code. It uses Ruby’s standard open-uri library to make an HTTP request and Ruby’s standard REXML library to parse the output. I’d use the same tools to fetch and process a web page. These two<a id=\"I_indexterm2_tt101\" class=\"indexterm\"></a> URIs:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><em class=\"filename\">http://api.search.yahoo.com/WebSearchService/V1/webSearch?appid=restbook&amp;query=jellyfish</em></p></li>\n  <li class=\"listitem\"><p><em class=\"filename\">http://search.yahoo.com/search?p=jellyfish</em></p></li>\n </ul>\n</div>\n<p>point to different forms of the same thing: “a list of search results for the query ‘jellyfish.’” One URI serves HTML and is intended<a id=\"I_indexterm2_tt102\" class=\"indexterm\"></a> for use by web browsers; the other serves XML and is intended for use by automated clients.</p>\n<div class=\"sidebar\">\n <a id=\"I_sidebar2_tt103\"></a>\n <div class=\"sidebar-title\">\n  XPath Exposition\n </div>\n <p>Reading from right to left, the expression <code class=\"literal\">/ResultSet/Result/Title/[]</code> <a id=\"I_indexterm2_tt104\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt105\" class=\"indexterm\"></a>means:</p>\n <div class=\"informaltable\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n   </colgroup>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Find the direct children</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">[ ]</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">of every <code class=\"literal\">Title</code> tag</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Title/</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">that’s the direct child of a <code class=\"literal\">Result</code> tag</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Result/</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">that’s the direct child of the <code class=\"literal\">ResultSet</code> tag</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">ResultSet/</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">at the root of the document.</td>\n     <td>/<a id=\"I_indexterm2_tt106\" class=\"indexterm\"></a> <a id=\"I_indexterm2_tt107\" class=\"indexterm\"></a></td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n <p>If you look at the XML files served by the Yahoo! search service, you’ll see a <code class=\"literal\">ResultSet</code> tag that contains <code class=\"literal\">Result</code> tags, each of which contains a <code class=\"literal\">Title</code> tag. The contents of those tags are what I’m after in <a class=\"xref\" href=\"ch02.html#yahoowebsearch\" title=\"Example&nbsp;2-1.&nbsp;Searching the Web with Yahoo!’s web service\">Example&nbsp;2-1</a>.</p>\n</div>\n<p>There is no magic dust that makes an HTTP request a web service request. You can make requests to a RESTful or hybrid web service using nothing but your programming language’s HTTP client library. You can process the results with a standard XML parser. Every web service request involves the same three steps:</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>Come up with the data that will go into the HTTP request: the HTTP method, the URI, any HTTP headers, and (for requests using the PUT or POST method) any document that needs to go in the request’s entity-body.</p></li>\n  <li class=\"listitem\"><p>Format the data as an HTTP request, and send it to the appropriate HTTP server.</p></li>\n  <li class=\"listitem\"><p>Parse the response data—the response code, any headers, and any entity-body—into the data structures the rest of your program needs.</p></li>\n </ol>\n</div>\n<p>In this chapter I show how different programming languages and libraries implement this three-step process.</p>\n<h2>Wrappers, WADL, and ActiveResource</h2>\n<p>Although a<a id=\"I_indexterm2_tt108\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt109\" class=\"indexterm\"></a> web service request is just an HTTP request, any given web service has a logic and a structure that is missing from the World Wide Web as a whole. If you follow the three-step algorithm every time you make a web service request, your code will be a mess and you’ll never take advantage of that underlying structure.</p>\n<p>Instead, as a smart programmer you’ll quickly notice the patterns underlying your requests to a given service, and write wrapper methods that abstract away the details of HTTP access. The <code class=\"function\">print_page_titles</code> method defined in <a class=\"xref\" href=\"ch02.html#yahoowebsearch\" title=\"Example&nbsp;2-1.&nbsp;Searching the Web with Yahoo!’s web service\">Example&nbsp;2-1</a> is a primitive wrapper. As a web service gets popular, its users release polished wrapper libraries in various languages. Some service providers offer official wrappers: <a id=\"I_indexterm2_tt110\" class=\"indexterm\"></a>Amazon gives away clients in five different languages for its RESTful S3 service. That hasn’t stopped outside programmers from writing their own S3 client libraries, like <a id=\"I_indexterm2_tt111\" class=\"indexterm\"></a><span class=\"application\">jbucket</span> and <a id=\"I_indexterm2_tt112\" class=\"indexterm\"></a><span class=\"application\">s3sh</span>.</p>\n<p>Wrappers make service programming easy, because the API of a wrapper library is tailored to one particular service. You don’t have to think about HTTP at all. The downside is that each wrapper is slightly different: learning one wrapper doesn’t prepare you for the next one.</p>\n<p>This is a little disappointing. After all, these services are just variations on the three-step algorithm for making HTTP requests. Shouldn’t there be some way of abstracting out the differences between services, some library that can act as a wrapper for the entire space of RESTful and hybrid services?</p>\n<p>This is the problem of service description. We need a language with a vocabulary that can describe the variety of RESTful and hybrid services. A document written in this language could script a generic web service client, making it act like a custom-written wrapper. The SOAP RPC community has united around WSDL as its service description language. The REST community has yet to unite around a description language, so in this book I do my bit to promote WADL as a resource-oriented alternative to WSDL. I think it’s the simplest and most elegant solution that solves the whole problem. I show a simple WADL client in this chapter and it is covered in detail in the <a class=\"xref\" href=\"ch09.html#servicedescription\" title=\"WADL\">WADL</a>” section.</p>\n<p class=\"keep-together\">There’s also a generic client called<a id=\"I_indexterm2_tt113\" class=\"indexterm\"></a> ActiveResource, still in development. ActiveResource makes it easy to write clients for many kinds of web services written with the Ruby on Rails framework. I cover ActiveResource at the end of <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>.</p>",
      "slug" : "web-services-are-web-sites"
    }, {
      "title" : "del.icio.us: The Sample Application",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>In this chapter<a id=\"ch02_delicious\" class=\"indexterm\"></a> I walk through the life cycle of a web service request from the client’s point of view. Though most of this book’s code examples are written in Ruby, in this chapter I show code written in a variety of programming languages. My example throughout this chapter is the web service provided by the social bookmarking web site <a class=\"ulink\" href=\"http://del.icio.us/\" target=\"_top\">del.icio.us</a>. You can read a prose description of this web service at <a class=\"ulink\" href=\"http://del.icio.us/help/api/\" target=\"_top\">http://del.icio.us/help/api/</a>.</p> \n  <div class=\"tip\" title=\"Tip\"> \n   <h3 class=\"title\">Tip</h3> \n   <p>If you’re not familiar with del.icio.us, here’s a brief digressionary introduction. del.icio.us is a web site that works like your web browser’s bookmark<a id=\"I_indexterm2_tt114\" class=\"indexterm\"></a><a id=\"ch02_book\" class=\"indexterm\"></a> feature, but it’s public and better-organized (see <a class=\"xref\" href=\"ch02.html#delicious-screenshot\" title=\"Figure&nbsp;2-1.&nbsp;del.icio.us screenshot\">Figure&nbsp;2-1</a>). When you save a link to del.icio.us, it’s associated with your account so you can find it later. You can also share your bookmarks with others.</p> \n   <p>You can associate short strings, called <em class=\"firstterm\">tags</em>, with <a id=\"I_indexterm2_tt115\" class=\"indexterm\"></a>a URI. Tags are versatile little suckers. They make it easy for you to find a URI later, they make it possible to group URIs together, and when multiple people tag the same URI, they create a machine-readable vocabulary for that URI.</p> \n  </div> \n  <div class=\"figure\"> \n   <a id=\"delicious-screenshot\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"mediaobject\"> \n     <a id=\"I_mediaobject2_tt116\"></a> \n     <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24556.png.jpg\" alt=\"del.icio.us screenshot\"> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;2-1.&nbsp;del.icio.us screenshot \n   </div> \n  </div> \n  <p>The del.icio.us web service gives you programmatic access to your bookmarks. You can write programs that bookmark URIs, convert your browser bookmarks to del.icio.us bookmarks, or fetch the URIs you’ve bookmarked in the past. The best way to visualize the del.icio.us web service is to use the human-oriented web site for a while. There’s no fundamental difference between the del.icio.us web site and the del.icio.us web service, but there are variations:</p> \n  <div class=\"itemizedlist\"> \n   <ul class=\"itemizedlist\"> \n    <li class=\"listitem\"><p>The web site is rooted at <a class=\"ulink\" href=\"http://del.icio.us/\" target=\"_top\">http://del.icio.us/</a> and the web service is rooted at <a class=\"ulink\" href=\"https://api.del.icio.us/v1/\" target=\"_top\">https://api.del.icio.us/v1/</a>. The web site communicates with clients through HTTP, the web service uses secure HTTPS.</p></li> \n    <li class=\"listitem\"><p>The web site and the web service expose different URI structures. To get your recent bookmarks from the web site, you fetch <code class=\"literal\">https://del.icio.us/<em class=\"replaceable\"><code>{your-username}</code></em></code>. To get your recent bookmarks from the web service, you fetch <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts/recent\" target=\"_top\">https://api.del.icio.us/v1/posts/recent</a>.</p></li> \n    <li class=\"listitem\"><p>The web site serves HTML documents, and the web service serves XML documents. The formats are different, but they contain the same data.</p></li> \n    <li class=\"listitem\"><p>The web site lets you see a lot of information without logging in or even having an account. The web service makes you authenticate for every request.</p></li> \n    <li class=\"listitem\"><p>Both offer features for personal bookmark management, but the web site also has social features. On the web site, you can see lists of URIs other people have bookmarked, lists of people who have bookmarked a particular URI, lists of URIs tagged with a certain tag, and lists of popular bookmarks. The web service only lets you see your own bookmarks.</p></li> \n   </ul> \n  </div> \n  <p>These variations are important but they don’t make the web service a different kind of thing from the web site. The web service is a stripped-down web site that uses HTTPS and serves funny-looking documents. (You can flip this around and look at the web site as a more functional web service, though the del.icio.us administrators discourage this viewpoint.) This is a theme I’m coming back to again and again: web services should work under the same rules as web sites.</p> \n  <p>Aside from its similarity to a web site, the del.icio.us web service does not have a very RESTful design. The programmers have laid out the service URIs in a way that suggests an RPC-style rather than a resource-oriented design. All requests to the del.icio.us web service use the HTTP GET method: the real method information goes into the URI and might conflict with “GET”. A couple sample URIs should illustrate this point: consider <em class=\"filename\">https://api.del.icio.us/v1/posts/add</em> and <em class=\"filename\">https://api.del.icio.us/v1/tags/rename</em>. Though there’s no explicit <code class=\"varname\">methodName</code> variable, the del.icio.us API is just like the Flickr API I covered in <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a>. The method information (“add” and “rename”) is kept in the URIs, not in the HTTP method.</p> \n  <p>So why have I chosen del.icio.us for the sample clients in this chapter? Three reasons. First, del.icio.us is an easy application to understand, and its web service is popular and easy to use.</p> \n  <p>Second, I want to make it clear that what I say in the coming chapters is prescriptive, not descriptive. When you implement a web service, following the constraints of REST will give your clients a nice, usable web service that acts like the web. But when you implement a web service <span class=\"emphasis\"><em>client</em></span>, you have to work with the service as it is. The only alternatives are to lobby for a change or boycott the service. If a web service designer has never heard of REST, or thinks that hybrid services are “RESTful,” there’s little you can do about it. Most existing services are hybrids or full-blown RPC services. A snooty client that can feed only on the purest of REST services isn’t very useful, and won’t be for the forseeable future. Servers should be idealistic; clients must be pragmatic. This is a variant of Postel’s Law: “Be conservative in what you do; be liberal in which you accept from others.”</p> \n  <p>Third, in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> I present a bookmark-tracking web service that’s similar to del.icio.us but designed on RESTful principles. I want to introduce the social bookmarking domain to you now, so you’ll be thinking about it as I introduce the principles of REST and my Resource-Oriented Architecture. In <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, when I design and implement a RESTful interface to del.icio.us-like functionality, you’ll see the difference.</p> \n  <h2>What the Sample Clients Do</h2> \n  <p>In the sections that follow, I show you simple del.icio.us clients in a variety of programming languages. All of these clients do exactly the same thing, and it’s worth spelling out what that is. First, they open up a<a id=\"I_indexterm2_tt117\" class=\"indexterm\"></a> TCP/IP socket connection to port 443 (the standard HTTPS port) on the server at <code class=\"literal\">api.del.icio.us</code>. Then they send something like the HTTP request in <a class=\"xref\" href=\"ch02.html#delicious-http-request\" title=\"Example&nbsp;2-2.&nbsp;A possible request to the del.icio.us web service\">Example&nbsp;2-2</a>. Like all HTTP responses, this one has three parts: a status code, a set of headers, and an entity-body. In this case, the entity-body<a id=\"I_indexterm2_tt118\" class=\"indexterm\"></a> is an XML document.</p> \n  <div class=\"example\"> \n   <a id=\"delicious-http-request\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;2-2.&nbsp;A possible request to the del.icio.us web service \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">GET /v1/posts/recent HTTP/1.1\nHost: api.del.icio.us\nAuthorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=</pre> \n   </div> \n  </div> \n  <p>The del.icio.us web service sends back something like the HTTP response in <a class=\"xref\" href=\"ch02.html#delicious-http-response\" title=\"Example&nbsp;2-3.&nbsp;A possible response from the del.icio.us web service\">Example&nbsp;2-3</a>, then closes the socket connection.</p> \n  <div class=\"example\"> \n   <a id=\"delicious-http-response\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;2-3.&nbsp;A possible response from the del.icio.us web service \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">200 OK\nContent-Type: text/xml\nDate: Sun, 29 Oct 2006 15:09:36 GMT\nConnection: close\n\n&lt;?xml version='1.0' standalone='yes'?&gt;\n&lt;posts tag=\"\" user=\"username\"&gt;\n  &lt;post href=\"http://www.foo.com/\" description=\"foo\" extended=\"\" \n   hash=\"14d59bdc067e3c1f8f792f51010ae5ac\" tag=\"foo\"\n   time=\"2006-10-29T02:56:12Z\" /&gt;\n  &lt;post href=\"http://amphibians.com/\" description=\"Amphibian Mania\" \n   extended=\"\" hash=\"688b7b2f2241bc54a0b267b69f438805\" tag=\"frogs toads\" \n   time=\"2006-10-28T02:55:53Z\" /&gt;\n&lt;/posts&gt;</pre> \n   </div> \n  </div> \n  <p>The clients I write are only interested in the entity-body part. Specifically, they’re only interested in the <code class=\"literal\">href</code> and <code class=\"literal\">description</code> attributes of the <code class=\"literal\">post</code> tags. They’ll parse the XML document into a data structure and use the<a id=\"I_indexterm2_tt119\" class=\"indexterm\"></a> XPath expression <code class=\"literal\">/posts/post</code> to iterate over the <code class=\"literal\">post</code> tags. They’ll print to standard output the <code class=\"literal\">href</code> and <code class=\"literal\">description</code> attribute of every del.icio.us bookmark:<a id=\"I_indexterm2_tt120\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt121\" class=\"indexterm\"></a></p> \n  <div class=\"informalexample\"> \n   <pre class=\"screen\">foo: http://www.foo.com/\nAmphibian Mania: http://amphibians.com/</pre> \n  </div> \n  <div class=\"sidebar\"> \n   <a id=\"I_sidebar2_tt122\"></a> \n   <div class=\"sidebar-title\">\n     XPath Exposition \n   </div> \n   <p>Reading from right to left, the XPath expression <code class=\"literal\">/posts/post</code> means:</p> \n   <div class=\"informaltable\"> \n    <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \"> \n     <colgroup> \n      <col> \n      <col> \n     </colgroup> \n     <tbody> \n      <tr> \n       <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Find every <code class=\"literal\">post</code> tag</td> \n       <td style=\"border-bottom: 0.5pt solid ; \">post</td> \n      </tr> \n      <tr> \n       <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">that’s the direct child of the <code class=\"literal\">posts</code> tag</td> \n       <td style=\"border-bottom: 0.5pt solid ; \">posts/</td> \n      </tr> \n      <tr> \n       <td style=\"border-right: 0.5pt solid ; \">at the root of the document.</td> \n       <td>/</td> \n      </tr> \n     </tbody> \n    </table> \n   </div> \n  </div> \n  <p>To use any of these clients, you’ll need to create a del.icio.us account. Some of the clients hard-code the strings “username” and “password”; you’ll need to substitute your del.icio.us username and password.</p>\n </body>\n</html>",
      "slug" : "del-icio-us-the-sample-application"
    }, {
      "title" : "Making the Request: HTTP Libraries",
      "type" : "page",
      "htmlContent" : "<p>Every <a id=\"ch02_httplibraries\" class=\"indexterm\"></a>modern<a id=\"ch02_libs\" class=\"indexterm\"></a> programming language has one or more libraries for making HTTP requests. Not all of these libraries are equally useful, though. To build a fully general web service client you need an HTTP library with these features:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>It must support<a id=\"I_indexterm2_tt123\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt124\" class=\"indexterm\"></a> HTTPS and SSL certificate validation. Web services, like web sites, use HTTPS to secure communication with their clients. Many web services (del.icio.us is one example) won’t accept plain HTTP requests at all. A library’s HTTPS support often depends on the presense of an external SSL library written in C.</p></li>\n  <li class=\"listitem\"><p>It must support at least the five main HTTP methods:<a id=\"I_indexterm2_tt125\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt126\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt127\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt128\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt129\" class=\"indexterm\"></a> GET, HEAD, POST, PUT, and DELETE. Some libraries support only GET and POST. Others are designed for simplicity and support only GET.</p><p>You can get pretty far with a client that only supports GET and POST: HTML forms support only those two methods, so the entire human web is open to you. You can even do all right with just GET, because many web services (among them del.icio.us and Flickr) use GET even where they shouldn’t. But if you’re choosing a library for all your web service clients, or writing a general client like a WADL client, you need a library that supports all five methods. Additional methods like<a id=\"I_indexterm2_tt130\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt131\" class=\"indexterm\"></a> OPTIONS and TRACE, and<a id=\"I_indexterm2_tt132\" class=\"indexterm\"></a> WebDAV extensions like MOVE, are a bonus.</p></li>\n  <li class=\"listitem\"><p>It must allow the programmer to customize the data sent as the<a id=\"I_indexterm2_tt133\" class=\"indexterm\"></a> entity-body of a PUT or POST request.</p></li>\n  <li class=\"listitem\"><p>It must allow the programmer to customize a request’s HTTP headers.</p></li>\n  <li class=\"listitem\"><p>It must give the programmer access to the response code and headers of an HTTP response; not just access to the entity-body.</p></li>\n  <li class=\"listitem\"><p>It must be able to communicate through an HTTP proxy. The average programmer may not think about this, but many HTTP clients in corporate environments can only work through a proxy. Intermediaries like HTTP proxies are also a standard part of the REST meta-architecture, though not one I’ll be covering in much detail.</p></li>\n </ul>\n</div>\n<h2>Optional Features</h2>\n<p>There are also some features of an HTTP library that make life easier as you write<a id=\"I_indexterm2_tt134\" class=\"indexterm\"></a> clients for RESTful and hybrid services. These features mostly boil down to knowledge about HTTP headers, so they’re technically optional. You can implement them yourself so long as your library gives you access to request and response HTTP headers. The advantage of library support is that you don’t have to worry about the details.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>An HTTP library should automatically request data in compressed form to save bandwidth, and transparently decompress the data it receives. The HTTP request header here is<a id=\"I_indexterm2_tt135\" class=\"indexterm\"></a> <code class=\"literal\">Accept-Encoding</code>, and the response header is <code class=\"literal\">Encoding</code>. I discuss these in more detail in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>.</p></li>\n  <li class=\"listitem\"><p>It should automatically cache the responses to your requests. The second time you request a URI, it should return an item from the cache if the object on the server hasn’t changed. The HTTP headers<a id=\"I_indexterm2_tt136\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt137\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt138\" class=\"indexterm\"></a> here are <code class=\"literal\">ETag</code> and <code class=\"literal\">If-Modified-Since</code> for the request, and <code class=\"literal\">Etag</code> and <code class=\"literal\">Last-Modified</code> for the response. These, too, I discuss in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>.</p></li>\n  <li class=\"listitem\"><p>It should transparently support the most common forms of HTTP authentication:<a id=\"I_indexterm2_tt139\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt140\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt141\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt142\" class=\"indexterm\"></a> Basic, Digest, and WSSE. It’s useful to support custom, company-specific authentication methods such as Amazon’s, or to have plug-ins that support them.</p><p>The request header is<a id=\"I_indexterm2_tt143\" class=\"indexterm\"></a> <code class=\"literal\">Authorization</code> and the response header (the one that demands authentication) is <code class=\"literal\">WWW-Authenticate</code>. I cover the standard HTTP authentication methods, plus WSSE, in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>. I cover Amazon’s custom authentication method in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>.</p></li>\n  <li class=\"listitem\"><p>It should be able to transparently follow HTTP redirects, while avoiding infinite<a id=\"I_indexterm2_tt144\" class=\"indexterm\"></a> redirects and redirect loops. This should be an optional convenience for the user, rather than something that happens on every single redirect. A web service may reasonably send a status code of 303 (“See Other”) without implying that the client should <span class=\"emphasis\"><em>go fetch that other URI right now!</em></span></p></li>\n  <li class=\"listitem\"><p>It should be able to parse and create HTTP cookie strings, rather than forcing the programmer to manually set the <code class=\"literal\">Cookie</code> header. This is not very important for RESTful services, which shun cookies, but it’s very important if you want to use the human web.</p></li>\n </ul>\n</div>\n<p>When you’re writing code against a specific service, you may be able to do without some or all of these features. Ruby’s standard<a id=\"I_indexterm2_tt145\" class=\"indexterm\"></a> <code class=\"literal\">open-uri</code> library only supports GET requests. If you’re writing a client for del.icio.us, there’s no problem, since that web service expects only GET requests. But try to use <code class=\"literal\">open-uri</code> with Amazon S3 (which uses GET, HEAD, PUT, and DELETE), and you’ll quickly run into a wall. In the next sections I recommend good HTTP client libraries for some popular programming languages.</p>\n<h2>Ruby: rest-open-uri and net/http</h2>\n<p>Ruby <a id=\"I_indexterm2_tt146\" class=\"indexterm\"></a>comes with two HTTP client libraries,<a id=\"I_indexterm2_tt147\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt148\" class=\"indexterm\"></a> <code class=\"literal\">open-uri</code> and the lower-level <code class=\"literal\">net/http</code>. Either can make HTTPS requests if you’ve got the <code class=\"literal\">net/https</code> extension installed. Windows installations of Ruby should be able to make HTTPS requests out of the box. If you’re not on Windows, you may have to install <code class=\"literal\">net/https</code> separately.<sup>[<a id=\"id414573\" href=\"#ftn.id414573\" class=\"footnote\">8</a>]</sup></p>\n<p>The <code class=\"literal\">open-uri</code> library has a simple and elegant interface that lets you treat URIs as filenames. To read a web page, you simply <code class=\"function\">open</code> its URI and read data from the “filehandle.” You can pass in a hash to <code class=\"literal\">open</code> containing custom HTTP headers and <code class=\"function\">open</code>-specific keyword arguments. This lets you set up a proxy, or specify authentication information.</p>\n<p>Unfortunately, right now <code class=\"literal\">open-uri</code> only supports one HTTP method: GET<a id=\"I_indexterm2_tt152\" class=\"indexterm\"></a>. That’s why I’ve made some minor modifications to <code class=\"literal\">open-uri</code> and made the result available as the <code class=\"literal\">rest-open-uri</code> Ruby gem.<sup>[<a id=\"id414702\" href=\"#ftn.id414702\" class=\"footnote\">9</a>]</sup> I’ve added two keyword arguments to <code class=\"function\">open</code>:<code class=\"literal\"> method</code>, which lets you customize the HTTP method, and <code class=\"literal\">:body</code>, which lets you send data in the entity-body.</p>\n<p><a class=\"xref\" href=\"ch02.html#ruby-delicious\" title=\"Example&nbsp;2-4.&nbsp;A Ruby client using open-uri\">Example&nbsp;2-4</a> is an implementation of the standard del.icio.us example using the <code class=\"literal\">open-uri</code> library (<code class=\"literal\">rest-open-uri</code> works the same way). This code parses the response document using the<a id=\"I_indexterm2_tt155\" class=\"indexterm\"></a> <code class=\"classname\">REXML::Document</code> parser, which you’ve seen before.</p>\n<div class=\"example\">\n <a id=\"ruby-delicious\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-4.&nbsp;A Ruby client using open-uri\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# delicious-open-uri.rb\n\n\nrequire 'open-uri'\nrequire 'rexml/document'\n\n# Fetches a del.icio.us user's recent bookmarks, and prints each one.\ndef print_my_recent_bookmarks(username, password)\n  # Make the HTTPS request.\n  response = open('https://api.del.icio.us/v1/posts/recent',\n                  :http_basic_authentication =&gt; [username, password])\n\n  # Read the response entity-body as an XML document.\n  xml = response.read\n\n  # Turn the document into a data structure.\n  document = REXML::Document.new(xml)\n\n  # For each bookmark...\n  REXML::XPath.each(document, \"/posts/post\") do |e|\n    # Print the bookmark's description and URI\n    puts \"#{e.attributes['description']}: #{e.attributes['href']}\"\n  end\nend\n\n# Main program\nusername, password = ARGV\nunless username and password\n  puts \"Usage: #{$0} [username] [password]\"\n  exit\nend\nprint_my_recent_bookmarks(username, password)</pre>\n </div>\n</div>\n<p>I mentioned earlier that Ruby’s stock <code class=\"literal\">open-uri</code> can only make HTTP GET requests. For many purposes, GET is enough, but if you want to write a Ruby client for a fully RESTful service like Amazon’s S3, you’ll either need to use <code class=\"literal\">rest-open-uri</code>, or turn to Ruby’s low-level HTTP library: <code class=\"literal\">net/http</code>.</p>\n<p>This built-in library provides <a id=\"I_indexterm2_tt156\" class=\"indexterm\"></a>the <code class=\"classname\">Net::HTTP</code> class, which has several methods for making HTTP requests (see <a class=\"xref\" href=\"ch02.html#table_1\" title=\"Table&nbsp;2-1.&nbsp;HTTP feature matrix for Ruby HTTP client libraries\">Table&nbsp;2-1</a>). You can build a complete HTTP client out of this class, using nothing more than the Ruby standard library. In fact, <code class=\"literal\">open-uri</code> and <code class=\"literal\">rest-open-uri</code> are based on <code class=\"classname\">Net::HTTP</code>. Those libraries only exist because <code class=\"classname\">Net::HTTP</code> provides no simple, easy-to-use interface that supports all the features a REST client needs (proxies, HTTPS, headers, and so on). That’s why I recommend you use <code class=\"literal\">rest-open-uri</code>.</p>\n<div class=\"table\">\n <a id=\"table_1\"></a>\n <div class=\"table-title\">\n  Table&nbsp;2-1.&nbsp;HTTP feature matrix for Ruby HTTP client libraries\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">&nbsp;</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">open-uri</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">rest-open-uri</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Net:HTTP</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HTTPS<sup>[<a id=\"id417252\" href=\"#ftn.id417252\" class=\"footnote\">a</a>]</sup></td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HTTP verbs</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">All</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">All</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Custom data</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Custom headers</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Proxies</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Compression</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">No</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Caching</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">No</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Auth methods</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Basic</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Basic</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Basic</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Cookies</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">No</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">Redirects</td>\n     <td style=\"border-right: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; \">Yes</td>\n     <td>No</td>\n    </tr>\n   </tbody>\n   <tbody class=\"footnotes\">\n    <tr>\n     <td colspan=\"4\">\n      <div class=\"footnote\" id=\"ftn.id417252\">\n       <p><sup>[<a href=\"#id417252\" class=\"para\">a</a>] </sup>Assuming the <code class=\"literal\">net/https</code> library is installed</p>\n      </div></td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<h2>Python: httplib2</h2>\n<p>The Python <a id=\"I_indexterm2_tt157\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt158\" class=\"indexterm\"></a>standard library comes with two<a id=\"I_indexterm2_tt159\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt160\" class=\"indexterm\"></a> HTTP clients: <code class=\"literal\">urllib2</code>, which has a file-like interface like Ruby’s <code class=\"literal\">open-uri</code>; and <code class=\"literal\">httplib</code>, which works more like Ruby’s <code class=\"classname\">Net::HTTP</code>. Both offer transparent support for HTTPS, assuming your copy of Python was compiled with SSL support. There’s also an excellent third-party library,<a id=\"I_indexterm2_tt161\" class=\"indexterm\"></a> Joe Gregorio’s <a class=\"ulink\" href=\"http://bitworking.org/projects/httplib2/\" target=\"_top\"><code class=\"literal\">httplib2</code></a>, which is the one I recommend in general. <code class=\"literal\">httplib2</code> is an excellent piece of software, supporting nearly every feature on my wish list—most notably, transparent caching. <a class=\"xref\" href=\"ch02.html#table_2\" title=\"Table&nbsp;2-2.&nbsp;HTTP feature matrix for Python HTTP client libraries\">Table&nbsp;2-2</a> lists the features available in each library.</p>\n<div class=\"table\">\n <a id=\"table_2\"></a>\n <div class=\"table-title\">\n  Table&nbsp;2-2.&nbsp;HTTP feature matrix for Python HTTP client libraries\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">&nbsp;</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">urllib2</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">httplib</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">httplib2</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HTTPS<sup>[<a id=\"id411971\" href=\"#ftn.id411971\" class=\"footnote\">a</a>]</sup></td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HTTP verbs</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET, POST</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">All</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">All</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Custom data</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Custom headers</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Proxies</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">No</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Compression</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Caching</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Auth methods</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Basic, Digest</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">None</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Basic, Digest, WSSE, Google</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Cookies</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes (Use <code class=\"literal\">urllib2.build_opener(HTTPCookieProcessor)</code>)</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">No</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">Redirects</td>\n     <td style=\"border-right: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; \">No</td>\n     <td>Yes</td>\n    </tr>\n   </tbody>\n   <tbody class=\"footnotes\">\n    <tr>\n     <td colspan=\"4\">\n      <div class=\"footnote\" id=\"ftn.id411971\">\n       <p><sup>[<a href=\"#id411971\" class=\"para\">a</a>] </sup>Assuming Python was compiled with SSL support</p>\n      </div></td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<p><a class=\"xref\" href=\"ch02.html#example_5\" title=\"Example&nbsp;2-5.&nbsp;A del.icio.us client in Python\">Example&nbsp;2-5</a> is a del.icio.us client that uses <code class=\"literal\">httplib2</code>. It uses the ElementTree library to parse the del.icio.us XML.</p>\n<div class=\"example\">\n <a id=\"example_5\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-5.&nbsp;A del.icio.us client in Python\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/python2.5\n# delicious-httplib2.py\nimport sys\nfrom xml.etree import ElementTree\nimport httplib2\n\n# Fetches a del.icio.us user's recent bookmarks, and prints each one.\ndef print_my_recent_bookmarks(username, password):\n    client = httplib2.Http(\".cache\")\n    client.add_credentials(username, password)\n\n    # Make the HTTP request, and fetch the response and the entity-body.\n    response, xml = client.request('https://api.del.icio.us/v1/posts/recent')\n\n    # Turn the XML entity-body into a data structure.\n    doc = ElementTree.fromstring(xml)\n\n    # Print information about every bookmark.\n    for post in doc.findall('post'):\n        print \"%s: %s\" % (post.attrib['description'], post.attrib['href'])\n\n# Main program\nif len(sys.argv) != 3:    \n    print \"Usage: %s [username] [password]\" % sys.argv[0]\n    sys.exit()\n\nusername, password = sys.argv[1:]\nprint_my_recent_bookmarks(username, password)</pre>\n </div>\n</div>\n<h2>Java: HttpClient</h2>\n<p>The Java<a id=\"I_indexterm2_tt162\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt163\" class=\"indexterm\"></a> standard library comes with an HTTP<a id=\"I_indexterm2_tt164\" class=\"indexterm\"></a> client, <code class=\"classname\">java.net.HttpURLConnection</code>. You can get an instance by calling <code class=\"function\">open</code> on <a id=\"I_indexterm2_tt165\" class=\"indexterm\"></a>a <code class=\"classname\">java.net.URL</code> object. Though it supports most of the basic features of HTTP, programming to its API is very difficult. The Apache Jakarta project has a competing client called <a class=\"ulink\" href=\"http://jakarta.apache.org/commons/httpclient/\" target=\"_top\"><span class=\"application\">HttpClient</span></a>, which has a better design. There’s also <a class=\"ulink\" href=\"http://www.restlet.org/\" target=\"_top\"><span class=\"application\">Restlet</span></a>. I cover Restlet as a server library in <a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">Chapter&nbsp;12</a>, but it’s also an HTTP client library. The class <code class=\"classname\">org.restlet.Client</code> makes it easy to make simple HTTP requests, and the class <code class=\"classname\">org.restlet.data.Request</code> hides the <code class=\"classname\">HttpURLConnection</code> programming necessary to make more complex requests. <a class=\"xref\" href=\"ch02.html#table_3\" title=\"Table&nbsp;2-3.&nbsp;HTTP feature matrix for Java HTTP client libraries.\">Table&nbsp;2-3</a> lists the features available in each library.</p>\n<div class=\"table\">\n <a id=\"table_3\"></a>\n <div class=\"table-title\">\n  Table&nbsp;2-3.&nbsp;HTTP feature matrix for Java HTTP client libraries.\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">&nbsp;</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HttpURLConnection</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \"><span class=\"application\">HttpClient</span></td>\n     <td style=\"border-bottom: 0.5pt solid ; \"><span class=\"application\">Restlet</span></td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HTTPS</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HTTP verbs</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">All</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">All</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">All</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Custom data</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Custom headers</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Proxies</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Compression</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Caching</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Auth methods</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Basic, Digest, NTLM</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Basic, Digest, NTLM</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Basic, Amazon</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Cookies</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Yes</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">Redirects</td>\n     <td style=\"border-right: 0.5pt solid ; \">Yes</td>\n     <td style=\"border-right: 0.5pt solid ; \">Yes</td>\n     <td>Yes</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<p><a class=\"xref\" href=\"ch02.html#example_6\" title=\"Example&nbsp;2-6.&nbsp;A del.icio.us client in Java\">Example&nbsp;2-6</a> is a Java client for del.icio.us that uses HttpClient. It works in Java 1.5 and up, and it’ll work in previous versions if you install the Xerces parser (see <a class=\"xref\" href=\"ch02.html#javaparser\" title=\"Java: javax.xml, Xerces, or XMLPull\">Java: javax.xml, <span class=\"application\">Xerces</span>, or <span class=\"application\">XMLPull</span></a>” later in this chapter).</p>\n<div class=\"example\">\n <a id=\"example_6\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-6.&nbsp;A del.icio.us client in Java\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">// DeliciousApp.java\nimport java.io.*;\n\nimport org.apache.commons.httpclient.*;\nimport org.apache.commons.httpclient.auth.AuthScope;\nimport org.apache.commons.httpclient.methods.GetMethod;\n\nimport org.w3c.dom.*;\nimport org.xml.sax.SAXException;\nimport javax.xml.parsers.*;\nimport javax.xml.xpath.*;\n\n/**\n * A command-line application that fetches bookmarks from del.icio.us\n * and prints them to standard output.\n */\npublic class DeliciousApp\n{\n  public static void main(String[] args)\n    throws HttpException, IOException, ParserConfigurationException,\n           SAXException, XPathExpressionException\n  {        \n    if (args.length != 2)\n    {\n      System.out.println(\"Usage: java -classpath [CLASSPATH] \"\n                         + \"DeliciousApp [USERNAME] [PASSWORD]\");\n      System.out.println(\"[CLASSPATH] - Must contain commons-codec, \" +\n                         \"commons-logging, and commons-httpclient\");\n      System.out.println(\"[USERNAME]  - Your del.icio.us username\");\n      System.out.println(\"[PASSWORD]  - Your del.icio.us password\");\n      System.out.println();\n\n      System.exit(-1);\n    }\n\n    // Set the authentication credentials.\n    Credentials creds = new UsernamePasswordCredentials(args[0], args[1]);\n    HttpClient client = new HttpClient();\n    client.getState().setCredentials(AuthScope.ANY, creds);\n\n    // Make the HTTP request.\n    String url = \"https://api.del.icio.us/v1/posts/recent\";\n    GetMethod method = new GetMethod(url);\n    client.executeMethod(method);\n    InputStream responseBody = method.getResponseBodyAsStream();\n\n    // Turn the response entity-body into an XML document.\n    DocumentBuilderFactory docBuilderFactory =\n      DocumentBuilderFactory.newInstance();\n    DocumentBuilder docBuilder = \n      docBuilderFactory.newDocumentBuilder();\n    Document doc = docBuilder.parse(responseBody);\n    method.releaseConnection();\n\n    // Hit the XML document with an XPath expression to get the list\n    // of bookmarks.\n    XPath xpath = XPathFactory.newInstance().newXPath();        \n    NodeList bookmarks = (NodeList)xpath.evaluate(\"/posts/post\", doc,\n                                                  XPathConstants.NODESET);\n\n    // Iterate over the bookmarks and print out each one.\n    for (int i = 0; i &lt; bookmarks.getLength(); i++)\n    {\n       NamedNodeMap bookmark = bookmarks.item(i).getAttributes();\n       String description = bookmark.getNamedItem(\"description\")\n           .getNodeValue();\n       String uri = bookmark.getNamedItem(\"href\").getNodeValue();\n       System.out.println(description + \": \" + uri);\n    }\n\n    System.exit(0);\n  }\n}</pre>\n </div>\n</div>\n<h2>C#: System.Web.HTTPWebRequest</h2>\n<p>The<a id=\"I_indexterm2_tt166\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt167\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt168\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt169\" class=\"indexterm\"></a> .NET Common Language Runtime (CLR) <a id=\"I_indexterm2_tt170\" class=\"indexterm\"></a>defines <code class=\"classname\">HTTPWebRequest</code> for making HTTP requests, and <code class=\"classname\">NetworkCredential</code> for<a id=\"I_indexterm2_tt171\" class=\"indexterm\"></a> authenticating the client to the server. The <code class=\"classname\">HTTPWebRequest</code> constructor takes a URI. The <code class=\"classname\">NetworkCredential</code> constructor takes a username and password (see <a class=\"xref\" href=\"ch02.html#example_7\" title=\"Example&nbsp;2-7.&nbsp;A del.icio.us client in C#\">Example&nbsp;2-7</a>).</p>\n<div class=\"example\">\n <a id=\"example_7\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-7.&nbsp;A del.icio.us client in C#\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">using System;\nusing System.IO;\nusing System.Net;\nusing System.Xml.XPath;\n\npublic class DeliciousApp {\n    static string user = \"username\";\n    static string password = \"password\";\n    static Uri uri = new Uri(\"https://api.del.icio.us/v1/posts/recent\");\n\n    static void Main(string[] args) {\n        HttpWebRequest request = (HttpWebRequest) WebRequest.Create(uri);\n        request.Credentials = new NetworkCredential(user, password);\n        HttpWebResponse response = (HttpWebResponse) request.GetResponse();\n\n        XPathDocument xml = new\n\t    XPathDocument(response.GetResponseStream());\n        XPathNavigator navigator = xml.CreateNavigator();\n        foreach (XPathNavigator node in navigator.Select(\"/posts/post\")) {\n          string description = node.GetAttribute(\"description\",\"\");\n          string href = node.GetAttribute(\"href\",\"\");\n          Console.WriteLine(description + \": \" + href);\n        }\n    }\n}</pre>\n </div>\n</div>\n<h2>PHP: libcurl</h2>\n<p>PHP<a id=\"I_indexterm2_tt172\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt173\" class=\"indexterm\"></a> comes with a binding to the C library <code class=\"literal\">libcurl</code>, which can do pretty much anything you might want to do with a URI (see <a class=\"xref\" href=\"ch02.html#example_8\" title=\"Example&nbsp;2-8.&nbsp;A del.icio.us client in PHP\">Example&nbsp;2-8</a>).</p>\n<div class=\"example\">\n <a id=\"example_8\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-8.&nbsp;A del.icio.us client in PHP\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">&lt;?php\n  $user = \"username\";\n  $password = \"password\";\n\n  $request = curl_init();\n  curl_setopt($request, CURLOPT_URL,\n              'https://api.del.icio.us/v1/posts/recent');\n  curl_setopt($request, CURLOPT_USERPWD, \"$user:$password\");\n  curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n\n  $response = curl_exec($request);\n  $xml = simplexml_load_string($response);\n  curl_close($request);\n\n  foreach ($xml-&gt;post as $post) {\n    print \"$post[description]: $post[href]\\n\";\n  }\n?&gt;</pre>\n </div>\n</div>\n<h2>JavaScript: XMLHttpRequest</h2>\n<p>If you’re writing<a id=\"I_indexterm2_tt174\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt175\" class=\"indexterm\"></a> a web service client in JavaScript, you probably intend it to run inside a web browser as part of an Ajax application. All modern web browsers implement a HTTP client library for JavaScript called <code class=\"classname\">XMLHttpRequest</code>.</p>\n<p>Because Ajax clients are developed differently from standalone clients, I’ve devoted an entire chapter to them: <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>. The first example in that chapter is a del.icio.us client, so you can skip there right now without losing the flow of the examples.</p>\n<h2>The Command Line: curl</h2>\n<p>This <a id=\"I_indexterm2_tt176\" class=\"indexterm\"></a>example is a bit different: it doesn’t use a programming language at all. A program called <a class=\"ulink\" href=\"http://curl.haxx.se/\" target=\"_top\">curl</a> is a capable HTTP client that runs from the Unix or Windows command line. It supports most HTTP methods, custom headers, several authentication mechanisms, proxies, compression, and many other features. You can use <span class=\"application\">curl</span> to do quick one-off HTTP requests, or use it in conjunction with shell scripts. Here’s <span class=\"application\">curl</span> in action, grabbing a user’s del.icio.us bookmarks:</p>\n<a id=\"I_programlisting2_tt177\"></a>\n<pre class=\"programlisting\"><code class=\"prompt\">$</code> <strong class=\"userinput\"><code>curl https://username:password@api.del.icio.us/v1/posts/recent</code></strong>\n<code class=\"computeroutput\">&lt;?xml version='1.0' standalone='yes'?&gt;</code>\n<code class=\"computeroutput\">&lt;posts tag=\"\" user=\"username\"&gt;</code>\n<code class=\"computeroutput\"> ...</code>\n<code class=\"computeroutput\">&lt;/posts&gt;</code></pre>\n<h2>Other Languages</h2>\n<p>I don’t have the space or the expertise to cover every popular programming language in depth with a del.icio.us client example. I can, however, give brief pointers to HTTP client libraries for some of the many languages I haven’t covered yet.</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">ActionScript</span>\n  </dt>\n  <dd>\n   <p>Flash applications,<a id=\"I_indexterm2_tt178\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt179\" class=\"indexterm\"></a> like JavaScript applications, generally run inside a web browser. This means that when you write an ActionScript web service client you’ll probably use the Ajax architecture described in <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>, rather than the standalone architecture shown in this chapter.</p>\n   <p>ActionScript’s <code class=\"classname\">XML</code> class gives functionality similar to JavaScript’s <code class=\"classname\">XmlHttpRequest</code>. The <code class=\"function\">XML.load</code> method fetches a URI and parses the response document into an XML data structure. ActionScript also provides a class called <code class=\"classname\">LoadVars</code>, which works on form-encoded key-value pairs<a id=\"I_indexterm2_tt180\" class=\"indexterm\"></a> instead of on XML documents.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">C</span>\n  </dt>\n  <dd>\n   <p>The <span class=\"application\">libwww</span> library for<a id=\"I_indexterm2_tt181\" class=\"indexterm\"></a> C was the very first HTTP client library, but most C programmers today use <a class=\"ulink\" href=\"http://curl.haxx.se/libcurl/\" target=\"_top\"><span class=\"application\">libcurl</span></a>, the basis for the <span class=\"application\">curl</span> command-line tool. Earlier I mentioned PHP’s bindings to <span class=\"application\">libcurl</span>, but there are also bindings for more than 30 other languages. If you don’t like my recommendations, or I don’t mention your favorite programming language in this chapter, you might look at using the <span class=\"application\">libcurl</span> bindings.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">C++</span>\n  </dt>\n  <dd>\n   <p>Use <span class=\"application\">libcurl</span>, <a id=\"I_indexterm2_tt182\" class=\"indexterm\"></a>either directly or through an object-oriented wrapper called <a class=\"ulink\" href=\"http://rrette.com/curlpp.html\" target=\"_top\">cURLpp</a>.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">Common Lisp</span>\n  </dt>\n  <dd>\n   <p><a class=\"ulink\" href=\"http://www.enterpriselisp.com/software/simple-http/\" target=\"_top\">simple-http</a> is<a id=\"I_indexterm2_tt183\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt184\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt185\" class=\"indexterm\"></a> easy to use, but doesn’t support anything but basic HTTP GET and POST. The<a id=\"I_indexterm2_tt186\" class=\"indexterm\"></a> <a class=\"ulink\" href=\"http://opensource.franz.com/aserve/\" target=\"_top\">AllegroServe web server library</a> includes a complete HTTP client library.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">Perl</span>\n  </dt>\n  <dd>\n   <p>The standard HTTP<a id=\"I_indexterm2_tt187\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt188\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt189\" class=\"indexterm\"></a> library for Perl is <span class=\"application\">libwww-perl</span> (also known as LWP), available from CPAN or most Unix packaging systems. <span class=\"application\">libwww-perl</span> has a long history and is one of the best-regarded Perl libraries. To get HTTPS support, you should also install the <code class=\"classname\">Crypt:SSLeay</code> module<a id=\"I_indexterm2_tt190\" class=\"indexterm\"></a> (available from CPAN).</p>\n  </dd>\n </dl>\n</div>",
      "slug" : "making-the-request-http-libraries"
    }, {
      "title" : "Processing the Response: XML Parsers",
      "type" : "page",
      "htmlContent" : "<p>The entity-body<a id=\"I_indexterm2_tt192\" class=\"indexterm\"></a> is <a id=\"ch02_parsersxml\" class=\"indexterm\"></a><a id=\"ch02_xmlparsers\" class=\"indexterm\"></a>usually the most important part of an HTTP response. Where web services are concerned, the entity-body is usually an XML document, and the client gets most of the information it needs by running this document through an XML parser.</p>\n<p>Now, there are many HTTP client libraries, but they all have exactly the same task. Given a URI, a set of headers, and a body document, the client’s job is to construct an HTTP request and send it to a certain server. Some libraries have more features than others: cookies, authentication, caching, and the other ones I mentioned. But all these extra features are implemented within the HTTP request, usually as extra headers. A library might offer an object-oriented interface (like <code class=\"classname\">Net::HTTP</code>) <a id=\"I_indexterm2_tt193\" class=\"indexterm\"></a>or a file-like interface (like <code class=\"literal\">open-uri</code>),<a id=\"I_indexterm2_tt194\" class=\"indexterm\"></a> but both interfaces do the same thing. There’s only one kind of HTTP client library.</p>\n<p>But there are <span class=\"emphasis\"><em>three</em></span> kinds of XML parsers. It’s not just that some XML parsers have features that others lack, or that one interface is more natural than another. There are two basic XML parsing strategies:<a id=\"I_indexterm2_tt195\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt196\" class=\"indexterm\"></a> the document-based strategy of DOM and other tree-style parsers, and the event-based strategy of SAX and “pull” parsers. You can get a tree-style or a SAX parser for any programming language, and a pull parser for almost any language.</p>\n<p>The document-based, tree-style strategy is the simplest of the three models. A <a id=\"I_indexterm2_tt197\" class=\"indexterm\"></a>tree-style parser models an XML document as a nested data structure. Once you’ve got this data structure, you can search and process it with<a id=\"I_indexterm2_tt198\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt199\" class=\"indexterm\"></a> XPath queries, CSS selectors, or custom navigation functions: whatever your parser supports. A DOM parser is a tree-style parser that implements a specific interface defined by the W3C.</p>\n<p>The tree-style strategy is easy to use, and it’s the one I use the most. With a tree-style parser, the document is just an object like the other objects in your program. The big shortcoming is that you have to deal with the document as a whole. You can’t start working on the document until you’ve processed the whole thing into a tree, and you can’t avoid loading the whole document into memory. For documents that are simple but very large, this is inefficient. It would be a lot better to handle tags as they’re parsed.</p>\n<p>Instead of a data structure, a SAX-style or pull parser turns a document into a stream of events. Starting and closing tags, XML comments, and entity declarations are all events.</p>\n<p>A <a id=\"I_indexterm2_tt200\" class=\"indexterm\"></a>pull parser is useful when you need to handle almost every event. A pull parser lets you handle one event at a time, “pulling” the next one from the stream as needed. You can take action in response to individual events as they come in, or build up a data structure for later use—presumably a smaller data structure than the one a tree-style parser would build. You can stop parsing the document at any time and come back to it later by pulling the next event from the stream.</p>\n<p>A SAX parser is more complex, but useful when you only care about a few of the many events that will be streaming in. You drive a SAX parser by registering callback methods with it. Once you’re done defining callbacks, you set the parser loose on a document. The parser turns the document into a series of events, and processes every event in the document without stopping. When an event comes along that matches one of your callbacks, the parser triggers that callback, and your custom code runs. Once the callback completes, the SAX parser goes back to processing events without stopping.</p>\n<p>The advantage of the document-based approach is that it gives you random access to the document’s contents. With event-based parsers, once the events have fired, they’re gone. If you want to trigger them again you need to re-parse the document. What’s more, an event-based parser won’t notice that a malformed XML document is malformed until it tries to parse the bad spot, and crashes. Before passing a document into an event-based parser, you’ll need to make sure the document is well formed, or else accept that your callback methods can be triggered for a document that turns out not to be good.</p>\n<p>Some programming languages come with a standard set of XML parsers. Others have a canonical third-party parser library. For the sake of performance, some languages also have bindings to fast parsers written in C. I’d like to go through the list of languages again now, and make recommendations for document- and event-based XML parsers. I’ll rate commonly available parsers on speed, the quality of their interface, how well they support XPath (for tree-style parsers), how strict they are, and whether or not they support schema-based validation. Depending on the application, a strict parser may be a good thing (because an XML document will be parsed the correct way or not at all) or a bad thing (because you want to use a service that generates bad XML).</p>\n<p>In the sample del.icio.us clients given above, I showed not only how to use my favorite HTTP client library for a language, but how to use my favorite tree-style parser for that language. To show you how event-based parsers work, I’ll give two more examples of del.icio.us clients using Ruby’s built-in SAX and pull parsers.</p>\n<h2>Ruby: REXML, I Guess</h2>\n<p>Ruby<a id=\"ch02_rubyxmlparsers\" class=\"indexterm\"></a><a id=\"ch02_rexml\" class=\"indexterm\"></a> comes with a standard XML parser library, REXML, that supports both DOM and SAX interfaces, and has good XPath support. Unfortunately, REXML’s internals put it in a strange middle ground: it’s too strict to be used to parse bad XML, but not strict enough to reject <span class=\"emphasis\"><em>all</em></span> bad XML.</p>\n<p>I use REXML throughout this book because it’s the default choice, and because I only deal with well-formed XML. If you want to <span class=\"emphasis\"><em>guarantee</em></span> that you only deal with well-formed XML, you’ll need to install the Ruby bindings to the GNOME project’s <a id=\"I_indexterm2_tt201\" class=\"indexterm\"></a><span class=\"application\">libxml2</span> library (described in <a class=\"xref\" href=\"ch02.html#otherlangparser\" title=\"Other Languages\">Other Languages</a>” later in this chapter).</p>\n<p>If you want to be able to handle bad markup, the best choice is<a id=\"I_indexterm2_tt202\" class=\"indexterm\"></a> <a class=\"ulink\" href=\"http://github.com/whymirror/hpricot\" target=\"_top\">hpricot</a>, available as the <code class=\"literal\">hpricot</code> gem. It’s fast (it uses a C extension), and it has an intuitive interface including support for common XPath expressions.</p>\n<p class=\"keep-together\"><a class=\"xref\" href=\"ch02.html#delicious-sax\" title=\"Example&nbsp;2-9.&nbsp;A Ruby client using a SAX parser\">Example&nbsp;2-9</a> is an implementation of the del.icio.us client using REXML’s SAX interface.</p>\n<div class=\"example\">\n <a id=\"delicious-sax\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-9.&nbsp;A Ruby client using a SAX parser\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# delicious-sax.rb\nrequire 'open-uri'\nrequire 'rexml/parsers/sax2parser'\n\ndef print_my_recent_bookmarks(username, password)\n  # Make an HTTPS request and read the entity-body as an XML document.\n  xml = open('https://api.del.icio.us/v1/posts/recent',\n             :http_basic_authentication =&gt; [username, password])\n\n  # Create a SAX parser whose destiny is to parse the XML entity-body.\n  parser = REXML::Parsers::SAX2Parser.new(xml)\n\n  # When the SAX parser encounters a 'post' tag...\n  parser.listen(:start_element, [\"post\"]) do |uri, tag, fqtag, attributes|\n    # ...it should print out information about the tag.\n    puts \"#{attributes['description']}: #{attributes['href']}\"\n  end\n\n  # Make the parser fulfil its destiny to parse the XML entity-body.\n  parser.parse \nend\n\n# Main program.\nusername, password = ARGV\nunless username and password\n  puts \"Usage: #{$0} [USERNAME] [PASSWORD]\"  \n  exit\nend\nprint_my_recent_bookmarks(username, password)</pre>\n </div>\n</div>\n<p>In this program, the data isn’t parsed (or even read from the HTTP connection) until the call to <code class=\"function\">SAXParser#parse</code>. Up to that point I’m free to call <code class=\"function\">listen</code> and set up pieces of code to run in response to parser events. In this case, the only event I’m interested in is the start of a <code class=\"literal\">post</code> tag. My code block gets called every time the parser finds a <code class=\"literal\">post</code> tag. This is the same as parsing the XML document with a tree-style parser, and running the XPath expression “//post” against the object tree. What does my code block do? The same thing my other example programs do when they find a <code class=\"literal\">post</code> tag: print out the values of the <code class=\"literal\">description</code> and <code class=\"literal\">href</code> attributes.</p>\n<p>This implementation is faster and much more memory-efficient than the equivalent tree-style implementation. However, complex SAX-based programs are much more difficult to write than equivalent tree-style programs. Pull parsers are a good compromise. <a class=\"xref\" href=\"ch02.html#delicious-pull\" title=\"Example&nbsp;2-10.&nbsp;A del.icio.us client using REXML’s pull parser\">Example&nbsp;2-10</a> shows a client implementation that uses REXML’s pull parser interface.</p>\n<div class=\"example\">\n <a id=\"delicious-pull\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-10.&nbsp;A del.icio.us client using REXML’s pull parser\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# delicious-pull.rb\nrequire 'open-uri'\nrequire 'rexml/parsers/pullparser'\n\ndef print_my_recent_bookmarks(username, password)\n  # Make an HTTPS request and read the entity-body as an XML document.\n  xml = open('https://api.del.icio.us/v1/posts/recent',\n             :http_basic_authentication =&gt; [username, password])\n\n  # Feed the XML entity-body into a pull parser\n  parser = REXML::Parsers::PullParser.new(xml)\n\n  # Until there are no more events to pull...\n  while parser.has_next?\n    # ...pull the next event.\n    tag = parser.pull    \n    # If it's a 'post' tag...\n    if tag.start_element?\n      if tag[0] == 'post'       \n        # Print information about the bookmark.\n        attrs = tag[1]\n        puts \"#{attrs['description']}: #{attrs['href']}\"\n      end\n    end\n  end\nend\n\n# Main program.\nusername, password = ARGV\nunless username and password\n  puts \"Usage: #{$0} [USERNAME] [PASSWORD]\"  \n  exit\nend\nprint_my_recent_bookmarks(username, password)</pre>\n </div>\n</div>\n<h2>Python: ElementTree</h2>\n<p>The<a id=\"I_indexterm2_tt203\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt204\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt205\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt206\" class=\"indexterm\"></a> world is full of XML parsers for Python. There are <span class=\"emphasis\"><em>seven</em></span> different XML interfaces in the Python 2.5 standard library alone. For full details, see the <a class=\"ulink\" href=\"http://docs.python.org/lib/markup.html\" target=\"_top\">Python library reference</a>.</p>\n<p>For tree-style parsing, the best library is <a class=\"ulink\" href=\"http://effbot.org/zone/element-index.htm\" target=\"_top\">ElementTree</a>. It’s fast, it has a sensible interface, and as of Python 2.5 you don’t have to install anything because it’s in the standard library. On the downside, its support for XPath is limited to simple expressions—of course, nothing else in the standard library supports XPath at all. If you need full XPath support, <a id=\"I_indexterm2_tt207\" class=\"indexterm\"></a>try <a class=\"ulink\" href=\"http://4suite.org/\" target=\"_top\">4Suite</a>.</p>\n<p><a class=\"ulink\" href=\"http://www.crummy.com/software/BeautifulSoup/\" target=\"_top\">Beautiful Soup</a> is<a id=\"I_indexterm2_tt208\" class=\"indexterm\"></a> a slower tree-style parser that is very forgiving of invalid XML, and offers a programmatic interface to a document. It also handles most character set conversions automatically, letting you work with<a id=\"I_indexterm2_tt209\" class=\"indexterm\"></a> Unicode data.</p>\n<p>For SAX-style parsing, the best choice is the<a id=\"I_indexterm2_tt210\" class=\"indexterm\"></a> <code class=\"literal\">xml.sax</code> module in the standard library. The <a class=\"ulink\" href=\"http://pyxml.sourceforge.net/\" target=\"_top\">PyXML</a> suite includes a pull parser.</p>\n<h2>Java: javax.xml, Xerces, or XMLPull</h2>\n<p>Java 1.5<a id=\"I_indexterm2_tt211\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt212\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt213\" class=\"indexterm\"></a> includes the XML parser written by the Apache Xerces project. The core classes are found in the <a id=\"I_indexterm2_tt214\" class=\"indexterm\"></a>packages <code class=\"classname\">javax.xml.*</code>, (for instance, <code class=\"classname\">javax.xml.xpath</code>). The DOM interface lives<a id=\"I_indexterm2_tt215\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt216\" class=\"indexterm\"></a> in <code class=\"classname\">org.w3c.dom.*</code>, and the SAX interface lives in <code class=\"classname\">org.xml.sax.*</code>. If you’re using a previous version of Java, you can install Xerces yourself and take advantage of the same interface found in Java 1.5 (<a class=\"ulink\" href=\"http://xerces.apache.org/xerces2-j/\" target=\"_top\">http://xerces.apache.org/xerces2-j/</a>).</p>\n<p>There are a variety of pull parsers for Java.<a id=\"I_indexterm2_tt217\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt218\" class=\"indexterm\"></a> Sun’s Web Services Developer Pack includes a pull parser in<a id=\"I_indexterm2_tt219\" class=\"indexterm\"></a> the <code class=\"classname\">javax.xml.stream</code> package.</p>\n<p>For parsing bad XML, you might <a id=\"I_indexterm2_tt220\" class=\"indexterm\"></a>try <a class=\"ulink\" href=\"http://home.ccil.org/~cowan/XML/tagsoup/\" target=\"_top\">TagSoup</a>.</p>\n<h2>C#: System.Xml.XmlReader</h2>\n<p>The<a id=\"I_indexterm2_tt221\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt222\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt223\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt224\" class=\"indexterm\"></a>.NET Common Language Runtime comes with a pull parser interface, in contrast to the more typical (and more complex) SAX-style interface. You can also create a full W3C DOM tree using <code class=\"classname\">XmlDocument</code>. The <code class=\"classname\">XPathDocument</code> class lets you iterate over nodes in the tree that match an XPath expression.</p>\n<p>If you need to handle broken XML documents, check out<a id=\"I_indexterm2_tt225\" class=\"indexterm\"></a> Chris Lovett’s <code class=\"classname\">SgmlReader</code> at <a class=\"ulink\" href=\"http://www.gotdotnet.com/Community/UserSamples/\" target=\"_top\">http://www.gotdotnet.com/Community/UserSamples/</a>.</p>\n<h2>PHP</h2>\n<p>You can<a id=\"I_indexterm2_tt226\" class=\"indexterm\"></a> create a SAX-style parser with the function<a id=\"I_indexterm2_tt227\" class=\"indexterm\"></a> <code class=\"function\">xml_parser_create</code>, and a pull parser with the <code class=\"function\">XMLReader</code> extension. The <code class=\"function\">DOM</code> PHP extension (included in PHP 5) provides a tree-style interface to the GNOME project’s <a id=\"I_indexterm2_tt228\" class=\"indexterm\"></a><span class=\"application\">libxml2</span> C library. You might have an easier time using <span class=\"application\">SimpleXML</span>, a tree-style parser that’s not an official DOM implementation. That’s what I used in <a class=\"xref\" href=\"ch02.html#example_8\" title=\"Example&nbsp;2-8.&nbsp;A del.icio.us client in PHP\">Example&nbsp;2-8</a>.</p>\n<p>There’s also a pure PHP DOM parser<a id=\"I_indexterm2_tt229\" class=\"indexterm\"></a> called <a class=\"ulink\" href=\"http://sourceforge.net/projects/domit-xmlparser\" target=\"_top\">DOMIT!</a>.</p>\n<h2>JavaScript: responseXML</h2>\n<p>If you’re<a id=\"ch02_javascriptxml\" class=\"indexterm\"></a> using<a id=\"I_indexterm2_tt230\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt231\" class=\"indexterm\"></a> <code class=\"classname\">XMLHttpRequest</code> to write an Ajax client, you don’t have to worry about the XML parser at all. If you make a request and the response entity-body is in XML format, the web browser parses it with its own tree-style parser, and makes it available through the <code class=\"function\">responseXML</code> property of the <code class=\"classname\">XMLHttpRequest</code> object. You manipulate this document with JavaScript DOM methods: the same ones you use to manipulate HTML documents displayed in the browser. <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a> has more information on how to use <code class=\"function\">responseXML</code>—and how to handle non-XML documents with the <code class=\"function\">responseData</code> member.</p>\n<p>There’s a third-party XML parser, <a class=\"ulink\" href=\"http://xmljs.sourceforge.net/\" target=\"_top\">XML for &lt;SCRIPT&gt;</a>, which <a id=\"I_indexterm2_tt232\" class=\"indexterm\"></a>works independently of the parser built into the client’s web browser. “XML for &lt;SCRIPT&gt;” offers DOM and SAX interfaces, and supports XPath queries.</p>\n<h2>Other Languages</h2>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">ActionScript</span>\n  </dt>\n  <dd>\n   <p>When you<a id=\"I_indexterm2_tt233\" class=\"indexterm\"></a> load a URI with <code class=\"function\">XML.load</code>, it’s automatically parsed into an <code class=\"classname\">XML</code> object, which exposes a tree-style interface.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">C</span>\n  </dt>\n  <dd>\n   <p><a class=\"ulink\" href=\"http://expat.sourceforge.net/\" target=\"_top\">Expat</a> is<a id=\"I_indexterm2_tt234\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt235\" class=\"indexterm\"></a> the most popular SAX-style parser. The GNOME project’s <a class=\"ulink\" href=\"http://xmlsoft.org/\" target=\"_top\">libxml2</a> contains DOM, pull, and SAX parsers.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">C++</span>\n  </dt>\n  <dd>\n   <p>You<a id=\"I_indexterm2_tt236\" class=\"indexterm\"></a> can use either of the C parsers, or the object-oriented <a class=\"ulink\" href=\"http://xml.apache.org/xerces-c/\" target=\"_top\">Xerces-C++ parser</a>. Like the Java version of Xerces, Xerces-C++ exposes both DOM and SAX interfaces.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">Common Lisp</span>\n  </dt>\n  <dd>\n   <p>Use <a class=\"ulink\" href=\"http://common-lisp.net/project/s-xml/\" target=\"_top\">SXML</a>. It<a id=\"I_indexterm2_tt237\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt238\" class=\"indexterm\"></a> exposes a SAX-like interface, and can also turn an XML document into tree-like S-expressions or Lisp data structures.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">Perl</span>\n  </dt>\n  <dd>\n   <p>As with Python,<a id=\"I_indexterm2_tt239\" class=\"indexterm\"></a> there are a variety of XML parsers for Perl. They’re all available on <a id=\"I_indexterm2_tt240\" class=\"indexterm\"></a>CPAN. <code class=\"classname\">XML::XPath</code> has<a id=\"I_indexterm2_tt241\" class=\"indexterm\"></a> XPath support, and <code class=\"classname\">XML::Simple</code> <a id=\"I_indexterm2_tt242\" class=\"indexterm\"></a>turns an XML document into standard Perl data structures. For SAX-style parsing, use <code class=\"classname\">XML::SAX::PurePerl</code>. <a id=\"I_indexterm2_tt243\" class=\"indexterm\"></a>For pull parsing, use <code class=\"classname\">XML::LibXML::Reader</code>. <a id=\"I_indexterm2_tt244\" class=\"indexterm\"></a>The <a class=\"ulink\" href=\"http://perl-xml.sourceforge.net/faq/\" target=\"_top\">Perl XML FAQ</a> has an overview of the most popular Perl XML libraries.</p>\n  </dd>\n </dl>\n</div>",
      "slug" : "processing-the-response-xml-parsers"
    }, {
      "title" : "JSON Parsers: Handling Serialized Data",
      "type" : "page",
      "htmlContent" : "<p>Most <a id=\"ch02_json\" class=\"indexterm\"></a>web services return XML documents, but a growing number return simple data structures (numbers, arrays, hashes, and so on), serialized as JSON-formatted strings. JSON is usually produced by services that expect to be consumed by the client half of an Ajax application. The idea is that it’s a lot easier for a browser to get a JavaScript data structure from a JSON data structure than from an XML document. Every web browser offers a slightly different JavaScript interface to its XML parser, but a JSON string is nothing but a tightly constrained JavaScript program, so it works the same way in every browser.</p>\n<p>Of course, JSON is not <span class=\"emphasis\"><em>tied</em></span> to JavaScript, any more than JavaScript is to Java. JSON makes a lightweight alternative to XML-based approaches to data serialization, like XML Schema. The <a class=\"ulink\" href=\"http://www.json.org/\" target=\"_top\">JSON web site</a> links to implementations in many languages, and I refer you to that site rather than mentioning a JSON library for every language.</p>\n<p>JSON is a simple and language-independent way of formatting programming language data structures (numbers, arrays, hashes, and so on) as strings. <a class=\"xref\" href=\"ch02.html#simple-json-example\" title=\"Example&nbsp;2-11.&nbsp;A mixed-type array in JSON format\">Example&nbsp;2-11</a> is a JSON representation of a simple data structure: a mixed-type array.</p>\n<div class=\"example\">\n <a id=\"simple-json-example\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-11.&nbsp;A mixed-type array in JSON format\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">[3, \"three\"]</pre>\n </div>\n</div>\n<p>By comparison, <a class=\"xref\" href=\"ch02.html#xml-array\" title=\"Example&nbsp;2-12.&nbsp;A mixed-type array in XML-RPC format\">Example&nbsp;2-12</a> is one possible XML representation of the same data.</p>\n<div class=\"example\">\n <a id=\"xml-array\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-12.&nbsp;A mixed-type array in XML-RPC format\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">&lt;value&gt;\n &lt;array&gt;\n  &lt;data&gt;\n   &lt;value&gt;&lt;i4&gt;3&lt;/i4&gt;&lt;/value&gt;\n   &lt;value&gt;&lt;string&gt;three&lt;/string&gt;&lt;/value&gt;\n  &lt;/data&gt;\n &lt;/array&gt;\n&lt;/value&gt;</pre>\n </div>\n</div>\n<p>Since a JSON string is nothing but a tightly constrained JavaScript program, you can “parse” JSON simply by calling <code class=\"function\">eval</code> on the string. This is very fast, but you shouldn’t do it unless you control the web service that served your JSON. An untested or untrusted web service can send the client buggy or malicious JavaScript programs instead of real JSON structures. For the JavaScript examples in <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>, I use a JSON parser written in JavaScript and available from <span class=\"emphasis\"><em>json.org</em></span> (see <a class=\"xref\" href=\"ch02.html#example_13\" title=\"Example&nbsp;2-13.&nbsp;A JSON demo in JavaScript\">Example&nbsp;2-13</a>).</p>\n<div class=\"example\">\n <a id=\"example_13\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-13.&nbsp;A JSON demo in JavaScript\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">&lt;!-- json-demo.html --&gt;\n&lt;!-- In a real application, you would save json.js locally\n     instead of fetching it from json.org every time. --&gt;\n&lt;script type=\"text/javascript\" src=\"http://www.json.org/json.js\"&gt;\n&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n array = [3, \"three\"]\n alert(\"Converted array into JSON string: '\" + array.toJSONString() + \"'\")\n json = \"[4, \\\"four\\\"]\"\n alert(\"Converted JSON '\" + json + \"' into array:\")\n array2 = json.parseJSON()\n for (i=0; i &lt; array2.length; i++) \n {\n   alert(\"Element #\" + i + \" is \" + array2[i])\n }\n&lt;/script&gt;</pre>\n </div>\n</div>\n<p>The<a id=\"I_indexterm2_tt245\" class=\"indexterm\"></a> Dojo JavaScript framework has a JSON library in the <code class=\"literal\">dojo.json</code> package, so if you’re using Dojo you don’t have to install anything extra. A future version of the<a id=\"I_indexterm2_tt246\" class=\"indexterm\"></a> ECMAScript standard may define JSON serialization and deserialization methods as part of the JavaScript language, making third-party libraries obsolete.</p>\n<p>In this book’s Ruby examples, I’ll use the JSON parser that comes from the<a id=\"I_indexterm2_tt247\" class=\"indexterm\"></a> <code class=\"literal\">json</code> Ruby gem. The two most important methods are <code class=\"function\">Object#to_json</code> and <code class=\"function\">JSON.parse</code>. Try running the Ruby code in <a class=\"xref\" href=\"ch02.html#example_14\" title=\"Example&nbsp;2-14.&nbsp;A JSON demo in Ruby\">Example&nbsp;2-14</a> through the <code class=\"literal\">irb</code> interpreter.</p>\n<div class=\"example\">\n <a id=\"example_14\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-14.&nbsp;A JSON demo in Ruby\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\"># json-demo.rb\nrequire 'rubygems'\nrequire 'json'\n\n[3, \"three\"].to_json                 # =&gt; \"[3,\\\"three\\\"]\"\nJSON.parse('[4, \"four\"]')            # =&gt; [4, \"four\"]</pre>\n </div>\n</div>\n<p>Right now, Yahoo! Web Services are the most popular public web services to <a class=\"ulink\" href=\"http://developer.yahoo.com/common/json.html\" target=\"_top\">serve JSON</a>. <a class=\"xref\" href=\"ch02.html#yahoo-web-search-json\" title=\"Example&nbsp;2-15.&nbsp;Searching the Web with Yahoo!’s web service (JSON edition)\">Example&nbsp;2-15</a> shows a command-line program, written in Ruby, that uses the Yahoo! News web service to get a JSON representation of current news stories.</p>\n<div class=\"example\">\n <a id=\"yahoo-web-search-json\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-15.&nbsp;Searching the Web with Yahoo!’s web service (JSON edition)\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby\n# yahoo-web-search-json.rb\nrequire 'rubygems'\nrequire 'json'\nrequire 'open-uri'\n$KCODE = 'UTF8'\n\n# Search the web for a term, and print the titles of matching web pages.\ndef search(term)\n  base_uri = 'http://api.search.yahoo.com/NewsSearchService/V1/newsSearch'\n\n  # Make the HTTP request and read the response entity-body as a JSON\n  # document.\n  json = open(base_uri + \"?appid=restbook&amp;output=json&amp;query=#{term}\").read\n\n  # Parse the JSON document into a Ruby data structure.\n  json = JSON.parse(json)\n\n  # Iterate over the data structure...\n  json['ResultSet']['Result'].each do\n    # ...and print the title of each web page.\n    |r| puts r['Title']\n  end\nend\n\n# Main program.\nunless ARGV[0]\n  puts \"Usage: #{$0} [search term]\"\n  exit\nend\nsearch(ARGV[0])</pre>\n </div>\n</div>\n<p>Compare this to the program <em class=\"filename\">yahoo-web-search.rb</em> in <a class=\"xref\" href=\"ch02.html#yahoowebsearch\" title=\"Example&nbsp;2-1.&nbsp;Searching the Web with Yahoo!’s web service\">Example&nbsp;2-1</a>. That program has the same basic structure, but it works differently. It asks for search results formatted as XML, parses the XML, and uses an XPath query to extract the result titles. This program parses a JSON data structure into a native-language data structure (a hash), and traverses it with native-language operators instead of XPath.</p>\n<p>If JSON is so simple, why not use it for everything? You could do that, but I don’t recommend it. JSON is good for representing data structures in general, and the Web mainly serves <span class=\"emphasis\"><em>documents</em></span>: irregular, self-describing data structures that link to each other. XML and HTML are specialized for representing documents. A JSON representation of a web page would be hard to read, just like the XML representation of an array in <a class=\"xref\" href=\"ch02.html#xml-array\" title=\"Example&nbsp;2-12.&nbsp;A mixed-type array in XML-RPC format\">Example&nbsp;2-12</a> was hard to read. JSON is useful when you need to describe a data structure that doesn’t fit easily into the document paradigm: a simple list, for instance, or a hash.<a id=\"I_indexterm2_tt248\" class=\"indexterm\"></a><a id=\"I_indexterm2_tt249\" class=\"indexterm\"></a></p>",
      "slug" : "json-parsers-handling-serialized-data"
    }, {
      "title" : "Clients Made Easy with WADL",
      "type" : "page",
      "htmlContent" : "<p>So far<a id=\"I_indexterm2_tt250\" class=\"indexterm\"></a> I’ve presented code in a variety of languages, but it always follows the same three-step pattern. To call a web service I build up the elements of an HTTP request (method, URI, headers, and entity-body). I use an HTTP library to turn that data into a real HTTP request, and the library sends the request to the appropriate server. Then I use an XML parser to parse the response into a data structure or a series of events. Once I make the request, I’m free to use the response data however I like. In this regard all RESTful web services, and most hybrid services, are the same. What’s more, as I’ll show in the chapters to come, all RESTful web services use HTTP the same way: HTTP has what’s called a uniform interface.</p>\n<p>Can I take advantage of this similarity? Abstract this pattern out into a generic “REST library” that can access any web service that supports the uniform interface? There’s precedent for this. The Web Service Description Language (WSDL) describes the differences between RPC-style web services in enough detail that a generic library can access any RPC-style SOAP service, given an appropriate WSDL file.</p>\n<p>For RESTful and hybrid services, I recommend using the Web <span class=\"emphasis\"><em>Application</em></span> Description Language. A WADL file describes the HTTP requests you can legitimately make of a service: which URIs you can visit, what data those URIs expect you to send, and what data they serve in return. A WADL library can parse this file and model the space of possible service requests as a native language API.</p>\n<p><a id=\"delicious-wadl-ruby\"></a>I describe WADL in more detail in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>, but here’s a taste. The del.icio.us client shown in <a class=\"xref\" href=\"ch02.html#example_2_16\" title=\"Example&nbsp;2-16.&nbsp;A Ruby/WADL client for del.icious\">Example&nbsp;2-16</a> is equivalent to the Ruby client in <a class=\"xref\" href=\"ch02.html#ruby-delicious\" title=\"Example&nbsp;2-4.&nbsp;A Ruby client using open-uri\">Example&nbsp;2-4</a>, but it uses Ruby’s WADL library and a bootleg WADL file I created for del.icio.us. (I’ll show you the WADL file in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>.)</p>\n<div class=\"example\">\n <a id=\"example_2_16\"></a>\n <div class=\"example-title\">\n  Example&nbsp;2-16.&nbsp;A Ruby/WADL client for del.icious\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby\n# delicious-wadl-ruby.rb\nrequire 'wadl'\n\nif ARGV.size != 2\n  puts \"Usage: #{$0} [username] [password]\"\n  exit\nend\nusername, password = ARGV\n\n# Load an application from the WADL file\ndelicious = WADL::Application.from_wadl(open(\"delicious.wadl\"))\n\n# Give authentication information to the application\nservice = delicious.v1.with_basic_auth(username, password)\n\nbegin\n  # Find the \"recent posts\" functionality\n  recent_posts = service.posts.recent\n\n  # For every recent post...\n  recent_posts.get.representation.each_by_param('post') do |post|\n    # Print its description and URI.\n    puts \"#{post.attributes['description']}: #{post.attributes['href']}\"\n  end\nrescue WADL::Faults::AuthorizationRequired\n  puts \"Invalid authentication information!\"\nend</pre>\n </div>\n</div>\n<p>Behind the scenes, this code makes exactly the same HTTP request as the other del.icio.us clients seen in this chapter. The details are hidden in the WADL file <em class=\"filename\">delicious.wadl</em>, which is interpreted by the WADL client library inside <code class=\"function\">WADL::Application.from_WADL</code>. This code is not immediately recognizable as a web service client. That’s a good thing: it means the library is doing its job. And yet, when we come back to this code in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>, you’ll see that it follows the principles of REST as much as the examples that made their own HTTP requests. WADL abstracts away the details of HTTP, but not the underlying RESTful interface.</p>\n<p>As of the time of writing, WADL adoption is very poor. If you want to use a WADL client for a service, instead of writing a language-specific client, you’ll probably have to write the WADL file yourself. It’s not difficult to write a bootleg WADL file for someone else’s service: I’ve done it for del.icio.us and a few other services. You can even write a WADL file that lets you use a web application—designed for human use—as a web service. WADL is designed to describe RESTful web services, but it can describe almost anything that goes on the Web.</p>\n<p>A Ruby library called ActiveResource takes a different strategy. It only works with certain kinds of web services, but it hides the details of RESTful HTTP access behind a simple object-oriented interface. I cover ActiveResource in the next chapter, after introducing some REST terminology<a id=\"I_indexterm2_tt251\" class=\"indexterm\"></a>.<a id=\"I_indexterm2_tt252\" class=\"indexterm\"></a></p>",
      "slug" : "clients-made-easy-with-wadl"
    } ]
  }, {
    "title" : "3. What Makes RESTful Services Different?",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?</h2>\n  </div>\n </div>\n</div>\n<p>I pulled a kind of bait-and-switch on you earlier, and it’s time to make things right. Though this is a book about RESTful web services, most of the real services I’ve shown you are REST-RPC hybrids like the del.icio.us API: services that don’t quite work like the rest of the Web. This is because right now, there just aren’t many well-known RESTful services that work like the Web. In previous chapters I wanted to show you clients for real services you might have heard of, so I had to take what I could get.</p>\n<p>The del.icio.us and Flickr APIs are good examples of hybrid services. They work like the Web when you’re fetching data, but they’re RPC-style services when it comes time to modify the data. The various Yahoo! search services are very RESTful, but they’re so simple that they don’t make good examples. The Amazon E-Commerce Service (seen in <a class=\"xref\" href=\"ch01.html#amazonecsclient\" title=\"Example&nbsp;1-2.&nbsp;Searching for books with a Ruby script\">Example&nbsp;1-2</a>) is also quite simple, and defects to the RPC style on a few obscure but important points.</p>\n<p>These services are all useful. I think the RPC style is the wrong one for web services, but that never prevents me from writing an RPC-style client if there’s interesting data on the other side. I can’t use Flickr or the del.icio.us API as examples of how to <span class=\"emphasis\"><em>design</em></span> RESTful web services, though. That’s why I covered them early in the book, when the only thing I was trying to show was what’s on the programmable web and how to write HTTP clients. Now that we’re approaching a heavy design chapter, I need to show you what a service looks like when it’s RESTful and resource-oriented.</p>",
    "textContent" : "Chapter 3. What Makes RESTful Services Different?\r\n\r\nI pulled a kind of bait-and-switch on you earlier, and it’s time to make things right. Though this is a book about RESTful web services, most of the real services I’ve shown you are REST-RPC hybrids like the del.icio.us API: services that don’t quite work like the rest of the Web. This is because right now, there just aren’t many well-known RESTful services that work like the Web. In previous chapters I wanted to show you clients for real services you might have heard of, so I had to take what I could get.\r\n\r\nThe del.icio.us and Flickr APIs are good examples of hybrid services. They work like the Web when you’re fetching data, but they’re RPC-style services when it comes time to modify the data. The various Yahoo! search services are very RESTful, but they’re so simple that they don’t make good examples. The Amazon E-Commerce Service (seen in Example 1-2) is also quite simple, and defects to the RPC style on a few obscure but important points.\r\n\r\nThese services are all useful. I think the RPC style is the wrong one for web services, but that never prevents me from writing an RPC-style client if there’s interesting data on the other side. I can’t use Flickr or the del.icio.us API as examples of how to design RESTful web services, though. That’s why I covered them early in the book, when the only thing I was trying to show was what’s on the programmable web and how to write HTTP clients. Now that we’re approaching a heavy design chapter, I need to show you what a service looks like when it’s RESTful and resource-oriented.",
    "slug" : "3-what-makes-restful-services-different",
    "pages" : [ {
      "title" : "Introducing the Simple Storage Service",
      "type" : "page",
      "htmlContent" : "<p>Two popular<a id=\"ch03_simple\" class=\"indexterm\"></a><a id=\"ch03_s3\" class=\"indexterm\"></a> web services can answer this call: the Atom Publishing Protocol (APP), <a id=\"I_indexterm3_tt254\" class=\"indexterm\"></a>and Amazon’s Simple Storage Service (S3). (<a class=\"xref\" href=\"apa.html\" title=\"Appendix&nbsp;A.&nbsp;Some Resources for REST and Some RESTful Resources\">Appendix&nbsp;A</a> lists some publicly deployed RESTful web services, many of which you may not have heard of.) The APP is less an actual service than a set of instructions for building a service, so I’m going to start with S3, which actually exists at a specific place on the Web. In <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> I discuss the APP, Atom, and related topics like Google’s GData. For much of the rest of this chapter, I’ll explore S3.</p>\n<p>S3 is a way of storing any data you like, structured however you like. You can keep your data private, or make it accessible by anyone with a web browser or BitTorrent client. Amazon<a id=\"I_indexterm3_tt255\" class=\"indexterm\"></a> hosts the storage and the bandwidth, and charges you by the gigabyte for both. To use the example S3 code in this chapter, you’ll need to sign up for the S3 service by going to <a class=\"ulink\" href=\"http://aws.amazon.com/s3\" target=\"_top\">http://aws.amazon.com/s3</a>. The S3 technical documentation is at <a class=\"ulink\" href=\"http://docs.amazonwebservices.com/AmazonS3/2006-03-01/\" target=\"_top\">http://docs.amazonwebservices.com/AmazonS3/2006-03-01/</a>.</p>\n<p>There are two main uses for S3, as a:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">Backup server</span>\n  </dt>\n  <dd>\n   <p>You store your data through S3 and don’t give anyone else access to it. Rather than buying your own backup disks, you’re renting disk space from Amazon.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">Data host</span>\n  </dt>\n  <dd>\n   <p>You store your data on S3 and give others access to it. Amazon serves your data through HTTP or BitTorrent. Rather than paying an ISP for bandwidth, you’re paying Amazon. Depending on your existing bandwidth costs this can save you a lot of money. Many of today’s web startups use S3 to serve data files.</p>\n  </dd>\n </dl>\n</div>\n<p>Unlike the services I’ve shown so far, S3 is not inspired by any existing web site. The del.icio.us API is based on the del.icio.us web site, and the Yahoo! search services are based on corresponding web sites, but there’s no web page on <span class=\"emphasis\"><em>amazon.com</em></span> where you fill out HTML forms to upload your files to S3. S3 is intended only for programmatic use. (Of course, if you use S3 as a data host, people will use it through their web browsers, without even knowing they’re making a web service call. It’ll act like a normal web site.)</p>\n<p>Amazon provides sample libraries for Ruby, Python, Java, C#, and Perl (see <a class=\"ulink\" href=\"http://developer.amazonwebservices.com/connect/kbcategory.jspa?categoryID=47\" target=\"_top\">http://developer.amazonwebservices.com/connect/kbcategory.jspa?categoryID=47</a>). There are also third-party libraries, like <a class=\"ulink\" href=\"http://amazon.rubyforge.org/\" target=\"_top\">Ruby’s <span class=\"application\">AWS::S3</span></a>, which<a id=\"I_indexterm3_tt256\" class=\"indexterm\"></a> includes the <span class=\"application\">s3sh</span> shell I demonstrated back in <a class=\"xref\" href=\"ch01.html#s3sh-example\" title=\"Example&nbsp;1-4.&nbsp;Manipulating the programmable web with s3sh and S3\">Example&nbsp;1-4</a>.</p>",
      "slug" : "introducing-the-simple-storage-service"
    }, {
      "title" : "Object-Oriented Design of S3",
      "type" : "page",
      "htmlContent" : "<p>S3 is <a id=\"ch03_oods3\" class=\"indexterm\"></a>based<a id=\"I_indexterm3_tt258\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt259\" class=\"indexterm\"></a> on two concepts: S3 “buckets” and S3 “objects.” An object is a named piece of data with some accompanying metadata. A bucket is a named container for objects. A bucket is analogous to the filesystem on your hard drive, and an object to one of the files on that filesystem. It’s tempting to compare a bucket to a <span class=\"emphasis\"><em>directory</em></span> on a filesystem, but filesystem directories can be nested and buckets can’t. If you want a directory structure inside your bucket, you need to simulate one by giving your objects names like “directory/subdirectory/file-object.”</p>\n<h2>A Few Words About Buckets</h2>\n<p>A bucket has one piece of information associated with it: the name. A bucket name can only contain the characters A through Z, a through z, 0 through 9, underscore, period, and dash. I recommend staying away from uppercase letters in bucket names.</p>\n<p>As I mentioned above, buckets cannot contain other buckets: only objects. Each S3 user is limited to 100 buckets, and your bucket name cannot conflict with anyone else’s. I recommend you either keep everything in one bucket, or name each bucket after one of your projects or domain names.</p>\n<h2>A Few Words About Objects</h2>\n<p>An object has four parts to it:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>A reference to the parent bucket.</p></li>\n  <li class=\"listitem\"><p>The data stored in that object (S3 calls this the<a id=\"I_indexterm3_tt260\" class=\"indexterm\"></a> “value”).</p></li>\n  <li class=\"listitem\"><p>A name (S3 calls it<a id=\"I_indexterm3_tt261\" class=\"indexterm\"></a> the “key”).</p></li>\n  <li class=\"listitem\"><p>A set of metadata key-value pairs associated with the object. This is mostly custom metadata, but it may also include values for the standard HTTP headers <code class=\"literal\">Content-Type</code> and <code class=\"literal\">Content-Disposition</code>.</p></li>\n </ul>\n</div>\n<p>If I wanted to host the O’Reilly web site on S3, I’d create a bucket called “oreilly.com,” and fill it with objects whose keys were “” (the empty string), “catalog,” “catalog/9780596529260,” and so on. These objects correspond to the URIs <a class=\"ulink\" href=\"http://oreilly.com/\" target=\"_top\">http://oreilly.com/</a>, <a class=\"ulink\" href=\"http://oreilly.com/catalog\" target=\"_top\">http://oreilly.com/catalog</a>, and so on. The object’s values would be the HTML contents of O’Reilly’s web pages. These S3 objects would have their <code class=\"literal\">Content-Type</code> metadata value set to <code class=\"literal\">text/html</code>, so that people browsing the site would be served these objects as HTML documents, as opposed to XML or plain text.</p>\n<h2>What If S3 Was a Standalone Library?</h2>\n<p>If S3 was implemented as an object-oriented code library instead of a web service, you’d have two classes <code class=\"classname\">S3Bucket</code> and <code class=\"classname\">S3Object</code>. They’d have getter and setter methods for their data members: <code class=\"function\">S3Bucket#name</code>, <code class=\"function\">S3Object.value=</code>, <code class=\"function\">S3Bucket#addObject</code>, and the like. The <code class=\"function\">S3Bucket</code> class would have an instance method <code class=\"function\">S3Bucket#getObjects</code> that returned a list of <code class=\"classname\">S3Object</code> instances, and a class method <code class=\"function\">S3Bucket.getBuckets</code> that returned all of your buckets. <a class=\"xref\" href=\"ch03.html#s3aslibrary\" title=\"Example&nbsp;3-1.&nbsp;S3 implemented as a hypothetical Ruby library\">Example&nbsp;3-1</a> shows what the Ruby code for this class might look like.<a id=\"I_indexterm3_tt262\" class=\"indexterm\"></a></p>\n<div class=\"example\">\n <a id=\"s3aslibrary\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-1.&nbsp;S3 implemented as a hypothetical Ruby library\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">class S3Bucket\n  # A class method to fetch all of your buckets.\n  def self.getBuckets\n  end\n\n  # An instance method to fetch the objects in a bucket.\n  def getObjects\n  end\n  ...\nend\n\nclass S3Object\n  # Fetch the data associated with this object.\n  def data\n  end\n\n  # Set the data associated with this object.\n  def data=(new_value)\n  end\n  ...  \nend</pre>\n </div>\n</div>",
      "slug" : "object-oriented-design-of-s3"
    }, {
      "title" : "Resources",
      "type" : "page",
      "htmlContent" : "<p>Amazon <a id=\"I_indexterm3_tt263\" class=\"indexterm\"></a>exposes S3 as two different web services: a RESTful service based on plain HTTP envelopes, and an RPC-style service based on SOAP envelopes. The RPC-style service exposes functions much like the methods in <a class=\"xref\" href=\"ch03.html#s3aslibrary\" title=\"Example&nbsp;3-1.&nbsp;S3 implemented as a hypothetical Ruby library\">Example&nbsp;3-1</a>’s hypothetical Ruby library: <code class=\"function\">ListAllMyBuckets</code>, <code class=\"function\">CreateBucket</code>, and so on. Indeed, many RPC-style web services are automatically generated from their implementation methods, and expose the same interfaces as the programming-language code they call behind the scenes. This works because most modern programming (including object-oriented programming) is procedural.</p>\n<p>The RESTful S3 service exposes all the functionality of the RPC-style service, but instead of doing it with custom-named functions, it exposes standard HTTP objects called<a id=\"I_indexterm3_tt264\" class=\"indexterm\"></a> <span class=\"emphasis\"><em>resources</em></span>. Instead of responding to custom method names like <code class=\"function\">getObjects</code>, a resource responds to one or more of the six standard HTTP<a id=\"I_indexterm3_tt265\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt266\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt267\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt268\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt269\" class=\"indexterm\"></a> methods: GET, HEAD, POST, PUT, DELETE, and OPTIONS.</p>\n<p>The RESTful S3 service provides three types of resources. Here they are, with sample URIs for each:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The list of your buckets (<code class=\"literal\">https://s3.amazonaws.com/</code>). There’s only one resource of this type.</p></li>\n  <li class=\"listitem\"><p>A particular bucket (<code class=\"literal\">https://s3.amazonaws.com/<em class=\"replaceable\"><code>{name-of-bucket}</code></em>/</code>). There can be up to 100 resources of this type.</p></li>\n  <li class=\"listitem\"><p>A particular S3 object inside a bucket (<code class=\"literal\">https://s3.amazonaws.com/<em class=\"replaceable\"><code>{name-of-bucket}</code></em>/<em class=\"replaceable\"><code>{name-of-object}</code></em></code>). There can be infinitely many resources of this type.</p></li>\n </ul>\n</div>\n<p>Each method from my hypothetical object-oriented S3 library corresponds to one of the six standard methods on one of these three types of resources. The getter method <code class=\"function\">S3Object#name</code> corresponds to a GET request on an “S3 object” resource, and the setter method <code class=\"function\">S3Object#value=</code> corresponds to a PUT request on the same resource. Factory methods like <code class=\"function\">S3Bucket.getBuckets</code> and relational methods like <code class=\"function\">S3Bucket#getObjects</code> correspond to GET methods on the “bucket list” and “bucket” resources.</p>\n<p>Every resource exposes the same interface and works the same way. To get an object’s value you send a GET request to that object’s URI. To get only the metadata for an object you send a HEAD request to the same URI. To create a bucket, you send a PUT request to a URI that incorporates the name of the bucket. To add an object to a bucket, you send PUT to a URI that incorporates the bucket name and object name. To delete a bucket or an object, you send a DELETE request to its URI.</p>\n<p>The S3 designers didn’t just make this up. According to the HTTP standard this is what GET, HEAD, PUT, and DELETE are <span class=\"emphasis\"><em>for</em></span>. These four methods (plus POST and OPTIONS, which S3 doesn’t use) suffice to describe <span class=\"emphasis\"><em>all</em></span> interaction with resources on the Web. To expose your programs as web services, you don’t need to invent new vocabularies or smuggle method names into URIs, or do anything except think carefully about your resource design. Every REST web service, no matter how complex, supports the same basic operations. All the complexity lives in the resources.</p>\n<p><a class=\"xref\" href=\"ch03.html#s3resources\" title=\"Table&nbsp;3-1.&nbsp;S3 resources and their methods\">Table&nbsp;3-1</a> shows what happens when you send an HTTP<a id=\"I_indexterm3_tt270\" class=\"indexterm\"></a> request to the URI of an S3 resource.</p>\n<div class=\"table\">\n <a id=\"s3resources\"></a>\n <div class=\"table-title\">\n  Table&nbsp;3-1.&nbsp;S3 resources and their methods\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">&nbsp;</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HEAD</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">DELETE</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">The bucket list (<code class=\"literal\">/</code>)</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">List your buckets</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">-</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">-</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">-</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">A bucket (<code class=\"literal\">/<em class=\"replaceable\"><code>{bucket}</code></em></code>)</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \" class=\"keep-together\">List the bucket’s objects</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">-</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Create the bucket</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Delete the bucket</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">An object (<code class=\"literal\">/<em class=\"replaceable\"><code>{bucket}</code></em>/<em class=\"replaceable\"><code>{object}</code></em>)</code></td>\n     <td style=\"border-right: 0.5pt solid ; \">Get the object’s value and metadata</td>\n     <td style=\"border-right: 0.5pt solid ; \">Get the object’s metadata</td>\n     <td style=\"border-right: 0.5pt solid ; \">Set the object’s value and metadata</td>\n     <td>Delete the object</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<p>That table looks kind of ridiculous. Why did I take up valuable space by printing it? Everything just does what it says. And <span class=\"emphasis\"><em>that</em></span> is why I printed it. In a well-designed RESTful service, <span class=\"emphasis\"><em>everything does what it says</em></span>.</p>\n<p>You may well be skeptical of this claim, given the evidence so far. S3 is a pretty generic service. If all you’re doing is sticking data into named slots, then of course you can implement the service using only generic verbs like GET and PUT. In <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> and <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a> I’ll show you strategies for mapping <span class=\"emphasis\"><em>any</em></span> kind of action to the uniform interface. For a sample preconvincing, note that I was able to get rid of <code class=\"function\">S3Bucket.getBuckets</code> by defining a new resource as “the list of buckets,” which responds only to GET. Also note that <code class=\"function\">S3Bucket#addObject</code> simply disappeared as a natural consequence of the resource design, which requires that every object be associated with some bucket.</p>\n<p>Compare this to S3’s RPC-style SOAP interface. To get the bucket list through<a id=\"I_indexterm3_tt271\" class=\"indexterm\"></a> SOAP, the method name is <code class=\"function\">ListAllMyBuckets</code>. To get the contents of a bucket, the method name is <code class=\"function\">ListBucket</code>. With the RESTful interface, it’s always GET. In a RESTful service, the URI designates an object (in the object-oriented sense) and the method names are standardized. The same few methods work the same way across resources and services.</p>",
      "slug" : "resources"
    }, {
      "title" : "HTTP Response Codes",
      "type" : "page",
      "htmlContent" : "<p>Another defining feature<a id=\"I_indexterm3_tt273\" class=\"indexterm\"></a> of a RESTful architecture is its use of HTTP response codes. If you send a request to S3, and S3 handles it with no problem, you’ll probably get back an HTTP response code of<a id=\"I_indexterm3_tt274\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt275\" class=\"indexterm\"></a> 200 (“OK”), just like when you successfully fetch a web page in your browser. If something goes wrong, the response code will be in the 3xx, 4xx, or 5xx range: for instance,<a id=\"I_indexterm3_tt276\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt277\" class=\"indexterm\"></a> 500 (“Internal Server Error”). An error response code is a signal to the client that the metadata and entity-body should not be interpreted as a response to the request. It’s not what the client asked for: it’s the server’s attempt to tell the client about a problem. Since the response code isn’t part of the document or the metadata, the client can see whether or not an error occurred just by looking at the first three bytes of the response.</p>\n<p><a class=\"xref\" href=\"ch03.html#s3-error\" title=\"Example&nbsp;3-2.&nbsp;A sample error response from S3\">Example&nbsp;3-2</a> shows a sample error response. I made an HTTP request for an object that didn’t exist (<code class=\"literal\">https://s3.amazonaws.com/crummy.com/nonexistent/object</code>). The response code is <a id=\"I_indexterm3_tt278\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt279\" class=\"indexterm\"></a>404 (“Not Found”).</p>\n<div class=\"example\">\n <a id=\"s3-error\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-2.&nbsp;A sample error response from S3\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">404 Not Found\nContent-Type: application/xml\nDate: Fri, 10 Nov 2006 20:04:45 GMT\nServer: AmazonS3\nTransfer-Encoding: chunked\nX-amz-id-2: /sBIPQxHJCsyRXJwGWNzxuL5P+K96/Wvx4FhvVACbjRfNbhbDyBH5RC511sIz0w0\nX-amz-request-id: ED2168503ABB7BF4\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Error&gt;\n &lt;Code&gt;NoSuchKey&lt;/Code&gt;\n &lt;Message&gt;The specified key does not exist.&lt;/Message&gt;\n &lt;Key&gt;nonexistent/object&lt;/Key&gt;\n &lt;RequestId&gt;ED2168503ABB7BF4&lt;/RequestId&gt;\n &lt;HostId&gt;/sBIPQxHJCsyRXJwGWNzxuL5P+K96/Wvx4FhvVACbjRfNbhbDyBH5RC511sIz0w0&lt;/HostId&gt;\n&lt;/Error&gt;</pre>\n </div>\n</div>\n<p>HTTP response codes are underused on the human web. Your browser doesn’t show you the HTTP response code when you request a page, because who wants to look at a numeric code when you can just look at the document to see whether something went wrong? When an error occurs in a web application, most web applications send 200 (“OK”) along with a human-readable document that talks about the error. There’s very little chance a human will mistake the error document for the document they requested.</p>\n<p>On the programmable web, it’s just the opposite. Computer programs are good at taking different paths based on the value of a numeric variable, and very bad at figuring out what a document “means.” In the absence of prearranged rules, there’s no way for a program to tell whether an XML document contains data or describes an error. HTTP response codes are the rules: rough conventions about how the client should approach an HTTP response. Because they’re not part of the entity-body or metadata, a client can understand what happened even if it has no clue how to read the response.</p>\n<p>S3 uses a variety of response codes in addition to 200 (“OK”) and 404 (“Not Found”). The most common is probably 403 (“Forbidden”), used when the client makes a request without providing the right credentials. S3 also uses a few others, including 400 (“Bad Request”), which indicates that the server couldn’t understand the data the client sent; and 409 (“Conflict”), sent when the client tries to delete a bucket that’s not empty. For a full list, see the S3 technical documentation under “The REST Error Response.” I describe <span class=\"emphasis\"><em>every</em></span> HTTP response code in <a class=\"xref\" href=\"apb.html\" title=\"Appendix&nbsp;B.&nbsp;The HTTP Response Code Top 42\">Appendix&nbsp;B</a>, with a focus on their application to web services. There are 41 official HTTP response codes, but only about 10 are important in everyday use.</p>",
      "slug" : "http-response-codes"
    }, {
      "title" : "An S3 Client",
      "type" : "page",
      "htmlContent" : "<p>The Amazon sample<a id=\"ch03_clientss3\" class=\"indexterm\"></a><a id=\"ch03_s3client\" class=\"indexterm\"></a><a id=\"ch03_client\" class=\"indexterm\"></a> libraries, and the third-party contributions like<a id=\"I_indexterm3_tt281\" class=\"indexterm\"></a> <span class=\"application\">AWS::S3</span>, eliminate much of the need for custom S3 client libraries. But I’m not telling you about S3 just so you’ll know about a useful web service. I want to use it to illustrate the theory behind REST. So I’m going to write a Ruby S3 client of my own, and dissect it for you as I go along.</p>\n<p class=\"keep-together\">Just to show it can be done, my library will implement an object-oriented interface, like the one from <a class=\"xref\" href=\"ch03.html#s3aslibrary\" title=\"Example&nbsp;3-1.&nbsp;S3 implemented as a hypothetical Ruby library\">Example&nbsp;3-1</a>, on top of the S3 service. The result will look like ActiveRecord or some other object-relational mapper. Instead of making SQL calls under the covers to store data in a database, though, it’ll make HTTP requests under the covers to store data on the S3 service. Rather than give my methods resource-specific names like <code class=\"function\">getBuckets</code> and <code class=\"literal\">getObjects</code>, I’ll try to use names that reflect the underlying RESTful interface: <code class=\"function\">get</code>, <code class=\"function\">put</code>, and so on.</p>\n<p>The first thing I need is an interface to Amazon’s rather unusual web service authorization mechanism. But that’s not as interesting as seeing the web service in action, so I’m going to skip it for now. I’m going to create a very small Ruby module called <code class=\"classname\">S3::Authorized</code>, just so my other <code class=\"classname\">S3</code> classes can include it. I’ll come back to it at the end, and fill in the details.</p>\n<p><a class=\"xref\" href=\"ch03.html#example_3_3\" title=\"Example&nbsp;3-3.&nbsp;S3 Ruby client: Initial code\">Example&nbsp;3-3</a> shows a bit of throat-clearing code.</p>\n<div class=\"example\">\n <a id=\"example_3_3\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-3.&nbsp;S3 Ruby client: Initial code\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# S3lib.rb\n\n# Libraries necessary for making HTTP requests and parsing responses.\nrequire 'rubygems'\nrequire 'rest-open-uri'\nrequire 'rexml/document'\n\n# Libraries necessary for request signing\nrequire 'openssl'\nrequire 'digest/sha1'\nrequire 'base64'\nrequire 'uri'\n\nmodule S3 # This is the beginning of a big, all-encompassing module.\n\nmodule Authorized\n  # Enter your public key (Amazon calls it an \"Access Key ID\") and\n  # your private key (Amazon calls it a \"Secret Access Key\"). This is\n  # so you can sign your S3 requests and Amazon will know who to\n  # charge.\n  @@public_key = ''\n  @@private_key = ''\n\n  if @@public_key.empty? or @@private_key.empty?\t\n    raise \"You need to set your S3 keys.\"\n  end\n\n  # You shouldn't need to change this unless you're using an S3 clone like\n  # Park Place.\n  HOST = 'https://s3.amazonaws.com/'\nend</pre>\n </div>\n</div>\n<p>The only interesting aspect of this bare-bones <code class=\"classname\">S3::Authorized</code> is that it’s where you should plug in the two cryptographic keys associated with your Amazon Web Services account. Every S3 request you make includes your public key<a id=\"I_indexterm3_tt282\" class=\"indexterm\"></a> (Amazon calls it an “Access Key ID”) so that Amazon can identify you. Every request you make must be cryptographically signed with your private key (Amazon calls it a<a id=\"I_indexterm3_tt283\" class=\"indexterm\"></a> “Secret Access Key”) so that Amazon knows it’s really you. I’m using the standard cryptographic terms, even though your “private key” is not totally private—Amazon knows it too. It is private in the sense that you should never reveal it to anyone else. If you do, the person you reveal it to will be able to make S3 requests and have Amazon charge you for it.</p>\n<h2>The Bucket List</h2>\n<p><a class=\"xref\" href=\"ch03.html#example_3_4\" title=\"Example&nbsp;3-4.&nbsp;S3 Ruby client: the S3::BucketList class\">Example&nbsp;3-4</a> shows an object-oriented class for my first resource, the list of buckets. I’ll call the class for this resource <code class=\"classname\">S3::BucketList</code>.</p>\n<div class=\"example\">\n <a id=\"example_3_4\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-4.&nbsp;S3 Ruby client: the S3::BucketList class\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\"># The bucket list.\nclass BucketList\n  include Authorized\n\n  # Fetch all the buckets this user has defined.\n  def get\n    buckets = []\n\n    # GET the bucket list URI and read an XML document from it.\n    doc = REXML::Document.new(open(HOST).read)\n\n    # For every bucket...\n    REXML::XPath.each(doc, \"//Bucket/Name\") do |e|\n      # ...create a new Bucket object and add it to the list.\n      buckets &lt;&lt; Bucket.new(e.text) if e.text\n    end\n    return buckets\n  end\nend</pre>\n </div>\n</div>\n<div class=\"sidebar\">\n <a id=\"I_sidebar3_tt284\"></a>\n <div class=\"sidebar-title\">\n  XPath Exposition\n </div>\n <p>Reading<a id=\"I_indexterm3_tt285\" class=\"indexterm\"></a> from right to left, the XPath expression <code class=\"literal\">//Bucket/Name</code> means:</p>\n <div class=\"informaltable\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n   </colgroup>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Find every <code class=\"literal\">Name</code> tag</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Name</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">that’s the direct child of a <code class=\"literal\">Bucket</code> tag</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Bucket/</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">anywhere in the document.</td>\n     <td>//</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<p>Now my file is a real web service client. If I call <code class=\"function\">S3::BucketList#get</code> I make a secure HTTP GET request to <a class=\"ulink\" href=\"https://s3.amazonaws.com/\" target=\"_top\">https://s3.amazonaws.com/</a>, which happens to be the URI of the resource “a list of your buckets.” The S3 service sends back an XML document that looks something like <a class=\"xref\" href=\"ch03.html#sample-bucket-list\" title=\"Example&nbsp;3-5.&nbsp;A sample “list of your buckets”\">Example&nbsp;3-5</a>. This is a<a id=\"I_indexterm3_tt286\" class=\"indexterm\"></a> <em class=\"firstterm\">representation</em> (as I’ll start calling it in the next chapter) of the resource “a list of your buckets.” It’s just some information about the current state of that list. The <code class=\"literal\">Owner</code> tag makes it clear whose bucket list it is (my AWS account name is evidently “leonardr28”), and the <code class=\"literal\">Buckets</code> tag contains a number of <code class=\"literal\">Bucket</code> tags describing my buckets (in this case, there’s one <code class=\"literal\">Bucket</code> tag and one bucket).</p>\n<div class=\"example\">\n <a id=\"sample-bucket-list\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-5.&nbsp;A sample “list of your buckets”\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;ListAllMyBucketsResult xmlns='http://s3.amazonaws.com/doc/2006-03-01/'&gt;\n &lt;Owner&gt;\n  &lt;ID&gt;c0363f7260f2f5fcf38d48039f4fb5cab21b060577817310be5170e7774aad70&lt;/ID&gt;\n  &lt;DisplayName&gt;leonardr28&lt;/DisplayName&gt;\n &lt;/Owner&gt;\n &lt;Buckets&gt;\n  &lt;Bucket&gt;\n   &lt;Name&gt;crummy.com&lt;/Name&gt;\n   &lt;CreationDate&gt;2006-10-26T18:46:45.000Z&lt;/CreationDate&gt;\n  &lt;/Bucket&gt;\n &lt;/Buckets&gt;\n&lt;/ListAllMyBucketsResult&gt;</pre>\n </div>\n</div>\n<p>For purposes of this small client application, the <code class=\"literal\">Name</code> is the only aspect of a bucket I’m interested in. The XPath expression <code class=\"literal\">//Bucket/Name</code> gives me the name of every bucket, which is all I need to create <code class=\"classname\">Bucket</code> objects.</p>\n<p>As we’ll see, one thing that’s missing from this XML document is<a id=\"I_indexterm3_tt287\" class=\"indexterm\"></a> <span class=\"emphasis\"><em>links</em></span>. The document gives the name of every bucket, but says nothing about where the buckets can be found on the Web. In terms of the REST design criteria, this is the major shortcoming of Amazon S3. Fortunately, it’s not too difficult to program a client to calculate a URI from the bucket name. I just follow the rule I gave earlier: <code class=\"literal\">https://s3.amazonaws.com/<em class=\"replaceable\"><code>{name-of-bucket}</code></em></code>.</p>\n<h2>The Bucket</h2>\n<p>Now, let’s write the <code class=\"classname\">S3::Bucket</code> class, so that <code class=\"function\">S3::BucketList.get</code> will have something to instantiate (<a class=\"xref\" href=\"ch03.html#example_3_6\" title=\"Example&nbsp;3-6.&nbsp;S3 Ruby client: the S3::Bucket class\">Example&nbsp;3-6</a>).</p>\n<div class=\"example\">\n <a id=\"example_3_6\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-6.&nbsp;S3 Ruby client: the S3::Bucket class\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\"># A bucket that you've stored (or will store) on the S3 application.\nclass Bucket\n  include Authorized\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\n\n  # The URI to a bucket is the service root plus the bucket name.\n  def uri\n    HOST + URI.escape(name)\n  end\n\n  # Stores this bucket on S3. Analagous to ActiveRecord::Base#save,\n  # which stores an object in the database. See below in the\n  # book text for a discussion of acl_policy.\n  def put(acl_policy=nil)\n    # Set the HTTP method as an argument to open(). Also set the S3\n    # access policy for this bucket, if one was provided.\n    args = {:method =&gt; :put}\n    args[\"x-amz-acl\"] = acl_policy if acl_policy\n\n    # Send a PUT request to this bucket's URI.\n    open(uri, args)\n    return self\n  end\n\n  # Deletes this bucket. This will fail with HTTP status code 409\n  # (\"Conflict\") unless the bucket is empty.\n  def delete\n    # Send a DELETE request to this bucket's URI.\n    open(uri, :method =&gt; :delete)\n  end</pre>\n </div>\n</div>\n<p>Here are two more web service <a id=\"I_indexterm3_tt288\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt289\" class=\"indexterm\"></a>methods: <code class=\"function\">S3::Bucket#put</code> and <code class=\"function\">S3::Bucket#delete</code>. Since the URI to a bucket uniquely identifies the bucket, deletion is simple: you send a DELETE request to the bucket URI, and it’s gone. Since a bucket’s name goes into its URI, and a bucket has no other settable properties, it’s also easy to create a bucket: just send a<a id=\"I_indexterm3_tt290\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt291\" class=\"indexterm\"></a> PUT request to its URI. As I’ll show when I write <code class=\"classname\">S3::Object</code>, a PUT request is more complicated when not all the data can be stored in the URI.</p>\n<p>Earlier I compared my <code class=\"classname\">S3::</code> classes to ActiveRecord classes, but <code class=\"classname\">S3::Bucket#put</code> works a little differently from an ActiveRecord implementation of <code class=\"function\">save</code>. A row in an ActiveRecord-controlled database table has a numeric unique ID. If you take an ActiveRecord object with ID 23 and change its name, your change is reflected as a change to the database record with ID 23:</p>\n<a id=\"I_programlisting3_tt292\"></a>\n<pre class=\"programlisting\">SET name=\"newname\" WHERE id=23</pre>\n<p>The permanent ID of an S3 bucket is its URI, and the URI includes the name. If you change the name of a bucket and call <code class=\"function\">put</code>, the client doesn’t rename the old bucket on S3: it creates a new, empty bucket at a new URI with the new name. This is a result of design decisions made by the S3 programmers. It doesn’t have to be this way. The Ruby on Rails framework has a different design: when it exposes database rows through a RESTful web service, the URI to a row incorporates its numeric database IDs. If S3 was a Rails service you’d see buckets at URIs like <code class=\"literal\">/buckets/23</code>. Renaming the bucket wouldn’t change the URI.</p>\n<p>Now comes the last method of <code class=\"classname\">S3::Bucket</code>, which I’ve called <code class=\"function\">get</code>. Like <code class=\"function\">S3::BucketList.get</code>, this method <a id=\"I_indexterm3_tt293\" class=\"indexterm\"></a>makes a GET request to the URI of a resource (in this case, a “bucket” resource), fetches an XML document, and parses it into new instances of a Ruby class (see <a class=\"xref\" href=\"ch03.html#bucket-getobjects\" title=\"Example&nbsp;3-7.&nbsp;S3 Ruby client: the S3::Bucket class (concluded)\">Example&nbsp;3-7</a>). This method supports a variety of ways to filter the contents of S3 buckets. For instance, you can use <code class=\"constant\">:Prefix</code> to retrieve only objects whose keys start with a certain string. I won’t cover these filtering options in detail. If you’re interested in them, see the S3 technical documentation on “Listing Keys.”</p>\n<div class=\"example\">\n <a id=\"bucket-getobjects\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-7.&nbsp;S3 Ruby client: the S3::Bucket class (concluded)\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Get the objects in this bucket: all of them, or some subset.\n  #\n  # If S3 decides not to return the whole bucket/subset, the second\n  # return value will be set to true. To get the rest of the objects,\n  # you'll need to manipulate the subset options (not covered in the\n  # book text).\n  #\n  # The subset options are :Prefix, :Marker, :Delimiter, :MaxKeys.\n  # For details, see the S3 docs on \"Listing Keys\".\n  def get(options={})\n    # Get the base URI to this bucket, and append any subset options\n    # onto the query string.\n    uri = uri()\n    suffix = '?'\n\n    # For every option the user provided...\n    options.each do |param, value|      \n      # ...if it's one of the S3 subset options...\n      if [:Prefix, :Marker, :Delimiter, :MaxKeys].member? :param\n        # ...add it to the URI.\n        uri &lt;&lt; suffix &lt;&lt; param.to_s &lt;&lt; '=' &lt;&lt; URI.escape(value)\n        suffix = '&amp;'\n      end\n    end\n\n    # Now we've built up our URI. Make a GET request to that URI and\n    # read an XML document that lists objects in the bucket.\n    doc = REXML::Document.new(open(uri).read)\n    there_are_more = REXML::XPath.first(doc, \"//IsTruncated\").text == \"true\"\n\n    # Build a list of S3::Object objects.\n    objects = []\n    # For every object in the bucket...\n    REXML::XPath.each(doc, \"//Contents/Key\") do |e|\n      # ...build an S3::Object object and append it to the list.\n      objects &lt;&lt; Object.new(self, e.text) if e.text\n    end\n    return objects, there_are_more\n  end\nend</pre>\n </div>\n</div>\n<div class=\"sidebar\">\n <a id=\"I_sidebar3_tt294\"></a>\n <div class=\"sidebar-title\">\n  XPath Exposition\n </div>\n <p>Reading from right to left, the XPath expression <code class=\"literal\">//IsTruncated</code> means:</p>\n <div class=\"informaltable\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n   </colgroup>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Find every <code class=\"literal\">IsTruncated</code> tag</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">IsTruncated</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">anywhere in the document.</td>\n     <td>//</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<p>Make a GET request of the application’s root URI, and you get a representation of the resource “a list of your buckets.” Make a GET request to the URI of a “bucket” resource, and you get a representation of the bucket: an XML document like the one in <a class=\"xref\" href=\"ch03.html#sample-s3-bucket\" title=\"Example&nbsp;3-8.&nbsp;A sample bucket representation\">Example&nbsp;3-8</a>, containing a <code class=\"literal\">Contents</code> tag for every element of the bucket.</p>\n<div class=\"example\">\n <a id=\"sample-s3-bucket\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-8.&nbsp;A sample bucket representation\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;?xml version='1.0' encoding='UTF-8'?&gt;  \n&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;\n &lt;Name&gt;crummy.com&lt;/Name&gt;\n &lt;Prefix&gt;&lt;/Prefix&gt;\n &lt;Marker&gt;&lt;/Marker&gt;\n &lt;MaxKeys&gt;1000&lt;/MaxKeys&gt;\n &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;\n &lt;Contents&gt;\n  &lt;Key&gt;mydocument&lt;/Key&gt;\n  &lt;LastModified&gt;2006-10-27T16:01:19.000Z&lt;/LastModified&gt;\n  &lt;ETag&gt;\"93bede57fd3818f93eedce0def329cc7\"&lt;/ETag&gt;\n  &lt;Size&gt;22&lt;/Size&gt;\n  &lt;Owner&gt;\n   &lt;ID&gt;\n    c0363f7260f2f5fcf38d48039f4fb5cab21b060577817310be5170e7774aad70&lt;/ID&gt;\n    &lt;DisplayName&gt;leonardr28&lt;/DisplayName&gt;\n  &lt;/Owner&gt;\n  &lt;StorageClass&gt;STANDARD&lt;/StorageClass&gt;\n &lt;/Contents&gt;\n&lt;/ListBucketResult&gt;</pre>\n </div>\n</div>\n<p>In this case, the portion of the document I find interesting is the list of a bucket’s objects. An object is identified by its key, and I use the XPath expression “//Contents/Key” to fetch that information. I’m also interested in a certain Boolean variable (“//IsTruncated”): whether this document contains keys for every object in the bucket, or whether S3 decided there were too many to send in one document and truncated the list.</p>\n<p>Again, the main thing missing from this representation is links. The document lists lots of information about the objects, but not their URIs. The client is expected to know how to turn an object name into that object’s URI. Fortunately, it’s not too hard to build an object’s URI, using the rule I already gave: <code class=\"literal\">https://s3.amazonaws.com/<em class=\"replaceable\"><code>{name-of-bucket}</code></em>/<em class=\"replaceable\"><code>{name-of-object}</code></em></code>.</p>\n<h2>The S3 Object</h2>\n<p>Now<a id=\"ch03_s3objects\" class=\"indexterm\"></a> we’re ready to implement an interface to the core of the S3 service: the object. Remember that an S3 object is just a data string that’s been given a name (a key) and a set of metadata key-value pairs (such as <code class=\"literal\">Content-Type</code>=<code class=\"literal\">\"text/html\"</code>).<a id=\"I_indexterm3_tt295\" class=\"indexterm\"></a> When you send a GET request to the bucket list, or to a bucket, S3 serves an XML document that you have to parse. When you send a GET request to an object, S3 serves whatever data string you PUT there earlier—byte for byte.</p>\n<p><a class=\"xref\" href=\"ch03.html#example_3_9\" title=\"Example&nbsp;3-9.&nbsp;S3 Ruby client: the S3::Object class\">Example&nbsp;3-9</a> shows the beginning of <code class=\"classname\">S3::Object</code>, which should be nothing new by now.</p>\n<div class=\"example\">\n <a id=\"example_3_9\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-9.&nbsp;S3 Ruby client: the S3::Object class\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\"># An S3 object, associated with a bucket, containing a value and metadata.\nclass Object\n  include Authorized\n\n  # The client can see which Bucket this Object is in.\n  attr_reader :bucket\n  \n  # The client can read and write the name of this Object.\n  attr_accessor :name\n\n  # The client can write this Object's metadata and value.\n  # I'll define the corresponding \"read\" methods later.\n  attr_writer :metadata, :value\n\n  def initialize(bucket, name, value=nil, metadata=nil)\n    @bucket, @name, @value, @metadata = bucket, name, value, metadata\n  end\n\n  # The URI to an Object is the URI to its Bucket, and then its name.\n  def uri\n    @bucket.uri + '/' + URI.escape(name)\n  end</pre>\n </div>\n</div>\n<p>What comes next is my first implementation of an <a id=\"I_indexterm3_tt296\" class=\"indexterm\"></a>HTTP HEAD request. I use it to fetch an object’s metadata key-value pairs and populate the <em class=\"structfield\"><code>metadata</code></em> hash with it (the actual implementation of <code class=\"function\">store_metadata</code> comes at the end of this class). Since I’m using <code class=\"literal\">rest-open-uri</code>, the code to make the HEAD request looks the same as the code to make any other HTTP request (see <a class=\"xref\" href=\"ch03.html#example_3_10\" title=\"Example&nbsp;3-10.&nbsp;S3 Ruby client: the S3::Object#metadata method\">Example&nbsp;3-10</a>).</p>\n<div class=\"example\">\n <a id=\"example_3_10\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-10.&nbsp;S3 Ruby client: the S3::Object#metadata method\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Retrieves the metadata hash for this Object, possibly fetching\n  # it from S3.\n  def metadata\n    # If there's no metadata yet...\n    unless @metadata\n      # Make a HEAD request to this Object's URI, and read the metadata\n      # from the HTTP headers in the response.\n      begin\n        store_metadata(open(uri, :method =&gt; :head).meta) \n      rescue OpenURI::HTTPError =&gt; e\n        if e.io.status == [\"404\", \"Not Found\"]\n          # If the Object doesn't exist, there's no metadata and this is not\n          # an error. \n          @metadata = {}\n        else\n          # Otherwise, this is an error.\n          raise e\n        end\n      end\n\n    end\n    return @metadata\n  end</pre>\n </div>\n</div>\n<p class=\"keep-together\">The goal here is to fetch an object’s metadata without fetching the object itself. This is the difference between downloading a movie review and downloading the movie, and when you’re paying for the bandwidth it’s a big difference. This distinction between metadata and representation is not unique to S3, and the solution is general to all resource-oriented web services. The HEAD method gives <span class=\"emphasis\"><em>any</em></span> client a way of fetching the metadata for <span class=\"emphasis\"><em>any</em></span> resource, without also fetching its (possibly enormous) representation.</p>\n<p>Of course, sometimes you do want to download the movie, and for that you need a GET request. I’ve put the GET request in the accessor method <code class=\"function\">S3::Object#value</code>, in <a class=\"xref\" href=\"ch03.html#example_3_11\" title=\"Example&nbsp;3-11.&nbsp;S3 Ruby client: the S3::Object#value method\">Example&nbsp;3-11</a>. Its structure mirrors that of <code class=\"function\">S3::Object#metadata</code>.</p>\n<div class=\"example\">\n <a id=\"example_3_11\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-11.&nbsp;S3 Ruby client: the S3::Object#value method\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Retrieves the value of this Object, possibly fetching it\n  # (along with the metadata) from S3.\n  def value\n    # If there's no value yet...\n    unless @value\n      # Make a GET request to this Object's URI.\n      response = open(uri)\n      # Read the metadata from the HTTP headers in the response.\n      store_metadata(response.meta) unless @metadata\n      # Read the value from the entity-body\n      @value = response.read\n    end\n    return @value\n  end</pre>\n </div>\n</div>\n<p>The client stores objects on the S3 service the same way it stores buckets: by sending a <a id=\"I_indexterm3_tt297\" class=\"indexterm\"></a>PUT request to a certain URI. The bucket PUT is trivial because a bucket has no distinguishing features other than its name, which goes into the URI of the PUT request. An object PUT is more complex. This is where the HTTP client specifies an object’s metadata (such as <code class=\"literal\">Content-Type</code>) and value. This information will be made available on future HEAD and GET requests.</p>\n<p>Fortunately, setting up the PUT request is not terribly complicated, because an object’s value is whatever the client says it is. I don’t have to wrap the object’s value in an XML document or anything. I just send the data as is, and set HTTP headers that correspond to the items of metadata in my <code class=\"varname\">metadata</code> hash (see <a class=\"xref\" href=\"ch03.html#example_3_12\" title=\"Example&nbsp;3-12.&nbsp;S3 Ruby client: the S3::Object#put method\">Example&nbsp;3-12</a>).</p>\n<div class=\"example\">\n <a id=\"example_3_12\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-12.&nbsp;S3 Ruby client: the S3::Object#put method\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Store this Object on S3.\n  def put(acl_policy=nil)\n\n    # Start from a copy of the original metadata, or an empty hash if\n    # there is no metadata yet.\n    args = @metadata ? @metadata.clone : {}\n\n    # Set the HTTP method, the entity-body, and some additional HTTP\n    # headers.\n    args[:method] = :put\n    args[\"x-amz-acl\"] = acl_policy if acl_policy\n    if @value\n      args[\"Content-Length\"] = @value.size.to_s\n      args[:body] = @value\n    end\n\n    # Make a PUT request to this Object's URI.\n    open(uri, args)\n    return self\n  end</pre>\n </div>\n</div>\n<p>The <code class=\"function\">S3::Object#delete</code> implementation (see <a class=\"xref\" href=\"ch03.html#example_3_13\" title=\"Example&nbsp;3-13.&nbsp;S3 Ruby client: the S3::Object#delete method\">Example&nbsp;3-13</a>) is identical to <code class=\"function\">S3::Bucket#delete</code>.</p>\n<div class=\"example\">\n <a id=\"example_3_13\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-13.&nbsp;S3 Ruby client: the S3::Object#delete method\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Deletes this Object.\n  def delete\n    # Make a DELETE request to this Object's URI.\n    open(uri, :method =&gt; :delete)\n  end</pre>\n </div>\n</div>\n<p>And <a class=\"xref\" href=\"ch03.html#example_3_14\" title=\"Example&nbsp;3-14.&nbsp;S3 Ruby client: the S3::Object#store_metadata method\">Example&nbsp;3-14</a> shows the method for turning HTTP response headers into S3 object metadata. Except for <code class=\"literal\">Content-Type</code>, you should prefix all the metadata headers you set with the string “x-amz-meta-”. Otherwise they won’t make the round trip to the S3 server and back to a web service client. S3 will think they’re quirks of your client software and discard them.<a id=\"I_indexterm3_tt298\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt299\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt300\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt301\" class=\"indexterm\"></a></p>\n<div class=\"example\">\n <a id=\"example_3_14\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-14.&nbsp;S3 Ruby client: the S3::Object#store_metadata method\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  private\n\n  # Given a hash of headers from a HTTP response, picks out the\n  # headers that are relevant to an S3 Object, and stores them in the\n  # instance variable @metadata.\n  def store_metadata(new_metadata)    \n    @metadata = {}\n    new_metadata.each do |h,v| \n      if RELEVANT_HEADERS.member?(h) || h.index('x-amz-meta') == 0\n        @metadata[h] = v  \n      end\n    end\n  end\n  RELEVANT_HEADERS = ['content-type', 'content-disposition', 'content-range',\n                      'x-amz-missing-meta']\nend</pre>\n </div>\n</div>",
      "slug" : "an-s3-client"
    }, {
      "title" : "Request Signing and Access Control",
      "type" : "page",
      "htmlContent" : "<p>I’ve <a id=\"ch03_requestsigning\" class=\"indexterm\"></a><a id=\"ch03_accesscontrol\" class=\"indexterm\"></a><a id=\"ch03_s3req\" class=\"indexterm\"></a><a id=\"ch03_sssreq\" class=\"indexterm\"></a>put it off as long as I can, and now it’s time to deal with S3 authentication. If your main interest is in RESTful services in general, feel free to skip ahead to the section on using the S3 library in clients. But if the inner workings of S3 have piqued your interest, read on.</p>\n<p>The code I’ve shown you so far makes HTTP requests all right, but S3 rejects them, because they don’t contain the all-important <code class=\"literal\">Authorization</code> header.<a id=\"I_indexterm3_tt302\" class=\"indexterm\"></a> S3 has no proof that you’re the owner of your own buckets. Remember, Amazon charges you for the data stored on their servers and the bandwidth used in transferring that data. If S3 accepted requests to your buckets with no authorization, anyone could store data in your buckets and you’d get charged for it.</p>\n<p>Most web services that require authentication use a standard HTTP mechanism to make sure you are who you claim to be. But S3’s needs are more complicated. With most web services you never want anyone else using your data. But one of the uses of S3 is as a hosting service. You might want to host a big movie file on S3, let anyone download it with their BitTorrent client, and have Amazon send you the bill.</p>\n<p>Or you might be <span class=\"emphasis\"><em>selling</em></span> access to movie files stored on S3. Your e-commerce site takes payment from a customer and gives them an S3 URI they can use to download the movie. You’re delegating to someone else the right to make a particular web service call (a GET request) as you, and have it charged to your account.</p>\n<p>The standard mechanisms for HTTP authentication can’t provide security for that kind of application. Normally, the person who’s sending the HTTP request needs to know the actual password. You can prevent someone from spying on your password, but you can’t say to someone else: “here’s my password, but you must promise only to use it to request this one URI.”</p>\n<p>S3 solves this problem using a message authentication code (MAC). Every time you make an S3 request, you use<a id=\"I_indexterm3_tt303\" class=\"indexterm\"></a> your secret key (remember, the secret is shared between you and Amazon) to sign the important parts of the request. That’d be the URI, the HTTP method you’re using, and a few of the HTTP headers. Only someone who knows the secret can create these signatures for your requests, which is how Amazon knows it’s okay to charge you for the request. But once you’ve signed a request, you can send the signature to a third party without revealing the secret. The third party is then free to send an identical HTTP request to the one you signed, and have Amazon charge you for it. In short: someone else can make a specific request as you, for a limited time, without having to know your secret.</p>\n<p>There is a simpler way to give anonymous access to your S3 objects, and I discuss it below. But there’s no way around signing your own requests, so even a simple library like this one must support request signing if it’s going to work. I’m reopening the <code class=\"classname\">S3::Authorized</code> Ruby module now. I’m going to give it the ability to intercept calls to the <code class=\"function\">open</code> method, and sign HTTP requests before they’re made. Since <code class=\"classname\">S3::BucketList</code>, <code class=\"classname\">S3::Bucket</code>, and <code class=\"classname\">S3::Object</code> have all <code class=\"literal\">include</code>d this module, they’ll inherit this ability as soon as I define it. Without the code I’m about to write, all those <code class=\"function\">open</code> calls I defined in the classes above will send unsigned HTTP requests that just bounce off S3 with response code 403 (“Forbidden”). With this code, you’ll be able to generate signed HTTP requests that pass through S3’s security measures (and cost you money). The code in <a class=\"xref\" href=\"ch03.html#example_3_15\" title=\"Example&nbsp;3-15.&nbsp;S3 Ruby client: the S3::Authorized module\">Example&nbsp;3-15</a> and the other examples that follow is heavily based on Amazon’s own example S3 library.</p>\n<div class=\"example\">\n <a id=\"example_3_15\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-15.&nbsp;S3 Ruby client: the S3::Authorized module\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">module Authorized\n  # These are the standard HTTP headers that S3 considers interesting\n  # for purposes of request signing.\n  INTERESTING_HEADERS = ['content-type', 'content-md5', 'date']\n\n  # This is the prefix for custom metadata headers. All such headers\n  # are considered interesting for purposes of request signing.\n  AMAZON_HEADER_PREFIX = 'x-amz-'\n\n  # An S3-specific wrapper for rest-open-uri's implementation of\n  # open(). This implementation sets some HTTP headers before making\n  # the request. Most important of these is the Authorization header,\n  # which contains the information Amazon will use to decide who to\n  # charge for this request.\n  def open(uri, headers_and_options={}, *args, &amp;block)\n    headers_and_options = headers_and_options.dup\n    headers_and_options['Date'] ||= Time.now.httpdate\n    headers_and_options['Content-Type'] ||= ''   \n    signed = signature(uri, headers_and_options[:method] || :get,\n                       headers_and_options)\n    headers_and_options['Authorization'] = \"AWS #{@@public_key}:#{signed}\"\n    Kernel::open(uri, headers_and_options, *args, &amp;block)\n  end</pre>\n </div>\n</div>\n<p>The tough work here is in the <code class=\"function\">signature</code> method, not yet defined. This method needs to construct an encrypted string to go into a request’s <code class=\"literal\">Authorization</code> header: a string that convinces the S3 service that it’s really you sending the request—or that you’ve authorized someone else to make the request at your expense (see <a class=\"xref\" href=\"ch03.html#example_3_16\" title=\"Example&nbsp;3-16.&nbsp;S3 Ruby client: the Authorized#signature module\">Example&nbsp;3-16</a>).</p>\n<div class=\"example\">\n <a id=\"example_3_16\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-16.&nbsp;S3 Ruby client: the Authorized#signature module\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Builds the cryptographic signature for an HTTP request. This is\n  # the signature (signed with your secret key) of a \"canonical\n  # string\" containing all interesting information about the request.\n  def signature(uri, method=:get, headers={}, expires=nil)\n    # Accept the URI either as a string, or as a Ruby URI object.\n    if uri.respond_to? :path\n      path = uri.path\n    else\n      uri = URI.parse(uri)\n      path = uri.path + (uri.query ? \"?\" + query : \"\")\n    end\n\n    # Build the canonical string, then sign it.\n    signed_string = sign(canonical_string(method, path, headers, expires))\n  end</pre>\n </div>\n</div>\n<p>Well, this method passes the buck again, by calling <code class=\"function\">sign</code> on the result of <code class=\"function\">canonical_string</code>. Let’s look at those two methods, starting with <code class=\"function\">canonical_string</code>. It turns an HTTP request into a string that looks something like <a class=\"xref\" href=\"ch03.html#s3-canonical-string\" title=\"Example&nbsp;3-17.&nbsp;The canonical string for a sample request\">Example&nbsp;3-17</a>. That string contains everything interesting (from S3’s point of view) about an HTTP request, in a specific format. The interesting data is the HTTP method (PUT), the <code class=\"literal\">Content-type</code> (“text/plain”), a date, a few other HTTP headers (“x-amz-metadata”), and the path portion of the URI (“/crummy.com/myobject”). This is the string that <code class=\"function\">sign</code> will sign. Anyone can create this string, but only the S3 account holder and Amazon know how to produce the correct signature.</p>\n<div class=\"example\">\n <a id=\"s3-canonical-string\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-17.&nbsp;The canonical string for a sample request\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">PUT\n\ntext/plain\nFri, 27 Oct 2006 21:22:41 GMT\nx-amz-metadata:Here's some metadata for the myobject object.\n/crummy.com/myobject</pre>\n </div>\n</div>\n<p>When Amazon’s server receives your HTTP request, it generates the canonical string, signs it (again, Amazon knows your secret key), and sees whether the two signatures match. That’s how S3 authentication works. If the signatures match, your request goes through. Otherwise, you get a response code of 403 (“Forbidden”).</p>\n<p><a class=\"xref\" href=\"ch03.html#s3-canonical-string-method\" title=\"Example&nbsp;3-18.&nbsp;S3 Ruby client: the Authorized#canonical_string method\">Example&nbsp;3-18</a> shows the code to generate the canonical string.</p>\n<div class=\"example\">\n <a id=\"s3-canonical-string-method\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-18.&nbsp;S3 Ruby client: the Authorized#canonical_string method\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Turns the elements of an HTTP request into a string that can be\n  # signed to prove a request comes from your web service account.\n  def canonical_string(method, path, headers, expires=nil)\n\n    # Start out with default values for all the interesting headers.\n    sign_headers = {}\n    INTERESTING_HEADERS.each { |header| sign_headers[header] = '' }\n\n    # Copy in any actual values, including values for custom S3\n    # headers.\n    headers.each do |header, value|\n      if header.respond_to? :to_str\n        header = header.downcase\n        # If it's a custom header, or one Amazon thinks is interesting...\n        if INTERESTING_HEADERS.member?(header) ||\n            header.index(AMAZON_HEADER_PREFIX) == 0\n          # Add it to the header hash.\n          sign_headers[header] = value.to_s.strip\n        end\n      end\n    end\n \n    # This library eliminates the need for the x-amz-date header that\n    # Amazon defines, but someone might set it anyway. If they do,\n    # we'll do without HTTP's standard Date header.\n    sign_headers['date'] = '' if sign_headers.has_key? 'x-amz-date'\n\n    # If an expiration time was provided, it overrides any Date\n    # header. This signature will be valid until the expiration time,\n    # not only during the single second designated by the Date header.\n    sign_headers['date'] = expires.to_s if expires\n\n    # Now we start building the canonical string for this request. We\n    # start with the HTTP method.\n    canonical = method.to_s.upcase + \"\\n\"\n\n    # Sort the headers by name, and append them (or just their values)\n    # to the string to be signed.\n    sign_headers.sort_by { |h| h[0] }.each do |header, value|\n      canonical &lt;&lt; header &lt;&lt; \":\" if header.index(AMAZON_HEADER_PREFIX) == 0\n      canonical &lt;&lt; value &lt;&lt; \"\\n\"\n    end\n\n    # The final part of the string to be signed is the URI path. We\n    # strip off the query string, and (if necessary) tack one of the\n    # special S3 query parameters back on: 'acl', 'torrent', or\n    # 'logging'.\n    canonical &lt;&lt; path.gsub(/\\?.*$/, '')\n\n    for param in ['acl', 'torrent', 'logging']\n      if path =~ Regexp.new(\"[&amp;?]#{param}($|&amp;|=)\")\n        canonical &lt;&lt; \"?\" &lt;&lt; param\n        break\n      end\n    end\n    return canonical\n  end</pre>\n </div>\n</div>\n<p>The implementation of <code class=\"function\">sign</code> is just a bit of plumbing around Ruby’s standard cryptographic and encoding interfaces (see <a class=\"xref\" href=\"ch03.html#example_3_19\" title=\"Example&nbsp;3-19.&nbsp;S3 Ruby client: the Authorized#sign method\">Example&nbsp;3-19</a>).</p>\n<div class=\"example\">\n <a id=\"example_3_19\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-19.&nbsp;S3 Ruby client: the Authorized#sign method\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Signs a string with the client's secret access key, and encodes the\n  # resulting binary string into plain ASCII with base64.\n  def sign(str)\n    digest_generator = OpenSSL::Digest::Digest.new('sha1')\n    digest = OpenSSL::HMAC.digest(digest_generator, @@private_key, str)\n    return Base64.encode64(digest).strip\n  end</pre>\n </div>\n</div>\n<h2>Signing a URI</h2>\n<p>My S3<a id=\"I_indexterm3_tt304\" class=\"indexterm\"></a> library has one feature still to be implemented. I’ve mentioned a few times that S3 lets you sign an HTTP request and give the URI to someone else, letting them make that request as you. Here’s the method that lets you do this: <code class=\"function\">signed_uri</code> (see <a class=\"xref\" href=\"ch03.html#example_3_20\" title=\"Example&nbsp;3-20.&nbsp;S3 Ruby client: the Authorized#signed_uri method\">Example&nbsp;3-20</a>). Instead of making an HTTP request with <code class=\"function\">open</code>, you pass the <code class=\"function\">open</code> arguments into this method, and it gives you a signed URI that anyone can use as you. To limit abuse, a signed URI works only for a limited time. You can customize that time by passing a <code class=\"classname\">Time</code> object in as the keyword argument <code class=\"constant\">:expires</code>.</p>\n<div class=\"example\">\n <a id=\"example_3_20\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-20.&nbsp;S3 Ruby client: the Authorized#signed_uri method\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Given information about an HTTP request, returns a URI you can\n  # give to anyone else, to let them them make that particular HTTP\n  # request as you. The URI will be valid for 15 minutes, or until the\n  # Time passed in as the :expires option.\n  def signed_uri(headers_and_options={}) \n    expires = headers_and_options[:expires] || (Time.now.to_i + (15 * 60))\n    expires = expires.to_i if expires.respond_to? :to_i\n    headers_and_options.delete(:expires) \n    signature = URI.escape(signature(uri, headers_and_options[:method], \n                                     headers_and_options, nil))\n    q = (uri.index(\"?\")) ? \"&amp;\" : \"?\"\n    \"#{uri}#{q}Signature=#{signature}&amp;Expires=#{expires}&amp;AWSAccessKeyId=#{@@public_key}\"\n  end\nend\n\nend # Remember the all-encompassing S3 module? This is the end.</pre>\n </div>\n</div>\n<p>Here’s how it works. Suppose I want to give a customer access to my hosted file at <a class=\"ulink\" href=\"https://s3.amazonaws.com/BobProductions/KomodoDragon.avi\" target=\"_top\">https://s3.amazonaws.com/BobProductions/KomodoDragon.avi</a>. I can run the code in <a class=\"xref\" href=\"ch03.html#example_3_21\" title=\"Example&nbsp;3-21.&nbsp;Generating a signed URI\">Example&nbsp;3-21</a> to generate a URI for my customer.</p>\n<div class=\"example\">\n <a id=\"example_3_21\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-21.&nbsp;Generating a signed URI\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby1.9\n# s3-signed-uri.rb\nrequire 'S3lib'\n\nbucket = S3::Bucket.new(\"BobProductions\")\nobject = S3::Object.new(bucket, \"KomodoDragon.avi\")\nputs object.signed_uri\n# \"https://s3.amazonaws.com/BobProductions/KomodoDragon.avi\n# ?Signature=J%2Fu6kxT3j0zHaFXjsLbowgpzExQ%3D\n# &amp;Expires=1162156499&amp;AWSAccessKeyId=0F9DBXKB5274JKTJ8DG2\"</pre>\n </div>\n</div>\n<p>That URI will be valid for 15 minutes, the default for my <code class=\"function\">signed_uri</code> implementation. It incorporates my key ID (<code class=\"constant\">AWSAccessKeyId</code>), the expiration time (<code class=\"function\">Expires</code>), and the cryptographic <code class=\"constant\">Signature</code>. My customer can visit this URI and download the movie file <em class=\"filename\">KomodoDragon.avi</em>. Amazon will charge me for my customer’s use of their bandwidth. If my customer modifies any part of the URI (maybe they to try to download a second movie too), the S3 service will reject their request. An untrustworthy customer can send the URI to all of their friends, but it will stop working in 15 minutes.</p>\n<p>You may have noticed a problem here. The canonical string usually includes the value of the <code class=\"literal\">Date</code> header. When my customer visits the URI you signed, their web browser will surely send a different value for the <code class=\"literal\">Date</code> header. That’s why, when you’re generating a canonical string to give to someone else, you set an<a id=\"I_indexterm3_tt305\" class=\"indexterm\"></a> <span class=\"emphasis\"><em>expiration</em></span> date instead of a request date. Look back to <a class=\"xref\" href=\"ch03.html#s3-canonical-string-method\" title=\"Example&nbsp;3-18.&nbsp;S3 Ruby client: the Authorized#canonical_string method\">Example&nbsp;3-18</a> and the implementation of <code class=\"function\">canonical_string</code>, where the expiration date (if provided) overwrites any value for the <code class=\"literal\">Date</code> header.</p>\n<h2>Setting Access Policy</h2>\n<p>What if I want to make an object publicly accessible? I want to serve my files to the world and let Amazon deal with the headaches of server management. Well, I could set an expiration date very far in the future, and give out the enormous signed URI to everyone. But there’s an easier way to get the same results: allow anonymous access. You can do this by setting the<a id=\"I_indexterm3_tt306\" class=\"indexterm\"></a> <span class=\"emphasis\"><em>access policy</em></span> for a bucket<a id=\"I_indexterm3_tt307\" class=\"indexterm\"></a> or object, telling S3 to respond to unsigned requests for it. You do this by sending the<a id=\"I_indexterm3_tt308\" class=\"indexterm\"></a> <code class=\"literal\">x-amz-acl</code> header along with the PUT request that creates the bucket or object.</p>\n<p>That’s what the <code class=\"literal\">acl_policy</code> argument to <code class=\"function\">Bucket#put</code> and <code class=\"literal\">Object#put</code> does. If you want to make a bucket or object publicly readable or writable, you pass an appropriate value in for <code class=\"literal\">acl_policy</code>. My client sends that value as part of the custom HTTP request header <code class=\"literal\">X-amz-acl</code>. Amazon S3 reads this request header and sets the rules for bucket or object access appropriately.</p>\n<p>The client in <a class=\"xref\" href=\"ch03.html#example_3_22\" title=\"Example&nbsp;3-22.&nbsp;Creating a publicly-readable object\">Example&nbsp;3-22</a> creates an S3 object that anyone can read by visiting its URI at <code class=\"literal\">https://s3.amazonaws.com/BobProductions/KomodoDragon-Trailer.avi</code>. In this scenario, I’m not selling my movies: just using Amazon as a hosting service so I don’t have to serve movies from my own web site.</p>\n<div class=\"example\">\n <a id=\"example_3_22\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-22.&nbsp;Creating a publicly-readable object\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# s3-public-object.rb\nrequire 'S3lib'\n\nbucket = S3::Bucket.new(\"BobProductions\")\nobject = S3::Object.new(bucket, \"KomodoDragon-Trailer.avi\")\nobject.put(\"public-read\")</pre>\n </div>\n</div>\n<p>S3 understands four access policies:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><code class=\"literal\">private</code></span>\n  </dt>\n  <dd>\n   <p>The default. <a id=\"I_indexterm3_tt309\" class=\"indexterm\"></a>Only requests signed by your “private” key are accepted.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><code class=\"literal\">public-read</code></span>\n  </dt>\n  <dd>\n   <p>Unsigned GET requests are accepted:<a id=\"I_indexterm3_tt310\" class=\"indexterm\"></a> anyone can download an object or list a bucket.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><code class=\"literal\">public-write</code></span>\n  </dt>\n  <dd>\n   <p>Unsigned<a id=\"I_indexterm3_tt311\" class=\"indexterm\"></a> GET and PUT requests are accepted. Anyone can modify an object, or add objects to a bucket.</p>\n  </dd>\n </dl>\n</div>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><code class=\"literal\">authenticated-read</code></span>\n  </dt>\n  <dd>\n   <p><a id=\"I_indexterm3_tt312\" class=\"indexterm\"></a>Unsigned requests are rejected, but read requests can be signed by the “private” key of <span class=\"emphasis\"><em>any</em></span> S3 user, not just your own. Basically, anyone with an S3 account can download your object or list your bucket.</p>\n  </dd>\n </dl>\n</div>\n<p>There are also fine-grained ways of granting access to a bucket or object, which I won’t cover. If you’re interested, see the section “Setting Access Policy with REST” in the S3 technical documentation. That section reveals a parallel universe of extra resources. Every bucket <code class=\"literal\">/{name-of-bucket}</code> has a shadow resource <code class=\"literal\">/{name-of-bucket}?acl</code> corresponding to that bucket’s access control rules, and every object <code class=\"literal\">/{name-of-bucket}/{name-of-object}</code> has a shadow ACL resource <code class=\"literal\">/{name-of-bucket}/{name-of-object}?acl</code>. By sending PUT requests to these URIs, and including XML representations of access control lists in the request entity-bodies, you can set specific permissions and limit access to particular<a id=\"I_indexterm3_tt313\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt314\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt315\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt316\" class=\"indexterm\"></a> S3 users.</p>",
      "slug" : "request-signing-and-access-control"
    }, {
      "title" : "Using the S3 Client Library",
      "type" : "page",
      "htmlContent" : "<p>I’ve now<a id=\"I_indexterm3_tt318\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt319\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt320\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt321\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt322\" class=\"indexterm\"></a> shown you a Ruby client library that can access just about the full capabilities of Amazon’s S3 service. Of course, a library is useless without clients that use it. In the previous section I showed you a couple of small clients to demonstrate points about security, but now I’d like to show something a little more substantial.</p>\n<p><a class=\"xref\" href=\"ch03.html#example_3_23\" title=\"Example&nbsp;3-23.&nbsp;A sample S3 client\">Example&nbsp;3-23</a> is a simple command-line S3 client that can create a bucket and an object, then list the contents of the bucket. This client should give you a high-level picture of how S3’s resources work together. I’ve annotated the lines of code that trigger HTTP requests, by describing the HTTP requests in comments off to the right.</p>\n<div class=\"example\">\n <a id=\"example_3_23\"></a>\n <div class=\"example-title\">\n  Example&nbsp;3-23.&nbsp;A sample S3 client\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# s3-sample-client.rb\nrequire 'S3lib'\n\n# Gather command-line arguments\nbucket_name, object_name, object_value = ARGV\nunless bucket_name\n  puts \"Usage: #{$0} [bucket name] [object name] [object value]\"\n  exit\nend\n\n# Find or create the bucket.\nbuckets = S3::BucketList.new.get               # GET /\nbucket = buckets.detect { |b| b.name == bucket_name }\nif bucket\n  puts \"Found bucket #{bucket_name}.\"\nelse\n  puts \"Could not find bucket #{bucket_name}, creating it.\"\n  bucket = S3::Bucket.new(bucket_name)\n  bucket.put                                   # PUT /{bucket}\nend\n\n# Create the object.\nobject = S3::Object.new(bucket, object_name)\nobject.metadata['content-type'] = 'text/plain'\nobject.value = object_value\nobject.put                                     # PUT /{bucket}/{object}\n\n# For each object in the bucket...\nbucket.get[0].each do |o|                      # GET /{bucket}\n  # ...print out information about the object.\n  puts \"Name: #{o.name}\"\n  puts \"Value: #{o.value}\"                     # GET /{bucket}/{object}\n  puts \"Metadata hash: #{o.metadata.inspect}\"\n  puts\nend</pre>\n </div>\n</div>",
      "slug" : "using-the-s3-client-library"
    }, {
      "title" : "Clients Made Transparent with ActiveResource",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>Since all RESTful <a id=\"ch03_cwsar\" class=\"indexterm\"></a><a id=\"ch03_active\" class=\"indexterm\"></a>web services expose basically the same simple interface, it’s not a big chore to write a custom client for every web service. It is a little wasteful, though, and there are two alternatives. You can describe a service with a WADL file (introduced in the previous chapter, and covered in more detail in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>), and then access it with a generic WADL client. There’s also a Ruby library called ActiveResource that makes it trivial to write clients for certain kinds of web services.</p> \n  <p>ActiveResource is designed to run against web services that expose the rows and tables of a relational database.<a id=\"I_indexterm3_tt323\" class=\"indexterm\"></a> WADL can describe almost any kind of web service, but ActiveResource only works as a client for web services that follow certain conventions. Right now, Ruby on Rails is the only framework that follows the conventions. But any web service can answer requests from an ActiveResource client: it just has to expose its database through the same RESTful interface as Rails.</p> \n  <p class=\"keep-together\">As of the time of writing, there are few publicly available web services that can be used with an ActiveResource client (I list a couple in <a class=\"xref\" href=\"apa.html\" title=\"Appendix&nbsp;A.&nbsp;Some Resources for REST and Some RESTful Resources\">Appendix&nbsp;A</a>). To show you an example I’m going create a small Rails web service of my own. I’ll be able to drive my service with an ActiveResource client, without writing any HTTP client or XML parsing code.</p> \n  <h2>Creating a Simple Service</h2> \n  <p>My web service will be a simple notebook: a way of keeping timestamped notes to myself. I’ve got Rails 1.2 installed on my computer, so I can create the notebook service like this:</p> \n  <a id=\"I_programlisting3_tt324\"></a> \n  <pre class=\"programlisting\">$ <strong class=\"userinput\"><code>rails notebook</code></strong>    \n$ <strong class=\"userinput\"><code>cd notebook</code></strong></pre> \n  <p>I create a database on my system called <code class=\"literal\">notebook_development</code>, and edit the Rails file <em class=\"filename\">notebook/config/database.yml</em> to give Rails the information it needs to connect to my database. Any general guide to Rails will have more detail on these initial steps.</p> \n  <p>Now I’ve created a Rails application, but it doesn’t do anything. I’m going to generate code for a simple, RESTful web service with the <code class=\"literal\">scaffold</code> generator. I want my notes to contain a timestamp and a body of text, so I run the following command:</p> \n  <a id=\"I_programlisting3_tt325\"></a> \n  <pre class=\"programlisting\">$ <strong class=\"userinput\"><code>ruby script/generate scaffold note date:date body:text</code></strong>\ncreate  app/views/notes\ncreate  app/views/notes/index.rhtml\ncreate  app/views/notes/show.rhtml\ncreate  app/views/notes/new.rhtml\ncreate  app/views/notes/edit.rhtml\ncreate  app/views/layouts/notes.rhtml\ncreate  public/stylesheets/scaffold.css\ncreate  app/models/note.rb\ncreate  app/controllers/notes_controller.rb\ncreate  test/functional/notes_controller_test.rb\ncreate  app/helpers/notes_helper.rb\ncreate  test/unit/note_test.rb\ncreate  test/fixtures/notes.yml\ncreate  db/migrate\ncreate  db/migrate/001_create_notes.rb\nroute  map.resources :notes</pre> \n  <p>Rails has generated a complete set of web service code—model, view, and controller—for my “note” object. There’s code in <code class=\"literal\">db/migrate/001_create_notes.rb</code> that creates a database table called <code class=\"literal\">notes</code> with three fields: a unique ID, a date (<code class=\"literal\">date</code>), and a piece of text (<code class=\"literal\">body</code>).</p> \n  <p>The model code in <code class=\"literal\">app/models/note.rb</code> provides an ActiveResource interface to the database table. The controller code in <code class=\"literal\">app/controllers/notes_controller.rb</code> exposes that interface to the world through HTTP, and the views in <em class=\"filename\">app/views/notes</em> define the user interface. It adds up to a RESTful web service—not a very fancy one, but one that’s good enough for a demo or to use as a starting point.</p> \n  <p>Before starting the service I need to initialize the database:</p> \n  <a id=\"I_programlisting3_tt326\"></a> \n  <pre class=\"programlisting\">$ <strong class=\"userinput\"><code>rake db:migrate</code></strong>\n== CreateNotes: migrating =====================================================\n-- create_table(:notes)\n   -&gt; 0.0119s\n== CreateNotes: migrated (0.0142s) ============================================</pre> \n  <p>Now I can start the notebook application and start using my service:</p> \n  <a id=\"I_programlisting3_tt327\"></a> \n  <pre class=\"programlisting\">$ <strong class=\"userinput\"><code>script/server</code></strong>\n=&gt; Booting WEBrick...\n=&gt; Rails application started on http://0.0.0.0:3000\n=&gt; Ctrl-C to shutdown server; call with --help for options</pre> \n  <h2>An ActiveResource Client</h2> \n  <p>The application I just generated is not much use except as a demo, but it demos some pretty impressive features. First, it’s both a web service and a web application. I can visit <a class=\"ulink\" href=\"http://localhost:3000/notes\" target=\"_top\">http://localhost:3000/notes</a> in my web browser and create notes through the web interface. After a while the view of <a class=\"ulink\" href=\"http://localhost:3000/notes\" target=\"_top\">http://localhost:3000/notes</a> might look like <a class=\"xref\" href=\"ch03.html#figure_3_1\" title=\"Figure&nbsp;3-1.&nbsp;The notebook web application with a few entered notes\">Figure&nbsp;3-1</a>.</p> \n  <div class=\"figure\"> \n   <a id=\"figure_3_1\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject3_tt328\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24558.png\" alt=\"The notebook web application with a few entered notes\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;3-1.&nbsp;The notebook web application with a few entered notes \n   </div> \n  </div> \n  <p>If you’ve ever written a Rails application or seen a Rails demo, this should look familiar. But in Rails 1.2, the generated model and controller can also act as a RESTful web service. A programmed client can access it as easily as a web browser can.</p> \n  <p>Unfortunately, the ActiveResource client itself was not released along with Rails 1.2. As of the time of writing, it’s still being developed on the tip of the Rails development tree. To get the code I need to check it out from the Subversion version control repository:</p> \n  <a id=\"I_programlisting3_tt329\"></a> \n  <pre class=\"programlisting\">$ <strong class=\"userinput\"><code>svn co http://dev.rubyonrails.org/svn/rails/trunk activeresource_client</code></strong>\n$ <strong class=\"userinput\"><code>cd activeresource_client</code></strong></pre> \n  <p>Now I’m ready to write ActiveResource clients for the notebook’s web service. <a class=\"xref\" href=\"ch03.html#activeresource-notebook-client\" title=\"Example&nbsp;3-24.&nbsp;An ActiveResource client for the notebook service\">Example&nbsp;3-24</a> is a client that creates a note, modifies it, lists the existing notes, and then deletes the note it just created.</p> \n  <div class=\"example\"> \n   <a id=\"activeresource-notebook-client\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;3-24.&nbsp;An ActiveResource client for the notebook service \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"programlisting\">#!/usr/bin/ruby -w\n# activeresource-notebook-manipulation.rb\n\nrequire 'activesupport/lib/active_support'\nrequire 'activeresource/lib/active_resource'\n\n# Define a model for the objects exposed by the site\nclass Note &lt; ActiveResource::Base\n  self.site = 'http://localhost:3000/'\nend\n\ndef show_notes\n  notes = Note.find :all                 # GET /notes.xml\n  puts \"I see #{notes.size} note(s):\"\n  notes.each do |note|\n    puts \" #{note.date}: #{note.body}\"\n  end\nend\n\nnew_note = Note.new(:date =&gt; Time.now, :body =&gt; \"A test note\")\nnew_note.save                            # POST /notes.xml\n\nnew_note.body = \"This note has been modified.\"\nnew_note.save                            # PUT /notes/{id}.xml\n\nshow_notes\n\nnew_note.destroy                         # DELETE /notes/{id}.xml\n\nputs\nshow_notes</pre> \n   </div> \n  </div> \n  <p><a class=\"xref\" href=\"ch03.html#activeresource-notebook-manipulation.rb\" title=\"Example&nbsp;3-25.&nbsp;A run of activeresource-notebook-manipulation.rb\">Example&nbsp;3-25</a> shows the output when I run that program:</p> \n  <div class=\"example\"> \n   <a id=\"activeresource-notebook-manipulation.rb\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;3-25.&nbsp;A run of \n    <em class=\"filename\">activeresource-notebook-manipulation.rb</em> \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">I see 3 note(s):\n 2006-06-05: What if I wrote a book about REST?\n 2006-12-18: Pasta for lunch maybe?\n 2006-12-18: This note has been modified.\n\nI see 2 note(s):\n 2006-06-05: What if I wrote a book about REST?\n 2006-12-18: Pasta for lunch maybe?</pre> \n   </div> \n  </div> \n  <p>If you’re familiar with ActiveRecord, the object-relational mapper that connects Rails to a database, you’ll notice that the ActiveResource interface looks almost exactly the same. Both libraries provide an object-oriented interface to a wide variety of objects, each of which exposes a uniform interface. With ActiveRecord, the objects live in a database and are exposed through <a id=\"I_indexterm3_tt330\" class=\"indexterm\"></a>SQL, with its <a id=\"I_indexterm3_tt331\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt332\" class=\"indexterm\"></a>SELECT, INSERT, <a id=\"I_indexterm3_tt333\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt334\" class=\"indexterm\"></a>UPDATE, and DELETE. With ActiveResource, they live in a Rails application and are exposed through HTTP, with its GET, POST, PUT, and DELETE.</p> \n  <p><a class=\"xref\" href=\"ch03.html#activeresource-request-log\" title=\"Example&nbsp;3-26.&nbsp;The HTTP requests made by activeresource-notebook-manipulation.rb\">Example&nbsp;3-26</a> is an excerpt from the Rails server logs at the time I ran my ActiveResource client. The <a id=\"I_indexterm3_tt335\" class=\"indexterm\"></a>GET, <a id=\"I_indexterm3_tt336\" class=\"indexterm\"></a>POST, <a id=\"I_indexterm3_tt337\" class=\"indexterm\"></a>PUT, and DELETE <a id=\"I_indexterm3_tt338\" class=\"indexterm\"></a>requests correspond to the commented lines of code back in <a class=\"xref\" href=\"ch03.html#activeresource-notebook-client\" title=\"Example&nbsp;3-24.&nbsp;An ActiveResource client for the notebook service\">Example&nbsp;3-24</a>.</p> \n  <div class=\"example\"> \n   <a id=\"activeresource-request-log\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;3-26.&nbsp;The HTTP requests made by activeresource-notebook-manipulation.rb \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">\"POST /notes.xml HTTP/1.1\" 201\n\"PUT /notes/5.xml HTTP/1.1\" 200\n\"GET /notes.xml HTTP/1.1\" 200\n\"DELETE /notes/5.xml HTTP/1.1\" 200 \n\"GET /notes.xml HTTP/1.1\" 200</pre> \n   </div> \n  </div> \n  <p>What’s going on in these requests? The same thing that’s going on in requests to S3: resource access through HTTP’s uniform interface. My notebook service exposes two kinds of resources:</p> \n  <div class=\"itemizedlist\"> \n   <ul class=\"itemizedlist\"> \n    <li class=\"listitem\"><p>The list of notes (<code class=\"literal\">/notes.xml</code>). Compare to an S3 bucket, which is a list of objects.</p></li> \n    <li class=\"listitem\"><p>A note (<code class=\"literal\">/notes/{id}.xml</code>). Compare to an S3 object.</p></li> \n   </ul> \n  </div> \n  <p>These resources expose GET, PUT, and DELETE, just like the S3 resources do. The list of notes also supports POST to create a new note. That’s a little different from S3, where objects are created with PUT, but it’s just as RESTful.</p> \n  <p>When the client runs, XML documents are transferred invisibly between client and server. They look like the documents in <a class=\"xref\" href=\"ch03.html#notebook-get\" title=\"Example&nbsp;3-27.&nbsp;The response entity-body from a GET request to /notes.xml\">Example&nbsp;3-27</a> or <a class=\"xref\" href=\"ch03.html#notebook-put\" title=\"Example&nbsp;3-28.&nbsp;A request entity-body sent as part of a PUT request to /notes/5.xml\">3-28</a>: simple depictions of the underlying database rows.</p> \n  <div class=\"example\"> \n   <a id=\"notebook-get\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;3-27.&nbsp;The response entity-body from a GET request to /notes.xml \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;notes&gt;\n &lt;note&gt;\n  &lt;body&gt;What if I wrote a book about REST?&lt;/body&gt;\n  &lt;date type=\"date\"&gt;2006-06-05&lt;/date&gt;\n  &lt;id type=\"integer\"&gt;2&lt;/id&gt;\n &lt;/note&gt;\n &lt;note&gt;\n  &lt;body&gt;Pasta for lunch maybe?&lt;/body&gt;\n  &lt;date type=\"date\"&gt;2006-12-18&lt;/date&gt;\n  &lt;id type=\"integer\"&gt;3&lt;/id&gt;\n &lt;/note&gt;\n&lt;/notes&gt;</pre> \n   </div> \n  </div> \n  <div class=\"example\"> \n   <a id=\"notebook-put\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;3-28.&nbsp;A request entity-body sent as part of a PUT request to /notes/5.xml \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;note&gt;\n &lt;body&gt;This note has been modified.&lt;/body&gt;\n&lt;/note&gt;</pre> \n   </div> \n  </div> \n  <h2>A Python Client for the Simple Service</h2> \n  <p>Right <a id=\"I_indexterm3_tt339\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt340\" class=\"indexterm\"></a>now the only ActiveResource client library is the Ruby library, and Rails is the only framework that exposes ActiveResource-compatible services. But nothing’s happening here except HTTP requests that pass XML documents into certain URIs and get XML documents back. There’s no reason why a client in some other language couldn’t send those XML documents, or why some other framework couldn’t expose the same URIs.</p> \n  <p><a class=\"xref\" href=\"ch03.html#example_3_29\" title=\"Example&nbsp;3-29.&nbsp;A Python client for an ActiveResource service\">Example&nbsp;3-29</a> is a Python implementation of the client program from <a class=\"xref\" href=\"ch03.html#activeresource-notebook-client\" title=\"Example&nbsp;3-24.&nbsp;An ActiveResource client for the notebook service\">Example&nbsp;3-24</a>. It’s longer than the Ruby program, because it can’t rely on ActiveResource. It has to build its own XML documents and make its own HTTP requests, but its structure is almost exactly the same.</p> \n  <div class=\"example\"> \n   <a id=\"example_3_29\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;3-29.&nbsp;A Python client for an ActiveResource service \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"programlisting\">#!/usr/bin/python\n# activeresource-notebook-manipulation.py\n\nfrom elementtree.ElementTree import Element, SubElement, tostring\nfrom elementtree import ElementTree\nimport httplib2\nimport time\n\nBASE = \"http://localhost:3000/\"\nclient = httplib2.Http(\".cache\")\n\ndef showNotes():\n    headers, xml = client.request(BASE + \"notes.xml\")\n    doc = ElementTree.fromstring(xml)\n    for note in doc.findall('note'):\n        print \"%s: %s\" % (note.find('date').text, note.find('body').text)\n\nnewNote = Element(\"note\")\ndate = SubElement(newNote, \"date\")\ndate.attrib['type'] = \"date\"\ndate.text = time.strftime(\"%Y-%m-%d\", time.localtime())\nbody = SubElement(newNote, \"body\")\nbody.text = \"A test note\"\n \nheaders, ignore = client.request(BASE + \"notes.xml\", \"POST\",\n                                 body= tostring(newNote),\n                                 headers={'content-type' : 'application/xml'})\nnewURI = headers['location']\n\nmodifiedBody = Element(\"note\")\nbody = SubElement(modifiedBody, \"body\")\nbody.text = \"This note has been modified\"\n\nclient.request(newURI, \"PUT\",\n               body=tostring(modifiedBody),\n               headers={'content-type' : 'application/xml'})\n\nshowNotes()\n\nclient.request(newURI, \"DELETE\")\n\nprint\nshowNotes()</pre> \n   </div> \n  </div>\n </body>\n</html>",
      "slug" : "clients-made-transparent-with-activeresource"
    }, {
      "title" : "Parting Words",
      "type" : "page",
      "htmlContent" : "<p>Because RESTful web services have simple and well-defined interfaces, it’s not difficult to clone them or swap out one implementation for another. <a class=\"ulink\" href=\"http://github.com/whymirror/parkplace\" target=\"_top\">Park Place</a> is<a id=\"I_indexterm3_tt342\" class=\"indexterm\"></a> a Ruby application that exposes the same HTTP interface as S3. You can use Park Place to host your own version of S3. S3 libraries and client programs will work against your Park Place server just as they now do against <a class=\"ulink\" href=\"https://s3.amazonaws.com/\" target=\"_top\">https://s3.amazonaws.com/</a>.</p>\n<p>It’s also possible to clone ActiveResource. No one has done this yet, but it shouldn’t be difficult to write a general ActiveResource client for Python or any other dynamic language. In the meantime, writing a one-off client for an ActiveResource-compatible service is no more difficult than writing a client for any other RESTful service.</p>\n<p>By now you should feel comfortable with the prospect of writing a client for any RESTful or REST-RPC hybrid service, whether it serves XML, HTML, JSON, or some mixture. It’s all just HTTP requests and document parsing.</p>\n<p>You should also be getting a feel for what differentiates RESTful web services like S3 and Yahoo!’s search services from RPC-style and hybrid services like the Flickr and del.icio.us APIs. This is not a judgement about the service’s content, only about its architecture. In woodworking it’s important to work with the grain of the wood. The Web, too, has a grain, and a RESTful web service is one that works with it.</p>\n<p>In the coming chapters I’ll show how you can create web services that are more like S3 and less like the del.icio.us API. This culminates in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, which reinvents del.icio.us as a RESTful web<a id=\"I_indexterm3_tt343\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt344\" class=\"indexterm\"></a> <a id=\"I_indexterm3_tt345\" class=\"indexterm\"></a><a id=\"I_indexterm3_tt346\" class=\"indexterm\"></a>service.</p>",
      "slug" : "parting-words"
    } ]
  }, {
    "title" : "4. The Resource-Oriented Architecture",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture</h2>\n  </div>\n </div>\n</div>\n<p>I’ve shown you the<a id=\"ch04_resourceoriented\" class=\"indexterm\"></a> power of REST, but I haven’t shown you in any systematic way how that power is structured or how to expose it. In this chapter I outline a concrete RESTful architecture: the Resource-Oriented Architecture (ROA). The ROA is a way of turning a problem into a RESTful web service: an arrangement of URIs, HTTP, and XML that works like the rest of the Web, and that programmers will enjoy using.</p>\n<p>In <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a> I classified RESTful web services by their answers to two questions. These answers correspond to two of the four defining features of REST:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The scoping information (“why should the server send this data instead of that data?”) is kept in the URI. This is the principle of <em class=\"firstterm\">addressability</em>.</p></li>\n  <li class=\"listitem\"><p>The method information (“why should the server send this data instead of deleting it?”) is kept in the HTTP method. There are only a few HTTP methods, and everyone knows ahead of time what they do. This is the principle <a id=\"I_indexterm4_tt347\" class=\"indexterm\"></a>of the <span class=\"emphasis\"><em>uniform interface</em></span>.</p></li>\n </ul>\n</div>\n<p>In this chapter I introduce the moving parts of the Resource-Oriented Architecture: resources (of course), their names, their representations, and the links between them. I explain and promote the properties of the ROA: addressability, statelessness, connectedness, and the uniform interface. I show how the web technologies (HTTP, URIs, and XML) implement the moving parts to make the properties possible.</p>\n<p>In the previous chapters I illustrated concepts by pointing to existing web services, like S3. I continue that tradition in this chapter, but I’ll also illustrate concepts by pointing to existing web sites. Hopefully I’ve convinced you by now that web sites are web services, and that many web applications (such as search engines) are RESTful web services. When I talk about abstract concepts like addressability, it’s useful to show you real URIs, which you can type into your web browser to see the concepts in action.</p>",
    "textContent" : "Chapter 4. The Resource-Oriented Architecture\r\n\r\nI’ve shown you the power of REST, but I haven’t shown you in any systematic way how that power is structured or how to expose it. In this chapter I outline a concrete RESTful architecture: the Resource-Oriented Architecture (ROA). The ROA is a way of turning a problem into a RESTful web service: an arrangement of URIs, HTTP, and XML that works like the rest of the Web, and that programmers will enjoy using.\r\n\r\nIn Chapter 1 I classified RESTful web services by their answers to two questions. These answers correspond to two of the four defining features of REST:\r\n\r\n    * The scoping information (“why should the server send this data instead of that data?”) is kept in the URI. This is the principle of addressability.\r\n\r\n    * The method information (“why should the server send this data instead of deleting it?”) is kept in the HTTP method. There are only a few HTTP methods, and everyone knows ahead of time what they do. This is the principle of the uniform interface.\r\n\r\nIn this chapter I introduce the moving parts of the Resource-Oriented Architecture: resources (of course), their names, their representations, and the links between them. I explain and promote the properties of the ROA: addressability, statelessness, connectedness, and the uniform interface. I show how the web technologies (HTTP, URIs, and XML) implement the moving parts to make the properties possible.\r\n\r\nIn the previous chapters I illustrated concepts by pointing to existing web services, like S3. I continue that tradition in this chapter, but I’ll also illustrate concepts by pointing to existing web sites. Hopefully I’ve convinced you by now that web sites are web services, and that many web applications (such as search engines) are RESTful web services. When I talk about abstract concepts like addressability, it’s useful to show you real URIs, which you can type into your web browser to see the concepts in action.",
    "slug" : "4-the-resource-oriented-architecture",
    "pages" : [ {
      "title" : "Resource-Oriented What Now?",
      "type" : "page",
      "htmlContent" : "<p>Why come up with a new term, Resource-Oriented Architecture? Why not just say REST? Well, I do say REST, on the cover of this book, and I hold that everything in the Resource-Oriented Architecture is also RESTful. But REST is not an architecture: it’s a set of design criteria. You can say that one architecture meets those criteria better than another, but there is no one “REST architecture.”</p>\n<p>Up to now, people have tended to mint one-off architectures as they design their services, according to their own understandings of REST. The most obvious outcome of this is the wide variety of REST-RPC hybrid web services that their creators claim are RESTful. I’m trying to put a stop to that by presenting a set of concrete rules for building web services that really will be RESTful. In the next two chapters I’ll even show simple procedures you can follow to turn requirements into resources. If you don’t like my rules, you’ll at least have an idea of what you can change and stay RESTful.</p>\n<p>As a set of design criteria, REST is very general. In particular, it’s not tied to the Web. Nothing about REST depends on the mechanics of HTTP or the structure of URIs. But I’m talking about <span class=\"emphasis\"><em>web</em></span> services, so I explicitly tie the Resource-Oriented Architecture to the technologies of the Web. I want to talk about how to do REST with HTTP and URIs, in specific programming languages. If the future produces RESTful architectures that don’t run on top of the Web, their best practices will probably look similar to the ROA, but the details will be different. We’ll cross that bridge when we come to it.</p>\n<p>The traditional definition of REST leaves a lot of open space, which practitioners have seeded with folklore. I deliberately go further than Roy Fielding in his dissertation, or the W3C in their standards: I want to clear some of that open space so that the folklore has room to grow into a well-defined set of best practices. Even if REST were an architecture, it wouldn’t be fair to call my architecture by the same name. I’d be tying my empirical observations and suggestions to the more general thoughts of those who built the Web.</p>\n<p>My final reason for coming up with a new term is that “REST” is a term used in religious nerd wars. When it’s used, the implication is usually that there is one true RESTful architecture and it’s the one the speaker prefers. People who prefer another RESTful architecture disagree. The REST community fragments, despite a general agreement on basic things like the value of URIs and HTTP.</p>\n<p>Ideally there would be no religious wars, but I’ve seen enough to know that wishing won’t end them. So I’m giving a distinctive name to my philosophy of how RESTful applications should be designed. When these ideas are, inevitably, used as fodder in wars, people who disagree with me can address aspects of the Resource-Oriented Architecture separate from other RESTful architectures, and from REST in general. Clarity is the first step toward understanding.</p>\n<p>The phrases “resource-oriented” and “resource-oriented architecture” have been used to describe RESTful architectures in general.<sup>[<a id=\"id380615\" href=\"#ftn.id380615\" class=\"footnote\">10</a>]</sup>I don’t claim that “Resource-Oriented Architecture” is a completely original term, but I think that my usage meshes well with preexisting uses, and that it’s better to use this term than claim to speak for REST as a whole.</p>",
      "slug" : "resource-oriented-what-now"
    }, {
      "title" : "What’s a Resource?",
      "type" : "page",
      "htmlContent" : "<p>A resource is anything that’s important enough to be referenced as a thing in itself. If your users might “want to create a hypertext link to it, make or refute assertions about it, retrieve or cache a representation of it, include all or part of it by reference into another representation, annotate it, or perform other operations on it”, then you should make it a resource.<sup>[<a id=\"id380705\" href=\"#ftn.id380705\" class=\"footnote\">11</a>]</sup></p>\n<p>Usually, a resource is something that can be stored on a computer and represented as a stream of bits: a document, a row in a database, or the result of running an algorithm. A resource may be a physical object like an apple, or an abstract concept like courage, but (as we’ll see later) the representations of such resources are bound to be disappointing.</p>\n<p>Here are some possible resources:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>Version 1.0.3 of the software release</p></li>\n  <li class=\"listitem\"><p>The latest version of the software release</p></li>\n  <li class=\"listitem\"><p>The first weblog entry for October 24, 2006</p></li>\n  <li class=\"listitem\"><p>A road map of Little Rock, Arkansas</p></li>\n  <li class=\"listitem\"><p>Some information about jellyfish</p></li>\n  <li class=\"listitem\"><p>A directory of resources pertaining to jellyfish</p></li>\n  <li class=\"listitem\"><p>The next prime number after 1024</p></li>\n  <li class=\"listitem\"><p>The next five prime numbers after 1024</p></li>\n  <li class=\"listitem\"><p>The sales numbers for Q42004</p></li>\n  <li class=\"listitem\"><p>The relationship between two acquaintances, Alice and Bob</p></li>\n  <li class=\"listitem\"><p>A list of the open bugs in the bug database</p></li>\n </ul>\n</div>",
      "slug" : "whats-a-resource"
    }, {
      "title" : "URIs",
      "type" : "page",
      "htmlContent" : "<p>What <a id=\"ch04_roauris\" class=\"indexterm\"></a><a id=\"ch04_uris\" class=\"indexterm\"></a>makes a resource a resource? <span class=\"emphasis\"><em>It has to have at least one URI.</em></span> The URI is the name and address of a resource. If a piece of information doesn’t have a URI, it’s not a resource and it’s not really on the Web, except as a bit of data describing some other resource.</p>\n<p>Remember the sample session in the <a class=\"xref\" href=\"pr05.html\" title=\"Preface\">Preface</a>, when I was making fun of HTTP 0.9? Let’s say this is a HTTP 0.9 request for <code class=\"literal\">http://www.example.com/hello.txt</code>:</p>\n<div class=\"informaltable\">\n <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n  <colgroup>\n   <col>\n   <col>\n  </colgroup>\n  <thead>\n   <tr>\n    <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Client request</td>\n    <td style=\"border-bottom: 0.5pt solid ; \">Server response</td>\n   </tr>\n  </thead>\n  <tbody>\n   <tr>\n    <td style=\"border-right: 0.5pt solid ; \"><pre class=\"screen\">GET /hello.txt</pre></td>\n    <td><pre class=\"screen\">Hello, world!</pre></td>\n   </tr>\n  </tbody>\n </table>\n</div>\n<p>An HTTP client manipulates a resource by connecting to the server that hosts it (in this case, <code class=\"literal\">www.example.com</code>), and sending the server a method (“GET”) and a path to the resource (“/hello.txt”). Today’s HTTP 1.1 is a little more complex than 0.9, but it works the same way. Both the server and the path come from the resource’s URI.</p>\n<div class=\"informaltable\">\n <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n  <colgroup>\n   <col>\n   <col>\n  </colgroup>\n  <thead>\n   <tr>\n    <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Client request</td>\n    <td style=\"border-bottom: 0.5pt solid ; \">Server response</td>\n   </tr>\n  </thead>\n  <tbody>\n   <tr>\n    <td style=\"border-right: 0.5pt solid ; \"><pre class=\"screen\">GET /hello.txt HTTP/1.1\nHost: www.example.com</pre></td>\n    <td><pre class=\"screen\">200 OK\nContent-Type: text/plain\n\nHello, world!</pre></td>\n   </tr>\n  </tbody>\n </table>\n</div>\n<p>The principles behind URIs are well described by<a id=\"I_indexterm4_tt354\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt355\" class=\"indexterm\"></a> Tim Berners-Lee in <a class=\"ulink\" href=\"http://www.w3.org/DesignIssues/Axioms\" target=\"_top\">Universal Resource Identifiers—Axioms of Web Architecture</a>. In this section I expound the principles behind constructing URIs and assigning them to resources.</p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>The URI is the fundamental technology of the Web. There were hypertext systems before HTML, and Internet protocols before HTTP, but they didn’t talk to each other. The URI interconnected all these Internet protocols into a Web, the way TCP/IP interconnected networks like Usenet, Bitnet, and CompuServe into a single Internet. Then the Web co-opted those other protocols and killed them off, just like the Internet did with private networks.</p>\n <p>Today we surf the Web (not Gopher), download files from the Web (not FTP sites), search publications from the Web (not WAIS), and have conversations on the Web (not Usenet newsgroups). Version control systems like Subversion and arch work over the Web, as opposed to the custom CVS protocol. Even email is slowly moving onto the Web.</p>\n <p>The web kills off other protocols because it has something most protocols lack: a simple way of labeling every available item. Every resource on the Web has at least one URI. You can stick a URI on a billboard. People can see that billboard, type that URI into their web browsers, and go right to the resource you wanted to show them. It may seem strange, but this everyday interaction was impossible before URIs were invented.</p>\n</div>\n<h2>URIs Should Be Descriptive</h2>\n<p>Here’s the first point where the ROA builds upon the sparse recommendations of the REST thesis and the W3C recommendations. I propose that a resource and its URI ought to have an intuitive correspondence. Here are some good URIs for the resources I listed above:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/software/releases/1.0.3.tar.gz</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/software/releases/latest.tar.gz</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/weblog/2006/10/24/0</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/map/roads/USA/AR/Little_Rock</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/wiki/Jellyfish</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/search/Jellyfish</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/nextprime/1024</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/next-5-primes/1024</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/sales/2004/Q4</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/relationships/Alice;Bob</code></p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">http://www.example.com/bugs/by-state/open</code></p></li>\n </ul>\n</div>\n<p>URIs should have a structure. They should vary in predictable ways: you should not go to <code class=\"literal\">/search/Jellyfish</code> for jellyfish and <code class=\"literal\">/i-want-to-know-about/Mice</code> for mice. If a client knows the structure of the service’s URIs, it can create its own entry points into the service. This makes it easy for clients to use your service in ways you didn’t think of.</p>\n<p>This is not an absolute rule of REST, as we’ll see in the <a class=\"xref\" href=\"ch05.html#nametheresources\" title=\"Name the Resources\">Name the Resources</a>” section of <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>. URIs do not technically have to have any structure or predictability, but I think they should. This is one of the rules of good web design, and it shows up in RESTful and REST-RPC hybrid services alike.</p>\n<h2>The Relationship Between URIs and Resources</h2>\n<p>Let’s consider some edge cases. Can two resources be the same? Can two URIs designate the same resource? Can a single URI designate two resources?</p>\n<p>By definition, no two resources can be the same. If they were the same, you’d only have one resource. However, at some moment in time two different resources may point to the same data. If the current software release is 1.0.3, then <span class=\"emphasis\"><em>http://www.example.com/software/releases/1.0.3.tar.gz</em></span> and <span class=\"emphasis\"><em>http://www.example.com/software/releases/latest.tar.gz </em></span> will refer to the same file for a while. But the ideas behind those two URIs are different: one of them always points to a particular version, and the other points to whatever version is newest at the time the client accesses it. That’s two concepts and two resources. You wouldn’t link to <code class=\"literal\">latest</code> when reporting a bug in version 1.0.3.</p>\n<p>A resource may have one URI or many. The sales numbers available at <span class=\"emphasis\"><em>http://www.example.com/sales/2004/Q4</em></span> might also be available at <span class=\"emphasis\"><em>http://www.example.com/sales/Q42004</em></span>. If a resource has multiple URIs, it’s easier for clients to refer to the resource. The downside is that each additional URI dilutes the value of all the others. Some clients use one URI, some use another, and there’s no automatic way to verify that all the URIs refer to the same resource. </p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>One way to get around this is to expose multiple URIs for the same resource, but have one of them be the “canonical” URI for that resource. When a client requests the canonical URI, the server sends the appropriate data along with response code of 200 (“OK”). When a client requests one of the other URIs, the server sends a response code 303 (“See Also”) along with the canonical URI. The client can’t see whether two URIs point to the same resource, but it can make two HEAD requests and see if one URI redirects to the other or if they both redirect to a third URI.</p>\n <p>Another way is to serve all the URIs as though they were the same, but give the “canonical” URI in the <code class=\"literal\">Content-Location</code> response header whenever someone requests a non-canonical URI.</p>\n</div>\n<p>Fetching <code class=\"literal\">sales/2004/Q4</code> might get you the same bytestream as fetching <code class=\"literal\">sales/Q42004</code>, because they’re different URIs for the same resource: “sales for the last quarter of 2004.” Fetching <code class=\"literal\">releases/1.0.3.tar.gz</code> might give you the exact same bytestream as fetching <code class=\"literal\">releases/latest.tar.gz</code>, but they’re different resources because they represent different things: “version 1.0.3” and “the latest version.”</p>\n<p>Every URI designates exactly one resource. If it designated more than one, it wouldn’t be a <span class=\"emphasis\"><em>Universal</em></span> Resource Identifier. However, when you fetch a URI the server may send you information about multiple resources: the one you requested and other, related ones. When you fetch a web page, it usually conveys some information of its own, but it also has links to other web pages. When you retrieve an S3 bucket with an Amazon S3 client, you get a document that contains information about the bucket, and information about related resources: the objects in the bucket.<a id=\"I_indexterm4_tt356\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt357\" class=\"indexterm\"></a></p>",
      "slug" : "uris"
    }, {
      "title" : "Addressability",
      "type" : "page",
      "htmlContent" : "<p>Now that<a id=\"ch04_address\" class=\"indexterm\"></a><a id=\"ch04_rexxx\" class=\"indexterm\"></a> I’ve introduced resources and their URIs, I can go in depth into two of the features of the ROA: addressability and statelessness.</p>\n<p>An application is addressable if it exposes the interesting aspects of its data set as resources. Since resources are exposed through URIs, an addressable application exposes a URI for every piece of information it might conceivably serve. This is usually an infinite number of URIs.</p>\n<p>From the end-user perspective, addressability is the most important aspect of any web site or application. Users are clever, and they’ll overlook or work around almost any deficiency if the data is interesting enough, but it’s very difficult to work around a lack of addressability.</p>\n<p>Consider a real URI that names a resource in the genre “directory of resources about jellyfish”: <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish\" target=\"_top\">http://www.google.com/search?q=jellyfish</a>. That jellyfish search is just as much a real URI as <a class=\"ulink\" href=\"http://www.google.com\" target=\"_top\">http://www.google.com</a>. If HTTP wasn’t addressable, or if the Google search engine wasn’t an addressable web application, I wouldn’t be able to publish that URI in a book. I’d have to tell you: “Open a web connection to <code class=\"literal\">google.com</code>, type ‘jellyfish’ in the search box, and click the ‘Google Search’ button.”</p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>This isn’t an academic worry. Until the mid-1990s, when <code class=\"literal\">ftp://</code> URIs became popular for describing files on FTP sites, people had to write things like: “Start an anonymous FTP session on <code class=\"literal\">ftp.example.com</code>. Then change to directory <code class=\"literal\">pub/files/</code> and download file <em class=\"filename\">file.txt</em>.” URIs made FTP as addressable as HTTP. Now people just write: “Download <span class=\"emphasis\"><em>ftp://ftp.example.com/pub/files/file.txt</em></span>.” The steps are the same, but now they can be carried out by machine.</p>\n</div>\n<p>But HTTP and Google are both addressable, so I can print that URI in a book. You can read it and type it in. When you do, you end up where I was when I went through the Google web application.</p>\n<p>You can then bookmark that page and come back to it later. You can link to it on a web page of your own. You can email the URI to someone else. If HTTP wasn’t addressable, you’d have to download the whole page and send the HTML file as an attachment.</p>\n<p>To save bandwidth, you can set up an HTTP <a id=\"I_indexterm4_tt359\" class=\"indexterm\"></a>proxy cache on your local network. The first time someone requests <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish\" target=\"_top\">http://www.google.com/search?q=jellyfish</a>, the cache will save a local copy of the document. The next time someone hits that URI, the cache might serve the saved copy instead of downloading it again. These things are possible only if every page has a unique identifying string: an address.</p>\n<p>It’s even possible to chain URIs: to use one URI as input to another one. You can use an external web service to validate a page’s HTML, or to translate its text into another language. These web services expect a URI as input. If HTTP wasn’t addressable, you’d have no way of telling them which resource you wanted them to operate on.</p>\n<p>Amazon’s <a id=\"I_indexterm4_tt360\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt361\" class=\"indexterm\"></a>S3<a id=\"I_indexterm4_tt362\" class=\"indexterm\"></a> service is addressable because every bucket and every object has its own URI, as does the bucket list. Buckets and objects that don’t exist yet aren’t yet resources, but they too have their own URIs: you can create a resource by sending a PUT request to its URI.</p>\n<p>The filesystem on your home computer is another addressable system. Command-line applications can take a path to a file and do strange things to it. The cells in a spreadsheet are also addressable; you can plug the name of a cell into a formula, and the formula will use whatever value is currently in that cell. URIs are the file paths and cell addresses of the Web.</p>\n<p>Addressability is one of the best things about web applications. It makes it easy for clients to use web sites in ways the original designers never imagined. Following this one rule gives you and your users many of the benefits of REST. This is why REST-RPC services are so common: they combine addressability with the procedure-call programming model. It’s why I gave resources top billing in the name of the Resource-Oriented Architecture: because resources are the kind of thing that’s addressable.</p>\n<p>This seems natural, the way the Web should work. Unfortunately, many web applications <span class=\"emphasis\"><em>don’t</em></span> work this way. This is especially true of <a id=\"I_indexterm4_tt363\" class=\"indexterm\"></a>Ajax applications. As I show in <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>, most Ajax applications are just clients for RESTful or hybrid web services. But when you use these clients as though they are web sites, you notice that they don’t <span class=\"emphasis\"><em>feel</em></span> like web sites.</p>\n<p>No need to pick on the little guys; let’s continue our tour of the<a id=\"I_indexterm4_tt364\" class=\"indexterm\"></a> Google properties by considering the <a id=\"I_indexterm4_tt365\" class=\"indexterm\"></a>Gmail online email service. From the end-user perspective, there is only one Gmail URI: <a class=\"ulink\" href=\"https://mail.google.com/\" target=\"_top\">https://mail.google.com/</a>. Whatever you do, whatever pieces of information you retrieve from or upload to Gmail, you’ll never see a different URI. The resource “email messages about jellyfish” isn’t addressable, the way Google’s “web pages about jellyfish” is.<sup>[<a id=\"id382308\" href=\"#ftn.id382308\" class=\"footnote\">12</a>]</sup>Yet behind the scenes, as I show in <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>, is a web site that is addressable. The list of email messages about jellyfish <span class=\"emphasis\"><em>does</em></span> have a URI: it’s <a class=\"ulink\" href=\"https://mail.google.com/mail/?q=jellyfish&amp;search=query&amp;view=tl\" target=\"_top\">https://mail.google.com/mail/?q=jellyfish&amp;search=query&amp;view=tl</a>. The problem is, you’re not the consumer of that web site. The web site is really a web service, and the real consumer is a JavaScript program running inside your web browser.<sup>[<a id=\"id382280\" href=\"#ftn.id382280\" class=\"footnote\">13</a>]</sup>The Gmail web service is addressable, but the Gmail web application that uses it is not.<a id=\"I_indexterm4_tt366\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt367\" class=\"indexterm\"></a></p>",
      "slug" : "addressability"
    }, {
      "title" : "Statelessness",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>Addressability <a id=\"ch04_statelessness\" class=\"indexterm\"></a>is one of the four main features of the ROA. The second is statelessness. I’ll give you two definitions of statelessness: a somewhat general definition and a more practical definition geared toward the ROA.</p> \n  <p><span class=\"emphasis\"><em>Statelessness</em></span> means that every HTTP request happens in complete isolation. When the client makes an HTTP request, it includes all information necessary for the server to fulfill that request. The server never relies on information from previous requests. If that information was important, the client would have sent it again in this request.</p> \n  <p>More practically, consider statelessness in terms of addressability. Addressability says that every interesting piece of information the server can provide should be exposed as a resource, and given its own URI. Statelessness says that the <span class=\"emphasis\"><em>possible states</em></span> of the server are also resources, and should be given their own URIs. The client should not have to coax the server into a certain state to make it receptive to a certain request.</p> \n  <p>On the human web, you often run into situations where your browser’s back button doesn’t work correctly, and you can’t go back and forth in your browser history. Sometimes this is because you performed an irrevocable action, like posting a weblog entry or buying a book, but often it’s because you’re at a web site that violates the principle of statelessness. Such a site expects you to make requests in a certain order: A, B, then C. It gets confused when you make request B a second time instead of moving on to request C.</p> \n  <p>Let’s take the search example again. A search engine is a web service with an infinite number of possible states: at least one for every string you might search for. Each state has its own URI. You can ask the service for a directory of resources about mice: <a class=\"ulink\" href=\"http://www.google.com/search?q=mice\" target=\"_top\">http://www.google.com/search?q=mice</a>. You can ask for a directory of resources about jellyfish: <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish\" target=\"_top\">http://www.google.com/search?q=jellyfish</a>. If you’re not comfortable creating a URI from scratch, you can ask the service for a form to fill out: <a class=\"ulink\" href=\"http://www.google.com/\" target=\"_top\">http://www.google.com/</a>.</p> \n  <p>When you ask for a directory of resources about mice or jellyfish, you don’t get the whole directory. You get a single <span class=\"emphasis\"><em>page</em></span> of the directory: a list of the 10 or so items the search engine considers the best matches for your query. To get more of the directory you must make more HTTP requests. The second and subsequent pages are distinct states of the application, and they need to have their own URIs: something like <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish&amp;start=10\" target=\"_top\">http://www.google.com/search?q=jellyfish&amp;start=10</a>. As with any addressable resource, you can transmit that state of the application to someone else, cache it, or bookmark it and come back to it later.</p> \n  <p><a class=\"xref\" href=\"ch04.html#stateless-search\" title=\"Figure&nbsp;4-1.&nbsp;A stateless search engine\">Figure&nbsp;4-1</a> is a simple state diagram showing how an HTTP client might interact with four states of a search engine.</p> \n  <div class=\"figure\"> \n   <a id=\"stateless-search\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject4_tt369\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24560.png\" alt=\"A stateless search engine\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;4-1.&nbsp;A stateless search engine \n   </div> \n  </div> \n  <p>This is a stateless application because every time the client makes a request, it ends up back where it started. Each request is totally disconnected from the others. The client can make requests for these resources any number of times, in any order. It can request page 2 of “mice” before requesting page 1 (or not request page 1 at all), and the server won’t care.</p> \n  <p>By way of contrast, <a class=\"xref\" href=\"ch04.html#stateful-search\" title=\"Figure&nbsp;4-2.&nbsp;A stateful search engine\">Figure&nbsp;4-2</a> shows the same states arranged statefully, with states leading sensibly into each other. Most desktop applications are designed this way.</p> \n  <div class=\"figure\"> \n   <a id=\"stateful-search\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject4_tt370\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24562.png\" alt=\"A stateful search engine\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;4-2.&nbsp;A stateful search engine \n   </div> \n  </div> \n  <p>That’s a lot better organized, and if HTTP were designed to allow stateful interaction, HTTP requests could be a lot simpler. When the client started a session with the search engine it could be automatically fed the search form. It wouldn’t have to send any request data at all, because the first response would be predetermined. If the client was looking at the first 10 entries in the mice directory and wanted to see entries 11–20, it could just send a request that said “start=10”. It wouldn’t have to send <code class=\"literal\">/search?q=mice&amp;start=10</code>, repeating the intitial assertions: “I’m searching, and searching for mice in particular.”</p> \n  <p>FTP works this way: it has a notion of a “working directory” that stays constant over the course of a session unless you change it. You might log in to an FTP server, <code class=\"literal\">cd</code> to a certain directory, and <code class=\"literal\">get</code> a file from that directory. You can <code class=\"literal\">get</code> another file from the same directory, without having to issue a second <code class=\"literal\">cd</code> command. Why doesn’t HTTP support this?</p> \n  <p>State would make individual HTTP requests simpler, but it would make the HTTP protocol much more complicated. An FTP client is much more complicated than an HTTP client, precisely because the session state must be kept in sync between client and server. This is a complex task even over a reliable network, which the Internet is not.</p> \n  <p>To eliminate state from a protocol is to eliminate a lot of failure conditions. The server never has to worry about the client timing out, because no interaction lasts longer than a single request. The server never loses track of “where” each client is in the application, because the client sends all necessary information with each request. The client never ends up performing an action in the wrong “working directory” due to the server keeping some state around without telling the client.</p> \n  <p>Statelessness also brings new features. It’s easier to distribute a stateless application across load-balanced servers. Since no two requests depend on each other, they can be handled by two different servers that never coordinate with each other. Scaling up is as simple as plugging more servers into the load balancer. A stateless application is also easy to cache: a piece of software can decide whether or not to cache the result of an HTTP request just by looking at that one request. There’s no nagging uncertainty that state from a previous request might affect the cacheability of this one.</p> \n  <p>The client benefits from statelessness as well. A client can process the “mice” directory up to page 50, bookmark <code class=\"literal\">/search?q=mice&amp;start=500</code>, and come back a week later without having to grind through dozens of predecessor states. A URI that works when you’re hours deep into an HTTP session will work the same way as the first URI sent in a new session.</p> \n  <p>To make your service addressable you have to put in some work, dissect your application’s data into sets of resources. HTTP is an intrinsically stateless protocol, so when you write web services, you get statelessness by default. You have to do something to break it.</p> \n  <p>The most common way to break statelessness is to use your framework’s version of<a id=\"I_indexterm4_tt371\" class=\"indexterm\"></a> HTTP sessions. The first time a user visits your site, he gets a unique string that identifies his <a id=\"I_indexterm4_tt372\" class=\"indexterm\"></a>session with the site. The string may be kept in a cookie, or the site may propagate a unique string through all the URIs it serves a particular client. Here’s an session cookie being set by a Rails application:</p> \n  <pre class=\"screen\">Set-Cookie: _session_id=c1c934bbe6168dcb904d21a7f5644a2d; path=/</pre> \n  <p>This URI propagates the session ID in a PHP application: <code class=\"literal\">http://www.example.com/forums?PHPSESSID=27314962133</code>.</p> \n  <p>The important thing is, that nonsensical hex or decimal number is not the state. It’s a key into a data structure on the server, and the data structure contains the state. There’s nothing unRESTful about stateful URIs: that’s how the server communicates possible next states to the client. (However, there <span class=\"emphasis\"><em>is</em></span> something unRESTful about <a id=\"I_indexterm4_tt373\" class=\"indexterm\"></a>cookies, as I discuss in <a class=\"xref\" href=\"ch08.html#cookies\" title=\"The Trouble with Cookies\">The Trouble with Cookies</a>.” To use a web browser analogy, cookies break a web service client’s back button.)</p> \n  <p>Think of the query variable <code class=\"literal\">start=10</code> in a URI, embedded in an HTML page served by the Google search engine. That’s the server sending a possible next state to the client.</p> \n  <p>But those URIs need to <span class=\"emphasis\"><em>contain</em></span> the state, not just provide a key to state stored on the server. <code class=\"literal\">start=10</code> means something on its own, and <code class=\"literal\">PHPSESSID=27314962133</code> doesn’t. RESTfulness requires that the state stay on the client side, and be transmitted to the server for every request that needs it. The server can nudge the client toward new states, by sending stateful links for the client to follow, but it can’t keep any state of its own.</p> \n  <h2>Application State Versus Resource State</h2> \n  <p>When we talk<a id=\"I_indexterm4_tt374\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt375\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt376\" class=\"indexterm\"></a> about “statelessness,” what counts as “state”? What’s the difference between persistent data, the useful server-side data that makes us want to use web services in the first place, and this state we’re trying to keep off the server? The Flickr web service lets you upload pictures to your account, and those pictures are stored on the server. It would be crazy to make the client send every one of its pictures along with every request to <code class=\"literal\">flickr.com</code>, just to keep the server from having to store any state. That would defeat the whole point of the service. But what’s the difference between this scenario, and state about the client’s session, which I claim should be kept off the server?</p> \n  <p>The problem is one of terminology. Statelessness implies there’s only one kind of state and that the server should go without it. Actually, there are two kinds of state. From this point on in the book I’m going to distinguish between <em class=\"firstterm\">application state</em>, which ought to live on the client, and <em class=\"firstterm\">resource state</em>, which ought to live on the server.</p> \n  <p>When you use a search engine, your current query and your current page are bits of application state. This state is different for every client. You might be on page 3 of the search results for “jellyfish,” and I might be on page 1 of the search results for “mice.” The page number and the query are different because we took different paths through the application. Our respective clients store different bits of application state.</p> \n  <p>A web service only needs to care about your application state when you’re actually making a request. The rest of the time, it doesn’t even know you exist. This means that whenever a client makes a request, it must include all the application states the server will need to process the request. The server might send back a page with links, telling the client about other requests it might want to make in the future, but then it can forget all about the client until the next request. That’s what I mean when I say a web service should be “stateless.” The client should be in charge of managing its own path through the application.</p> \n  <p>Resource state is the same for every client, and its proper place is on the server. When you upload a picture to <a id=\"I_indexterm4_tt377\" class=\"indexterm\"></a>Flickr, you create a new resource: the new picture has its own URI and can be the target of future requests. You can fetch, modify, and delete the “picture” resource through HTTP. It’s there for everybody: I can fetch it too. The picture is a bit of resource state, and it stays on the server until a client deletes it.</p> \n  <p>Client state can show up when you don’t expect it. Lots of web services make you sign up for a unique string they call an API key or application key. You send in this key with every request, and the server uses it to restrict you to a certain number of requests a day. For instance, an API key for Google’s deprecated SOAP search API is good for 1,000 requests a day. That’s application state: it’s different for every client. Once you exceed the limit, the behavior of the service changes dramatically: on request 1,000 you get your data, and on request 1,001 you get an error. Meanwhile, I’m on request 402 and the service still works fine for me.</p> \n  <p>Of course, clients can’t be trusted to self-report this bit of application state: the temptation to cheat is too great. So servers keep this kind of application state on the server, violating statelessness. The API key is like the Rails <code class=\"literal\">_session_id</code> cookie, a key into a server-side client session that lasts one day. This is fine as far as it goes, but there’s a scalability price to be paid. If the service is to be distributed across multiple machines, every machine in the cluster needs to know that you’re on request 1,001 and I’m on request 402 (technical term:<a id=\"I_indexterm4_tt378\" class=\"indexterm\"></a> <em class=\"firstterm\">session replication</em>), so that every machine knows to deny you access and let me through. Alternatively, the load balancer needs to make sure that every one of your requests goes to the same machine in the cluster (technical<a id=\"I_indexterm4_tt379\" class=\"indexterm\"></a> term: <em class=\"firstterm\">session affinity</em>). Statelessness removes this requirement. As a service designer, you only need to start thinking about data replication when your <span class=\"emphasis\"><em>resource</em></span> state needs to be split across multiple machines.<a id=\"I_indexterm4_tt380\" class=\"indexterm\"></a></p>\n </body>\n</html>",
      "slug" : "statelessness"
    }, {
      "title" : "Representations",
      "type" : "page",
      "htmlContent" : "<p>When <a id=\"ch04_representations\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt382\" class=\"indexterm\"></a>you split your application into resources, you increase its surface area. Your users can construct an appropriate URI and enter your application right where they need to be. But the resources aren’t the data; they’re just the service designer’s idea of how to split up the data into “a list of open bugs” or “information about jellyfish.” A web server can’t send an idea; it has to send a series of bytes, in a specific file format, in a specific language. This is a <em class=\"firstterm\">representation</em> of the resource.</p>\n<p>A resource is a source of representations, and a representation is just some data about the current state of a resource. Most resources are themselves items of data (like a list of bugs), so an obvious representation of a resource is the data itself. The server might present a list of open bugs as an XML document, a web page, or as comma-separated text. The sales numbers for the last quarter of 2004 might be represented numerically or as a graphical chart. Lots of news sites make their articles available in an ad-laden format, and in a stripped-down “printer-friendly” format. These are all different representations of the same resources.</p>\n<p>But some resources represent physical objects, or other things that can’t be reduced to information. What’s a good representation for such things? You don’t need to worry about perfect fidelity: a representation is <span class=\"emphasis\"><em>any useful information</em></span> about the state of a resource.</p>\n<p>Consider a physical object, a soda machine, hooked up to a web service.<sup>[<a id=\"id417008\" href=\"#ftn.id417008\" class=\"footnote\">14</a>]</sup>The goal is to let the machine’s customers avoid unnecessary trips to the machine. With the service, customers know when the soda is cold, and when their favorite brand is sold out. Nobody expects the physical cans of soda to be made available through the web service, because physical objects aren’t data. But they do have data <span class=\"emphasis\"><em>about</em></span> them: <a id=\"I_indexterm4_tt383\" class=\"indexterm\"></a>metadata. Each slot in the soda machine can be instrumented with a device that knows about the flavor, price, and temperature of the next available can of soda. Each slot can be exposed as a resource, and so can the soda machine as a whole. The metadata from the instruments can be used in representations of the resources.</p>\n<p>Even when one of an object’s representations contains the actual data, it may also have representations that contain metadata. An online bookstore may serve two representations of a book:</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>One containing only metadata, like a cover image and reviews, used to advertise the book.</p></li>\n  <li class=\"listitem\"><p>An electronic copy of the data in the book, sent to you via HTTP when you pay for it.</p></li>\n </ol>\n</div>\n<p>Representations can flow the other way, too. You can send a representation of a new resource to the server and have the server create the resource. This is what happens when you upload a picture to Flickr. Or you can give the server a new representation of an existing resource, and have the server modify the resource to bring it in line with the new representation.</p>\n<h2>Deciding Between Representations</h2>\n<p>If a server provides multiple representations of a resource, how does it figure out which one the client is asking for? For instance, a press release might be put out in both English and Spanish. Which one does a given client want?</p>\n<p>There are a number of ways to figure this out within the constraints of REST. The simplest, and the one I recommend for the Resource-Oriented Architecture, is to give a distinct URI to each representation of a resource. <span class=\"emphasis\"><em>http://www.example.com/releases/104.en</em></span> could designate the English representation of the press release, and <span class=\"emphasis\"><em>http://www.example.com/releases/104.es</em></span> could designate the Spanish representation.</p>\n<p>I recommend this technique for ROA applications because it means the URI contains all information necessary for the server to fulfill the request. The disadvantage, as whenever you expose multiple URIs for the same resource, is dilution: people who talk about the press release in different languages appear to be talking about different things. You can mitigate this problem somewhat by exposing the URI <span class=\"emphasis\"><em>http://www.example.com/releases/104</em></span> to mean the release as a Platonic form, independent of any language.</p>\n<p>The alternative way is called<a id=\"I_indexterm4_tt384\" class=\"indexterm\"></a> <em class=\"firstterm\">content negotiation</em>. In this scenario the only exposed URI is the Platonic form URI, <span class=\"emphasis\"><em>http://www.example.com/releases/104</em></span>. When a client makes a request for that URI, it provides special HTTP request headers that signal what kind of representations the client is willing to accept.</p>\n<p>Your web browser has a setting for language preferences: which languages you’d prefer to get web pages in. The browser submits this information with every HTTP request, in the<a id=\"I_indexterm4_tt385\" class=\"indexterm\"></a> <code class=\"literal\">Accept-Language</code> header. The server usually ignores this information because most web pages are available in only one language. But it fits with what we’re trying to do here: expose different-language representations of the same resource. When a client requests <span class=\"emphasis\"><em>http://www.example.com/releases/104</em></span>, the server can decide whether to serve the English or the Spanish representation based on the client’s <code class=\"literal\">Accept-Language</code> header.</p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>The <a id=\"I_indexterm4_tt386\" class=\"indexterm\"></a>Google search engine is a good place to try this out. You can get your search results in almost any language by changing your browser language settings, or by manipulating the <code class=\"varname\">hl</code> query variable in the URI (for instance, <code class=\"literal\">hl=tr</code> for Turkish). The search engine supports both content negotiation and different URIs for different representations.</p>\n</div>\n<p>A client can also set the <code class=\"literal\">Accept</code> header to specify which file format it prefers for representations. A client can say it prefers XHTML to HTML, or SVG to any other graphics format.</p>\n<p>The server is allowed to use any of this request metadata when deciding which representation to send. Other types of request metadata include payment information, authentication credentials, the time of the request, caching directives, and even the IP address of the client. All of these might make a difference in the server’s decision of what data to include in the representation, which language and which format to use, and even whether to send a representation at all or to deny access.</p>\n<p>It’s RESTful to keep this information in the HTTP headers, and it’s RESTful to put it in the URI. I recommend keeping as much of this information as possible in the URI, and as little as possible in request metadata. I think URIs are more useful than metadata. URIs get passed around from person to person, and from program to program. The request metadata almost always gets lost in transition.</p>\n<p>Here’s a simple example of this dilemma: the W3C HTML validator, a web service available at <a class=\"ulink\" href=\"http://validator.w3.org/\" target=\"_top\">http://validator.w3.org/</a>. Here’s a URI to a resource on the W3C’s site, a validation report on the English version of my hypothetical press release: <code class=\"literal\">http://validator.w3.org/check?uri=http%3A%2F%2Fwww.example.com%2Freleases%2F104.en</code>.</p>\n<p>Here’s another resource: a validation report on the Spanish version of the press release: <code class=\"literal\">http://validator.w3.org/check?uri=http%3A%2F%2Fwww.example.com%2Freleases%2F104.es</code>.</p>\n<p>Every URI in your web space becomes a resource in the W3C’s web application, whether or not it designates a distinct resource on your site. If your press release has a separate URI for each representation, you can get two resources from the W3C: validation reports for the English and the Spanish versions of the press release.</p>\n<p>But if you only expose the Platonic form URI, and serve both representations from that URI, you can only get one resource from the W3C. That would be a validation report for the <span class=\"emphasis\"><em>default</em></span> version of the press release (probably the English one). You’ve got no way of knowing whether or not the Spanish representation contains HTML formatting errors. If the server doesn’t expose the Spanish press release as its own URI, there’s no corresponding resource available on the W3C site. This doesn’t mean you can’t expose that Platonic form URI: just that it shouldn’t be the only URI you use.</p>\n<p>Unlike humans, computer programs are very bad at dealing with representations they didn’t expect. I think an automated web client should be as explicit as possible about the representation it wants. This almost always means specifying a representation in the URL.<a id=\"I_indexterm4_tt387\" class=\"indexterm\"></a></p>",
      "slug" : "representations"
    }, {
      "title" : "Links and Connectedness",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>Sometimes <a id=\"ch04_links\" class=\"indexterm\"></a><a id=\"ch04_connectedness\" class=\"indexterm\"></a> <a id=\"I_indexterm4_tt389\" class=\"indexterm\"></a>representations are little more than serialized data structures. They’re intended to be sucked of their data and discarded. But in the most RESTful services, representations are hypermedia: documents that contain not just data, but links to other resources.</p> \n  <p>Let’s take the search example again. If you go<a id=\"I_indexterm4_tt390\" class=\"indexterm\"></a> to <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish\" target=\"_top\">Google’s directory of documents about jellyfish</a>, you see some search results, and a set of internal links to other pages of the directory. <a class=\"xref\" href=\"ch04.html#google-results\" title=\"Figure&nbsp;4-3.&nbsp;Closeup on a page of Google search results\">Figure&nbsp;4-3</a> shows a representative sample of the page.</p> \n  <div class=\"figure\"> \n   <a id=\"google-results\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject4_tt391\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24564.png\" alt=\"Closeup on a page of Google search results\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;4-3.&nbsp;Closeup on a page of Google search results \n   </div> \n  </div> \n  <p>There’s data here, and links. The data says that somewhere on the Web, someone said such-and-such about jellyfish, with emphasis on two species of Hawaiian jellyfish. The links give you access to other resources: some within the Google search “web service,” and some elsewhere on the Web:</p> \n  <div class=\"itemizedlist\"> \n   <ul class=\"itemizedlist\"> \n    <li class=\"listitem\"><p>The external web page that talks about jellyfish: <code class=\"literal\">http://www.aloha.com/~lifeguards/jelyfish.html</code>. The main point of this web service, of course, is to present links of this sort.</p></li> \n    <li class=\"listitem\"><p>A link to a Google-provided cache of the external page (the “Cached” link). These links always have long URIs that point to Google-owned IP addresses, like <code class=\"literal\">http://209.85.165.104/search?q=cache:FQrLzPU0tKQJ...</code></p></li> \n    <li class=\"listitem\"><p>A link to a directory of pages Google thinks are related to the external page (<a class=\"ulink\" href=\"http://www.google.com/search?q=related:www.aloha.com/~lifeguards/jelyfish.html\" target=\"_top\">http://www.google.com/search?q=related:www.aloha.com/~lifeguards/jelyfish.html</a>, linked as “Similar pages”). This is another case of a web service taking a URI as input.</p></li> \n    <li class=\"listitem\"><p>A set of navigation links that take you to different pages of the “jellyfish” directory: <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish&amp;start=10\" target=\"_top\">http://www.google.com/search?q=jellyfish&amp;start=10</a>, <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish&amp;start=20\" target=\"_top\">http://www.google.com/search?q=jellyfish&amp;start=20</a>, and so on.</p></li> \n   </ul> \n  </div> \n  <p>Earlier in this chapter, I showed what might happen if HTTP was a stateful protocol like FTP. <a class=\"xref\" href=\"ch04.html#stateful-search\" title=\"Figure&nbsp;4-2.&nbsp;A stateful search engine\">Figure&nbsp;4-2</a> shows the paths a stateful HTTP client might take during a “session” with <code class=\"literal\">www.google.com</code>. HTTP doesn’t really work that way, but that figure does a good job of showing how we use the human web. To use a search engine we start at the home page, fill out a form to do a search, and then click links to go to subsequent pages of results. We don’t usually type in one URI after another: we follow links and fill out forms.</p> \n  <p>If you’ve read about REST before, you might have encountered an axiom from the Fielding dissertation: “Hypermedia as the engine of application state.” This is what that axiom means: the current state of an HTTP “session” is not stored on the server as a resource state, but tracked by the client as an application state, and created by the path the client takes through the Web. The server guides the client’s path by serving<a id=\"I_indexterm4_tt392\" class=\"indexterm\"></a> “hypermedia”: links and forms inside hypertext representations.</p> \n  <p>The server sends the client guidelines about which states are near the current one. The “next” link on <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish\" target=\"_top\">http://www.google.com/search?q=jellyfish</a> is a <em class=\"firstterm\">lever of state</em>: it shows you how to get from the current state to a related one. This is very powerful. A document that contains a URI points to another possible state of the application: “page two,” or “related to this URI,” or “a cached version of this URI.” Or it may be pointing to a possible state of a totally different application.</p> \n  <p>I’m calling the quality of having links <span class=\"emphasis\"><em>connectedness</em></span>. A web service is connected to the extent that you can put the service in different states just by following links and filling out forms. I’m calling this “connectedness” because “hypermedia as the engine of application state” makes the concept sound more difficult than it is. All I’m saying is that resources should link to each other in their representations.</p> \n  <p>The human web is easy to use because it’s well connected. Any experienced user knows how to type URIs into the browser’s address bar, and how to jump around a site by modifying the URI, but many users do all their web surfing from a single starting point: the browser home page set by their ISP. This is possible because the Web is well connected. Pages link to each other, even across sites.</p> \n  <p>But most web services are not internally connected, let alone connected to each other. Amazon S3 is a RESTful web service that’s addressible and stateless, but not connected. S3 representations never include URIs. To GET an S3 bucket, you have to know the rules for constructing the bucket’s URI. You can’t just GET the bucket list and follow a link to the bucket you want.</p> \n  <p><a class=\"xref\" href=\"ch04.html#connected-bucket-list\" title=\"Example&nbsp;4-1.&nbsp;A connected “list of your buckets”\">Example&nbsp;4-1</a> shows an S3 bucket list that I’ve changed (I added a <code class=\"literal\">URI</code> tag) so that it’s connected. Compare to <a class=\"xref\" href=\"ch03.html#sample-bucket-list\" title=\"Example&nbsp;3-5.&nbsp;A sample “list of your buckets”\">Example&nbsp;3-5</a>, which has no <code class=\"literal\">URI</code> tag. This is just one way of introducing URIs into an XML representation. As resources become better-connected, the relationships between them becomes more obvious (see <a class=\"xref\" href=\"ch04.html#addressability-and-connectedness\" title=\"Figure&nbsp;4-4.&nbsp;One service three ways\">Figure&nbsp;4-4</a>).<a id=\"I_indexterm4_tt393\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt394\" class=\"indexterm\"></a></p> \n  <div class=\"example\"> \n   <a id=\"connected-bucket-list\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;4-1.&nbsp;A connected “list of your buckets” \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;ListAllMyBucketsResult xmlns='http://s3.amazonaws.com/doc/2006-03-01/'&gt;\n &lt;Owner&gt;\n  &lt;ID&gt;c0363f7260f2f5fcf38d48039f4fb5cab21b060577817310be5170e7774aad70&lt;/ID&gt;\n  &lt;DisplayName&gt;leonardr28&lt;/DisplayName&gt;\n &lt;/Owner&gt;\n &lt;Buckets&gt;\n  &lt;Bucket&gt;\n   &lt;Name&gt;crummy.com&lt;/Name&gt;\n   &lt;URI&gt;https://s3.amazonaws.com/crummy.com&lt;/URI&gt;\n   &lt;CreationDate&gt;2006-10-26T18:46:45.000Z&lt;/CreationDate&gt;\n  &lt;/Bucket&gt;\n &lt;/Buckets&gt;\n&lt;/ListAllMyBucketsResult&gt;</pre> \n   </div> \n  </div> \n  <div class=\"figure\"> \n   <a id=\"addressability-and-connectedness\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"mediaobject\"> \n     <a id=\"I_mediaobject4_tt395\"></a> \n     <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24566.png\" alt=\"One service three ways\"> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;4-4.&nbsp;One service three ways \n   </div> \n  </div>\n </body>\n</html>",
      "slug" : "links-and-connectedness"
    }, {
      "title" : "The Uniform Interface",
      "type" : "page",
      "htmlContent" : "<p>All across the Web, there are only a few basic things you can do to a resource. <a id=\"I_indexterm4_tt396\" class=\"indexterm\"></a>HTTP provides four basic methods for the four most common operations:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>Retrieve a representation of a resource: <span class=\"emphasis\"><em>HTTP GET</em></span></p></li>\n  <li class=\"listitem\"><p>Create a new resource: <span class=\"emphasis\"><em>HTTP PUT</em></span> to a new URI, or <span class=\"emphasis\"><em>HTTP POST</em></span> to an existing URI (see the <a class=\"xref\" href=\"ch04.html#httppost\" title=\"POST\">POST</a>” section below)</p></li>\n  <li class=\"listitem\"><p>Modify an existing resource: <span class=\"emphasis\"><em>HTTP PUT</em></span> to an existing URI</p></li>\n  <li class=\"listitem\"><p>Delete an existing resource: <span class=\"emphasis\"><em>HTTP DELETE</em></span></p></li>\n </ul>\n</div>\n<p>I’ll explain how these four are used to represent just about any operation you can think of. I’ll also cover two HTTP methods for two less common operations: HEAD and OPTIONS.</p>\n<h2>GET, PUT, and DELETE</h2>\n<p>These<a id=\"I_indexterm4_tt397\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt398\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt399\" class=\"indexterm\"></a> three should be familiar to you from the S3 example in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>. To fetch or delete a resource, the client just sends a GET or DELETE request to its URI. In the case of a GET request, the server sends back a representation in the response entity-body. For a DELETE request, the response entity-body may contain a status message, or nothing at all.</p>\n<p>To create or modify a resource, the client sends a PUT request that usually includes an entity-body. The entity-body contains the client’s proposed new representation of the resource. What data this is, and what format it’s in, depends on the service. Whatever it looks like, this is the point at which application state moves onto the server and becomes resource state.</p>\n<p>Again, think of the S3 service, where there are two kinds of resources you can create: buckets and objects. To create an object, you send a PUT request to its URI and include the object’s content in the entity-body of your request. You do the same thing to modify an object: the new content overwrites any old content.</p>\n<p>Creating a bucket is a little different because you don’t have to specify an entity-body in the PUT request. A bucket has no resource state except for its name, and the name is part of the URI. (This is not quite true. The objects in a bucket are also elements of that bucket’s resource state: after all, they’re listed when you GET a bucket’s representation. But every S3 object is a resource of its own, so there’s no need to <span class=\"emphasis\"><em>manipulate</em></span> an object through its bucket. Every object exposes the uniform interface and you can manipulate it separately.) Specify the bucket’s URI and you’ve specified its representation. PUT requests for most resources do include an entity-body containing a representation, but as you can see it’s not a requirement.</p>\n<h2>HEAD and OPTIONS</h2>\n<p>There are three<a id=\"I_indexterm4_tt400\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt401\" class=\"indexterm\"></a> other HTTP methods I consider part of the uniform interface. Two of them are simple utility methods, so I’ll cover them first.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>Retrieve a metadata-only representation: <span class=\"emphasis\"><em>HTTP HEAD</em></span></p></li>\n  <li class=\"listitem\"><p>Check which HTTP methods a particular resource supports: <span class=\"emphasis\"><em>HTTP OPTIONS</em></span></p></li>\n </ul>\n</div>\n<p>You saw the HEAD method exposed by the S3 services’s resources in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>. An S3 client uses HEAD to fetch metadata about a resource without downloading the possibly enormous entity-body. That’s what HEAD is for. A client can use HEAD to check whether a resource exists, or find out other information about the resource, without fetching its entire representation. HEAD gives you exactly what a GET request would give you, but without the entity-body.</p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>There are two standard HTTP methods I don’t cover in this book: TRACE and CONNECT. TRACE is used to debug proxies, and CONNECT is used to forward some other protocol through an HTTP proxy.</p>\n</div>\n<p>The OPTIONS method lets the client discover what it’s allowed to do to a resource. The response to an OPTIONS request contains the HTTP <code class=\"literal\">Allow</code> header, which lays out the subset of the uniform interface this resource supports. Here’s a sample <code class=\"literal\">Allow</code> header:</p>\n<pre class=\"screen\">Allow: GET, HEAD</pre>\n<p>That particular header means the client can expect the server to act reasonably to a GET or HEAD request for this resource, but that the resource doesn’t support any other HTTP methods. Effectively, this resource is read-only.</p>\n<p>The headers the client sends in the request may affect the <code class=\"literal\">Allow</code> header the server sends in response. For instance, if you send a proper <code class=\"literal\">Authorization</code> header along with an OPTIONS request, you may find that you’re allowed to make GET, HEAD, PUT, and DELETE requests against a particular URI. If you send the same OPTIONS request but omit the <code class=\"literal\">Authorization</code> header, you may find that you’re only allowed to make GET and HEAD requests. The OPTIONS method lets the client do simple access control checks.</p>\n<p>In theory, the server can send additional information in response to an OPTIONS request, and the client can send OPTIONS requests that ask very specific questions about the server’s capabilities. Very nice, except there are no accepted standards for what a client might ask in an OPTIONS request. Apart from the <code class=\"literal\">Allow</code> header there are no accepted standards for what a server might send in response. Most web servers and frameworks feature very poor support for OPTIONS. So far, OPTIONS is a promising idea that nobody uses.</p>\n<h2>POST</h2>\n<p>Now we come to that most misunderstood of<a id=\"ch04_post\" class=\"indexterm\"></a> HTTP methods: POST. This method essentially has two purposes: one that fits in with the constraints of REST, and one that goes outside REST and introduces an element of the RPC style. In complex cases like this it’s best to go back to the original text. Here’s what RFC 2616, the HTTP standard, says about POST (this is from section 9.5):</p>\n<div class=\"blockquote\">\n <blockquote class=\"blockquote\">\n  <p>POST is designed to allow a uniform method to cover the following functions:</p>\n  <div class=\"itemizedlist\">\n   <ul class=\"itemizedlist\">\n    <li class=\"listitem\"><p>Annotation of existing resources;</p></li>\n    <li class=\"listitem\"><p>Posting a message to a bulletin board, newsgroup, mailing list, or similar group of articles;</p></li>\n    <li class=\"listitem\"><p>Providing a block of data, such as the result of submitting a form, to a data-handling process;</p></li>\n    <li class=\"listitem\"><p>Extending a database through an append operation.</p></li>\n   </ul>\n  </div>\n  <p>The actual function performed by the POST method is determined by the server and is usually dependent on the Request-URI. The posted entity is subordinate to that URI in the same way that a file is subordinate to a directory containing it, a news article is subordinate to a newsgroup to which it is posted, or a record is subordinate to a database.</p>\n </blockquote>\n</div>\n<p>What does this mean in the context of REST and the ROA?</p>\n<div class=\"sect3\" title=\"Creating subordinate resources\">\n <p>In a RESTful design, POST is commonly used to create<a id=\"I_indexterm4_tt402\" class=\"indexterm\"></a> subordinate resources: resources that exist in relation to some other “parent” resource. A weblog program may expose each weblog as a resource (<code class=\"literal\">/weblogs/myweblog</code>), and the individual weblog entries as subordinate resources (<code class=\"literal\">/weblogs/myweblog/entries/1</code>). A web-enabled database may expose a table as a resource, and the individual database rows as its subordinate resources. To create a weblog entry or a database record, you POST to the parent: the weblog or the database table. What data you post, and what format it’s in, depends on the service, but as with PUT, this is the point where application state becomes resource state. You may see this use of POST called <em class=\"firstterm\">POST(a)</em>, for “append”. When I say “POST” in this book, I almost always mean POST(a).</p>\n <p>Why can’t you just use<a id=\"I_indexterm4_tt403\" class=\"indexterm\"></a> PUT to create subordinate resources? Well, sometimes you can. An S3 object is a subordinate resource: every S3 object is contained in some S3 bucket. But we don’t create an S3 object by sending a POST request to the bucket. We send a PUT request directly to the URI of the object. The difference between PUT and POST is this: the client uses PUT when it’s in charge of deciding which URI the new resource should have. The client uses POST when the <span class=\"emphasis\"><em>server</em></span> is in charge of deciding which URI the new resource should have.</p>\n <p>The S3 service expects clients to create S3 objects with PUT, because an S3 object’s URI is completely determined by its name and the name of the bucket. If the client knows enough to create the object, it knows what its URI will be. The obvious URI to use as the target of the PUT request is the one the bucket will live at once it exists.</p>\n <p>But consider an application in which the server has more control over the URIs: say, a weblog program. The client can gather all the information necessary to create a weblog entry, and still not know what URI the entry will have once created. Maybe the server bases the URIs on ordering or an internal database ID: will the final URI be <code class=\"literal\">/weblogs/myweblog/entries/1</code> or <code class=\"literal\">/weblogs/myweblog/entries/1000</code>? Maybe the final URI is based on the posting time: what time does the server think it is? The client shouldn’t have to know these things.</p>\n <p>The POST method is a way of creating a new resource without the client having to know its exact URI. In most cases the client only needs to know the URI of a “parent” or “factory” resource. The server takes the representation from the entity-body and uses it to create a new resource “underneath” the “parent” resource (the meaning of “underneath” depends on context).</p>\n <p>The response to this sort of POST request usually has an HTTP status code of 201 (“Created”). Its <code class=\"literal\">Location</code> header contains the URI of the newly created subordinate resource. Now that the resource actually exists and the client knows its URI, future requests can use the PUT method to modify that resource, GET to fetch a representation of it, and DELETE to delete it.</p>\n <p><a class=\"xref\" href=\"ch04.html#table_4_1\" title=\"Table&nbsp;4-1.&nbsp;PUT actions\">Table&nbsp;4-1</a> shows how a PUT request to a URI might create or modify the underlying resource; and how a POST request to the same URI might create a new, subordinate resource.</p>\n <div class=\"table\">\n  <a id=\"table_4_1\"></a>\n  <div class=\"table-title\">\n   Table&nbsp;4-1.&nbsp;PUT actions\n  </div>\n  <div class=\"table-contents\">\n   <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n    <colgroup>\n     <col>\n     <col>\n     <col>\n     <col>\n    </colgroup>\n    <thead>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">&nbsp;</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT to a new resource</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT to an existing resource</td>\n      <td style=\"border-bottom: 0.5pt solid ; \">POST</td>\n     </tr>\n    </thead>\n    <tbody>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \"><code class=\"literal\">/weblogs</code></td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">N/A (resource already exists)</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">No effect</td>\n      <td style=\"border-bottom: 0.5pt solid ; \">Create a new weblog</td>\n     </tr>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \"><code class=\"literal\">/weblogs/myweblog</code></td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Create this weblog</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Modify this weblog’s settings</td>\n      <td style=\"border-bottom: 0.5pt solid ; \" class=\"keep-together\">Create a new weblog entry</td>\n     </tr>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; \"><code class=\"literal\">/weblogs/myweblog/entries/1</code></td>\n      <td style=\"border-right: 0.5pt solid ; \">N/A (how would you get this URI?)</td>\n      <td style=\"border-right: 0.5pt solid ; \">Edit this weblog entry</td>\n      <td>Post a comment to this weblog entry</td>\n     </tr>\n    </tbody>\n   </table>\n  </div>\n </div>\n</div>\n<div class=\"sect3\" title=\"Appending to the resource state\">\n <p>The information conveyed in a POST to a resource doesn’t have to result in a whole new subordinate resource. Sometimes when you POST data to a resource, it appends the information you POSTed to its own state, instead of putting it in a new resource.</p>\n <p>Consider an event logging service that exposes a single resource: the log. Say its URI is <code class=\"literal\">/log</code>. To get the log you send a GET request to <code class=\"literal\">/log</code>.</p>\n <p>Now, how should a client append to the log? The client might send a PUT request to <code class=\"literal\">/log</code>, but the PUT method has the implication of creating a new resource, or overwriting old settings with new ones. The client isn’t doing either: it’s just appending information to the end of the log.</p>\n <p>The POST method works here, just as it would if each log entry was exposed as a separate resource. The semantics of POST are the same in both cases: the client adds subordinate information to an existing resource. The only difference is that in the case of the weblog and weblog entries, the subordinate information showed up as a new resource. Here, the subordinate information shows up as new data in the parent’s representation.</p>\n</div>\n<div class=\"sect3\" title=\"Overloaded POST: The not-so-uniform interface\">\n <p>That way of looking at things explains most of what the HTTP standard says about POST. You can use it to create resources underneath a parent resource, and you can use it to append extra data onto the current state of a resource. The one use of POST I haven’t explained is the one you’re probably most familiar with, because it’s the one that drives almost all web applications: providing a block of data, such as the result of submitting a form, to a data-handling process.</p>\n <p>What’s a “data-handling process”? That sounds pretty vague. And, indeed, just about anything can be a data-handling process. Using POST this way turns a resource into a tiny message processor that acts like an XML-RPC server. The resource accepts a POST request, examines the request, and decides to do... something. Then it decides to serve to the client... some data.</p>\n <p>I call this use of <a id=\"I_indexterm4_tt404\" class=\"indexterm\"></a>POST <span class=\"emphasis\"><em>overloaded POST</em></span>, by<a id=\"I_indexterm4_tt405\" class=\"indexterm\"></a> analogy to operator overloading in a programming language. It’s overloaded because a single HTTP method is being used to signify any number of non-HTTP methods. It’s confusing for the same reason operator overloading can be confusing: you thought you knew what HTTP POST did, but now it’s being used to achieve some unknown purpose. You might see overloaded POST called <em class=\"firstterm\">POST(p)</em>, for “process.”</p>\n <p>When your service exposes overloaded POST, you reopen the question: “why should the server do this instead of that?” Every HTTP request has to contain method information, and when you use overloaded POST it can’t go into the HTTP method. The POST method is just a directive to the server, saying: “Look inside the HTTP request for the real method information.” The real information may be in the URI, the HTTP headers, or the entity-body. However it happens, an element of the RPC style has crept into the service.</p>\n <p>When the method information isn’t found in the HTTP method, the interface stops being uniform. The real method information might be anything. As a REST partisan I don’t like this very much, but occasionally it’s unavoidable. By <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> you’ll have seen how just about any scenario you can think of can be exposed through HTTP’s uniform interface, but sometimes the RPC style is the easiest way to express complex operations that span multiple resources.</p>\n <p>You may need to expose overloaded POST even if you’re only using POST to create subordinate resources or to append to a resource’s representation. What if a single resource supports both kinds of POST? How does the server know whether a client is POSTing to create a subordinate resource, or to append to the existing resource’s representation? You may need to put some additional method information elsewhere in the HTTP request.</p>\n <p>Overloaded POST should not be used to cover up poor resource design. Remember, a resource can be anything. It’s usually possible to shuffle your resource design so that the uniform interface applies, rather than introduce the RPC style into your service.<a id=\"I_indexterm4_tt406\" class=\"indexterm\"></a></p>\n</div>\n<h2>Safety and Idempotence</h2>\n<p>If you <a id=\"ch04_safety\" class=\"indexterm\"></a><a id=\"ch04_idempotence\" class=\"indexterm\"></a>expose HTTP’s uniform interface as it was designed, you get two useful properties for free. When correctly used, <a id=\"I_indexterm4_tt407\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt408\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt409\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt410\" class=\"indexterm\"></a>GET and HEAD requests are <em class=\"firstterm\">safe</em>. GET, HEAD, PUT and DELETE requests are <em class=\"firstterm\">idempotent</em>.</p>\n<div class=\"sect3\" title=\"Safety\">\n <p>A GET or HEAD request is a request to read some data, not a request to change any server state. The client can make a GET or HEAD request 10 times and it’s the same as making it once, or never making it at all. When you GET <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish\" target=\"_top\">http://www.google.com/search?q=jellyfish</a>, you aren’t changing anything about the directory of jellyfish resources. You’re just retrieving a representation of it. A client should be able to send a GET or HEAD request to an unknown URI and feel safe that nothing disastrous will happen.</p>\n <p>This is not to say that GET and HEAD requests can’t have side effects. Some resources are hit counters that increment every time a client GETs them. Most web servers log every incoming request to a log file. These are side effects: the server state, and even the resource state, is changing in response to a GET request. But the client didn’t ask for the side effects, and it’s not responsible for them. A client should never make a GET or HEAD request just for the side effects, and the side effects should never be so big that the client might wish it hadn’t made the request.</p>\n</div>\n<div class=\"sect3\" title=\"Idempotence\">\n <p>Idempotence is a slightly tricker notion. The idea comes from math, and if you’re not familiar with idempotence, a math example might help. An idempotent operation in math is one that has the same effect whether you apply it once, or more than once. Multiplying a number by zero is idempotent: 4 ×0 ×0 ×0 is the same as 4 ×0.<sup>[<a id=\"id408387\" href=\"#ftn.id408387\" epub:type=\"noteref\" class=\"footnote\">15</a>]</sup>By analogy, an operation on a resource is idempotent if making one request is the same as making a series of identical requests. The second and subsequent requests leave the resource state in exactly the same state as the first request did.</p>\n <p>PUT and DELETE operations are idempotent. If you DELETE a resource, it’s gone. If you DELETE it again, it’s still gone. If you create a new resource with PUT, and then resend the PUT request, the resource is still there and it has the same properties you gave it when you created it. If you use PUT to change the state of a resource, you can resend the PUT request and the resource state won’t change again.</p>\n <p>The practical upshot of this is that you shouldn’t allow your clients to PUT representations that change a resource’s state in relative terms. If a resource keeps a numeric value as part of its resource state, a client might use PUT to set that value to 4, or 0, or −50, but not to increment that value by 1. If the initial value is 0, sending two PUT requests that say “set the value to 4” leaves the value at 4. If the initial value is 0, sending two PUT requests that say “increment the value by 1” leaves the value not at 1, but at 2. That’s not idempotent.</p>\n</div>\n<div class=\"sect3\" title=\"Why safety and idempotence matter\">\n <p>Safety and idempotence let a client make reliable HTTP requests over an unreliable network. If you make a GET request and never get a response, just make another one. It’s safe: even if your earlier request went through, it didn’t have any real effect on the server. If you make a PUT request and never get a response, just make another one. If your earlier request got through, your second request will have no additional effect.</p>\n <p>POST is neither safe nor idempotent. Making two identical POST requests to a “factory” resource will probably result in two subordinate resources containing the same information. With overloaded POST, all bets are off.</p>\n <p>The most common misuse of the uniform interface is to expose unsafe operations through GET. The del.icio.us and Flickr APIs both do this. When you GET <a class=\"ulink\" href=\"https://api.del.icio.us/posts/delete\" target=\"_top\">https://api.del.icio.us/posts/delete</a>, you’re not fetching a representation: you’re modifying the del.icio.us data set.</p>\n <p class=\"keep-together\">Why is this bad? Well, here’s a story. In 2005 Google released a client-side caching tool called<a id=\"I_indexterm4_tt411\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt412\" class=\"indexterm\"></a> Web Accelerator. It runs in conjunction with your web browser and “pre-fetches” the pages linked to from whatever page you’re viewing. If you happen to click one of those links, the page on the other side will load faster, because your computer has already fetched it.</p>\n <p>Web Accelerator was a disaster. Not because of any problem in the software itself, but because the Web is full of applications that misuse GET. Web Accelerator assumed that GET operations were safe, that clients could make them ahead of time just in case a human being wanted to see the corresponding representations. But when it made those GET requests to real URIs, it changed the data sets. People lost data.</p>\n <p>There’s plenty of blame to go around: programmers shouldn’t expose unsafe actions through GET, and Google shouldn’t have released a real-world tool that didn’t work with the real-world web. The current version of Web Accelerator ignores all URIs that contain query variables. This solves part of the problem, but it also prevents many resources that are safe to use through GET (such as Google web searches) from being pre-fetched.</p>\n <p>Multiply the examples if you like. Many web services and web applications use URIs as input, and the first thing they do is send a GET request to fetch a representation of a resource. These services don’t mean to trigger catastrophic side effects, but it’s not up to them. It’s up to the service to handle a GET request in a way that complies with the HTTP standard.<a id=\"I_indexterm4_tt413\" class=\"indexterm\"></a><a id=\"I_indexterm4_tt414\" class=\"indexterm\"></a></p>\n</div>\n<h2>Why the Uniform Interface Matters</h2>\n<p>The important thing about REST is<a id=\"I_indexterm4_tt415\" class=\"indexterm\"></a> not that you use the specific uniform interface that HTTP defines. REST specifies a uniform interface, but it doesn’t say <span class=\"emphasis\"><em>which</em></span> uniform interface. GET, PUT, and the rest are not a perfect interface for all time. What’s important is the uniformity: that every service use HTTP’s interface the same way.</p>\n<p>The point is not that GET is the best name for a read operation, but that GET means “read” across the Web, no matter which resource you’re using it on. Given a URI of a resource, there’s no question of how you get a representation: you send an HTTP GET request to that URI. The uniform interface makes any two services as similar as any two web sites. Without the uniform interface, you’d have to learn how each service expected to receive and send information. The rules might even be different for different resources within a single service.</p>\n<p>You can program a computer to understand what GET means, and that understanding will apply to every RESTful web service. There’s not much to understand. The service-specific code can live in the handling of the representation. Without the uniform interface, you get a multiplicity of methods taking the place of GET: <code class=\"literal\">doSearch</code> and <code class=\"literal\">getPage</code> and <code class=\"literal\">nextPrime</code>. Every service speaks a different language. This is also the reason I don’t like overloaded POST very much: it turns the simple Esperanto of the uniform interface into a Babel of one-off sublanguages.</p>\n<p>Some applications extend HTTP’s uniform interface. The most obvious case is<a id=\"I_indexterm4_tt416\" class=\"indexterm\"></a> WebDAV, which adds eight new HTTP methods including MOVE, COPY, and SEARCH. Using these methods in a web service would not violate any precept of REST, because REST doesn’t say what the uniform interface should look like. Using them would violate my Resource-Oriented Architecture (I’ve explicitly tied the ROA to the standard HTTP methods), but your service could still be resource-oriented in a general sense.</p>\n<p>The real reason not to use the WebDAV methods is that doing so makes your service incompatible with other RESTful services. Your service would use a different uniform interface than most other services. There are web services like Subversion that use the WebDAV methods, so your service wouldn’t be all alone. But it would be part of a much smaller web. This is why making up your own HTTP methods is a very, very bad idea: your custom vocabulary puts you in a community of one. You might as well be using XML-RPC.</p>\n<p>Another uniform interface consists solely of HTTP GET and overloaded POST. To fetch a representation of a resource, you send GET to its URI. To create, modify, or delete a resource, you send POST. This interface is perfectly RESTful, but, again, it doesn’t conform to my Resource-Oriented Architecture. This interface is just rich enough to distinguish between safe and unsafe operations. A resource-oriented web application would use this interface, because today’s HTML forms only support GET and POST.</p>",
      "slug" : "the-uniform-interface"
    }, {
      "title" : "That’s It!",
      "type" : "page",
      "htmlContent" : "<p>That’s the Resource-Oriented Architecture. It’s just four concepts:</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>Resources</p></li>\n  <li class=\"listitem\"><p>Their names (URIs)</p></li>\n  <li class=\"listitem\"><p>Their representations</p></li>\n  <li class=\"listitem\"><p>The links between them</p></li>\n </ol>\n</div>\n<p>and four properties:</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>Addressability</p></li>\n  <li class=\"listitem\"><p>Statelessness</p></li>\n  <li class=\"listitem\"><p>Connectedness</p></li>\n  <li class=\"listitem\"><p>A uniform interface</p></li>\n </ol>\n</div>\n<p>Of course, there are still a lot of open questions. How should a real data set be split into resources, and how should the resources be laid out? What should go into the actual HTTP requests and responses? I’m going to spend much of the rest of the book exploring issues like these.<a id=\"I_indexterm4_tt418\" class=\"indexterm\"></a></p>",
      "slug" : "thats-it"
    } ]
  }, {
    "title" : "5. Designing Read-Only Resource-Oriented Services",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services</h2>\n  </div>\n </div>\n</div>\n<p>We’ve <a id=\"ch05_readonlyresource\" class=\"indexterm\"></a>got some information we want to expose to people elsewhere on the network. We want to reach the widest possible combination of clients. Every programming language has an HTTP library, so the natural choice is to expose the data over HTTP. Every programming language has an XML parsing library, so we can format the data with XML and always be understood. Whee!</p>\n<p>Sometimes that’s as far as the train of thought goes. The solution is obvious, so the programmers set to work. Despite its vagueness, this technique gives surprisingly good results. Most people are intuitively familiar with what makes a good web site, and a good web service works much the same way.</p>\n<p>Unfortunately, this gut-feeling approach combines everyone’s gut feelings into a stew of web services that are usually not RESTful (they’re REST-RPC hybrids), and which work alike only in superficial ways. If you understand <span class=\"emphasis\"><em>why</em></span> REST works, you can make your services safer, easier to use, and accessible through standard tools.</p>\n<p>Some “web services” were never intended to be used as such, and have RESTful qualities seemingly by accident. Into this category fall the many well-designed web sites that have been screen-scraped over the years. So do many providers of images: for instance, the static map tiles served up to the Google Maps application, where you change the URI to address a different part of the Earth. An amusing example is Amazon product images, which can be manipulated in funny ways by putting extra strings in the URI.<sup>[<a id=\"id377919\" href=\"#ftn.id377919\" class=\"footnote\">16</a>]</sup></p>\n<p>It is no accident that so many web sites are RESTful. A well-designed web site presents uncluttered representations of sensibly named resources, accessible through HTTP GET. Uncluttered representations are easy to parse or screen-scrape, and sensibly named resources are easy to address programmatically. Using GET to fetch a representation respects HTTP’s uniform interface. Design a web site by these rules, and it will fit well with my Resource-Oriented Architecture.</p>\n<p>Now that I’ve introduced the principles of REST, within the ROA, I’ll show how to use the ROA to design programmatic services that serve data across the network. These simple services provide client access to a data set. They may even let clients filter or search the data. But they don’t let clients modify the data or add to it. In <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a> I talk about web services that let you store and modify information on the server. For now I’m focused on letting clients retrieve and search a data set.</p>\n<p>I’ve split the discussion because many excellent web services do nothing more than send useful information out to the people that need it. These are not toy services. Any web-based database search falls into this category: web searches, book searches, even the stereotypical stock quote web service (okay, that one’s probably just a toy). It’s more manageable to cover the simpler cases—which do happen in real life—than to try to cover everything in one huge chapter. The lessons in the next chapter build directly on what I say in this one. After all, a web service that lets clients modify information must also let them retrieve it.</p>\n<p>In this chapter I design a web service that serves information about maps. It’s inspired by web applications like Google Maps, but those sites (and the third-party sites build atop them) are designed for ad hoc use by humans. As with any well-designed web site, you can consume Google Maps image tiles as a web service, but only somewhat illicitly and with difficulty. The fantasy service I design here is a programmer-friendly way to retrieve map data for any purpose, <span class=\"emphasis\"><em>including</em></span> a browser-based map navigation application like the Google Maps Ajax application.</p>\n<p>I won’t actually implement this service. An implementation would be too complex to fit in this book, and I don’t own the necessary data anyway. (Note, though, that in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> I use the lessons of this chapter to implement a social bookmarking service similar to del.icio.us). This chapter and the next aim to teach you how to see a problem from a resource-oriented point of view. Along the way I hope to demonstrate that the ROA’s simple rules and uniform interface can represent an extremely powerful and fairly complex distributed service.</p>",
    "textContent" : "Chapter 5. Designing Read-Only Resource-Oriented Services\r\n\r\nWe’ve got some information we want to expose to people elsewhere on the network. We want to reach the widest possible combination of clients. Every programming language has an HTTP library, so the natural choice is to expose the data over HTTP. Every programming language has an XML parsing library, so we can format the data with XML and always be understood. Whee!\r\n\r\nSometimes that’s as far as the train of thought goes. The solution is obvious, so the programmers set to work. Despite its vagueness, this technique gives surprisingly good results. Most people are intuitively familiar with what makes a good web site, and a good web service works much the same way.\r\n\r\nUnfortunately, this gut-feeling approach combines everyone’s gut feelings into a stew of web services that are usually not RESTful (they’re REST-RPC hybrids), and which work alike only in superficial ways. If you understand why REST works, you can make your services safer, easier to use, and accessible through standard tools.\r\n\r\nSome “web services” were never intended to be used as such, and have RESTful qualities seemingly by accident. Into this category fall the many well-designed web sites that have been screen-scraped over the years. So do many providers of images: for instance, the static map tiles served up to the Google Maps application, where you change the URI to address a different part of the Earth. An amusing example is Amazon product images, which can be manipulated in funny ways by putting extra strings in the URI.[16]\r\n\r\nIt is no accident that so many web sites are RESTful. A well-designed web site presents uncluttered representations of sensibly named resources, accessible through HTTP GET. Uncluttered representations are easy to parse or screen-scrape, and sensibly named resources are easy to address programmatically. Using GET to fetch a representation respects HTTP’s uniform interface. Design a web site by these rules, and it will fit well with my Resource-Oriented Architecture.\r\n\r\nNow that I’ve introduced the principles of REST, within the ROA, I’ll show how to use the ROA to design programmatic services that serve data across the network. These simple services provide client access to a data set. They may even let clients filter or search the data. But they don’t let clients modify the data or add to it. In Chapter 6 I talk about web services that let you store and modify information on the server. For now I’m focused on letting clients retrieve and search a data set.\r\n\r\nI’ve split the discussion because many excellent web services do nothing more than send useful information out to the people that need it. These are not toy services. Any web-based database search falls into this category: web searches, book searches, even the stereotypical stock quote web service (okay, that one’s probably just a toy). It’s more manageable to cover the simpler cases—which do happen in real life—than to try to cover everything in one huge chapter. The lessons in the next chapter build directly on what I say in this one. After all, a web service that lets clients modify information must also let them retrieve it.\r\n\r\nIn this chapter I design a web service that serves information about maps. It’s inspired by web applications like Google Maps, but those sites (and the third-party sites build atop them) are designed for ad hoc use by humans. As with any well-designed web site, you can consume Google Maps image tiles as a web service, but only somewhat illicitly and with difficulty. The fantasy service I design here is a programmer-friendly way to retrieve map data for any purpose, including a browser-based map navigation application like the Google Maps Ajax application.\r\n\r\nI won’t actually implement this service. An implementation would be too complex to fit in this book, and I don’t own the necessary data anyway. (Note, though, that in Chapter 7 I use the lessons of this chapter to implement a social bookmarking service similar to del.icio.us). This chapter and the next aim to teach you how to see a problem from a resource-oriented point of view. Along the way I hope to demonstrate that the ROA’s simple rules and uniform interface can represent an extremely powerful and fairly complex distributed service.",
    "slug" : "5-designing-read-only-resource-oriented-services",
    "pages" : [ {
      "title" : "Resource Design",
      "type" : "page",
      "htmlContent" : "<p>The standard<a id=\"I_indexterm5_tt422\" class=\"indexterm\"></a> design technique for object-oriented programs is to break a system down into its moving parts: its nouns. An object <span class=\"emphasis\"><em>is</em></span> something. Each noun (“Reader,” “Column,” “Story,” “Comment”) gets its own class, and behavior for interacting with the other nouns. By contrast, a good design technique for an RPC-style architecture is to break the system into its motions: its verbs. A procedure <span class=\"emphasis\"><em>does</em></span> something (“Subscribe to,” “Read,” “Comment on”).</p>\n<p>A resource <span class=\"emphasis\"><em>is</em></span> something, so I take an object-oriented approach to designing resources. In fact, the resource-oriented design strategy could be called “extreme object-oriented.” A class in a programming language can expose any number of methods and give them any names, but an HTTP resource exposes a uniform interface of at most six HTTP methods. These methods allow only the most basic operations: create (PUT or POST), modify (PUT), read (GET), and delete (DELETE). If necessary, you can extend this interface by overloading POST, turning a resource into a small RPC-style message processor, but you shouldn’t need to do that very often.</p>\n<p>A service can expose a Story resource, and a Story can exist in either draft or published form, but a client can’t publish a draft Story to the live site. Not in so many words, anyway: “publish” isn’t one of the six actions. A client <span class=\"emphasis\"><em>can</em></span> PUT a new representation for the Story which depicts it as published. The resource may then be available at a new URI, and may no longer require authentication to read. This is a subtle distinction, but one that keeps you from making dangerous design mistakes like exposing a special RPC-style “publish this article” URI through GET.</p>\n<p>The uniform interface means that a resource-oriented design must treat as objects what an object-oriented design might consider verbs. In the ROA, a Reader can’t subscribe to a regularly appearing Column, because “subscribe to” is not part of the uniform interface. There must be a third object, Subscription, representing that relationship between a Reader and a Column. This relationship object is subject to the uniform interface: it can be created, fetched (perhaps as a syndication feed), and deleted. “Subscription” might not show up as a first-class object in an object-oriented analysis, but it probably would appear as a table in an underlying database model. In a resource-oriented analysis, all object manipulation happens through resources that respect the uniform interface. Whenever I’m tempted to add a new method to one of my resource “classes,” I’ll resolve the problem by defining a new kind of resource.</p>",
      "slug" : "resource-design"
    }, {
      "title" : "Turning Requirements Into Read-Only Resources",
      "type" : "page",
      "htmlContent" : "<p>I’ve come up with a procedure to follow once you have an idea of what you want your program to do.<sup>[<a id=\"id378124\" href=\"#ftn.id378124\" class=\"footnote\">17</a>]</sup>It produces a set of resources that respond to a read-only subset of HTTP’s uniform interface:<a id=\"I_indexterm5_tt426\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt427\" class=\"indexterm\"></a> GET and possibly HEAD. Once you get to the end of this procedure, you should be ready to implement your resources in whatever language and framework you like. If you want to expose a larger subset of the uniform interface, I present a slightly extended procedure in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>.</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>Figure out the data set</p></li>\n  <li class=\"listitem\"><p>Split the data set into resources</p></li>\n </ol>\n</div>\n<p>For each kind of resource:</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" start=\"3\" type=\"1\">\n  <li class=\"listitem\"><p>Name the resources with URIs</p></li>\n  <li class=\"listitem\"><p>Design the representation(s) served to the client</p></li>\n  <li class=\"listitem\"><p>Integrate this resource into existing resources, using hypermedia links and forms</p></li>\n  <li class=\"listitem\"><p>Consider the typical course of events: what’s supposed to happen?</p></li>\n  <li class=\"listitem\"><p>Consider error conditions: what might go wrong?</p></li>\n </ol>\n</div>\n<p>In the sections to come, I’ll show, step by step, how following this procedure results in a RESTful web service that works like the Web. The only difference between what I do and what this procedure says is that I’m going to design all my resources at once, rather than take you through the same steps over and over again for each kind of resource.</p>",
      "slug" : "turning-requirements-into-read-only-resources"
    }, {
      "title" : "Figure Out the Data Set",
      "type" : "page",
      "htmlContent" : "<p>A web service<a id=\"ch05_datasets\" class=\"indexterm\"></a> starts with a data set, or at least an idea for one. This is the data set you’ll be exposing and/or getting your users to build. Earlier I said my data set would be maps, but which maps? This is a fantasy, so I’ll spread the net wide. My imaginary web service will serve maps in all projections and at all scales. Maps of the past, the present, and the supposed future. Maps of other planets and of individual cities. Political maps, road maps (which are just very detailed political maps), physical maps, geological maps, and topographic maps.</p>\n<p>This is not every kind of map. I’ll only serve maps that use a standard 2-D coordinate system: a way of identifying any given point on the map. The map need not be accurate, but it must be <span class=\"emphasis\"><em>addressable</em></span> (there’s that word again) using latitude and longitude. This means I won’t serve most maps of fictional places, maps that arbitrarily distort geography (the way subway maps do), or maps created before longitude could be measured accurately.</p>\n<p>Maps are made out of points: in this case, points of latitude and longitude. Every map contains an infinite number of points, but I can have a map without keeping every one of those points in my data set. I just need some image data and a couple basic pieces of information about the map: what are the latitude and longitude of the map’s corners? Or, if the map covers an entire planet, where on the map is the prime meridian?<sup>[<a id=\"id378283\" href=\"#ftn.id378283\" epub:type=\"noteref\" class=\"footnote\">18</a>]</sup>Given that information, I can use standard geographical algorithms to locate and move between the infinitely many points on a map.<sup>[<a id=\"id378366\" href=\"#ftn.id378366\" class=\"footnote\">19</a>]</sup></p>\n<p>A map is a map <span class=\"emphasis\"><em>of</em></span> some planet. (I say “planet” for simplicity’s sake, but my system will serve maps of moons, asteroids, and any other body that has latitude and longitude.) A map is an interesting part of my data set, but so is the actual planet it represents. It’s convenient to refer to points on a planet, independent of any particular map, even though a planet doesn’t have physical lines of latitude and longitude running around it. One obvious use: I want to be able to see what maps there are for a particular point on Earth. There are probably more maps covering a point in New York City than a point in the middle of the Pacific Ocean.</p>\n<p>So my data set includes not only the maps and the points on the maps, but the very planets themselves, and every point on the planets. It may seem hubristic to treat the entire planet Earth as a resource, but remember that I’m not obliged to give a complete account of the state of any resource. If my representation of “Earth” is just a list of my maps of Earth, that’s fine. The important thing is that the client can say “tell me about Earth,” as opposed to “tell me about the political map of Earth,” and I can give an answer.</p>\n<p>Speaking of New York City and the Pacific Ocean, some points on a planet are more interesting than others. Most points have nothing much underneath them. Some points correspond to a cornfield or flat lunar plain, and others correspond to a city or a meteor crater. Some points on a planet are <em class=\"firstterm\">places</em>. My users will be disproportionately interested in these points on the planets, and the corresponding points on my maps. They won’t want to specify these places as latitude-longitude pairs. Indeed, many of my users will be trying to figure out where something is: they’ll be trying to turn a known place into a point on a planet.</p>\n<p>Fortunately, most places have agreed-upon names, like “San Francisco,” “Eratosthenes,” and “Mount Whitney.” To make it easy for my users to identify places, my data set will include a mapping of place names to the corresponding points on the planets.<sup>[<a id=\"id378307\" href=\"#ftn.id378307\" epub:type=\"noteref\" class=\"footnote\">20</a>]</sup> Note that a single planet may have multiple places with the same name. There might be one “Joe’s Diner” on the Moon and a hundred on Earth, all distinct. If my user wants to find a particular Joe’s Diner on Earth, they’ll have to specify its location more precisely than just “Earth.”</p>\n<p>What about places that aren’t points, like cities, countries, and rivers? For simplicity’s sake, I’ll make a well-chosen point stand for an area on a planet. For instance, I’ll have a point on Earth near the geographic center of the U.S. that stands for the place called “the United States of America.” (This is obviously a vast oversimplification. Many real GIS mapping programs represent such areas as <span class=\"emphasis\"><em>lists</em></span> of points, which form lines or polygons.)</p>\n<p>Every place is of a certain type. Some places are cities, some mountains, some hot springs, some the current locations of ships, some areas of high pollution, and so on. I’ll keep track of the type of each place. Two places of different types may correspond to the same point on a planet: some unfortunate’s house may be built on top of a toxic waste dump.</p>\n<p>My service can find a place on a planet, given its name, type, or description. It can show the place on any appropriate maps, and it can find places nearby. Given a street address, my service can locate the corresponding point on the planet Earth, and show it on a road map. Given the name of a country, it can locate the corresponding place on the planet (as a representative point), and show it on a political map.</p>\n<p>If the client tries to find a place whose name is ambiguous (for instance, “Springfield”) my service can list all appropriate points within the given scope. The client will also be able to search for places of a certain type, without requiring the user give specific names. So a user can search for “pollution sites near Reno, Nevada.”</p>\n<h2>General Lessons</h2>\n<p>This is a standard first step in any analysis. Sometimes you get to choose your data set, and sometimes you’re trying to expose data you’ve already got. You may come back to this step as you see how best to expose your data set as resources. I went through the design process two or three times before I figured out that points on a planet needed to be considered distinct from points on any particular map. Even now, the data set is chaotic, just a bundle of ideas. I’ll give it shape when I divide it into resources.</p>\n<p>I presented the results of a search operation (“places on Earth called Springfield”) as part of the data set. An RPC-oriented analysis would treat these as actions that the client invokes—remember <code class=\"function\">doGoogleSearch</code> from the Google SOAP service. Compare this to how the Google web site works: in a resource-oriented analysis, ways of looking at the data are themselves pieces of data. If you consider an algorithm’s output to be a resource, running the algorithm can be as simple as sending a GET to that resource.</p>\n<p>So far I’ve said nothing about how a web service client can access this data set through HTTP. Right now I’m just gathering everything together in one place. I’m also ignoring any consideration of how these features should be implemented. If I actually planned to provide this service, the features I’ve announced so far would have a profound effect on the structure of my database, and I could start designing that part of the application as well. As it is, I’m going to wave away details of the backend implementation, and press on with the design of the web <a id=\"I_indexterm5_tt429\" class=\"indexterm\"></a>service.</p>",
      "slug" : "figure-out-the-data-set"
    }, {
      "title" : "Split the Data Set into Resources",
      "type" : "page",
      "htmlContent" : "<p>Once you have a data set in mind, the next step is to decide how to expose the data as<a id=\"I_indexterm5_tt430\" class=\"indexterm\"></a> HTTP resources. Remember that a resource is <span class=\"emphasis\"><em>anything interesting enough to be the target of a hypertext link</em></span>. Anything that might be referred to by name ought to have a name. Web services commonly expose three kinds of resources:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\"><span class=\"emphasis\"><em>Predefined one-off resources for especially important aspects of the application.</em></span></span>\n  </dt>\n  <dd>\n   <p>This includes top-level directories of other available resources. Most services expose few or no one-off resources.</p>\n   <p><span class=\"emphasis\"><em>Example:</em></span> A web site’s homepage. It’s a one-of-a-kind resource, at a well-known URI, which acts as a portal to other resources.</p>\n   <p><a class=\"ulink\" href=\"https://s3.amazonaws.com/\" target=\"_top\">The root URI of Amazon’s S3 service</a> serves a list of your S3 buckets. There’s only one resource of this type on S3. You can GET this resource, but you can’t DELETE it, and you can’t modify it directly: it’s modified only by operating on its buckets. It’s a predefined resource that acts as a directory of child resources (the buckets).</p>\n  </dd>\n  <dt>\n   <span class=\"term\"><span class=\"emphasis\"><em>A resource for every object exposed through the service.</em></span></span>\n  </dt>\n  <dd>\n   <p>One service may expose many kinds of objects, each with its own resource set. Most services expose a large or infinite number of these resources.</p>\n   <p><span class=\"emphasis\"><em>Example:</em></span> Every S3 bucket you create is exposed as a resource. You can create up to 100 buckets, and they can have just about any names you want (it’s just that your names can’t conflict with anyone else’s). You can GET and DELETE these resources, but once you’ve created them you can’t modify them directly: they’re modified only by operating on the objects they contain.</p>\n   <p>Every S3 object you create is also exposed as a resource. A bucket has room for any number of objects. You can GET, PUT, and DELETE these resources as you see fit.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">Resources representing the results of algorithms applied to the data set.</span>\n  </dt>\n  <dd>\n   <p>This includes collection resources, which are usually the results of queries. Most services either expose an infinite number of algorithmic resources, or they don’t expose any.</p>\n   <p><span class=\"emphasis\"><em>Example:</em></span> A search engine exposes an infinite number of algorithmic resources. There’s one for every search request you might possibly make. The Google search engine exposes one resource at <a class=\"ulink\" href=\"http://google.com/search?q=jellyfish\" target=\"_top\">http://google.com/search?q=jellyfish</a> (that’d be “a directory of resources about jellyfish”) and another at <a class=\"ulink\" href=\"http://google.com/search?q=chocolate\" target=\"_top\">http://google.com/search?q=chocolate</a> (“a directory of resources about chocolate”). Neither of these resources were explicitly defined ahead of time: Google translates <span class=\"emphasis\"><em>any</em></span> URI of the form <a class=\"ulink\" href=\"http://google.com/search?q={query}\" target=\"_top\">http://google.com/search?q={query}</a> into an algorithmic resource “a directory of resources about <em class=\"replaceable\"><code>{query}</code></em>.”</p>\n   <p>I didn’t cover this in much detail back in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>, but S3 also exposes an infinite number of algorithmic resources. If you’re interested, look back to <a class=\"xref\" href=\"ch03.html#bucket-getobjects\" title=\"Example&nbsp;3-7.&nbsp;S3 Ruby client: the S3::Bucket class (concluded)\">Example&nbsp;3-7</a> and the implementation of <code class=\"function\">S3::Bucket#getObjects</code>. Some of S3’s algorithmic resources work like a search engine for the objects in a bucket. If you’re only interested in objects whose names start with the string “movies/”, there’s a resource for that: it’s exposed through the URI <a class=\"ulink\" href=\"https://s3.amazonaws.com/MyBucket?Prefix=movies/\" target=\"_top\">https://s3.amazonaws.com/MyBucket?Prefix=movies/</a>. You can GET this resource, but you can’t manipulate it directly: it’s just a view of the underlying data set.</p>\n  </dd>\n </dl>\n</div>\n<p>Let’s apply these categories to my fantasy map service. I need one special resource that lists the planets, just as S3 has a top-level resource that lists the buckets. It’s reasonable to link to “the list of planets.” Every planet is a resource: it’s reasonable to link to “Venus.” Every map of a planet is also a resource: it’s reasonable to link to “the radar map of Venus.” The list of planets is a resource of the first type, since there’s only one of them. The planets and maps are also one-off resources: my service will serve a small number of maps for a small number of planets.</p>\n<p>Here are some of the resources so far:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The list of planets</p></li>\n  <li class=\"listitem\"><p>Mars</p></li>\n  <li class=\"listitem\"><p>Earth</p></li>\n  <li class=\"listitem\"><p>The satellite map of Mars</p></li>\n  <li class=\"listitem\"><p>The radar map of Venus</p></li>\n  <li class=\"listitem\"><p>The topographic map of Earth</p></li>\n  <li class=\"listitem\"><p>The political map of Earth</p></li>\n </ul>\n</div>\n<p>But I can’t just serve entire maps and let our clients figure out the rest. Then I’d just be running a hosting service for huge static map files: a RESTful service to be sure, but not a very interesting one. I must also serve <span class=\"emphasis\"><em>parts</em></span> of maps, oriented on specific points and places.</p>\n<p>Every point on a planet is potentially interesting, and so should be a resource. A point might represent a house, a mountain, or the current location of a ship. These are resources of the second type, because there are an infinite number of points on any planet. For every point on a planet there’s a corresponding point on one or more maps. This is why I limited myself to addressable maps. When the map can be addressed by latitude and longitude, it’s easy to turn a point on the planet into a point on a map.</p>\n<p>Here are some more of the resources so far:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>24.9195N 17.821E on Earth</p></li>\n  <li class=\"listitem\"><p>24.9195N 17.821E on the political map of Earth</p></li>\n  <li class=\"listitem\"><p>24.9195N 17.821E on Mars</p></li>\n  <li class=\"listitem\"><p>44N 0W on the geologic map of Earth</p></li>\n </ul>\n</div>\n<p>I’ll also serve<a id=\"I_indexterm5_tt431\" class=\"indexterm\"></a> <em class=\"firstterm\">places</em>: points on a planet identified by name rather than by coordinates. My fantasy database contains a large but finite number of places. Each place has a type, a latitude and longitude, and each might also have additional associated data. For instance, an area of high pollution should “know” what pollutant is there and what the concentration is. As with points identified by latitude and longitude, the client should be able to move from a place on the planet to the corresponding point on any map.</p>\n<div class=\"sidebar\">\n <a id=\"I_sidebar5_tt432\"></a>\n <div class=\"sidebar-title\">\n  Are Places Really Resources?\n </div>\n <p>Are places really resources of their own or are they just alternate names for the “point on a planet” resources I just defined? After all, every place is just a geographic point. Maybe I’ve got a situation where a single resource has two names: one based on latitude and longitude, and one based on a human-readable name.</p>\n <p>Well, consider a place representing the current location of a ship. It coincides with a specific point on the map, and it might be considered just an alternate name for that point. But in an hour, it’ll coincide with a different point on the map. A business, too, might move over time from one point on the map to another. A place in this service is not a location: it’s something that has location. A place has an independent life from the point on the map it occupies.</p>\n <p><a id=\"theroa\"></a>This is analogous to the discussion in <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a> about whether “version 1.0.3” and “the latest version” point to the same resource. It may happen that they point to the same data right now, but there are two different things there, and each might be the target of a hypertext link. I might link to one and say “Version 1.0.3 has a bug.” I might link to the other and say “download the latest version.” Similarly, I might link to a point on Earth and say “The treasure is buried here.” Or I might link to a place called “USS <span class=\"emphasis\"><em>Mutiny</em></span>” at the same coordinates and say “Our ship is currently here.” Places are their own resources, and they’re resources of the second type: each one corresponds to an object exposed through the service.</p>\n</div>\n<p>I said earlier that place names are ambiguous. There are about 6,000 (an approximation) cities and towns in the United States called Springfield. If a place name is unusual you can just say what planet it’s on, and it’s as good as specifying latitude and longitude. If a place name is common, you might have to specify more scoping information: giving a continent, country, or city along with the name of your place. Here are a few more sample resources:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The Cleopatra crater on Venus</p></li>\n  <li class=\"listitem\"><p>The Ubehebe crater on Earth</p></li>\n  <li class=\"listitem\"><p>1005 Gravenstein Highway North, Sebastopol, CA</p></li>\n  <li class=\"listitem\"><p>The headquarters of O’Reilly Media, Inc.</p></li>\n  <li class=\"listitem\"><p>The place called Springfield in Massachusetts, in the United States of America, on Earth</p></li>\n </ul>\n</div>\n<p>So far, this is pretty general stuff. Users want to know which maps we have, so we expose a one-off resource that lists the planets. Each planet is also a one-off resource that links to the available maps. A geographic point on a planet is addressable by latitude and longitude, so it makes sense to expose each point as an addressable resource. Every point on a planet corresponds to a point on one or more maps. Certain points are interesting and have names, so places on a planet are also accessible by name: a client can find them on the planet and then see that point on a map.</p>\n<p>All I’ve done so far is describe the interactions between parts of a predefined data set. I haven’t yet exposed any algorithmically-generated resources, but it’s easy enough to add some. The most common kind of algorithmic resource is the list of search results. I’ll allow my clients to search for places on a planet that have certain names, or that match place-specific criteria. Here are some sample algorithmic resources:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>Places on Earth called Springfield</p></li>\n  <li class=\"listitem\"><p>Container ships on Earth</p></li>\n  <li class=\"listitem\"><p>Craters on Mars more than 1 km in diameter</p></li>\n  <li class=\"listitem\"><p>Places on the moon named before 1900</p></li>\n </ul>\n</div>\n<p>Search results can be restricted to a particular area, not just a planet. Some more sample resources:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>Places in the United States named Springfield</p></li>\n  <li class=\"listitem\"><p>Sites of hot springs in Colorado</p></li>\n  <li class=\"listitem\"><p>Oil tankers or container ships near Indonesia</p></li>\n  <li class=\"listitem\"><p>Pizza restaurants in Worcester, MA</p></li>\n  <li class=\"listitem\"><p>Diners near Mount Rushmore</p></li>\n  <li class=\"listitem\"><p>Areas of high arsenic near 24.9195N 17.821E</p></li>\n  <li class=\"listitem\"><p>Towns in France with population less than 1,000</p></li>\n </ul>\n</div>\n<p>These are all algorithmically-generated resources, because they rely on the client providing an arbitrary search string (“Springfield”) or combining unrelated elements (“Mount Rushmore” + diners, or “France” + towns + “population &lt; 1000”).</p>\n<p>I could come up with new kinds of resources all day (in fact, that’s what I did while writing this). But all the resources I’ve thought up so far fit into five basic types, just enough to make the fantasy interesting. <a class=\"xref\" href=\"ch05.html#map-resource-types\" title=\"Example&nbsp;5-1.&nbsp;The five types of resources\">Example&nbsp;5-1</a> gives the master list of resource types.</p>\n<div class=\"example\">\n <a id=\"map-resource-types\"></a>\n <div class=\"example-title\">\n  Example&nbsp;5-1.&nbsp;The five types of resources\n </div>\n <div class=\"example-contents\">\n  <div class=\"orderedlist\">\n   <ol class=\"orderedlist\" type=\"1\">\n    <li class=\"listitem\"><p>The list of planets</p></li>\n    <li class=\"listitem\"><p>A place on a planet—possibly the entire planet—identified by name</p></li>\n    <li class=\"listitem\"><p>A geographic point on a planet, identified by latitude and longitude</p></li>\n    <li class=\"listitem\"><p>A list of places on a planet that match some search criteria</p></li>\n    <li class=\"listitem\"><p>A map of a planet, centered around a particular point</p></li>\n   </ol>\n  </div>\n </div>\n</div>\n<p>A real-life web service might define additional resources. Real web sites like Google Maps expose one obvious bit of functionality I haven’t mentioned: driving directions. If I wanted to enhance my service I might expose a new algorithmically-generated resource which treats a set of driving directions as a relationship between two places. The representation of this resource might be a list of textual instructions, with references to points on a road map.</p>\n<h2>General Lessons</h2>\n<p>A RESTful web service exposes both its data and its algorithms through resources. There’s usually a hierarchy that starts out small and branches out into infinitely many leaf nodes. The list of planets contains the planets, which contain points and places, which contain maps. The S3 bucket list contains the individual buckets, which contain the objects.</p>\n<p>It takes a while to get the hang of exposing an algorithm as a set of resources. Instead of thinking in terms of actions (“do a search for places on the map”), you need to think in terms of the results of that action (“the list of places on the map matching a search criteria”). You may find yourself coming back to this step if you find that your design doesn’t fit HTTP’s uniform interface.</p>",
      "slug" : "split-the-data-set-into-resources"
    }, {
      "title" : "Name the Resources",
      "type" : "page",
      "htmlContent" : "<p>I’ve decided <a id=\"ch05_names\" class=\"indexterm\"></a>on five types of resources (see <a class=\"xref\" href=\"ch05.html#map-resource-types\" title=\"Example&nbsp;5-1.&nbsp;The five types of resources\">Example&nbsp;5-1</a>). Now they need names. Resources are named with URIs, so let’s pick some. Remember, in a resource-oriented service the URI contains all the scoping information. Our URIs need to answer questions like: “Why should the server operate on this map instead of that map?” and “Why should the server operate on this place instead of that place?”</p>\n<p>I’ll root my web service at <span class=\"emphasis\"><em>http://maps.example.com/</em></span>. For brevity’s sake I sometimes use relative URIs in this chapter and the next; understand that they’re relative to <span class=\"emphasis\"><em>http://maps.example.com/</em></span>. If I say <code class=\"literal\">/Earth/political</code>, what I mean is <span class=\"emphasis\"><em>http://maps.example.com/Earth/political</em></span>.</p>\n<p>Now let’s consider the resources. The most basic resource is the list of planets. It makes sense to put this at the root URI, <span class=\"emphasis\"><em>http://maps.example.com/</em></span>. Since the list of planets encompasses the entire service, there’s no scoping information at all for this resource (unless you count the service version as scoping information).</p>\n<p>For the other resources I’d like to pick URIs that organize the scoping information in a natural way. There are three basic rules for URI design, born of collective experience:</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>Use path variables to encode hierarchy: <code class=\"literal\">/parent/child</code></p></li>\n  <li class=\"listitem\"><p>Put punctuation characters in path variables to avoid implying hierarchy where none exists: <code class=\"literal\">/parent/child1;child2</code></p></li>\n  <li class=\"listitem\"><p>Use query variables to imply inputs into an algorithm, for example: <code class=\"literal\">/search?q=jellyfish&amp;start=20</code></p></li>\n </ol>\n</div>\n<h2>Encode Hierarchy into Path Variables</h2>\n<p>Let’s make URIs <a id=\"ch05_scoping\" class=\"indexterm\"></a><a id=\"ch05_pathvariables\" class=\"indexterm\"></a><a id=\"ch05_hierarchy\" class=\"indexterm\"></a>for the second class of resource: planets and places on planets. There’s one piece of scoping information here: what planet are we looking at? (Earth? Venus? Ganymede?) This scoping information fits naturally into a hierarchy: the list of planets is at the top, and underneath it is every particular planet. Here are the URIs to some of my planets. I show hierarchy by using the slash character to separate pieces of scoping information.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Venus</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Mars</em></span></p></li>\n </ul>\n</div>\n<p>To identify geographical places by name I’ll just extend the hierarchy to the right. You’ll know you’ve got a good URI design when it’s easy to extend hierarchies by tacking on additional path variables. Here are some URIs to various places on planets:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Venus</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Venus/Cleopatra</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/France/Paris</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/Paris,%20France</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/Little%20Rock,AR</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/USA/Mount%20Rushmore</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/1005%20Gravenstein%20Highway%20North,%20Sebastopol,%20CA%2095472</em></span></p></li>\n </ul>\n</div>\n<p>We’re now deep into web service territory. Sending a GET to one of these URIs invokes a remote operation that takes a variable number of arguments, and can locate a place on a planet to any desired degree of precision. But the URIs themselves look like normal web site URIs you can bookmark, cache, put on billboards, and pass to other services as input—because that’s what they are. Path variables are the best way to organize scoping information that can be arranged hierarchically. The same structure you see in a filesystem, or on a static web site, can correspond to an arbitrarily long list of path variables.</p>\n<h2>No Hierarchy? Use Commas or Semicolons</h2>\n<p>The next resources<a id=\"ch05_CMMA\" class=\"indexterm\"></a><a id=\"ch05_commas\" class=\"indexterm\"></a><a id=\"ch05_SEMI\" class=\"indexterm\"></a><a id=\"ch05_semicolons\" class=\"indexterm\"></a> I need to name are geographic points on the globe, represented by latitude and longitude. Latitude and longitude are tied together, so a hierarchy isn’t appropriate. A URI like <span class=\"emphasis\"><em>/Earth/24.9195/17.821</em></span> doesn’t make sense. The slash makes it look like longitude is a subordinate concept to latitude, the way <code class=\"literal\">/Earth/Chicago</code> signals that Chicago is part of Earth.</p>\n<p>Instead of using the slash to put two pieces of scoping information into a hierarchy, I recommend combining them on the same level of a hierarchy with a punctuation character: usually the semicolon or the comma. I’m going to use a comma to separate latitude and longitude. This yields URIs like the following:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/24.9195,17.821</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Venus/3,-80</em></span></p></li>\n </ul>\n</div>\n<p>Latitude and longitude can also be used as scoping information to uniquely identify a named place. A human would probably identify Mount Rushmore as <code class=\"literal\">/Earth/USA/Mount%20Rushmore</code> or as <code class=\"literal\">/v1/Earth/USA/SD/Mount%20Rushmore</code>, but <code class=\"literal\">/v1/Earth/43.9,-103.46/Mount%20Rushmore</code> would be more precise.</p>\n<p>From a URI design perspective, the interesting thing here is that I’m stuffing two pieces of scoping information into one path variable. The first path variable denotes a planet, and the second one denotes both latitude and longitude. This kind of URI may look a little strange, because not many web sites or services use them right now, but they’re catching on.</p>\n<p>I recommend using commas when the order of the scoping information is important, and semicolons when the order doesn’t matter. In this case the order matters: if you switch latitude and longitude, you get a different point on the planet. So I used commas to separate the two numbers. It doesn’t hurt that people already use commas in written language to separate latitude and longitude: URIs should use our existing conventions when possible.</p>\n<p>In another case the order might not matter. Consider a web service that lets you mix colors of paint to get the shade you want. If you’re mixing red and blue paint, it doesn’t matter whether you pour the red into the blue or the blue into the red: you get purple either way. So the URI <code class=\"literal\">/color-blends/red;blue</code> identifies the same resource as <code class=\"literal\">/color-blends/blue;red</code>. I think the semicolon is better than the comma here, because the order doesn’t matter. This is just a typographical convention, but it helps a human being make sense of your web service URIs. The use of the semicolon feeds into an obscure idea called <a class=\"ulink\" href=\"http://www.w3.org/DesignIssues/MatrixURIs.html\" target=\"_top\">matrix URIs</a>, a way of defining key-value pairs in URIs without using query variables. Some newer standards, like WADL, offer support for matrix URIs. They’re especially useful if you ever need to put key-value pairs in the <span class=\"emphasis\"><em>middle</em></span> of a hierarchy.</p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>URIs can become very long, especially when there’s no limit to how deep you can nest the path variables. My web service might let clients name a place using a lot of explicit scoping information: <code class=\"literal\">/Earth/North%20America/USA/California/Northern%20California/San%20Francisco%20Bay%20Area/Sebastopol/...</code></p>\n <p>The HTTP standard doesn’t impose any restrictions on URI length, but real web servers and clients do. For instance, Microsoft Internet Explorer can’t handle URIs longer than 2,083 characters, and Apache won’t respond to requests for URIs longer than 8 KBs. If some of your resources are only addressable given a great deal of scoping information, you may have to accept some of it in HTTP headers, or use overloaded POST and put scoping information in the entity-body.</p>\n</div>\n<div class=\"sect3\" title=\"Map URIs\">\n <p>Now that I’ve designed the URI to a geographic point on a planet, what about the corresponding point on a road map or satellite map? After all, the main point of this service is to serve maps.</p>\n <p>Earlier I said I’d expose a resource for every point on a map. For simplicity’s sake, I’m not exposing maps of named places, only points of latitude and longitude. In addition to a set of coordinates or the name of a place, I need the name of the planet and the type of map (satellite map, road map, or whatever). Here are some URIs to maps of planets, places, and points:</p>\n <div class=\"itemizedlist\">\n  <ul class=\"itemizedlist\">\n   <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/radar/Venus</em></span></p></li>\n   <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/radar/Venus/65.9,7.00</em></span></p></li>\n   <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/geologic/Earth/43.9,-103.46</em></span></p></li>\n  </ul>\n </div>\n</div>\n<div class=\"sect3\" title=\"Scale\">\n <p>A URI like <code class=\"literal\">/satellite/Earth/41,-112</code> says nothing about how detailed the map should be. I’m going to extend the first path variable so that it doesn’t just specify the type of map: it can also specify the scale. I’ll expose a very small-scale map at <code class=\"literal\">/satellite.10/Earth</code>, a very large-scale map at <code class=\"literal\">/satellite.1/Earth</code>, and maps of other scales in between. I’ll choose a sensible default scale: probably a large scale like 2. Here are some possible URIs for the same map at different scales:</p>\n <div class=\"itemizedlist\">\n  <ul class=\"itemizedlist\">\n   <li class=\"listitem\"><p><code class=\"literal\">/satellite.10/Earth/41,-112</code>: 1:24,000; 2,000 feet to the inch. A map for hiking or prospecting. Centered on 41°N 112°W on Earth, this map would show the banks of Utah’s Great Salt Lake.</p></li>\n   <li class=\"listitem\"><p><code class=\"literal\">/satellite.5/Earth/41,-112</code>: 1:250,000; 4 miles to the inch. The scale of a highway map. Centered on 41°N 112°W, this map would show the northern suburbs of Salt Lake City.</p></li>\n   <li class=\"listitem\"><p><code class=\"literal\">/satellite.1/Earth/41,-112</code>: 1:51,969,000; 820 miles to an inch. (That’s 820 miles/inch <span class=\"emphasis\"><em>at the equator</em></span>. At this scale, the curvature of the earth distorts the scale of a 2D map.) The scale of a world map. Centered on 41°N 112°W, this map would show much of Utah and surrounding states.</p></li>\n  </ul>\n </div>\n <p>The scale affects not only the natural size of the map in pixels, but which features are shown. A small town would be represented in fair detail on a map at scale <code class=\"literal\">10</code>, but would only be a point at scale <code class=\"literal\">5</code> if it showed up at all.</p>\n <p>How did I decide that scale <code class=\"literal\">1</code> would be a large-scale map, and scale <code class=\"literal\">10</code> would be a small-scale map? Why not the reverse? I used a common technique for URI design. I exaggerated the decision I was making, figured out how the generalized situation should work, and then scaled my decision back down.</p>\n <p>Maps can always get more detailed,<sup>[<a id=\"id356079\" href=\"#ftn.id356079\" epub:type=\"noteref\" class=\"footnote\">21</a>]</sup> but there’s a limit how small they can get. If I decide to acquire some new data for my map service, I’d never buy a map that shows the world in less detail than the world map at scale <code class=\"literal\">1</code>. There’d be no point. However, it’s quite possible that I’ll find maps that are more detailed than the one at scale <code class=\"literal\">10</code>. When I find those maps, I can make them available through my service and assign them scales of 11, 12, and so on. If I’d assigned the most detailed map a scale of 1, I’d have to assign scales of 0, –1, and so on to any new maps. The URIs would look strange. This means larger numbers make good URIs for more detailed maps. I may never actually get those more detailed maps, but thinking about them revealed a truth about my URI design.<a id=\"I_indexterm5_tt433\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt434\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt435\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt436\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt437\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt438\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt439\" class=\"indexterm\"></a></p>\n</div>\n<h2>Algorithmic Resource? Use Query Variables</h2>\n<p>Most web <a id=\"ch05_query\" class=\"indexterm\"></a>applications don’t store much state in path variables: they use query variables instead. You may have seen URIs like this:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/colorpair?color1=red&amp;color2=blue</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/articles?start=20061201&amp;end=20071201</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/weblog?post=My-Opinion-About-Taxes</em></span></p></li>\n </ul>\n</div>\n<p>Those URIs would look better without the query variables:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/colorpair/red;blue</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/articles/20061201-20071201</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/weblog/My-Opinion-About-Taxes</em></span></p></li>\n </ul>\n</div>\n<p>Sometimes, though, query variables are appropriate. Here’s a Google search URI: <span class=\"emphasis\"><em><em class=\"filename\">http://www.google.com/search?q=jellyfish</em></em></span>. If the Google web application used path variables, its URIs would look more like directories and less like the result of running an algorithm: <span class=\"emphasis\"><em><em class=\"filename\">http://www.google.com/search/jellyfish</em></em></span>.</p>\n<p>Both of those URIs would be legitimate resource-oriented names for the resource “a directory of web pages about jellyfish.” The second one doesn’t look quite right, though, because of how we’re socialized to look at URIs. Path variables look like you’re traversing a hierarchy, and query variables look like you’re passing arguments into an algorithm. “Search” sounds like an algorithm. For example, <code class=\"literal\">http://www.google.com/directory/jellyfish\"</code> might work better than <code class=\"literal\">/search/jellyfish</code>.</p>\n<p>This perception of query variables is reinforced whenever we use the Web. When you fill out an HTML form in a web browser, the data you input is turned into query variables. There’s no way to type “jellyfish” into a form and then be sent to <em class=\"filename\">http://www.google.com/search/jellyfish</em>. The destination of an HTML form is hard-coded to <em class=\"filename\">http://www.google.com/search/</em>, and when you fill out that form you end up at <em class=\"filename\">http://www.google.com/search?q=jellyfish</em>. Your browser knows how to tack query variables onto a base URI. It doesn’t know how to substitute variables into a generic URI like <em class=\"filename\">http://www.google.com/search/{q}</em>.</p>\n<p>Because of this precedent, a lot of REST-RPC hybrid services use query variables when it would be more idiomatic to use path variables. Even when a hybrid service happens to expose resources RESTfully, the resources have URIs that make them look like function calls: URIs such as <em class=\"filename\">http://api.flickr.com/services/rest/?method=flickr.photos.search&amp;tags=penguin</em>. Compare that URI to the corresponding URI on the human-usable Flickr site: <em class=\"filename\">http://flickr.com/photos/tags/penguin</em>.</p>\n<p>I’ve managed to avoid query variables so far: every planet, every point on a planet, and every corresponding map is addressable without them. I don’t really like the way query variables look in a URI, and including them in a URI is a good way to make sure that URI gets ignored by tools like proxies, caches, and web crawlers. Think back to the Google Web Accelerator I mentioned in <a class=\"xref\" href=\"ch04.html#safety-and-idempotence-matter\" title=\"Why safety and idempotence matter\">Why safety and idempotence matter</a>” in <a class=\"xref\" href=\"ch05.html#split-the-data-set\" title=\"Split the Data Set into Resources\">Split the Data Set into Resources</a>. It never pre-fetches a URI that includes a query variable, because that’s the kind of URI exposed by poorly-designed web applications that abuse HTTP GET. My service won’t abuse GET, of course, but outside applications have no way of knowing that.</p>\n<p>But I’ve got one more type of resource to represent—lists of search results—and I’m out of tricks. It doesn’t make sense to keep going down the hierarchy of place, and I can’t keep piling on punctuation just to avoid the impression that my service is running an algorithm. Besides, this last type of resource <span class=\"emphasis\"><em>is</em></span> the result of running an algorithm. My search algorithm finds places that match map-specific criteria, just as a search engine finds web sites that match the client’s keywords. Query variables are perfectly appropriate for naming algorithmic resources.</p>\n<p>The search interface for places can get as complex as I need it to be. I could expose a <code class=\"literal\">name</code> query variable for place names and <code class=\"literal\">pollutant</code> for sites of high pollution and <code class=\"literal\">cuisine</code> for restaurants and all sorts of other query variables. But let’s imagine I’ve got the technology to make it simple. The only query variable I’ll add is <code class=\"literal\">show</code>, which lets the client specify in natural language what feature(s) they’re searching for. The server will parse the client’s values for <code class=\"literal\">show</code> and figure out what places should be in the list of search results.</p>\n<p>In <a class=\"xref\" href=\"ch05.html#split-the-data-set\" title=\"Split the Data Set into Resources\">Split the Data Set into Resources</a>” earlier in this chapter, I gave a whole lot of sample search resources: “places on Earth called Springfield,” and so on. Here’s how a client might use <code class=\"literal\">show</code> to construct URIs for some of those resources.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth?show=Springfield</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Mars?show=craters+bigger+than+1km</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/Indonesia?show=oil+tankers&amp;show=container+ships</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/USA/Mount%20Rushmore?show=diners</em></span></p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://maps.example.com/Earth/24.9195,17.821?show=arsenic</em></span></p></li>\n </ul>\n</div>\n<p>Note that all of these URIs are searching the planet, not any particular map.<a id=\"I_indexterm5_tt440\" class=\"indexterm\"></a></p>\n<h2>URI Recap</h2>\n<p>That’s<a id=\"I_indexterm5_tt441\" class=\"indexterm\"></a> a lot of details. After all, this is the first place where my fantasy resources come into contact with the real world of HTTP. Even so, my service only supports three basic kinds of URI. To recap, here they are:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The list of planets: <code class=\"literal\">/</code>.</p></li>\n  <li class=\"listitem\"><p>A planet or a place on a planet: <code class=\"literal\">/<em class=\"replaceable\"><code>{planet}</code></em>/[<em class=\"replaceable\"><code>{scoping-information}</code></em>/][<em class=\"replaceable\"><code>{place-name}</code></em>]</code>: The value of the optional variable <em class=\"replaceable\"><code>{scoping-information}</code></em> will be a hierarchy of place names like <code class=\"literal\">/USA/New%20England/Maine/</code> or it will be a latitude/longitude pair. The value of the optional variable <em class=\"replaceable\"><code>{name}</code></em> will be the name of the place.</p><p>This type of URI can have values for <code class=\"literal\">show</code> tacked onto its query string, to search for places near the given place.</p></li>\n  <li class=\"listitem\"><p>A map of a planet, or a point on a map: <code class=\"literal\">/<em class=\"replaceable\"><code>{map-type}</code></em><em class=\"replaceable\"><code>{scale}</code></em>/<em class=\"replaceable\"><code>{planet}</code></em>/[<em class=\"replaceable\"><code>{scoping-information}</code></em>]</code>. The value of the optional variable <em class=\"replaceable\"><code>{scoping-information}</code></em> will always be a latitude/longitude pair. The value of the optional variable <em class=\"replaceable\"><code>{scale}</code></em> will be a dot and a number.<a id=\"I_indexterm5_tt442\" class=\"indexterm\"></a></p></li>\n </ul>\n</div>",
      "slug" : "name-the-resources"
    }, {
      "title" : "Design Your Representations",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>I’ve decided <a id=\"ch05_representations\" class=\"indexterm\"></a>which resources I’m exposing, and what their URIs will look like. Now I need to decide what data to send when a client requests a resource, and what data format to use. This is just a warmup, since much of <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> is devoted to a catalog of useful representation formats. Here, I have a specific service in mind, and I need to decide on a format (or a set of formats) that can meet the goals of any RESTful representation: to convey the current state of the resource, and to link to possible new application and resource states.</p> \n  <h2>The Representation Talks About the State of the Resource</h2> \n  <p>The main purpose of any representation is to convey the state of the resource. Remember that<a id=\"I_indexterm5_tt444\" class=\"indexterm\"></a> “resource state” is just any information about the underlying resource. In this case, the state is going to answer questions like: what does this part of the world look like, graphically? Where exactly is that meteor crater, in latitude and longitude? Where are the nearby restaurants and what are their names? Where are the container ships right now? Representations of different resources will represent different items of state.</p> \n  <h2>The Representation Links to Other States</h2> \n  <p>The other job of the representation is to provide levers of state. A resource’s representation ought to link to nearby resources (whatever “nearby” means in context): possible new <span class=\"emphasis\"><em>application states</em></span>. The goal here is <span class=\"emphasis\"><em>connectedness</em></span>: the ability to get from one resource to another by following links.</p> \n  <p>This is how web sites work. You don’t surf the Web by typing in URIs one after the other. You might type in one URI to get to a site’s home page, but then you surf by following links and filling out forms. One web page (a “state” of the web site) contains links to other, related web pages (nearby “states”).</p> \n  <p>Of course, a computer program can’t look at a document and decide which links it wants to follow. It only has the wants the programmer gives it. If a web service includes links in its representations, the representations must also contain machine-readable signals as to where each link leads. A programmer can write his or her client to pick up on those signals and decide which link matches up with the goals of the moment.</p> \n  <p>These links are the levers of application state. If a resource can be modified with PUT, or it can spawn new resources in response to POST, its representation ought to also expose the levers of <span class=\"emphasis\"><em>resource state</em></span>. The representation ought to provide any necessary information about what the POST or PUT request should look like. I’m getting a little ahead of myself here, since all the resources in this chapter are read-only. For now, I’ll be creating representations that expose the levers of application state.</p> \n  <h2>Representing the List of Planets</h2> \n  <p>The “home page” of my map service is a good place to start, and a good place to introduce the issues behind choosing a representation format. Basically, I want to display a list of links to the planets for which I have maps. What’s a good format for a representation of a list?</p> \n  <p>There’s always plain text. This representation in <a class=\"xref\" href=\"ch05.html#example_5_2\" title=\"Example&nbsp;5-2.&nbsp;A plain-text representation of the planet list\">Example&nbsp;5-2</a> shows one planet per line: the URI and then the name.</p> \n  <div class=\"example\"> \n   <a id=\"example_5_2\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-2.&nbsp;A plain-text representation of the planet list \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">http://maps.example.com/Earth Earth\nhttp://maps.example.com/Venus Venus\n...</pre> \n   </div> \n  </div> \n  <p>This is simple but it requires a custom parser. I generally think a structured data format is better than plain text, especially as representations get more complex. (Of course, if plain text is what you’re serving, there’s no need to dress it up as something else.) JSON <a id=\"I_indexterm5_tt445\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt446\" class=\"indexterm\"></a>keeps the simplicity of plain text but adds a little bit of structure (see <a class=\"xref\" href=\"ch05.html#example_5_3\" title=\"Example&nbsp;5-3.&nbsp;A JSON representation of the planet list\">Example&nbsp;5-3</a>).</p> \n  <div class=\"example\"> \n   <a id=\"example_5_3\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-3.&nbsp;A JSON representation of the planet list \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">[{\"url\": \"http://maps.example.com/Earth\", \"description\": \"Earth\"},\n {\"url\": \"http://maps.example.com/Venus\", \"description\": \"Venus\"},\n ...]</pre> \n   </div> \n  </div> \n  <p>The downside is that neither JSON nor plain text are generally considered “hypermedia” formats. Another popular option is a custom XML vocabulary, either with or without a schema definition (see <a class=\"xref\" href=\"ch05.html#xml-map-representation\" title=\"Example&nbsp;5-4.&nbsp;An XML representation of the planet list\">Example&nbsp;5-4</a>).</p> \n  <div class=\"example\"> \n   <a id=\"xml-map-representation\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-4.&nbsp;An XML representation of the planet list \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;?xml version=\"1.0\" standalone='yes'?&gt;\n&lt;planets&gt;\n &lt;planet href=\"http://maps.example.com/Earth\" name=\"Earth\" /&gt;\n &lt;planet href=\"http://maps.example.com/Venus\" name=\"Venus\" /&gt;\n ...\n&lt;/planets&gt;</pre> \n   </div> \n  </div> \n  <p>These days, a custom XML vocabulary seems to be the default choice for web service representations. XML is excellent for representing documents, but I think it’s actually pretty rare that you would have to come up with a custom vocabulary. The basic problems have already been solved, and most of the time you can reuse an existing XML vocabulary. As it happens, there’s already an XML vocabulary for communicating lists of links called Atom.</p> \n  <p>I cover Atom in detail in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>. Atom will work to represent the list of planets, but it’s not a very good fit. Atom is designed for lists of published texts, and most of its elements don’t make sense in this context—what does it mean to know the “author” of a planet, or the date it was last modified? Fortunately, there’s another good XML language for displaying lists of links:<a id=\"I_indexterm5_tt447\" class=\"indexterm\"></a> XHTML. <a class=\"xref\" href=\"ch05.html#xhtml-map-list\" title=\"Example&nbsp;5-5.&nbsp;An XHTML representation of the planet list\">Example&nbsp;5-5</a> shows one more representation of the planet list, and this is the one I’m actually going to use.</p> \n  <div class=\"example\"> \n   <a id=\"xhtml-map-list\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-5.&nbsp;An XHTML representation of the planet list \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;\n &lt;title&gt;Planet List&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ul class=\"planets\"&gt;\n &lt;li&gt;&lt;a href=\"/Earth\"&gt;Earth&lt;/a&gt;&lt;/li&gt;\n &lt;li&gt;&lt;a href=\"/Venus\"&gt;Venus&lt;/a&gt;&lt;/li&gt;\n ...\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n   </div> \n  </div> \n  <p>It might seem a little odd to use XHTML, a technology associated with the human web, as a representation format for a web service. I chose it for this example because HTML solves many general markup problems and you’re probably already familiar with it. I’d probably choose it for a real web service, for exactly the same reasons. Though it’s human-readable and easy to render attractively, nothing prevents well-formed HTML from being processed automatically like XML. XHTML is also extensible. I turned a generic XHTML list into a list of “planets” using XHTML’s <code class=\"literal\">class</code> attribute. This is a simple example of an XHTML <em class=\"firstterm\">microformat</em>: a way of adding semantic meaning to XHTML’s markup tags. I cover some standard microformats in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>.</p> \n  <h2>Representing Maps and Points on Maps</h2> \n  <p>What about the maps themselves? What do I serve if someone asks for a satellite map of the Moon? The obvious thing to send is an image, either in a traditional graphics format like<a id=\"I_indexterm5_tt448\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt449\" class=\"indexterm\"></a> PNG or as a SVG scalar graphic. Except for the largest-scale maps, these images will be huge. Is this OK? It depends on the audience for my web service.</p> \n  <p>If I’m serving clients with ultra-high bandwidth who expect to process huge chunks of map data, then huge files are exactly what they want. But it’s more likely my clients will be like the users of existing map applications like Google and Yahoo! Maps: clients who want smaller-sized maps for human browsing.</p> \n  <p>If the client asks for a medium-scale hiking map centered around 43N 71W, it’s surely a waste of bandwidth to send a map of the whole world centered around that point. Instead I should send a little bit of a hiking map, centered around that point, along with navigation links that let the client change the focus of the map. Even if the client asks for a detailed map of the whole world, I don’t need to send the entire map: I can send part of the map and let the client fetch the rest as needed.</p> \n  <p>This is more or less how the online map sites work. If you visit <em class=\"filename\">http://maps.google.com/</em>, you get a political map centered on the continental United States: that’s its representation of “a map of Earth.” If you visit <em class=\"filename\">http://maps.google.com/maps?q=New+Hampshire</em>, you get a road map centered on Concord, the capital city. In either case, the map is divided into square “tile” images 256 pixels on a side. The client (your web browser) fetches tiles as needed and stitches them together to form a navigable map.</p> \n  <p>Google<a id=\"I_indexterm5_tt450\" class=\"indexterm\"></a> Maps splits the globe into a grid of 256-pixel square tiles, pretty much ignoring issues of latitude and longitude, and generates static images for each tile. It does this 10 times, once for every zoom level. This is efficient (though it does use a lot of storage space), but for pedagogical purposes I’ve chosen a conceptually simpler system. I’m assuming my map service can dynamically generate and serve a 256 ×256 image at any scale, centered on any point of latitude and longitude on any map.</p> \n  <div class=\"tip\" title=\"Tip\"> \n   <h3 class=\"title\">Tip</h3> \n   <p>Google Maps’s static tile system is more complex because it adds another coordinate system to the map. Besides latitude and longitude, you can also refer to a place by which tile it’s on. This makes the navigation representation simpler, at the expense of complicating the design.</p> \n  </div> \n  <p>When the client requests a point on a map, I’ll serve a hypermedia file that includes a link to a tiny map image (a single, dynamically-generated tile) centered on that point. When the client requests a map of an entire planet, I’ll pick a point on that planet somewhat arbitrarily and serve a hypermedia file that links to an image centered on that point. These hypermedia files will include links to adjacent points on the map, which will include more links to adjacent points, and so on. The client can follow the navigation links to stitch many tiles together into a map of any desired size.</p> \n  <p>So <a class=\"xref\" href=\"ch05.html#xhtml-map-representation\" title=\"Example&nbsp;5-6.&nbsp;An XHTML representation of the road map of Earth\">Example&nbsp;5-6</a> is one possible representation of <span class=\"emphasis\"><em>http://maps.example.com/road/Earth</em></span>. Like my representation of the list of planets, it uses XHTML to convey resource state and to link to “nearby” resources. The resource state here is information about a certain point on the map. The “nearby” resources are nearby in a literal sense: they’re nearby points.</p> \n  <div class=\"example\"> \n   <a id=\"xhtml-map-representation\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-6.&nbsp;An XHTML representation of the road map of Earth \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;\n &lt;title&gt;Road Map of Earth&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n...\n&lt;img class=\"map\" src=\"/road.2/Earth/images/37.0,-95.png\" alt=\"Map tile\"/&gt;\n...\n&lt;a class=\"map_nav\" href=\"46.0518,-95.8\"&gt;North&lt;/a&gt;\n&lt;a class=\"map_nav\" href=\"41.3776,-89.7698\"&gt;Northeast&lt;/a&gt;\n&lt;a class=\"map_nav\" href=\"36.4642,-84.5187\"&gt;East&lt;/a&gt;\n&lt;a class=\"map_nav\" href=\"32.3513,-90.4459\"&gt;Southeast&lt;/a&gt;\n...\n&lt;a class=\"zoom_in\" href=\"/road.1/Earth/37.0;-95.8\"&gt;Zoom out&lt;/a&gt;\n&lt;a class=\"zoom_out\" href=\"/road.3/Earth/37.0;-95.8\"&gt;Zoom in&lt;/a&gt;\n...\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n   </div> \n  </div> \n  <p>Now when a client requests the resource “a road map of Earth” at the URI <code class=\"literal\">/road/Earth</code>, the representation they get is not an enormous, insanely detailed image that they can’t deal with. It’s a small XHTML document, one that includes links to several other resources.</p> \n  <p>A human being can just look at this document and know what it means. A computer program doesn’t have that ability; it has to be programmed in advance by someone who can think about a whole class of these documents and write code to find which bits have the meaning. A web service works by making promises that it will serve representations of resources with a certain structure. That’s why my representation is full of semantic cues like “zoom_in” and “Northeast”. Programmers can write clients that pick up on the semantic cues.</p> \n  <h2>Representing the Map Tiles</h2> \n  <p>The representation of a road map of Earth, given in <a class=\"xref\" href=\"ch05.html#xhtml-map-representation\" title=\"Example&nbsp;5-6.&nbsp;An XHTML representation of the road map of Earth\">Example&nbsp;5-6</a>, has a lot of links in it. Most of these are links to XHTML documents that look a lot like “a road map of Earth” does: they’re representations of points on the map at various zoom levels. The most important link, though, is the one in the <code class=\"literal\">IMG</code> tag. That tag’s <code class=\"literal\">src</code> attribute references the URI <span class=\"emphasis\"><em>http://maps.example.com/road/Earth.8/images/37.0,-95.png</em></span>.</p> \n  <p>This is a new kind of resource, and I haven’t really considered it before, but it’s not hard to figure out what it is. This resource is “an image centered around 37°N 95.8°W on the road map of Earth.” In my service, the representation of <span class=\"emphasis\"><em>that</em></span> resource will be a 256 ×256 image showing the geographic center of the continental U.S. (see <a class=\"xref\" href=\"ch05.html#map-tile-center-of-us\" title=\"Figure&nbsp;5-1.&nbsp;A representation for /road/Earth.3/images/37.0,-95.png. Image data courtesy Google Maps.\">Figure&nbsp;5-1</a>).</p> \n  <div class=\"figure\"> \n   <a id=\"map-tile-center-of-us\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject5_tt451\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24568.png\" alt=\"A representation for /road/Earth.3/images/37.0,-95.png. Image data courtesy Google Maps.\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;5-1.&nbsp;A representation for /road/Earth.3/images/37.0,-95.png. Image data courtesy Google Maps. \n   </div> \n  </div> \n  <p>The image in <a class=\"xref\" href=\"ch05.html#map-tile-center-of-us\" title=\"Figure&nbsp;5-1.&nbsp;A representation for /road/Earth.3/images/37.0,-95.png. Image data courtesy Google Maps.\">Figure&nbsp;5-1</a> is 256 pixels square, and represents an area of the Earth about 625 miles square. This image is distinct from the representation of “39°N 95.8°W on the road map of Earth.” that would be an XHTML file like the one in <a class=\"xref\" href=\"ch05.html#xhtml-map-representation\" title=\"Example&nbsp;5-6.&nbsp;An XHTML representation of the road map of Earth\">Example&nbsp;5-6</a>. The XHTML file would include this image by reference, and also link to a lot of nearby points on the map.</p> \n  <p>Here’s another example: if the client requests <code class=\"literal\">/road.8/Earth/32.37,-86.30</code>, my service will send an XHTML representation whose <code class=\"literal\">IMG</code> tag references <code class=\"literal\">/road.8/Earth/images/32.37,-86.30.png</code> (see <a class=\"xref\" href=\"ch05.html#figure_5_2\" title=\"Figure&nbsp;5-2.&nbsp;A representation for /road.8/Earth/images/37.0,-95.png. Image data courtesy Google Maps.\">Figure&nbsp;5-2</a>). This is a very detailed road map centered on 32.37°N, 86.30°W on Earth.</p> \n  <div class=\"figure\"> \n   <a id=\"figure_5_2\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject5_tt452\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24570.png.jpg\" alt=\"A representation for /road.8/Earth/images/37.0,-95.png. Image data courtesy Google Maps.\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;5-2.&nbsp;A representation for /road.8/Earth/images/37.0,-95.png. Image data courtesy Google Maps. \n   </div> \n  </div> \n  <p>That image too is 256 pixels square, but it represents an area of the Earth only a half-mile square. Scale makes the difference.</p> \n  <p>The important thing here is not the exact setup of the tile system or the precise format of the URIs to the tile resources. What’s important is what I’m putting into my representations. The URI <code class=\"literal\">/road/Earth</code> refers to a resource: “a road map of Earth”. You’d expect a pretty big image as the representation of that resource. You’d at least expect one that showed all of Earth. But my service sends an XHTML document that references a 256 ×256 tile image that doesn’t even cover four U.S. states. How can that document be a good representation for “a road map of Earth”?</p> \n  <p>A representation conveys the state of its resource, but it doesn’t have to convey the <span class=\"emphasis\"><em>entire</em></span> state of the resource. It just has to convey <span class=\"emphasis\"><em>some</em></span> state. The representation of “Earth” (coming up in a bit) isn’t the actual planet Earth, and the representation of “a road map of the Earth” can reference just a simple image tile. But this representation does more than that: the XHTML file links this arbitrarily chosen point on the map to other nearby points on the part of the map directly to the north of this tile, the part directly to the east, and so on. The client can follow these links to other resources and piece together a larger picture. The map is made of a bunch of connected resources, and you can get as many graphical tiles as you need by following the links. So in a sense, this representation does convey all the state there is about the road map of Earth. You can get as much of that state as you want by following its links to other resources.</p> \n  <p>It’s worth repeating here that if my clients actually need detailed multigigabyte maps, there’s no point in me chopping up the state of the map into these tiny tiles. It’d be more efficient to have the representation of <code class=\"literal\">/road/Earth?zoom=1</code> convey the entire state of the map with one huge image. I’ve designed for clients that only really want part of a map, and wouldn’t know what to do with one huge map of the earth if I gave it to them. The clients I have in mind can consume the XHTML files, load the appropriate images, and automatically follow links to stitch together a map that’s as big as necessary. You could write an Ajax client for my web service that worked like the Google Maps application.</p> \n  <h2>Representing Planets and Other Places</h2> \n  <p>I’ve shown representations for the planet list, for maps of the planets, and for points on the maps. But how are you supposed to get from the planet list to, say, the road map of Earth? Presumably you click “Earth” in the planet list, sending a GET request to <code class=\"literal\">/Earth</code>, and get back a representation of Earth. This representation includes a bunch of links to maps of Earth. At this point you follow a second link to the road map of Earth. Well, I just described the representation of Earth. My representation of a planet contains whatever useful information I have about the planet, as well as a set of links to other resources: maps of the planet (see <a class=\"xref\" href=\"ch05.html#xhtml-planet-representation\" title=\"Example&nbsp;5-7.&nbsp;An XHTML representation of a place: the planet Earth\">Example&nbsp;5-7</a>).</p> \n  <div class=\"example\"> \n   <a id=\"xhtml-planet-representation\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-7.&nbsp;An XHTML representation of a place: the planet Earth \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;&lt;title&gt;Earth&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n &lt;dl class=\"place\"&gt;\n  &lt;dt&gt;name&lt;/dt&gt; &lt;dd&gt;Earth&lt;/dd&gt;\n  &lt;dt&gt;maps&lt;/dt&gt;\n   &lt;dd&gt;\n    &lt;ul class=\"maps\"&gt;\n     &lt;li&gt;&lt;a class=\"map\" href=\"/road/Earth\"&gt;Road&lt;/a&gt;&lt;/li&gt;\n     &lt;li&gt;&lt;a class=\"map\" href=\"/satellite/Earth\"&gt;Satellite&lt;/a&gt;&lt;/li&gt;\n     ...\n    &lt;/ul&gt;\n   &lt;/dd&gt;\n  &lt;dt&gt;type&lt;/dt&gt; &lt;dd&gt;planet&lt;/dd&gt;\n  &lt;dt&gt;description&lt;/dt&gt; \n   &lt;dd&gt;\n     Third planet from Sol. Inhabited by bipeds so amazingly primitive \n     that they still think digital watches are a pretty neat idea.\n   &lt;/dd&gt;\n &lt;/dl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n   </div> \n  </div> \n  <p>I’ve chosen to represent places as lists of key-value pairs. Here, the “place” is the planet Earth itself. Earth in this system is a named place, just like San Francisco or Egypt. I’m representing it using the<a id=\"I_indexterm5_tt453\" class=\"indexterm\"></a> <code class=\"literal\">dd</code> tag: HTML’s standard way of presenting a set of key-value pairs. Like any place, Earth has a <code class=\"literal\">name</code>, a <code class=\"literal\">type</code>, a <code class=\"literal\">description</code>, and a list of <code class=\"literal\">maps</code>: links to all the resources that map this place.</p> \n  <p>Why am I representing a planet as a place? Because now my clients can parse the representation of a planet with the same code they use to parse the representation of a place. <a class=\"xref\" href=\"ch05.html#xhtml-place-representation\" title=\"Example&nbsp;5-8.&nbsp;An XHTML representation of a place: Mount Rushmore\">Example&nbsp;5-8</a> is a representation for Mount Rushmore on Earth. You might get this XHTML file back in response to a GET request for <code class=\"literal\">/Earth/USA/Mount%20Rushmore</code>.</p> \n  <div class=\"example\"> \n   <a id=\"xhtml-place-representation\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-8.&nbsp;An XHTML representation of a place: Mount Rushmore \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;&lt;title&gt;Mount Rushmore&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ul class=\"places\"&gt;\n\n&lt;li&gt;\n&lt;dl class=\"place\"&gt;\n &lt;dt&gt;name&lt;/dt&gt; &lt;dd&gt;Mount Rushmore&lt;/dd&gt;\n &lt;dt&gt;location&lt;/dt&gt;\n   &lt;dd&gt;\n    &lt;a class=\"coordinates\" href=\"/Earth/43.9,-95.9\"&gt;43.9&amp;deg;N 95.8&amp;deg;W&lt;/a&gt;\n   &lt;/dd&gt;\n &lt;dt&gt;maps&lt;/dt&gt; \n  &lt;dd&gt;\n   &lt;ul class=\"maps\"&gt;\n    &lt;li&gt;&lt;a class=\"map\" href=\"/road/Earth/43.9,-95.9\"&gt;Road&lt;/a&gt;&lt;/dd&gt;\n    &lt;li&gt;&lt;a class=\"map\" href=\"/satellite/Earth/43.9,-95.9\"&gt;Satellite&lt;/a&gt;&lt;/li&gt;\n    ...\n   &lt;/ul&gt;\n  &lt;/dd&gt;\n &lt;dt&gt;type&lt;/dt&gt; &lt;dd&gt;monument&lt;/dd&gt;\n &lt;dt&gt;description&lt;/dt&gt; \n  &lt;dd&gt;\n   Officially dedicated in 1991. Under the jurisdiction of the \n   &lt;a href=\"http://www.nps.gov/\"&gt;National Park Service&lt;/a&gt;.\n  &lt;/dd&gt;\n&lt;/dl&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n   </div> \n  </div> \n  <p>Rather than serve a map image of Mount Rushmore, or even an XHTML page that links to that image, this representation links to resources I’ve already defined: maps of the geographical point where Mount Rushmore happens to be located. Those resources take care of all the imagery and navigation details. The purpose of this resource is to talk about the state of the place, and what it looks like on a map is just one bit of that state. There’s also its <code class=\"literal\">name</code>, its <code class=\"literal\">type</code> (“monument”), and its <code class=\"literal\">description</code>. The only difference between the representation of a planet and that of a place is that a place has a <code class=\"literal\">location</code> in its definition list, and a planet doesn’t. A client can parse both representations with the same code.</p> \n  <p>You may also have noticed that you don’t have to write a special client for this web service at all. You can use a plain old web browser. Starting at the home page (<span class=\"emphasis\"><em>http://maps.example.com/</em></span>), you click a link (“Earth”) to select a planet. You get the representation shown in <a class=\"xref\" href=\"ch05.html#xhtml-planet-representation\" title=\"Example&nbsp;5-7.&nbsp;An XHTML representation of a place: the planet Earth\">Example&nbsp;5-7</a>, and you click “Road” to see a road map of Earth. Then you navigate that map by clicking links (“North,” “Zoom out”). My web service is also a web site! It’s not a very pretty web site, because it’s designed to be used by a computer program, but nothing prevents a human from consuming it (or debugging it) with a web browser.</p> \n  <p>If you get only one thing out of this book, I hope it’s that this idea starts seeming natural to you (assuming it didn’t before). Web services are just web sites for robots. My map service is particularly web site-like: it connects its resources together with hypermedia, the hypermedia representations happen to be HTML documents, and (so far) it doesn’t use any features that web browsers don’t support. But all RESTful resource-oriented web services partake of the nature of the Web, even if you can’t use them with a standard web browser.</p> \n  <p><a class=\"xref\" href=\"ch05.html#xhtml-point-representation\" title=\"Example&nbsp;5-9.&nbsp;An XHTML representation of the point 43.9°N 103.46°W on Earth\">Example&nbsp;5-9</a> shows one more representation: the representation of a point on the map.</p> \n  <div class=\"example\"> \n   <a id=\"xhtml-point-representation\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-9.&nbsp;An XHTML representation of the point 43.9°N 103.46°W on Earth \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;\n &lt;title&gt;43.9&amp;deg;N 103.46&amp;deg;W on Earth&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;p&gt; \n Welcome to \n &lt;a class=\"coordinates\" href=\"/Earth/43.9,-103.46\"&gt;43.9&amp;deg;N \n  103.46&amp;deg;W&lt;/a&gt; \n on scenic &lt;a class=\"place\" href=\"/Earth\"&gt;Earth&lt;/a&gt;.\n&lt;/p&gt;\n\n&lt;p&gt;See this location on a map:&lt;/p&gt;\n\n&lt;ul class=\"maps\"&gt;\n &lt;li&gt;&lt;a class=\"map\" href=\"/road/Earth/43.9,-95.9\"&gt;Road&lt;/a&gt;&lt;/li&gt;\n &lt;li&gt;&lt;a class=\"map\" href=\"/satellite/Earth/43.9,-95.9\"&gt;Satellite&lt;/a&gt;&lt;/li&gt;\n ...\n&lt;/ul&gt;\n\n&lt;p&gt;Things that are here:&lt;/p&gt;\n\n&lt;ul class=\"places\"&gt;\n &lt;li&gt;&lt;a href=\"/Earth/43.9,-95.9/Mount%20Rushmore\"&gt;Mount Rushmore&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;form id=\"searchPlace\" method=\"get\" action=\"\"&gt;\n &lt;p&gt;\n  Show nearby places, features, or businesses: \n  &lt;input name=\"show\" repeat=\"template\" /&gt; &lt;input class=\"submit\" /&gt;\n &lt;/p&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n   </div> \n  </div> \n  <p>This representation consists entirely of links: links to maps centered around this point, and links to places located at this point. It has no state of its own. It’s just a gateway to other, more interesting resources.</p> \n  <h2>Representing Lists of Search Results</h2> \n  <p>I’ve shown representations for the <a id=\"ch05_search\" class=\"indexterm\"></a>planet list, for a planet, for points and places on a planet, and for the maps themselves. What about my algorithmic resources, the search results? What’s a good representation of the resource “diners near Mount Rushmore” (<code class=\"literal\">/Earth/USA/Mount%20Rushmore?show=diners</code>)? What about “Areas of high arsenic near 24.9195°N 17.821°E” (<code class=\"literal\">/Earth/24.9195,17.821?show=arsenic</code>)?</p> \n  <p>A list of search results is of course associated with the place being “searched,” so a representation of “diners near Mount Rushmore” should link to the place “Mount Rushmore.” That’s a start.</p> \n  <p>When the client searches in or around a place, they’re searching for more places. Whether the search string is an ambiguous place name (“Springfield”) or a more general description of a place (“diners,” “arsenic”), the results will be places on the map: cities named Springfield, diners, or sites with high arsenic readings. So a list of search results takes one place (“Mount Rushmore”), and associates certain other places (“Joe’s Diner”) with it.</p> \n  <p>A list of search results, then, can be nothing but a list of links to resources I’ve already defined: named places on the map. If the client is interested in a place, it can follow the appropriate link and find out about its state.</p> \n  <p><a class=\"xref\" href=\"ch05.html#springfield-search\" title=\"Example&nbsp;5-10.&nbsp;The representation of “a list of places called Springfield in the United States”\">Example&nbsp;5-10</a> shows the representation of a set of search results. The search is an attempt to find places called “Springfield” in the United States: its URI would be <code class=\"literal\">/Earth/USA?show=Springfield</code>.</p> \n  <div class=\"example\"> \n   <a id=\"springfield-search\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-10.&nbsp;The representation of “a list of places called Springfield in the United States” \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;&lt;title&gt;Search results: \"Springfield\"&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;p&gt;\n Places matching &lt;span class=\"searchterm\"&gt;Springfield&lt;/span&gt; \n in or around \n &lt;a class=\"place\" href=\"/Earth/USA\"&gt;the United States of America&lt;/a&gt;:\n&lt;/p&gt;\n\n&lt;ul&gt;\n &lt;li&gt;\n  &lt;a class=\"place\" href=\"/Earth/USA/IL/Springfield\"&gt;Springfield, IL&lt;/a&gt;\n &lt;/li&gt;\n &lt;li&gt;\n  &lt;a class=\"place\" href=\"/Earth/USA/MA/Springfield\"&gt;Springfield, MA&lt;/a&gt;\n &lt;/li&gt;\n &lt;li&gt;\n  &lt;a class=\"place\" href=\"/Earth/USA/MO/Springfield\"&gt;Springfield, MO&lt;/a&gt;\n &lt;/li&gt;\n ...\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n   </div> \n  </div> \n  <p class=\"keep-together\">This representation is made up almost entirely of links to places. There’s the link to the place that was searched, “the United States of America” (a place of type “country”). There are also links to various places that matched the search criteria. Each of these places is a resource, and exposes a representation that looks like <a class=\"xref\" href=\"ch05.html#xhtml-place-representation\" title=\"Example&nbsp;5-8.&nbsp;An XHTML representation of a place: Mount Rushmore\">Example&nbsp;5-8</a>. Each link contains enough scoping information to uniquely identify the Springfield in question.</p> \n  <p>A client can follow the links in the representations to find information about the places, as well as maps of them. <a class=\"xref\" href=\"ch05.html#linked-resources\" title=\"Figure&nbsp;5-3.&nbsp;Where can you go from the list of search results?\">Figure&nbsp;5-3</a> shows some of the links you can follow from <code class=\"literal\">/Earth/USA?show=Springfield</code>.</p> \n  <div class=\"figure\"> \n   <a id=\"linked-resources\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"mediaobject\"> \n     <a id=\"I_mediaobject5_tt454\"></a> \n     <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24572.png\" alt=\"Where can you go from the list of search results?\"> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;5-3.&nbsp;Where can you go from the list of search results? \n   </div> \n  </div> \n  <p>Google Maps presents search results by sewing image tiles together to make a large-scale map, and annotating the map with graphical markers. You can write a client for this web service that does the same thing. The first step is to build the large-scale map. The client follows the initial link to <code class=\"literal\">/Earth/USA</code> and gets a representation like the one in <a class=\"xref\" href=\"ch05.html#xml-map-representation\" title=\"Example&nbsp;5-4.&nbsp;An XML representation of the planet list\">Example&nbsp;5-4</a>. This gives the client the address of one graphical tile. The client can get adjacent tiles by following navigation links, and stitch them together into a large-scale tile map of the whole country.</p> \n  <p>The second step is to stick markers on the map, one for each search result. To find out where a marker should go, the client follows one of the search result links, fetching a representation like the one in <a class=\"xref\" href=\"ch05.html#xhtml-place-representation\" title=\"Example&nbsp;5-8.&nbsp;An XHTML representation of a place: Mount Rushmore\">Example&nbsp;5-8</a>. This representation lists the latitude and longitude of the appropriate Springfield.</p> \n  <p>That’s potentially a lot of link following, but my representations are simple and so are the rules for going from one to another. I’ve spread out my data set over a huge number of resources, and made it easy to find the resource you want by following links. This strategy works on the human web, and it works on the programmable web too.<a id=\"I_indexterm5_tt455\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt456\" class=\"indexterm\"></a></p>\n </body>\n</html>",
      "slug" : "design-your-representations"
    }, {
      "title" : "Link the Resources to Each Other",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>Since I designed all my resources in parallel, they’re already full of links to each other (see <a class=\"xref\" href=\"ch05.html#linked-resources\" title=\"Figure&nbsp;5-3.&nbsp;Where can you go from the list of search results?\">Figure&nbsp;5-3</a>). A client can get the service’s “home page” (the planet list), follow a link to a specific planet, follow another link to a specific map, and then follow navigation and zoom links to jump around the map. A client can do a search for places that meet certain criteria, click one of the search results to find out more about the place, then follow another link to locate the place on a map.</p> \n  <p>One thing is still missing, though. How is the client supposed to get to a list of search results? I’ve set up rules for what the URI to a set of search results looks like, but if clients have to follow rules to generate URIs, my service isn’t well connected.</p> \n  <p>I want to make it possible for a client to get from <code class=\"literal\">/Earth/USA/Mount%20Rushmore</code> to <code class=\"literal\">/Earth/USA/Mount%20Rushmore?show=diners</code>. But it does no good to link to “diners” specifically: that’s just one of infinitely many things a client might search for. I can’t put infinitely many links in the representation of <code class=\"literal\">/Earth/USA/Mount%20Rushmore</code> just in case someone decides to search for pet stores or meteor craters near Mount Rushmore.</p> \n  <p>HTML <a id=\"I_indexterm5_tt457\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt458\" class=\"indexterm\"></a>solves this problem with forms. By sending an appropriate form in a representation, I can tell the client how to plug variables into a query string. The form represents infinitely many URIs, all of which follow a certain pattern. I’m going to extend my representations of places (like the one in <a class=\"xref\" href=\"ch05.html#xhtml-place-representation\" title=\"Example&nbsp;5-8.&nbsp;An XHTML representation of a place: Mount Rushmore\">Example&nbsp;5-8</a>) by including this HTML form (see <a class=\"xref\" href=\"ch05.html#place-search-form\" title=\"Example&nbsp;5-11.&nbsp;An HTML form for searching a place\">Example&nbsp;5-11</a>).</p> \n  <div class=\"example\"> \n   <a id=\"place-search-form\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;5-11.&nbsp;An HTML form for searching a place \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"screen\">&lt;form id=\"searchPlace\" method=\"get\" action=\"\"&gt;\n &lt;p&gt;\n  Show places, features, or businesses: \n  &lt;input id=\"term\" repeat=\"template\" name=\"show\" /&gt; \n  &lt;input class=\"submit\" /&gt;\n &lt;/p&gt;\n&lt;/form&gt;&lt;/screen&gt;</pre> \n   </div> \n  </div> \n  <p>A person using a web browser would see this form as a set of GUI elements: a text box, a button, and a set of labels. They’d put some data into the text box, click the button, and be taken to another URI. If they were at <code class=\"literal\">/Earth/USA/Mount%20Rushmore</code>, and they’d typed in “diners,” their web browser would make a GET request to <code class=\"literal\">/Earth/USA/Mount%20Rushmore?show=diners</code>. An automatic client can’t display the form to a human, but it would work the same way. Given a preprogrammed desire to search a place, it would look for the <code class=\"literal\">searchPlace</code> form and use the form definition as a guide to constructing the URI <code class=\"literal\">/Earth/USA/Mount%20Rushmore?show=diners</code>.</p> \n  <div class=\"note\" title=\"Note\"> \n   <h3 class=\"title\">Note</h3> \n   <p>You probably haven’t seen the <code class=\"literal\">repeat=\"template\"</code> syntax before. It’s a feature of XHTML 5, which is still being designed as this book goes to press. Occasionally in this chapter and the next, I’ll introduce a feature of XHTML 5 to work around the shortcomings of XHTML 4 as a hypermedia format.</p> \n   <p>The problem here is that my service accepts any number of values for the query variable <code class=\"literal\">show</code>. A client can make a simple search such as <code class=\"literal\">?show=diners</code> or perform a complicated search such as<code class=\"literal\"> ?show=diners&amp;show=arsenic&amp;show=towns&amp;show=oil+tankers</code>.</p> \n   <p>A form in XHTML 4 could allow the latter request if it showed four text boxes, all called <code class=\"literal\">show</code>. But an HTML form can never show an <span class=\"emphasis\"><em>arbitrary number</em></span> of text boxes, which is what I need to truly capture the capabilities of my service. XHTML 5 has a feature called the<a id=\"I_indexterm5_tt459\" class=\"indexterm\"></a> <em class=\"firstterm\">repetition model</em>, which allows me to express an arbitrary number of text boxes without writing an infinitely long HTML page.</p> \n  </div> \n  <div class=\"figure\"> \n   <a id=\"figure_5_4\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"mediaobject\"> \n     <a id=\"I_mediaobject5_tt460\"></a> \n     <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24574.png\" alt=\"The path from the service root to a diner near Mount Rushmore\"> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;5-4.&nbsp;The path from the service root to a diner near Mount Rushmore \n   </div> \n  </div> \n  <p>Now my service is better connected. It’s now possible to get from the list of planets to a description of a diner near Mount Rushmore (assuming there is one). <a class=\"xref\" href=\"ch05.html#figure_5_4\" title=\"Figure&nbsp;5-4.&nbsp;The path from the service root to a diner near Mount Rushmore\">Figure&nbsp;5-4</a> illustrates the journey. Starting at the service root (<code class=\"literal\">/</code>), the client selects the planet Earth (<code class=\"literal\">/Earth</code>). The client uses the HTML form in that representation to search for places called “Mount Rushmore” on Earth (<code class=\"literal\">/Earth?show=Mount%20Rushmore</code>). Hopefully the top search result will be Mount Rushmore itself, and the client can follow the first search result link to <code class=\"literal\">/Earth/USA/Mount%20Rushmore</code>. The representation of Mount Rushmore has a search form too, and the client enters “diners” in that. Assuming there are any nearby diners, the client can follow the first search result link to find a diner near Mount Rushmore.</p> \n  <p>The search function doesn’t just keep clients from having to mint their own URIs. It resolves human place names, which are always fuzzy, into canonical resource URIs. A client should be also be able to search for “Mount Rushmore National Monument” and get <code class=\"literal\">/Earth/USA/Mount%20Rushmore</code> as a search result, just like the client can search for “Springfield” and pick which Springfield they mean. This is a useful feature for any client that lets users type in their own place names.</p>\n </body>\n</html>",
      "slug" : "link-the-resources-to-each-other"
    }, {
      "title" : "The HTTP Response",
      "type" : "page",
      "htmlContent" : "<p>I’m almost <a id=\"ch05_responsecode\" class=\"indexterm\"></a>done with this design. I know what data I’m serving. I know which HTTP requests clients will send when asking for the data. I know how the data will be represented as I serve it. I still have to consider the HTTP response itself. I know what my possible representations will look like, and that’s what’s going in the entity-body, but I haven’t yet considered the possible response codes or the HTTP headers I’ll send. I also need to think about possible error conditions: cases where my response signals an error instead of delivering a representation.</p>\n<h2>What’s Supposed to Happen?</h2>\n<p>This step of the design is conceptually simple, but it’s the gateway to where you’re going to spend much of your implementation time: making sure that client requests are correctly turned into responses.</p>\n<p>Most read-only resources have a pretty simple typical course of events. The user sends a GET request to a URI, and the server sends back a happy response code like<a id=\"I_indexterm5_tt462\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt463\" class=\"indexterm\"></a> 200 (“OK”), some HTTP headers, and a representation. A HEAD request works the same way, but the server omits the representation. The only main question is which HTTP headers the client should send in the request, and which ones the server should send in the response.</p>\n<p>The HTTP response headers are a fairly large toolkit, and most of them don’t apply to this simple service. (For descriptions of the standard HTTP headers, see <a class=\"xref\" href=\"apc.html\" title=\"Appendix&nbsp;C.&nbsp;The HTTP Header Top Infinity\">Appendix&nbsp;C</a>.) In my service, the main HTTP response header <a id=\"I_indexterm5_tt464\" class=\"indexterm\"></a>is <code class=\"literal\">Content-Type</code>, which tells the client the media type of the representation. My media types are <code class=\"literal\">application/xhtml+xml</code> for the map representations and search results, and <code class=\"literal\">image/png</code> for the map images. If you’ve done any server-side web programming you already know about <code class=\"literal\">Content-Type</code>: every HTTP server and framework uses it.</p>\n<p>I don’t use HTTP request headers very often. I think it’s best if the client can tweak the representation by tweaking the URI to the resource, rather than tweaking the request headers. But there is one set of headers that I think ought to be built into every HTTP client, every web service, and every service hacker’s brain: the ones that make conditional GET possible.</p>\n<div class=\"sect3\" title=\"Conditional HTTP GET\">\n <p>Conditional HTTP GET saves<a id=\"I_indexterm5_tt465\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt466\" class=\"indexterm\"></a> client and server time and bandwidth. It’s implemented with two response<a id=\"I_indexterm5_tt467\" class=\"indexterm\"></a> headers (<code class=\"literal\">Last-Modified</code> and <code class=\"literal\">ETag</code>), and two request <a id=\"I_indexterm5_tt468\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt469\" class=\"indexterm\"></a>headers (<code class=\"literal\">If-Modified-Since</code> and <code class=\"literal\">If-None-Match</code>).</p>\n <p>I cover conditional GET in detail in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, but the discussion there is somewhat detached from specific services. This discussion is tied to the map service, and covers just enough to get you thinking about conditional GET as you design your services.</p>\n <p>Certain resources are likely to be very popular: “A road map of the United States,” “a satellite map of Earth,” or “restaurants in New York City.” A single client is likely to make a request for certain resources many times over its lifespan.</p>\n <p>But this data is not constantly changing. Map data stays pretty constant over time. Satellite imagery is updated every few months at most. Restaurants come and go, but not on a minute-by-minute basis. Only a few resources are based on data that’s constantly changing. Most of the time, the client’s second and subsequent HTTP requests for a resource are wasted. They could have just reused the representation from their first request. But how are they supposed to know this?</p>\n <p>This is where conditional GET comes in. Whenever a server serves a representation, it should include a time value for the <code class=\"literal\">Last-Modified</code> HTTP header. This is the last time the data underlying the representation was changed. For “a road map of the United States,” the <code class=\"literal\">Last-Modified</code> is likely to be the time the map imagery was first imported into the service. For “restaurants in New York City,” the <code class=\"literal\">Last-Modified</code> may only be a few days old: whenever a restaurant was last added to the database of places. For “container ships near San Francisco,” the value of <code class=\"literal\">Last-Modified</code> may be only a few minutes prior.</p>\n <p>The client can store this value of <code class=\"literal\">Last-Modified</code> and use it later. Let’s say the client requests “a road map of the United States” and gets a response that says:</p>\n <pre class=\"screen\">Last-Modified: Thu, 30 Nov 2006 20:00:51 GMT</pre>\n <p>The second time the client makes a GET request for that resource, it can provide that time in the <code class=\"literal\">If-Modified-Since</code> header:</p>\n <pre class=\"screen\">GET /road/Earth HTTP/1.1\nHost: maps.example.com\nIf-Modified-Since: Thu, 30 Nov 2006 20:00:51 GMT</pre>\n <p>If the underlying data changed between the two requests, the server sends a response code of 200 (“OK”) and provides the new representation in the entity-body. That’s the same thing that happens during a normal HTTP request. But if the underlying data has not changed, the server sends a response code of 304 (“Not Modified”), and omits any entity-body. Then the client knows it’s okay to reuse its cached representation: the underlying data hasn’t changed since the first request.</p>\n <p>There’s a little more to it than that (again, I cover this in more detail in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>). But you can see the advantages. A client that fetches detailed maps is going to be making lots of HTTP requests. If most of those HTTP requests give a status code of 304, the client will be able to reuse old images and place lists instead of downloading new ones. Everyone saves time and bandwidth.</p>\n</div>\n<h2>What Might Go Wrong?</h2>\n<p>I also need to plan for requests I can’t fulfill. When I hit an error condition I’ll send a response code in the 3xx, 4xx, or 5xx range, and I may provide supplementary data in HTTP headers. If they provide an entity-body, it’ll be a document describing an error condition, not a representation of the requested resource (which, after all, couldn’t be served).</p>\n<p>I provide a full list of the HTTP response codes in <a class=\"xref\" href=\"apb.html\" title=\"Appendix&nbsp;B.&nbsp;The HTTP Response Code Top 42\">Appendix&nbsp;B</a>, along with examples where you might use each of them. Here are some likely error conditions for my map application:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The client may try to access a map that doesn’t exist, like <code class=\"literal\">/road/Saturn</code>. I understand what the client is asking for, but I don’t have the data. The proper response code in this situation is 404 (“Not Found”). I don’t need to send an entity-body along with this response code, though it’s helpful for debugging.</p></li>\n  <li class=\"listitem\"><p>The client may use a place name that doesn’t exist in my database. The end user might have mistyped the name, or used a name the application doesn’t recognize. They may have described the place instead of naming it, they might have the right name but the wrong planet. Or they might just be constructing URIs with random strings in them.</p><p>I can return a<a id=\"I_indexterm5_tt470\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt471\" class=\"indexterm\"></a> 404 response code, as in the previous example, or I can try to be helpful. If I can’t exactly match a requested place name, like <code class=\"literal\">/Earth/Mount%20Rushmore%20National%20Monument</code>, I might run it through my search engine and see if it comes up with a good match. If I do get a match, I can offer a redirect to that place: say, <code class=\"literal\">/Earth/43.9,-95.9/Mount%20Rushmore</code>.</p><p>The response code for the helpful case here would be <a id=\"I_indexterm5_tt472\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt473\" class=\"indexterm\"></a>303 (“See Other”), and the HTTP response header <code class=\"literal\">Location</code> would contain the URI of the resource I think the client was “really” trying to request. It’s the client’s responsibility to take the hint and request that URI, or not.</p><p>If I try a search and still have no idea what place the client is talking about, I’ll return a response code of 404 (“Not Found”).</p></li>\n  <li class=\"listitem\"><p>The client may use logically impossible latitudes or longitudes, like <code class=\"literal\">500,-181</code> (500 degrees north latitude, 181 degrees west longitude). A 404 (“Not Found”) is a good response here, just as it is for a place that doesn’t exist. But a <a id=\"I_indexterm5_tt474\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt475\" class=\"indexterm\"></a>400 (“Bad Request”) would be more precise.</p><p>What’s the difference between the two cases? Well, there’s nothing obviously wrong with a request for a nonexistent place name like “Tanhoidfog.” It just doesn’t exist <span class=\"emphasis\"><em>right now</em></span>. Someone could name a town or a business “Tanhoidfog” and then it would be a valid place name. The client doesn’t know there’s no such place: one of the nice things a client can do with my map service is check to see which places really exist.</p><p>But there is something wrong with a request for the latitude/longitude pair <code class=\"literal\">500,-181</code>. The laws of geometry prevent such a place from ever existing. A minimally knowledgeable client could have figured that out before making the request. A 400 response code is appropriate in that case: the problem is the client’s fault for even making the request.</p></li>\n  <li class=\"listitem\"><p>A search for places on a map might return no search results. There might be no racing speedways near Sebastopol, CA. This is disappointing, but it’s not an error. I can treat this like any other search: send a<a id=\"I_indexterm5_tt476\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt477\" class=\"indexterm\"></a> 200 response code (“OK”) and a representation. The representation would include a link to the place that was searched, along with an empty list of search results.</p></li>\n  <li class=\"listitem\"><p>The server may be overloaded with requests and unable to fulfil this particular request. The response code is<a id=\"I_indexterm5_tt478\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt479\" class=\"indexterm\"></a> 503 (“Service Unavailable”). An alternative is to refuse to handle the request at all.</p></li>\n  <li class=\"listitem\"><p>The server may not be functioning correctly. This might be due to missing or corrupted data, a software bug, a hardware failure, or any of the other things that can go wrong with a computer program. In this case the response code is<a id=\"I_indexterm5_tt480\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt481\" class=\"indexterm\"></a> 500 (“Internal Server Error”).</p><p>This a frustrating response code (the whole 5xx series is frustrating, actually) because there’s nothing the client can do about it. Many web application frameworks automatically send this error code when an exception happens on the server side.</p></li>\n </ul>\n</div>",
      "slug" : "the-http-response"
    }, {
      "title" : "Conclusion",
      "type" : "page",
      "htmlContent" : "<p>I’ve now got a design for a map web service that’s simple enough for a client to use without a lot of up-front investment, and useful enough to be the driver for any number of useful programs. It’s so closely attuned to the philosophy of the Web that you can use it with a web browser. It’s RESTful and resource-oriented. It’s addressable, stateless, and well connected.</p>\n<p>It’s also read-only. It assumes that my clients have nothing to offer but their insatiable appetites for my data. Lots of existing web services work this way, but read-only web services are only half the story. In the next chapter I’ll show you how clients can use HTTP’s uniform interface to create new resources of their own.<a id=\"I_indexterm5_tt483\" class=\"indexterm\"></a><a id=\"I_indexterm5_tt484\" class=\"indexterm\"></a></p>",
      "slug" : "conclusion"
    } ]
  }, {
    "title" : "6. Designing Read/Write Resource-Oriented Services",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services</h2>\n  </div>\n </div>\n</div>\n<p>In <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> I designed a <a id=\"ch06_oneresource\" class=\"indexterm\"></a><a id=\"ch06_readwriteresource\" class=\"indexterm\"></a><a id=\"ch06_resourceoriented\" class=\"indexterm\"></a>fantasy web service that serves map images of various planets,<sup>[<a id=\"id355227\" href=\"#ftn.id355227\" epub:type=\"noteref\" class=\"footnote\">22</a>]</sup>navigation information for moving around the map, and information about places on the planets: restaurants, meteor craters, and so on. That’s a huge amount of data to serve, but it can all be contained in a premade data set. There’s nothing a user can do to put his own data on the server.</p>\n<p>Clients for the map service in the previous chapter can do all sorts of interesting things with maps and places, but they can’t rely on the server to track anything except the preset data. In this chapter I expand the scope of the map service. It becomes less like a search engine’s web service and more like Amazon S3 and the Flickr and del.icio.us APIs. It not only serves data, it stores data on its clients’ behalf.</p>\n<p>How open should I make the new service? A totally open service would allow users to provide their own versions of everything in the standard data set. Clients could create their own planets, and upload custom maps and databases of places. If I was too lazy to find map data myself (I am), I could even start with an empty database and allow the community to populate my entire data set. That’s what del.icio.us and Flickr did.</p>\n<p>Is this a good idea? When designing a web service, which levers of state should you expose, and which should you keep to yourself? That depends on what your users want to do, and how much of their applications you’re willing to write for them.</p>\n<p>A client uses a web service because the service has something it wants: some data, a place to store data, or a secret algorithm. A web service is an abstraction layer, like an operating system API or a programming language library. If you wrote a math library for working with infinite series, and all your users started using it to estimate the value of π, you’d probably add that feature as a higher-level library function. That way all your users could use the same well-tested π-estimation code instead of each person writing his or her own implementation. Similarly, if all your users implement the same features on top of your web service, you might help them out by moving those features into the service. If all your users want to add certain kinds of custom data to the data set, you can start supporting a new kind of resource, so they don’t have to define their own local structures.</p>\n<p>My goal here is fairly modest: to illustrate the concepts of resource-oriented service design. It’s certainly possible to design a mapping service that starts off with an empty data set and gets everything through user contributions, but such a service would have more moving parts than I’ve got concepts to explain. If I decided to show you that service, this chapter would start out well, but once I’d explained all the concepts I’d still have a lot of domain-specific design work to do, and it would get boring.</p>\n<p>I want the map service to have about as many moving parts as I have new concepts to explain. I’m going to expand the previous chapter’s service just enough so that clients can annotate the map with custom places. Every custom place is associated with a user account, and may be public or private to that account.</p>",
    "textContent" : "Chapter 6. Designing Read/Write Resource-Oriented Services\r\n\r\nIn Chapter 5 I designed a fantasy web service that serves map images of various planets,[22]navigation information for moving around the map, and information about places on the planets: restaurants, meteor craters, and so on. That’s a huge amount of data to serve, but it can all be contained in a premade data set. There’s nothing a user can do to put his own data on the server.\r\n\r\nClients for the map service in the previous chapter can do all sorts of interesting things with maps and places, but they can’t rely on the server to track anything except the preset data. In this chapter I expand the scope of the map service. It becomes less like a search engine’s web service and more like Amazon S3 and the Flickr and del.icio.us APIs. It not only serves data, it stores data on its clients’ behalf.\r\n\r\nHow open should I make the new service? A totally open service would allow users to provide their own versions of everything in the standard data set. Clients could create their own planets, and upload custom maps and databases of places. If I was too lazy to find map data myself (I am), I could even start with an empty database and allow the community to populate my entire data set. That’s what del.icio.us and Flickr did.\r\n\r\nIs this a good idea? When designing a web service, which levers of state should you expose, and which should you keep to yourself? That depends on what your users want to do, and how much of their applications you’re willing to write for them.\r\n\r\nA client uses a web service because the service has something it wants: some data, a place to store data, or a secret algorithm. A web service is an abstraction layer, like an operating system API or a programming language library. If you wrote a math library for working with infinite series, and all your users started using it to estimate the value of π, you’d probably add that feature as a higher-level library function. That way all your users could use the same well-tested π-estimation code instead of each person writing his or her own implementation. Similarly, if all your users implement the same features on top of your web service, you might help them out by moving those features into the service. If all your users want to add certain kinds of custom data to the data set, you can start supporting a new kind of resource, so they don’t have to define their own local structures.\r\n\r\nMy goal here is fairly modest: to illustrate the concepts of resource-oriented service design. It’s certainly possible to design a mapping service that starts off with an empty data set and gets everything through user contributions, but such a service would have more moving parts than I’ve got concepts to explain. If I decided to show you that service, this chapter would start out well, but once I’d explained all the concepts I’d still have a lot of domain-specific design work to do, and it would get boring.\r\n\r\nI want the map service to have about as many moving parts as I have new concepts to explain. I’m going to expand the previous chapter’s service just enough so that clients can annotate the map with custom places. Every custom place is associated with a user account, and may be public or private to that account.",
    "slug" : "6-designing-read-write-resource-oriented-services",
    "pages" : [ {
      "title" : "User Accounts as Resources",
      "type" : "page",
      "htmlContent" : "<p>If I’m <a id=\"ch06_useraccounts\" class=\"indexterm\"></a><a id=\"ch06_resusr\" class=\"indexterm\"></a>going to let anyone with a web service client annotate our worlds, I need some way of distinguishing his custom places from the standard places in my database. I’ll also need a way to distinguish one user’s places from everyone else’s places. Basically, I need user accounts.</p>\n<p>When a client annotates Earth or Mars with a custom place, the place he has created is associated with his user account. This way a client can find his place later. If the client chooses to expose that place publicly, other clients will see links to it in the representations they fetch.</p>\n<p>Most existing web services have some kind of system for letting people sign up for user accounts or<a id=\"I_indexterm6_tt485\" class=\"indexterm\"></a> “API keys.” Even services that only give read-only access often make you sign up for an account, so they can track and ration your usage. If you’ve followed along with all of the examples in the book, by this time you have an Amazon Web Services account, a del.icio.us account, and a<a id=\"I_indexterm6_tt486\" class=\"indexterm\"></a> Flickr account.</p>\n<p>Yahoo! Web Services <a id=\"I_indexterm6_tt487\" class=\"indexterm\"></a>does things a little differently. Instead of tying the key to you personally, you can sign up for any number of application keys. You can distribute the application key with your application, and anyone can use it. Yahoo! tracks application usage, not individual usage. I registered the key “restbook” for a particular “application”: this book. You and anyone else can use that key to run the sample Yahoo! Web Services code in this book.</p>\n<p>The procedure for signing up for these web accounts doesn’t vary much. You use your web browser to go to a web site and fill out some HTML forms. You usually have to click through a legal agreement, and maybe respond to a verification email. Sometimes your web service account is tied to your preexisting account on the corresponding web site.</p>\n<p>The user account system I’m about to design works a little differently. In my map service, user accounts are resources, just like the maps themselves. In fact, they’re my first read/write resources. My clients won’t have to use their web browsers to sign up for a user account: they can create one with a generic web service client.</p>\n<h2>Why Should User Accounts Be Resources?</h2>\n<p>Why have I decided to design my user accounts differently from those of nearly every existing web service? I have two reasons. First: most web services make you sign up for an account through a web application. Web application design is a well-understood topic and it’s not the topic of this book. Web services are indeed very similar to web applications, but resource creation is one of the places where they differ. The main difference here is that <a id=\"I_indexterm6_tt488\" class=\"indexterm\"></a>HTML forms currently support only GET and POST. This means web applications must use overloaded POST to convey any unsafe operation. If I tried to cover the typical method of getting a user account, I’d end up skimming the details as not relevant to web services. Treating user accounts as read/write resources means I can demonstrate the new resource-oriented design procedure on a data structure you’re probably familiar with.</p>\n<p class=\"keep-together\">Second, I want to show that new possibilities open up when you treat everyday data structures as resources, subject to the uniform interface. Consider an Internet-connected GPS device that ties into my map service. Every hour or so, it annotates Earth (as exposed through my web service) with its current position, creating a record of where the GPS device is over time.</p>\n<p>There will be thousands of these devices, and each one should only be able to see its own annotations. The person in charge of programming the device should not be limited to creating a single user account for personal use. Nor should everyone who buys the device have to go to my web site and fill out a form before they can use the device they bought.</p>\n<p>Since user accounts are resources, every one of these devices can have its own account on my web service (possibly with a username based on the serial number), and these accounts can be created automatically. They might be created in batches as the devices are manufactured, or each one may create an account for itself when its owner first turns it on.</p>\n<p>The end users may never know that they’re using a web service, and they’ll never have to sign up for a key. The device programmer does need to know how our web service works, and needs to write software that can create user accounts. If user accounts are resources, it’s obvious how the device programmer can do this. HTTP’s uniform interface gives most of the answers ahead of time.</p>\n<h2>Authentication, Authorization, Privacy, and Trust</h2>\n<p>Once I start exposing user accounts, I need some way of<a id=\"ch06_authorization\" class=\"indexterm\"></a><a id=\"ch06_privacy\" class=\"indexterm\"></a><a id=\"ch06_trust\" class=\"indexterm\"></a> determining which user, if any, is responsible for a given HTTP request. <em class=\"firstterm\">Authentication</em> is the problem of tying a request to a user. If you want to name a new place on Mars, I need some way of knowing that the new place should be associated with your user account instead of someone else’s. <em class=\"firstterm\">Authorization</em> is the problem of determining which requests to let through for a given user. There are some HTTP requests I’d accept from user A but reject from user B: requests like “DELETE user A” or “GET all of user A’s private places.” In my service, if you authenticate as user A, you’re allowed to manipulate user A’s account, but not anyone else’s.</p>\n<p>I’ll have more to say about RESTful modes of authentication and authorization in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, but here are the basics. When a web service client makes an HTTP request, it may include some credentials in the HTTP header <code class=\"literal\">Authorization</code>. The service examines the credentials, and decides whether they correctly identify the client as a particular user (authentication), and whether that user is actually allowed to do what the client is trying to do (authorization). If both conditions are met, the server carries out the request. If the credentials are missing, invalid, or not good enough to provide authorization, then the server sends a response code of 401 (“Unauthorized”). It sets the <code class=\"literal\">WWW-Authenticate</code> response header with instructions about how to send correct credentials in the future.</p>\n<p>There are several standard kinds of authentication. The most common are<a id=\"I_indexterm6_tt489\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt490\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt491\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt492\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt493\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt494\" class=\"indexterm\"></a> HTTP Basic, HTTP Digest, and WSSE. Some web services implement custom forms of authentication: in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a> I showed how Amazon S3 implements authentication with a sophisticated request signing mechanism. It doesn’t really matter which authentication mechanism I choose since I’m not actually implementing this service, but let’s say I go with the simplest choice: <a id=\"I_indexterm6_tt495\" class=\"indexterm\"></a> <a id=\"I_indexterm6_tt496\" class=\"indexterm\"></a> <a id=\"I_indexterm6_tt497\" class=\"indexterm\"></a>HTTP Basic authentication.</p>\n<p>There’s also the notion of privacy. Given that user A’s list of private annotations can’t be accessed by any other user, the representation of that list still needs to be transmitted over the Internet. The data’s going to go through a lot of computers before it gets to the client. What’s to stop one of those computers from examining the supposedly private list? To solve this problem I’m going to encrypt each HTTP transaction over SSL. In the previous chapter I presented URIs that started with <span class=\"emphasis\"><em>http://maps.example.com/</em></span>. In this chapter my URIs all start with <code class=\"literal\">https://maps.example.com/</code>.</p>\n<p>Using <a id=\"I_indexterm6_tt498\" class=\"indexterm\"></a>HTTPS instead of HTTP prevents other computers from eavesdropping on the conversation between client and server. This is especially important when using HTTP Basic authentication, since that authentication mechanism involves the client sending its credentials in plain text.</p>\n<p>Now I’ve got a secure, trusted means of communication between the client and the server. But there’s one more relationship to consider: the relationship between the client software and the human end user. Why should the end user trust the client software with its authentication credentials? Let me ask you a question to clarify the problem. Whenever you log in to a web site, you’re trusting your web browser to send your username and password to that web site, and nowhere else. Why do you trust your browser with that information? How do you know your browser doesn’t have a secret backdoor that broadcasts everything you type to some seedy IRC channel?</p>\n<p>There are several possible answers. You might be using an open source browser like<a id=\"I_indexterm6_tt499\" class=\"indexterm\"></a> Firefox, which has good source control and a lot of people looking at the source code. You might say there’s safety in numbers: that millions of people use your brand of browser and there haven’t been any problems traceable to the browser itself. You might monitor your network traffic to make sure your browser is only sending the data you tell it to send. But most people just take it on faith that their web browser is trustworthy.</p>\n<p>That’s the human web. Now imagine I send you a cool new web service client for managing your del.icio.us bookmarks. Do you trust that client with your del.icio.us username and password? Do you trust it as much as you trust your web browser with the same information? Hopefully not! No web service client is as popular as a web browser, and no web service client has as many eyes on the source code. On the human web, we usually ignore the problem by taking a leap of faith and trusting our web browsers. On the programmable web the problem is more obvious. We don’t necessarily trust our own clients with our authentication credentials.</p>\n<p>There’s nothing in the HTTP standard to deal with this problem, because it’s a problem between the end user and the client: HTTP lives between the client and the server. Solving this problem requires forgoing all the standard ways of sending authentication information: Basic, Digest, and WSSE don’t work because they require the client to know the credentials. (You can solve it with Digest or WSSE by having a tiny, trusted account manager send encrypted authentication strings to the actual, untrusted client. I don’t know of any web service clients that use this architecture.)</p>\n<p>Big names in web services like Google, Amazon, eBay, and Flickr have come up with ways for a client to make web service requests without knowing the actual authentication credentials. You saw a hint of this in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>: I showed how to sign an Amazon S3 request and give a special URI to someone else, which they could use without knowing your password. I’ll have more to say about this in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>. For now I just want you to know that there’s a complication on the programmable web you might never have considered. Because there’s not yet any standard way of solving this problem, I’m going to punt on it for now and use HTTP Basic authentication for my services. My users will have to trust their clients as much as they trust their web browsers.<a id=\"I_indexterm6_tt500\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt501\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt502\" class=\"indexterm\"></a></p>\n<h2>Turning Requirements into Read/Write Resources</h2>\n<p>Now that I’ve identified a new data set (user accounts), I’m going to go through the same design procedure I did for the data set I developed in the previous chapter (planets, places on the planets, maps of the planets, and points on the maps). But the procedure from the previous chapter only suffices for read-only resources. This chapter makes it possible for clients to create, modify, and delete resources. So I’ve added two steps to the procedure (steps 4 and 5).</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>Figure out the data set</p></li>\n  <li class=\"listitem\"><p>Split the data set into resources</p><p>For each kind of resource:</p></li>\n  <li class=\"listitem\"><p>Name the resources with URIs</p></li>\n  <li class=\"listitem\"><p>Expose a subset of the uniform interface</p></li>\n  <li class=\"listitem\"><p>Design the representation(s) accepted from the client</p></li>\n  <li class=\"listitem\"><p>Design the representation(s) served to the client</p></li>\n  <li class=\"listitem\"><p>Integrate this resource into existing resources, using hypermedia links and forms</p></li>\n  <li class=\"listitem\"><p>Consider the typical course of events: what’s supposed to happen?</p></li>\n  <li class=\"listitem\"><p>Consider error conditions: what might go wrong?</p></li>\n </ol>\n</div>\n<h2>Figure Out the Data Set</h2>\n<p>Most<a id=\"I_indexterm6_tt503\" class=\"indexterm\"></a> sites with user accounts try to associate personal information with your account, like your name or email address. I don’t care about any of that. In my map service, there are only two pieces of information associated with a user account:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The name of the account</p></li>\n  <li class=\"listitem\"><p>A password used to access the account</p></li>\n </ul>\n</div>\n<p>Each user account also has some subordinate resources (custom places on planets) associated with it, but I’ll figure that part out later. All I need for now is a way of identifying specific user accounts (a username), and a way for a client to present credentials that tie them to a certain user account (a password).</p>\n<p>Since I don’t track any personal information, there’s no reason apart from tradition to even call this a “user account.” I could call it a “password-protected set of annotations.” But I’ll stick to the traditional terminology. This makes it easier to visualize the service, and easier for you to come up with your own enhancements to the user account system.</p>\n<h2>Split the Data Set into Resources</h2>\n<p>This was a fairly large step back in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>, when my data set was large and vague: “planets, places, and maps.” Here the data set is fairly constrained: “user accounts.” I’ll expose each user account as a resource. In terms of the <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> terminology, these new resources are resources of the second type. They’re the portals through which my service exposes its underlying user objects. Another site might also expose the list of user accounts itself as a one-off resource, or expose algorithmic resources that let a client search the list of users. I won’t bother.</p>\n<h2>Name the Resources with URIs</h2>\n<p>This part is also<a id=\"I_indexterm6_tt504\" class=\"indexterm\"></a> easy, since I only have one kind of resource. I’ll expose a user account with a URI of the following form: <code class=\"literal\">https://maps.example.com/user/<em class=\"replaceable\"><code>{user-name}</code></em></code>.</p>\n<h2>Expose a Subset of the Uniform Interface</h2>\n<p>This<a id=\"I_indexterm6_tt505\" class=\"indexterm\"></a> is the first new step. I skipped it when designing read-only resources, because there was nothing to decide. By definition, read-only resources are the ones that expose no more than the HTTP methods GET, HEAD, and OPTIONS. Now that I’re designing resources that can be created and modified at runtime, I also have PUT, POST, and DELETE to consider.</p>\n<p>Even so, this step is pretty simple because the uniform interface is always the same. If you find yourself wishing there were more HTTP methods, the first thing to do is go back to step two, and try to split up your data set so you have more kinds of resources. Only if this fails should you consider introducing an element of the RPC style by making a particular resource support overloaded POST.</p>\n<p>To reiterate the example from <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>: if you have resources for “readers,” and resources for “published columns,” and you start thinking “it sure would be nice if there was a SUBSCRIBE method in HTTP,” the best thing to do is to create a new kind of resource: the “subscription.” As HTTP resources, subscriptions are subject to HTTP’s uniform interface. If you decide to forgo the uniform interface and handle subscriptions through overloaded POST on your “reader” resources, defining the interface for those resources becomes much more difficult.</p>\n<p>I can decide which bits of the uniform interface to expose by asking questions about intended usage:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>Will clients be creating new resources of this type?</em></span> Of course they will. There’s no other way for users to get on the system.</p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>When the client creates a new resource of this type, who’s in charge of determining the new resource’s URI? Is it the client or the server?</em></span> The client is in charge, since the URI is made up entirely of constant strings (<code class=\"literal\">https://maps.example.com/user/</code>) and variables under the client’s control (<em class=\"replaceable\"><code>{user-name}</code></em>).</p></li>\n </ul>\n</div>\n<p>From those two questions I get my first result. To create a user account, a client will send a PUT request to the account’s URI. If the answer to the second question was “the server’s in charge of the final URI,” I’d expect my clients to create a user by sending a POST request to some “factory” or “parent” URI. See the <a class=\"xref\" href=\"ch06.html#custom_places\" title=\"Custom Places\">Custom Places</a>” section later in this chapter for a case where the answer to the second question is “the server’s in charge.”</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>Will clients be modifying resources of this type?</em></span> Yes. It’s questionable whether or not a user should be allowed to change his username (I’m not going to allow it, for simplicity’s sake), but a user should always be allowed to change his password.</p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>Will clients be deleting resources of this type?</em></span> Sure. You can delete an account when you’re done with it.</p></li>\n  <li class=\"listitem\"><p><span class=\"emphasis\"><em>Will clients be fetching representations of resources of this type?</em></span> This is up for debate. Right now there’s not much information associated with a user account: only the username, which is part of the URI, and the password, which I won’t be giving out.</p><p>I’m going to say yes, which means I will be exposing GET and HEAD on user account resources. If nothing else, clients will want to see whether or not their desired username already exists. And once I allow users to define custom places, clients will want to look at the public places defined by specific users.</p></li>\n </ul>\n</div>\n<h2>Design the Representation(s) Accepted from the Client</h2>\n<p>My <a id=\"ch06_crep\" class=\"indexterm\"></a>data set comes with no built-in user accounts: every one is created by some client. The obvious next step in this design is to specify how the client is supposed to create a user account.</p>\n<p>Let’s go back to <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a> and Amazon S3 for a minute. A client creates an S3 bucket by sending an empty PUT request to the URI of the bucket. The client doesn’t need to send an entity-body<a id=\"I_indexterm6_tt506\" class=\"indexterm\"></a> in the request, because the bucket has no state other than its name.</p>\n<p>To create an S3 object inside a bucket takes a little more work. An S3 object has two bits of state: name and value. The name goes into the URI, the destination of the PUT request. But the value needs to go into the entity-body of the PUT request. S3 will accept any data at all in this entity-body, because the whole point is that the value of an S3 object can be anything, but there needs to be <span class=\"emphasis\"><em>something</em></span> there: you can’t have an empty object.</p>\n<p>Most web services are a little pickier about what goes into the entity-body: it has to be in a certain format and convey certain bits of resource state. My user accounts have two elements of resource state: the username and the password. If a PUT request is going to succeed in creating a user account, it needs to convey both pieces of state. The username is included in the scoping information: any PUT request that creates an account will have that account’s username in the URI. What about the password?</p>\n<p>The client will send the new user’s password in an entity-body, as part of a <span class=\"emphasis\"><em>representation</em></span>. In <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>, I introduced representations as documents the server sends the client: a way for the server to convey the state of a resource. Representations flow the other way, too. They’re how a client suggests changes to the state of a resource. When you PUT an S3 object, the entity-body you send is a representation of the object. The representation you send with a PUT request is an assertion about the new state of a resource.</p>\n<p>In <a class=\"xref\" href=\"ch05.html#representingthemaplist\" title=\"Representing the List of Planets\">Representing the List of Planets</a>” in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> I considered several possible representation formats. I looked at plain text, JSON, XML using a made-up vocabulary, and Atom (XML again, but using a preexisting vocabulary). I decided on XHTML, a preexisting XML vocabulary oriented around marking up human-readable documents. In that chapter the question was what format would be most useful when served to the client. Now, the question is how the client should format its proposed state changes. What format makes it easiest for the client to convey a password to the server?</p>\n<p>When the state is complex, it’s helpful for the server to accept the same representation format it sends. The client can request a representation with GET, modify the representation, and then PUT it back, committing its changes to the underlying resource state. As we’ll see in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>, the Atom Publishing Protocol uses this technique effectively. And, of course, S3 serves the representation of an object byte for byte the way it was when the client first PUT it into the system. S3 doesn’t even pretend to know anything about the meaning of the representations it serves.</p>\n<p>Here, I’ve only got one item of state (the password), and it’s not one that the server will ever send to the client. Now’s a good time to introduce a representation format for simple cases like these.</p>\n<div class=\"sidebar\">\n <a id=\"form-encoding\"></a>\n <div class=\"sidebar-title\">\n  Form-encoding\n </div>\n <p>This representation doesn’t have an official name beyond its media type (<code class=\"literal\">application/x-www-form-urlencoded</code>), but you’ve probably seen it before. It’s sometimes called “CGI escaping.” When you submit an HTML form in your web browser, this is the format the browser uses to marshal the form data into something that can go into an HTTP request. Consider an HTML form like the one in <a class=\"xref\" href=\"ch06.html#gradient-form\" title=\"Example&nbsp;6-1.&nbsp;A simple HTML form\">Example&nbsp;6-1</a>.</p>\n <div class=\"example\">\n  <a id=\"gradient-form\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;6-1.&nbsp;A simple HTML form\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"screen\">&lt;form action=\"http://www.example.com/color-pairs\" method=\"POST\"&gt;\n &lt;input name=\"color1\" type=\"text\"/&gt;\n &lt;input name=\"color2\" type=\"text\"/&gt;\n&lt;/form&gt;</pre>\n  </div>\n </div>\n <p>If the user enters the values “blue” and “green” in the text fields <code class=\"literal\">color1</code> and <code class=\"literal\">color2</code> fields, a form-encoded representation of that data would be <code class=\"literal\">color1=blue&amp;color2=green</code>. When the form is submitted, the browser makes a POST request to <span class=\"emphasis\"><em>http://www.example.com/color-pairs</em></span>, and sends <code class=\"literal\">color1=blue&amp;color2=green</code> in the entity-body: <a id=\"I_indexterm6_tt507\" class=\"indexterm\"></a>that’s a representation. If the form’s “method” attribute were GET, then when the user submitted the form the browser would make a GET request to <span class=\"emphasis\"><em>http://www.example.com/color-pairs?color1=blue&amp;color2=green</em></span>. That’s got the same data in the same format, but there the data is scoping information that identifies a resource, not a representation.</p>\n <p>When an object’s state can be represented as key-value pairs, form-encoding is the simplest representation format. Almost every programming language has built-in facilities for doing form-encoding and -unencoding: they’re usually located in the language’s HTTP or CGI library.</p>\n</div>\n<p>My map service accepts a form-encoded representation when a client tries to create or edit a user. The only pieces of state I’ve associated with a user are its name and password. The name goes into the URI and I’ve decided it can’t change, so my user representations just look like “password=<em class=\"replaceable\"><code>{the-password}</code></em>”. <a class=\"xref\" href=\"ch06.html#example_6_2\" title=\"Example&nbsp;6-2.&nbsp;Hypothetical map client to create a user account\">Example&nbsp;6-2</a> is hypothetical Ruby code for creating a user account with the map service.</p>\n<div class=\"example\">\n <a id=\"example_6_2\"></a>\n <div class=\"example-title\">\n  Example&nbsp;6-2.&nbsp;Hypothetical map client to create a user account\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">require 'rubygems'\nrequire 'rest-open-uri'\nrequire 'cgi'\nrequire 'uri'\ndef make_user(username, password)\n  open(\"https://maps.example.com/user/#{URI.escape(username)}\", \n       :data =&gt; CGI::escape(\"password=#{password}\"), :method =&gt; :put)\nend</pre>\n </div>\n</div>\n<div class=\"note\" title=\"Note\">\n <h3 class=\"title\">Note</h3>\n <p>A couple things to note here. First, I’ve started transmitting sensitive data (passwords) over the network, so I’m now using HTTPS. Second, I’m actually using two different kinds of encoding in this code sample. The username, which goes into the URI, is URI-encoded using <code class=\"function\">URI.escape</code>. The password, which goes into the representation, is form-encoded with <code class=\"function\">CGI::escape</code>. URI-encoding is similar to form-encoding, but it’s not the same, and confusing them is a common source of subtle bugs.</p>\n</div>\n<p>Changing an account’s password is the same as creating the account in the first place. The client sends a PUT request to the account URI, with a new representation of the account (that is, the new password). Of course, no one can change an account’s password without authorization. To modify a user account, a client must also provide an <code class=\"literal\">Authorization</code> header that convinces my service it has the right to modify that account. In short, changing a user’s password requires knowing the current password. As I said earlier, my service expects incoming <code class=\"literal\">Authorization</code> headers to conform to the HTTP Basic authentication standard.</p>\n<p>A DELETE request never requires a representation, but deleting a user from my service will require a proper <code class=\"literal\">Authorization</code> header. That is: to delete a user account you must know that user’s<a id=\"I_indexterm6_tt508\" class=\"indexterm\"></a> password.</p>\n<h2>Design the Representation(s) to Be Served to the Client</h2>\n<p>A client will GET a user account’s URI to retrieve a <a id=\"I_indexterm6_tt509\" class=\"indexterm\"></a>representation of a user account, just as a client GETs the URI of a map or a place to retrieve a representation of that map or place. What should the representation of a user account look like?</p>\n<p>Right now it won’t look like much, since I’ve only got two pieces of state to convey, and one of them (the password) I don’t want to be sending out. Indeed, in a well-designed system I won’t even have the password to send out. I’ll only have an encrypted version of it, for use in authentication. Once I integrate custom places into this representation, it’ll look better. For now, <a class=\"xref\" href=\"ch06.html#your-user-account-representation\" title=\"Example&nbsp;6-3.&nbsp;A representation of “your” user’s account\">Example&nbsp;6-3</a> is a fairly sparse XHTML document.</p>\n<div class=\"example\">\n <a id=\"your-user-account-representation\"></a>\n <div class=\"example-title\">\n  Example&nbsp;6-3.&nbsp;A representation of “your” user’s account\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;\n &lt;title&gt;User homepage for leonardr&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;p class=\"authenticated\"&gt;\n You are currently logged in as \n &lt;a class=\"user\" href=\"/user/leonardr\"&gt;leonardr&lt;/a&gt;.\n&lt;/p&gt;\n\n&lt;p&gt;User homepage for \n   &lt;a class=\"user\" href=\"/user/leonardr\"&gt;leonardr&lt;/a&gt;&lt;/p&gt;\n\n&lt;form id=\"modifyUser\" method=\"put\" action=\"\"&gt;\n &lt;p&gt;Change your password:\n   &lt;input class=\"password\" name=\"password\" /&gt;&lt;br /&gt;\n   &lt;input class=\"submit\" /&gt;&lt;/p&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n </div>\n</div>\n<p>Once again I’m using the representation to convey the current resource state, and to help the client drive to other states. I used an HTML form to describe a future PUT request the client might make if it wants to change the user’s password (an item of resource state). Note that there’s no form telling the client how to get a representation, or how to delete this user. It’s taken for granted that you use HTTP GET and DELETE for that. I only need hypermedia for complicated things: links to other resources (so the client knows which URI to GET or DELETE), and descriptions of representations.</p>\n<div class=\"note\" title=\"Note\">\n <h3 class=\"title\">Note</h3>\n <p>You may have noticed a problem in <a class=\"xref\" href=\"ch06.html#your-user-account-representation\" title=\"Example&nbsp;6-3.&nbsp;A representation of “your” user’s account\">Example&nbsp;6-3</a>. Its form specifies an HTTP method of PUT, but HTML forms only allow GET and POST. As with the “repeat” syntax in <a class=\"xref\" href=\"ch05.html#place-search-form\" title=\"Example&nbsp;5-11.&nbsp;An HTML form for searching a place\">Example&nbsp;5-11</a>, I’m using the as-yet-unreleased XHTML 5 to get around the shortcomings of the current version of HTML. Another way to handle this is to send a WADL snippet instead of an HTML form, or use the trick described in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a> to run PUT requests over overloaded POST.</p>\n</div>\n<p>If you GET someone else’s user account, you’ll be served a different representation, similar to the one in <a class=\"xref\" href=\"ch06.html#someone-elses-account\" title=\"Example&nbsp;6-4.&nbsp;A representation of someone else’s user account\">Example&nbsp;6-4</a>.</p>\n<div class=\"example\">\n <a id=\"someone-elses-account\"></a>\n <div class=\"example-title\">\n  Example&nbsp;6-4.&nbsp;A representation of someone else’s user account\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;\n &lt;title&gt;User homepage for samruby&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;p class=\"authenticated\"&gt;\n You are currently logged in as \n &lt;a class=\"user\" href=\"/user/leonardr\"&gt;leonardr&lt;/a&gt;.\n&lt;/p&gt;\n\n&lt;p&gt;User homepage for &lt;a class=\"user\" href=\"/user/samruby\"&gt;samruby&lt;/a&gt;&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n </div>\n</div>\n<p>This representation has no controls for altering the state of the resource, because the client isn’t authorized to do that: the client authenticated as <code class=\"literal\">leonardr</code> and this is <code class=\"literal\">samruby</code>’s page. Right now the representation does nothing but confirm to <code class=\"literal\">leonardr</code> that a user named <code class=\"literal\">samruby</code> exists. If there was no such user, a GET request to <code class=\"literal\">/user/samruby</code> would give a status code of 404 (“Not Found”), and the client would be free to create <code class=\"literal\">samruby</code> with a PUT request.</p>\n<h2>Link This Resource to Existing Resources</h2>\n<p>In the previous<a id=\"ch06_buddyholly\" class=\"indexterm\"></a><a id=\"ch06_linking\" class=\"indexterm\"></a> chapter I defined several classes of resource: the list of maps, individual maps, places, and lists of places (that is, lists of search results). None of these are directly relevant to user accounts, but there are a couple of nice features I can add at this point.</p>\n<p>One nice feature is to add the<a id=\"I_indexterm6_tt510\" class=\"indexterm\"></a> “authenticated” message (seen in the two sample representations above) to the representation of <span class=\"emphasis\"><em>every</em></span> resource. It’ll be displayed whenever the client submits a request with valid credentials. The “authenticated” message is a piece of<a id=\"I_indexterm6_tt511\" class=\"indexterm\"></a> hypermedia that shows an authenticated client how to retrieve data about its user account. Every resource is now connected to the user account of the user who requested it.</p>\n<p>Another nice piece of hypermedia would be one that shows an unauthenticated client how to <span class=\"emphasis\"><em>create</em></span> a user account. The best place for this bit of hypermedia would be the representation of the list of planets: after all, that’s the service’s “home page.” It already contains links to the other main parts of the service, so it should contain a link to this new part.</p>\n<p>Once again, HTML hypermedia isn’t quite up to the job. And once again, I’m going to use XHTML 5, which makes minor changes to HTML, rather than introduce a totally new technology like WADL in the middle of a chapter. <a class=\"xref\" href=\"ch06.html#create-user-form\" title=\"Example&nbsp;6-5.&nbsp;Hypermedia describing how to create a user account\">Example&nbsp;6-5</a> is an XHTML 5 snippet that tells a client how to create a user.</p>\n<div class=\"example\">\n <a id=\"create-user-form\"></a>\n <div class=\"example-title\">\n  Example&nbsp;6-5.&nbsp;Hypermedia describing how to create a user account\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;form id=\"createUser\" method=\"PUT\" template=\"/user/{username}\"&gt;\n &lt;p&gt;Username: &lt;input type=\"text\" name=\"username\" /&gt;&lt;br /&gt;\n &lt;p&gt;Password: &lt;input type=\"password\" name=\"password\" /&gt;&lt;br /&gt;\n &lt;input class=\"submit\" /&gt;\n&lt;/form&gt;</pre>\n </div>\n</div>\n<div class=\"note\" title=\"Note\">\n <h3 class=\"title\">Note</h3>\n <p>The two deviations from the HTML you’re familiar with are in the <code class=\"literal\">method</code> attribute (like <a class=\"xref\" href=\"ch06.html#your-user-account-representation\" title=\"Example&nbsp;6-3.&nbsp;A representation of “your” user’s account\">Example&nbsp;6-3</a>, it specifies PUT where HTML 4 allows only GET and POST), and the brand-new <code class=\"literal\">template</code> attribute, which inserts a form variable (“username”) into the URI using the <a class=\"ulink\" href=\"http://www.ietf.org/internet-drafts/draft-gregorio-uritemplate-00.txt\" target=\"_top\">URI Templating standard</a>.</p>\n <p>As of the time of writing,<a id=\"I_indexterm6_tt512\" class=\"indexterm\"></a> URI Templating was a proposed addition to HTML 5, but it hadn’t been approved. It’s possible that it will be rejected, and that <a class=\"xref\" href=\"ch06.html#create-user-form\" title=\"Example&nbsp;6-5.&nbsp;Hypermedia describing how to create a user account\">Example&nbsp;6-5</a> won’t be valid HTML 5 any more than it is valid HTML 4. In that case you can use URI Templating unofficially (forcing your users to write custom clients), or switch to WADL.</p>\n</div>\n<p>The hypermedia form talks about the syntax of the PUT request, but it can’t say much about the semantics. A web service client can read the HTML form in <a class=\"xref\" href=\"ch06.html#create-user-form\" title=\"Example&nbsp;6-5.&nbsp;Hypermedia describing how to create a user account\">Example&nbsp;6-5</a>, but its understanding is limited. It knows that the form is labelled “createUser” but it doesn’t know what “createUser” means. It knows that if it PUTs a certain representation to a certain URI, the server will probably accept it. It knows what PUT means, because PUT always means the same thing. It knows that the representation should include a “username,” but it doesn’t know a username from an ostrich. It takes a human being—a programmer—to understand what a user is, that “createUser” means “create a user,” what a username is, and all the rest. A programmer needs to set the rules about when and how user accounts are created. This piece of hypermedia does nothing but tell the client how to structure the PUT request when it comes time to “createUser,” whatever that means. It’s a promise from the web service to the client.</p>\n<p>Many web services put all of this data up front, in a single WSDL or WADL file, for the ease of the client programmer. This is somewhat contrary to the REST design philosophy because it violates, or at the very least subverts, the principle of connectedness. But in web services, where the client must be programmed in advance, it’s an understandable impulse, and often it doesn’t cause any problems.<a id=\"I_indexterm6_tt513\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt514\" class=\"indexterm\"></a></p>\n<h2>What’s Supposed to Happen?</h2>\n<p>Let’s consider what might happen when a client sends a PUT request to <span class=\"emphasis\"><em>/user/leonardr</em></span>. As is usual with HTTP, the server reads this request, takes some action behind the scenes, and serves a response. I need to decide which numeric response code the response will have, and what HTTP headers and/or entity-body will be provided. I also need to decide how the request will affect resource state: that is, what real-world effects it will have.</p>\n<p>It’s not hard to see what happens if all goes well with a PUT request. If there’s no user called “leonardr,” the service creates one with the specified password. The response code is 201 (“Created”), and the <code class=\"literal\">Location</code> header contains the URI of the newly created user.</p>\n<p>If the user account already exists, the resource state is modified to bring it in line with the client’s proposed new representation. That is, the account’s password is modified. In this case the response code may be 200 (“OK”), and the response entity-body may contain a representation of the user account. Or, since the password change never affects the representation, the response code may be 205 (“Reset Content”) and the response entity-body may be omitted altogether.</p>\n<p>PUT requests are the only complicated ones, because they’re the only ones that include a representation. GET and DELETE requests work exactly according to the uniform interface. A successful GET request has a response code of 200 (“OK”) and a representation in the entity-body. A successful DELETE request also has a response code of 200 (“OK”). The server can send an entity-body in response to a successful DELETE, but it would probably contain just a status message: there’s no longer a resource to send a representation of.</p>\n<h2>What Might Go Wrong?</h2>\n<p>A request that creates, modifies, or deletes a resource has more failure conditions than one that just retrieves a representation. Here are a few of the error conditions for this new resource.</p>\n<p>The most obvious problem is that the client’s representation might be unintelligible to the server. My server expects a representation in form-encoded format; the client might send an XML document instead. The status code in this case <a id=\"I_indexterm6_tt515\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt516\" class=\"indexterm\"></a>is 415 (“Unsupported Media Type”).</p>\n<p>Alternatively, the client might not have provided a representation at all. Or it might have provided a form-encoded representation that’s ill-formed or full of nonsense data. The status code in this case is 400 (“Bad Request”).</p>\n<p>Maybe the representation makes sense but it tells the server to put the resource into an inconsistent or impossible state. Perhaps the representation is “password=”, and I don’t allow accounts with empty passwords. The exact status code depends on the error; in the case of the empty password it would probably be 400 (“Bad Request”). In another situation it might be <a id=\"I_indexterm6_tt517\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt518\" class=\"indexterm\"></a>409 (“Conflict”).</p>\n<p>Maybe the client sends the wrong credentials, sends authorization credentials for a totally different user account, or doesn’t send the <code class=\"literal\">Authorization</code> header at all. A client can only modify or delete a user if it provides that user’s credentials. The response code in this case<a id=\"I_indexterm6_tt519\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt520\" class=\"indexterm\"></a> is 401 (“Unauthorized”), and I’ll set the<a id=\"I_indexterm6_tt521\" class=\"indexterm\"></a> <code class=\"literal\">WWW-Authenticate</code> header with instructions to the client, giving a clue about how to format the <code class=\"literal\">Authorization</code> header according to the rules of HTTP Basic authentication.</p>\n<p>If the client tries to create a user that already exists, one possible response code is 409 (“Conflict”). This is appropriate because carrying out the PUT request would put the service’s resources into an inconsistent state: there’d be two user resources with the same username. Another possibility is to treat the PUT request as an attempt to change an existing user’s password without providing any authentication, and send a response code of 401 (“Unauthorized”).</p>\n<p>As in the previous chapter, there might be an unspecified problem on the server side: response<a id=\"I_indexterm6_tt522\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt523\" class=\"indexterm\"></a> code 500 (“Internal Server Error”) <a id=\"I_indexterm6_tt524\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt525\" class=\"indexterm\"></a>or 503 (“Service Unavailable”).<a id=\"I_indexterm6_tt526\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt527\" class=\"indexterm\"></a></p>",
      "slug" : "user-accounts-as-resources"
    }, {
      "title" : "Custom Places",
      "type" : "page",
      "htmlContent" : "<p>Now I’m ready to go through the resource design procedure all over again. This time I’m designing the custom places clients can create: places that will show up on maps alongside the built-in places. Hopefully you’re getting the hang of the procedure by now (if not, take heart: I’ll do it some more in the next chapter), so this trip through it will be somewhat abbreviated. This time I want to focus on what makes custom places different from user accounts.</p>\n<h2>Figure Out the Data Set</h2>\n<p>A web<a id=\"I_indexterm6_tt528\" class=\"indexterm\"></a> service client can create any number of places on any of the planets for which I have maps. Custom places will show up in lists of search results, just like the built-in places from the previous chapter. Custom places can have the same data as built-in places: a type (“city”), a name (“Springfield”), coordinates of latitude and longitude (“39.81E 89.64W”), and a textual description (“The capital of Illinois”). Many custom places may share the same coordinates (“My house” and “My current location”), and a custom place may share a location with a built-in place.</p>\n<p>Every custom place is associated with some user account. Custom places may be public or private. A private place is visible and modifiable only to someone who provides the credentials for the user account that “owns” the place.</p>\n<h2>Split the Data Set into Resources</h2>\n<p>Each custom<a id=\"I_indexterm6_tt529\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt530\" class=\"indexterm\"></a> place will be a resource, just as every built-in place is. I also want to let clients get a list of their custom places. In my design, a user account is just a password-protected list of places, so I won’t be exposing the place list as a separate resource. Instead I’ll expand the “user account” resource so it encompasses a user’s list of places. This is analogous to the way a bucket in Amazon S3 is represented as nothing but a list of objects.</p>\n<h2>Name the Resources with URIs</h2>\n<p>A custom<a id=\"I_indexterm6_tt531\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt532\" class=\"indexterm\"></a> place is clearly a subordinate resource, but subordinate to what? I could reasonably associate it with a user account, a geographic point on some planet, or an enclosing place like a city, country, or planet. Which of these relationships should I capture with my URIs?</p>\n<p>I’ve chosen to name custom places much the same way I name built-in places. Each place is associated with a geographic point, and can be accessed with a URI of the form <code class=\"literal\">/user/<em class=\"replaceable\"><code>{username}</code></em>/<em class=\"replaceable\"><code>{planet}</code></em>/<em class=\"replaceable\"><code>{latitude}</code></em>,<em class=\"replaceable\"><code>{longitude}</code></em>/<em class=\"replaceable\"><code>{place name}</code></em></code>. The new element is <em class=\"replaceable\"><code>{username}</code></em>, intended to distinguish between different people’s views of the same place: for instance, Sam’s review of Joe’s Diner at <em class=\"filename\">/user/samruby/Earth/45.2,-114.2/Joe’s%20Diner</em> and Leonard’s less glowing review at <em class=\"filename\">/user/leonardr/Earth/45.2,-114.2/Joe's%20Diner</em>.</p>\n<p>A URI like <code class=\"literal\">/Earth/USA?show=Joe's+Diner</code> works like it did before: it returns search results for places called “Joe’s Diner,” anywhere in the U.S. The only difference is that now there are more possible places to search: not only the built-in database of places, but each user’s public list of places, and your own private list.</p>\n<p>Built-in places are still privileged. As it happens, there’s a Japanese theme park that includes a one-third scale model of Mount Rushmore. If a client creates a custom place called “Mount Rushmore” north of Tokyo, <code class=\"literal\">/Earth/Mount%20Rushmore</code> still points to the original in South Dakota. It doesn’t suddenly become ambiguous which “Mount Rushmore” resource that URI refers to. However, <code class=\"literal\">/Earth?show=Mount+Rushmore</code> will show both places.</p>\n<h2>Expose a Subset of the Uniform Interface</h2>\n<p>Clients can use GET<a id=\"I_indexterm6_tt533\" class=\"indexterm\"></a> and HEAD to retrieve representations of built-in places, their own places (whether public or private), and public places created by others. Clients can delete their own places with DELETE, and change the state of their places with PUT.</p>\n<p>There are two ways a client might create a map annotation. The client might add a comment to an existing place on the map (“Mount Rushmore”), or it might give a new name to a certain point of latitude and longitude (“the cornfield where I kissed Betty”).</p>\n<p>In the first case, the resource being created is “Mount Rushmore (from leonardr’s point of view).” When creating this resource the client shouldn’t have to know exactly where on the map Mount Rushmore is. “Mount Rushmore” is a consensus name and there’s a built-in place by that name. The client can rely on the server to look up the coordinates. In the second case, the resource being created is a brand new place that the server’s never heard of, and the client is responsible for knowing the coordinates.</p>\n<p>How can I work this feature into my resource-oriented design? “Mount Rushmore (from leonardr’s point of view)” is a <span class=\"emphasis\"><em>subordinate resource</em></span> of<a id=\"I_indexterm6_tt534\" class=\"indexterm\"></a> another resource: the built-in place “Mount Rushmore.” This resource already exists and has a URI: one of them is <code class=\"literal\">/Earth/Mount%20Rushmore</code>. If the client wants to reuse the consensus name for a place, it shouldn’t have to look up its location. Instead of figuring out the final URI of the annotation and sending a PUT request to it, the client can send a POST request to the “Mount Rushmore” URI and let the server figure out the ultimate URI.</p>\n<p>Similarly, if the client wants to comment on the Alabama capitol building, it can POST to <code class=\"literal\">/Earth/USA/AL/State%20capitol</code> instead of figuring out the exact coordinates or street address. Any URI that identifies a built-in place can be the target of a POST request that comments on that place.</p>\n<p>What about custom names? What if a client wants to give the name “Mount Rushmore” not to the original in South Dakota, but to the scale model in Imaichi? What if the client wants to create an annotation for “the cornfield where I kissed Betty”?</p>\n<p>Here the client must know the latitude and longitude of the place it wants to create. This means it’ll have all the information necessary to create the URI of the new resource: the world, a geographic point on the world, the name of the place, and its own username. The client could make a PUT request to a URI like <code class=\"literal\">/user/bob/Earth/42,-93.7/the%20cornfield%20where...</code>. This would work just like creating a user account by sending a PUT request to <code class=\"literal\">/user/bob</code>.</p>\n<p>Even here, it’s cleaner to use<a id=\"I_indexterm6_tt535\" class=\"indexterm\"></a> POST. A brand-new place on the map is a subordinate resource: it’s subordinate to some point on the planet, just like a comment on a built-in place is subordinate to a place on the planet. So a client could also put a new place on the map by sending a POST request to <code class=\"literal\">/Earth/42,-93.7</code>. It works the same way as a comment on existing places (a POST to <code class=\"literal\">/Earth/Mount%20Rushmore</code>), except here the place is identified by latitude and longitude, not by consensus name.</p>\n<p>My service will support POST for brand-new places because that’s simpler. The interface will be the same whether you’re adding a brand new place to the planet, or making a comment on some consensus place. Another service might support both methods: PUT to the final URI if the client is willing to figure out that URI, and POST to a parent URI if it’s not.</p>\n<p>Finally, note that although I’m using POST, it’s not overloaded POST. Clients of my service use POST only when they want to create a resource “beneath” an existing one. The URI of the new resource (<code class=\"literal\">/user/leonardr/Earth/43.9,-103.46/Mount%20Rushmore</code>) may not directly extend the URI of the old (<code class=\"literal\">/Earth/Mount%20Rushmore</code>), but the resources have a conceptual relationship.</p>\n<h2>Design the Representation(s) Accepted from the Client</h2>\n<p>When the<a id=\"ch06_clients\" class=\"indexterm\"></a> client sticks a pin into a planet and creates a custom place, what information does it need to provide? It must identify a planet and a place on that planet: the spot where the pin goes. The place can be identified either by latitude and longitude, or by reference to a canonical name like “Mount Rushmore.” Call these variables <code class=\"varname\">planet</code>, <code class=\"varname\">latitude</code>, <code class=\"varname\">longitude</code>, and <code class=\"varname\">name</code>. The server must know what <code class=\"varname\">type</code> of place the client is putting on the map. A place may be <code class=\"varname\">public</code> or not, and the client may provide a custom <code class=\"varname\">description</code> of the place. The final URI also incorporates a username, but the client is already providing that, in the <code class=\"literal\">Authorization</code> header. There’s no need to make the client send that information twice.</p>\n<p>These are all key-value pairs. I can have clients represent places the way they represent user accounts: as form-encoded strings. There are no complex data structures here that might call for a JSON or XML representation.</p>\n<p>Client requests may choose to send some key-value pairs and omit others. Information that’s in the URI as scoping information doesn’t need to be repeated in the representation. When the client sends a POST to <code class=\"literal\">/Earth/43.9,-103.46</code> it doesn’t need to specify <code class=\"varname\">latitude</code> and <code class=\"varname\">longitude</code>, because that information’s in the URI. It does need to specify <code class=\"varname\">name</code> and <code class=\"varname\">type</code>.</p>\n<p>When the client sends a POST to <code class=\"literal\">/Earth/Mount%20Rushmore</code> it shouldn’t specify <code class=\"varname\">latitude</code>, <code class=\"varname\">longitude</code>, or <code class=\"varname\">name</code>. The client is making a new place based on a well-known existing place, and the new place will inherit the name and location of the existing place. The client may specify a custom <code class=\"varname\">type</code> (“national-park,” “political,” “places in North Dakota”) or inherit the default (“monument”).</p>\n<p>The client may always choose to omit <code class=\"varname\">description</code> and <code class=\"varname\">public</code>. My service sets default values for those variables: descriptions are empty by default, and places are public by default.</p>\n<p>When the client modifies one of its custom places, anything and everything about the place might change: its name, its location, its type, its description, or its public status. The PUT request that modifies a place can specify the same key-value pairs used to create a place, in any combination. The server will make the appropriate changes, assuming the changes make sense.</p>\n<p><a class=\"xref\" href=\"ch06.html#example_6_6\" title=\"Example&nbsp;6-6.&nbsp;An HTTP request that creates a subordinate resource\">Example&nbsp;6-6</a> shows a sample HTTP POST <a id=\"I_indexterm6_tt536\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt537\" class=\"indexterm\"></a>request that creates a new custom place. Combined, the form-encoded representation and the scoping information in the URI convey all required states for the new resource. The name and location of the new resource come from the scoping information; its type and description come from the representation. Since the representation doesn’t specify a value for <code class=\"literal\">public</code>, the default takes over and this new resource is made public.</p>\n<div class=\"example\">\n <a id=\"example_6_6\"></a>\n <div class=\"example-title\">\n  Example&nbsp;6-6.&nbsp;An HTTP request that creates a subordinate resource\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">POST /Earth/USA/Mount%20Rushmore HTTP/1.1\nHost: maps.example.com\nAuthorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=\n\ntype=national-park&amp;description=We%20visited%20on%203/5/2005</pre>\n </div>\n</div>\n<h2>Design the Representation(s) Served to the Client</h2>\n<p>Most of the work here is already done. In <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> I defined an XHTML-based representation format for places. Custom places look the same as places from the built-in database.</p>\n<p>The only new part is this: when an authenticated client requests a representation of one of its custom places, our service will tack onto the representation some<a id=\"I_indexterm6_tt538\" class=\"indexterm\"></a> hypermedia showing the client how to edit that place (see <a class=\"xref\" href=\"ch06.html#hypermedia-form\" title=\"Example&nbsp;6-7.&nbsp;A hypermedia form showing the client how to edit one of its places\">Example&nbsp;6-7</a>). I don’t need to tell clients how to delete the place: the uniform interface takes care of that. But I do need to convey the information I wrote in prose above: that a place is defined by <code class=\"varname\">planet</code>, <code class=\"varname\">latitude</code>, <code class=\"varname\">longitude</code>, and so on.</p>\n<div class=\"example\">\n <a id=\"hypermedia-form\"></a>\n <div class=\"example-title\">\n  Example&nbsp;6-7.&nbsp;A hypermedia form showing the client how to edit one of its places\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;form id=\"modifyPlace\" method=\"PUT\" action=\"\"&gt;\n &lt;p&gt;Modify this place:&lt;/p&gt;\n\n &lt;p&gt;\n  Name: &lt;input name=\"name\" value=\"Mount Rushmore\" type=\"text\" /&gt;&lt;br /&gt;\n  Type: &lt;input name=\"type\" value=\"national-park\" type=\"text\" /&gt;&lt;br /&gt;\n  Position: \n   &lt;input name=\"latitude\" value=\"43.9\" type=\"text\" /&gt;,\n   &lt;input name=\"longitude\" value=\"-103.46\" type=\"text\" /&gt;&lt;br /&gt;\n  Description:\n   &lt;textarea name=\"description\"&gt;We visited on 3/5/2005&lt;/textarea&gt;&lt;br /&gt;\n  Public?\n   &lt;input name=\"public\" type=\"checkbox\" value=\"on\"/&gt;\n  &lt;input type=\"submit\" /&gt;\n &lt;/p&gt;\n&lt;/form&gt;</pre>\n </div>\n</div>\n<p>The caveats from earlier apply here too. This isn’t valid XHTML 4, though it is valid XHTML 5, because it specifies PUT as its <code class=\"literal\">method</code>. Also, a client doesn’t know what to do with this form unless it’s been programmed in advance. Computers don’t know what “modifyPlace” means or what data might be a good value for “latitude.”</p>\n<p>Because clients have to be programmed in advance to understand these forms, most of today’s services don’t include a form for modifying a resource in that resource’s representation. They either serve all the forms up front (in a WSDL or WADL file), or they specify them in prose (as I did above) and leave it for the service programmer to figure out. It’s debatable whether it’s really helpful to serve forms along with representations, but serving them is better than just specifying the API in prose and making the programmer implement it.<a id=\"I_indexterm6_tt539\" class=\"indexterm\"></a></p>\n<h2>Link This Resource to Existing Resources</h2>\n<p>I’ve got <a id=\"ch06_linkxxx\" class=\"indexterm\"></a>three kinds of integration to do. The first is data integration. When you DELETE a user account, the account’s custom places—everything under <code class=\"literal\">/user/<em class=\"replaceable\"><code>{username}</code></em></code>—should also be deleted. URIs to these resources used to work, but now they will return a response code of 410 (“Gone”) or 404 (“Not Found”).</p>\n<p>The other kinds of integration should be familiar by now. They involve changing the representations of existing resources to talk about the new one. I want search results to link to custom places. I want points on the globe to show how the user can create a custom place at that point. I want to improve my connectedness by connecting “custom place” resources to the resources I defined already.</p>\n<p>The rather empty-looking representation of a user’s account, seen in <a class=\"xref\" href=\"ch06.html#your-user-account-representation\" title=\"Example&nbsp;6-3.&nbsp;A representation of “your” user’s account\">Example&nbsp;6-3</a>, badly needs some link-based integration. This is the ideal place to list a user’s custom places. I’ll represent the place list with the same XHTML list of links I use to represent search results.</p>\n<p>In the service defined in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>, a client that searched for places called “Mount Rushmore” (<code class=\"literal\">/Earth?show=Mount+Rushmore</code>) would only find places from my built-in place database: probably only the “consensus” location of Mount Rushmore in South Dakota. In the new version of the service, there’s likely to be more than one result. In the new version, that search will also return other users’ annotations for Mount Rushmore, and other places that users have named “Mount Rushmore,” like the scale model in Imaichi.</p>\n<p>This is the same case as in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>, where the built-in place database contained more than one “Joe’s diner.” I present search results in a list, each linking to a specific resource. All I’m doing is expanding the search. A search result may be a place in the built-in database, a custom place created by some other user and exposed publicly, or a custom place created by the authenticated user (which may be public or private).</p>\n<p>I also need to show the client how to create its own places on the map. Custom places are created as subordinate resources of existing places. The logical thing to do is to put that information in the representations of those places: places with URIs like <code class=\"literal\">/Earth/Mount%20Rushmore</code> and <code class=\"literal\">/Earth/42,-93.7</code>.</p>\n<p><a class=\"xref\" href=\"ch06.html#xhtml-map-representation-advanced\" title=\"Example&nbsp;6-8.&nbsp;An XHTML representation of 43.9N 103.46W on Earth\">Example&nbsp;6-8</a> is a possible representation of <code class=\"literal\">/Earth/43.9,-103.46</code> that brings together most of what I’ve covered in the past two chapters. This representation abounds in hypermedia. It links to a certain point on several different maps, a place from the built-in database, custom places from other users, and a custom place created by the authenticated user. It also has a hypermedia form that will let the authenticated user create a new custom place at these coordinates. Compare this representation to the smaller representation of <code class=\"literal\">/Earth/43.9,-103.46</code> back in <a class=\"xref\" href=\"ch05.html#xhtml-point-representation\" title=\"Example&nbsp;5-9.&nbsp;An XHTML representation of the point 43.9°N 103.46°W on Earth\">Example&nbsp;5-9</a>.</p>\n<div class=\"example\">\n <a id=\"xhtml-map-representation-advanced\"></a>\n <div class=\"example-title\">\n  Example&nbsp;6-8.&nbsp;An XHTML representation of 43.9N 103.46W on Earth\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n\n&lt;head&gt;\n &lt;title&gt;43.9&amp;deg;N 103.46&amp;deg;W on Earth&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;p class=\"authenticated\"&gt;\n You are currently logged in as \n &lt;a class=\"user\" href=\"/user/leonardr\"&gt;leonardr&lt;/a&gt;.\n&lt;/p&gt;\n\n&lt;p&gt; \n Welcome to \n &lt;a class=\"coordinates\" href=\"/Earth/43.9,-103.46\"&gt;43.9&amp;deg;N \n  103.46&amp;deg;W&lt;/a&gt; \n on scenic &lt;a class=\"place\" href=\"/Earth\"&gt;Earth&lt;/a&gt;.\n&lt;/p&gt;\n\n&lt;p&gt;See this location on a map:&lt;/p&gt;\n\n&lt;ul class=\"maps\"&gt;\n &lt;li&gt;&lt;a class=\"map\" href=\"/road/Earth/43.9,-103.46\"&gt;Road&lt;/a&gt;&lt;/li&gt;\n &lt;li&gt;&lt;a class=\"map\" href=\"/satellite/Earth/43.9,-103.46\"&gt;Satellite&lt;/a&gt;&lt;/li&gt;\n  ...\n&lt;/ul&gt;\n\n&lt;p&gt;Places at this location:&lt;/p&gt;\n\n&lt;ul class=\"places\"&gt;\n &lt;li&gt;\n  &lt;a class=\"builtin\" href=\"Mount%20Rushmore\"&gt;Mount Rushmore&lt;/a&gt;\n  System data says: \n  &lt;span class=\"description\"&gt;The world's largest sculpture&lt;/span&gt;\n &lt;/li&gt;\n\n &lt;li&gt;   \n  &lt;a class=\"custom\" href=\"Mt.%20Rushmore/user1\"&gt;Mt. Rushmore&lt;/a&gt;\n  &lt;a class=\"user\" href=\"/users/user1\"&gt;user1&lt;/a&gt; says: \n  &lt;span class=\"description\"&gt;Built on land stolen from the Lakota tribe&lt;/span&gt;\n &lt;/li&gt;\n\n &lt;li&gt;  \n  &lt;a class=\"custom\" href=\"Mount%20Rushmore%20Gift%20Shop/user2\"&gt;\n   Mount Rushmore Gift Shop\n  &lt;/a&gt;\n  &lt;a class=\"user\" href=\"/users/user1\"&gt;user1&lt;/a&gt; says: \n  &lt;span class=\"description\"&gt;Best fudge I've ever had&lt;/span&gt;\n &lt;/li&gt;\n\n &lt;li&gt; \n  &lt;a class=\"custom-private\" href=\"Mount%20Rushmore/leonardr\"&gt;Mt. Rushmore&lt;/a&gt;\n  You said: &lt;span class=\"description\"&gt;We visited on 3/5/2005&lt;/span&gt;\n &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;form id=\"searchPlace\" method=\"get\" action=\"\"&gt;\n &lt;p&gt;\n  Show nearby places, features, or businesses: \n  &lt;input name=\"show\" repeat=\"template\" /&gt; &lt;input class=\"submit\" /&gt;\n &lt;/p&gt;\n&lt;/form&gt;\n\n&lt;form id=\"createPlace\" method=\"post\" action=\"\"&gt;\n &lt;p&gt;Create a new place here:&lt;/p&gt;\n\n &lt;p&gt;\n  Name: &lt;input name=\"name\" value=\"\" type=\"text\" /&gt;&lt;br /&gt;\n  Type: &lt;input name=\"type\" value=\"\" type=\"text\" /&gt;&lt;br /&gt;\n  Description:\n   &lt;textarea name=\"description\"&gt;&lt;/textarea&gt;&lt;br /&gt;\n  Public?\n   &lt;input name=\"public\" type=\"checkbox\" value=\"on\"/&gt;\n  &lt;input type=\"submit\" /&gt;\n &lt;/p&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n </div>\n</div>\n<h2>What’s Supposed to Happen?</h2>\n<p>This<a id=\"I_indexterm6_tt540\" class=\"indexterm\"></a> new resource, the custom place, mostly works like other resources I’ve already defined. A custom place responds to GET just like a built-in place. It responds to PUT (with a representation consisting of key-value pairs) and DELETE (with no representation) just like “user account” resources do. I only have a couple new edge cases to consider here.</p>\n<p>When the client creates a custom place, the response code is 201 (“Created”). This works the same way as users. But it was never possible to cause a user’s URI to change, because I prohibited users from changing their usernames. It’s possible to change the name of a place, or to move one (say, a ship) from one point on the map to another. Either of these actions will change the URI.</p>\n<p>When the client modifies a custom place without changing its location, the response code will be 200 (“OK”). If the location changes, the response code will be 301 (“Moved Permanently”) and the <code class=\"literal\">Location</code> header will contain the place’s new URI. The client is responsible for updating its data structures to keep track of the new URI. This ties into a debate I’ll revisit in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, about whether it’s more important to have URIs that contain useful information, or URIs that never change. My URIs describe a custom place using two pieces of resource state: coordinates and name (<code class=\"literal\">/user/leonardr/Earth/43.9,-103.46/Mt.%20Rushmore</code>). If either of those changes, the old URI breaks.</p>\n<p>Broken URIs are no fun on the human web, and they’re even less fun on the programmable web. If my custom “place” is a ship or something else that’s constantly moving, it effectively has no permanent URI. This is the single biggest design flaw in my system. If I were exposing this as a real web service, I’d probably give a “permalink” to every place: an alternate URI that doesn’t incorporate any changeable resource state. Since everything about a place can change except the planet it’s on and the person who owns it, these URIs will not look very friendly: my annotation of Mount Rushmore might be accessible from <code class=\"literal\">/user/leonardr/Earth/36028efa8</code>. But at least they’ll always refer to the same place.</p>\n<h2>What Might Go Wrong?</h2>\n<p>This new kind of resource introduces new error conditions, but most of them are variations of ones I’ve already covered, so I’ll pass over them quickly. The client might try to move an existing place off of the map by providing an invalid latitude or longitude: the response code is 400 (“Bad Request”), just as it was in a similar case in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>. The 400 response code is also appropriate when a client tries to create a place without providing all the information the server needs. This is similar to the 400 response code the server sends if the client tells the server to change a user’s password, but doesn’t actually provide the new password.</p>\n<p>My service doesn’t allow a single user to define more than one place with the same name at the same coordinates. <code class=\"literal\">/user/leonardr/Earth/43.9,-103.46/Mt.%20Rushmore</code> can only identify one place at a time. Suppose a client has two places called “My car,” and makes a PUT request that would move one to the location of the other. My service rejects this request with a response code of 409 (“Conflict”). There’s nothing wrong with moving a place to a certain set of coordinates; it’s just that right now there happens to be another place with that name there. The same 409 response code would happen if the client had two custom places at the same coordinates, and tried to rename one to match the name of the other. In either case, the client is making a syntactically valid request that would put the system’s resources into an inconsistent state. It’s the same as trying to create a user that already exists.</p>\n<p>There’s one totally new error condition worthy of attention: the client may try to access a private place created by someone else. There are two possibilities. The first is to deny access with response code 403 (“Forbidden”). The 403 response code is used when the client provides no authentication, or insufficient authentication; the latter certainly applies in this case.</p>\n<p>But a response code of 403 is a tacit admission that the resource exists. The server should not be giving out this information. If client A creates a custom place and marks it private, client B should not be able to figure out anything about it, even its name, even by guessing. When revealing the existence of a resource would compromise security, the HTTP standard allows the server to lie, and send a response code of 404 (“Not Found”).</p>",
      "slug" : "custom-places"
    }, {
      "title" : "A Look Back at the Map Service",
      "type" : "page",
      "htmlContent" : "<p>This is still a simple design but it’s got quite a few features. In <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> my clients could get map images, navigate around a map, bookmark points on the globe, and do geographic searches against a built-in database of places. Now they can keep track of custom places, register comments on consensus places, and share places with other users. The representation in <a class=\"xref\" href=\"ch05.html#xhtml-map-representation\" title=\"Example&nbsp;5-6.&nbsp;An XHTML representation of the road map of Earth\">Example&nbsp;5-6</a> shows off most of these features.</p>\n<p>All of these features are made available through resources that expose the uniform interface. Occasionally I need to supplement the uniform interface with hypermedia forms (here, the XHTML 5 forms) that tell the client what representations can go with a PUT or POST request. The vast majority of requests will be GET requests. These need no hypermedia supplements, because GET always means the same thing.</p>\n<p>A client can get right to its desired resource by constructing a URI, or it can get to that resource by navigating links in the hypermedia I serve. You can get anywhere from the service root (the list of planets) by following links and filling out forms. Each resource is fairly simple, but the service as a whole is very powerful. The power comes from the variety of resources, the links that connect them, and the fact that each resource is individually addressable.</p>\n<p>The Resource-Oriented Architecture sets down a list of design questions you need to ask yourself. I embodied these questions in the previous chapter’s seven-step design procedure, and this chapter’s extended nine-step procedure. Like any architecture, the ROA imposes design constraints, but it doesn’t make all the design decisions for you. There are many other ways to define a map service in a RESTful and resource-oriented way. It all depends on how you split the data set into resources, what representations you define for those resources, and how you tie them together with hypermedia.</p>\n<p>What I’ve designed should work and be useful to clients, but I won’t know for sure, because I don’t have to implement it. I just designed it to illustrate concepts in a book. When designing a real service, you also have implementation issues to consider. You have to write code to back up every decision you make: decisions about what resources you expose, what parts of the uniform interface they respond to, what URIs you choose, and which representations you serve and accept. In the next chapter, I’ll make all these decisions again for a different data set, and this time I’ll back it up with a <a id=\"I_indexterm6_tt542\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt543\" class=\"indexterm\"></a><a id=\"I_indexterm6_tt544\" class=\"indexterm\"></a>real implementation.</p>",
      "slug" : "a-look-back-at-the-map-service"
    } ]
  }, {
    "title" : "7. A Service Implementation",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;7.&nbsp;A Service Implementation</h2>\n  </div>\n </div>\n</div>\n<p>It’s been a while since I presented any code. Indeed, coming up with the code is currently a general problem for REST advocates. Despite the simplicity of REST, right now there are few well-known services that show off its principles. The average web service has an architecture that combines elements of REST with the RPC style. This is changing, of course, and this book is part of the wave of change. Another problem is that many services seem trivial when exposed through resources, even though they’d look very impressive as SOAP/WSDL services. See <a class=\"xref\" href=\"apa.html\" title=\"Appendix&nbsp;A.&nbsp;Some Resources for REST and Some RESTful Resources\">Appendix&nbsp;A</a> for a partial list of real RESTful services with enough moving parts to learn from.</p>\n<p>Until recently, web frameworks made few concessions to the lucrative REST market. They focus on applications for web browsers, using only the GET and POST methods of HTTP. You can implement RESTful services with just GET and POST, but the limitation seems to encourage the RPC style instead. New frameworks for RESTful services are showing up, though, and existing frameworks are changing to accommodate REST fans.<a id=\"I_indexterm7_tt545\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt546\" class=\"indexterm\"></a> Django (Python), Restlet (Java), and Ruby on Rails all make it easy to expose resources that respond to HTTP’s uniform interface. I cover these frameworks in <a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">Chapter&nbsp;12</a>. In this chapter I use Ruby on Rails as a medium for demonstrating how to implement a real-world web service.</p>",
    "textContent" : "Chapter 7. A Service Implementation\r\n\r\nIt’s been a while since I presented any code. Indeed, coming up with the code is currently a general problem for REST advocates. Despite the simplicity of REST, right now there are few well-known services that show off its principles. The average web service has an architecture that combines elements of REST with the RPC style. This is changing, of course, and this book is part of the wave of change. Another problem is that many services seem trivial when exposed through resources, even though they’d look very impressive as SOAP/WSDL services. See Appendix A for a partial list of real RESTful services with enough moving parts to learn from.\r\n\r\nUntil recently, web frameworks made few concessions to the lucrative REST market. They focus on applications for web browsers, using only the GET and POST methods of HTTP. You can implement RESTful services with just GET and POST, but the limitation seems to encourage the RPC style instead. New frameworks for RESTful services are showing up, though, and existing frameworks are changing to accommodate REST fans. Django (Python), Restlet (Java), and Ruby on Rails all make it easy to expose resources that respond to HTTP’s uniform interface. I cover these frameworks in Chapter 12. In this chapter I use Ruby on Rails as a medium for demonstrating how to implement a real-world web service.",
    "slug" : "7-a-service-implementation",
    "pages" : [ {
      "title" : "A Social Bookmarking Web Service",
      "type" : "page",
      "htmlContent" : "<p>Back in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a> I introduced del.icio.us, a web site that lets you publicly post bookmarks, tag them with short metadata strings, and see which URIs other people have posted. There’s also a del.icio.us web service, which I used as the target of the web service clients in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>.</p>\n<p>I mentioned that the del.icio.us web service has a couple shortcomings. First, it’s a REST-RPC hybrid, not a fully RESTful service. It only exposes resources by accident and it doesn’t respect HTTP’s uniform interface. Second, the web service only gives you access to your own bookmarks and tags. When you use the service, it looks like you’re the only person on del.icio.us. In this chapter I use Ruby on Rails to develop a RESTful web service has much of the functionality of the del.icio.us web service <span class=\"emphasis\"><em>and</em></span> the del.icio.us web site.</p>\n<p>I’ve got three goals for this chapter. Previous chapters showed you service design from first principles. Here, I want to show you how to make a RESTful, resource-oriented service out of an <span class=\"emphasis\"><em>existing</em></span> RPC-style service. Second, I want to show you the sort of tradeoffs you might need to make to get a design that works within your chosen framework. Finally, I want to show you the complete code to a nontrivial web service, without boring you with page after page of implementation details. I chose Ruby on Rails as my framework because Ruby is a dynamic language, and Rails comes with a lot of helper classes. This makes it easy to illustrate the underlying concepts in just a few lines of code. What’s more, the most recent version of Rails is explicitly designed around the principles of REST and resource-oriented design.</p>\n<p>My challenge is to reconcile the constraints imposed by the Resource-Oriented Architecture, and my own design sensibilities, with the simplifying assumptions of the Rails framework. My resource design is heavily informed by what Rails itself considers good design, but at points I’ve had to hack Rails to get the behavior I want, instead of the behavior Rails creator David Heinemeier Hansson wants. Rails imposes more constraints than most frameworks (this is a big reason for its success, actually), but your choice of framework will always have some effect on your design.</p>\n<p>I’m going to start with an empty Rails 1.2 application, and fill in the details as the design takes shape. I created a Rails application with the following command:</p>\n<a id=\"I_programlisting7_tt548\"></a>\n<pre class=\"programlisting\">$ <strong class=\"userinput\"><code>rails bookmarks</code></strong></pre>\n<p>I installed two Rails plugins I know I’ll need: <code class=\"literal\">acts_as_taggable</code>, <a id=\"I_indexterm7_tt549\" class=\"indexterm\"></a>to implement tags on bookmarks, and <code class=\"literal\">http_authentication</code>,<a id=\"I_indexterm7_tt550\" class=\"indexterm\"></a> to tie HTTP Basic authentication into my user model. I’ve also installed the <code class=\"literal\">atom-tools</code> Ruby gem,<a id=\"I_indexterm7_tt551\" class=\"indexterm\"></a> so I can generate<a id=\"I_indexterm7_tt552\" class=\"indexterm\"></a> Atom feeds for representations.</p>\n<a id=\"I_programlisting7_tt553\"></a>\n<pre class=\"programlisting\">$ <strong class=\"userinput\"><code><code class=\"varname\">cd bookmarks </code></code></strong>\n$ <strong class=\"userinput\"><code>script/plugin install acts_as_taggable</code></strong> \n$ <strong class=\"userinput\"><code>script/plugin install http_authentication</code></strong>\n$ <strong class=\"userinput\"><code>gem install atom-tools</code></strong></pre>\n<p>I also created a SQL database called <code class=\"literal\">bookmarks_development</code>, and configured <em class=\"filename\">config/database.yaml</em> so that Rails can connect to the database.</p>",
      "slug" : "a-social-bookmarking-web-service"
    }, {
      "title" : "Figuring Out the Data Set",
      "type" : "page",
      "htmlContent" : "<p>Because<a id=\"ch07_datasets\" class=\"indexterm\"></a> I’m basing my service on an existing one, it’s fairly easy to figure out the parameters of the data set. If what follows is confusing, feel free to flip back to <a class=\"xref\" href=\"ch02.html#delicious-intro\" title=\"del.icio.us: The Sample Application\">del.icio.us: The Sample Application</a>” in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a> for an overview of del.icio.us.</p>\n<p>The del.icio.us site has four main kinds of data: user accounts, bookmarks (del.icio.us calls them “posts”), tags (short strings that act as metadata for bookmarks), and bundles (collections of tags for a user). The web site and the web service track the same data set.</p>\n<p>Unlike an S3 bucket, or a user account on my map service, a del.icio.us user account is not just a named list of subordinate resources. It’s got state of its own. A del.icio.us account has a username and password, but it’s supposed to correspond to a particular person, and it also tracks that person’s full name and email address. A user account also has a list of subordinate resources: the user’s bookmarks. All this state can be fetched and manipulated through HTTP.</p>\n<p>A bookmark belongs to a user and has six pieces of state: a URI, a short and a long description, a timestamp, a collection of tags, and a flag that says whether or not it’s public (the previous chapter’s “custom place” resource has a similar flag). The client is in charge of specifying all of this information for each bookmark, though the URI and the short description are the only required pieces of state.</p>\n<p>The URIs in users’ bookmarks are the most interesting part of the data set. When you put a bunch of peoples’ bookmarks together, you find that the URIs have emergent properties. On del.icio.us these properties include newness, a measure of how recently someone bookmarked a particular URI; “popularity,” a measure of how many people have bookmarked that URI; and the “tag cloud,” a generated vocabulary for the URI, based on which tags people tend to use to describe the URI. The del.icio.us web site also exposes a recommendation engine that relates URIs to each other, using a secret algorithm.</p>\n<p>I’m not going to do much with the emergent properties of URIs, properties that account for much of del.icio.us’s behind-the-scenes code. My implemented service will have a notion of newness but it won’t have popularity, tag clouds, or recommendation algorithms. This is just so I can keep this book down to a manageable size instead of turning it into a book about recommendation algorithms.</p>\n<p>Tags have only one piece of state: their name. They only exist in relation to bookmarks—and bundles, which I haven’t described yet. A bundle is a user’s decision to group particular tags together. A user with tags “recipes,” “restaurants,” and “food,” might group those tags into a bundle called “gustation.” I’ll show the RESTful design of bundles, just for completeness, but I won’t be implementing them when it comes time to write code.</p>\n<p>At this point I know enough about the data set to create the <a id=\"I_indexterm7_tt555\" class=\"indexterm\"></a>database schema. I create an empty database called <code class=\"literal\">bookmarks_development</code> in my <a id=\"I_indexterm7_tt556\" class=\"indexterm\"></a>MySQL installation, and put this data in the file <em class=\"filename\">db/migrate/001_initial_schema.rb</em>, shown in <a class=\"xref\" href=\"ch07.html#bookmark-schema\" title=\"Example&nbsp;7-1.&nbsp;The bookmark database schema as a Rails migration\">Example&nbsp;7-1</a>.</p>\n<div class=\"example\">\n <a id=\"bookmark-schema\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-1.&nbsp;The bookmark database schema as a Rails migration\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">class InitialSchema &lt; ActiveRecord::Migration\n\n  # Create the database tables on a Rails migration.\n  def self.up\n    # The 'users' table, tracking four items of state \n    # plus a unique ID.\n    create_table :users, :force =&gt; true do |t|\n      t.column :user_id, :string\n      t.column :name, :string\n      t.column :full_name, :string\n      t.column :email, :string\n      t.column :password, :string\n    end\n\n    # The 'bookmarks' table, tracking six items of state,\n    # plus a derivative field and a unique ID.\n    create_table :bookmarks, :force =&gt; true do |t|\n      t.column :bookmark_id, :string\n      t.column :uri, :string\n      t.column :uri_hash, :string   # A hash of the URI.\n                                    # See book text below.\n      t.column :short_description, :string\n      t.column :long_description, :text\n      t.column :timestamp, :datetime\n      t.column :public, :boolean\n    end\n\n    # This join table reflects the fact that bookmarks are subordinate\n    # resources to users.\n    create_table :user_bookmarks, :force =&gt; true do |t|\n      t.column :user_id, :integer\n      t.column :bookmark_id, :integer\n    end\n\n    # These two are standard tables defined by the acts_as_taggable\n    # plugin, of which more later. This one defines tags.\n    create_table :tags do |t|\n      t.column :name, :string\n    end\n\n    # This one defines the relationship between tags and the things\n    # tagged--in this case, bookmarks.\n    create_table :taggings do |t|\n      t.column :tag_id, :integer\n      t.column :taggable_id, :integer\n      t.column :taggable_type, :string\n    end\n\n    # Four indexes that capture the ways I plan to search the\n    # database.\n    add_index :users, :name\n    add_index :bookmarks, :uri_hash\n    add_index :tags, :name\n    add_index :taggings, [:tag_id, :taggable_id, :taggable_type]\n  end\n  # Drop the database tables on a Rails reverse migration.\n  def self.down\n    [:users, :bookmarks, :tags, :user_bookmarks, :taggings].each do |t|\n      drop_table t\n    end\n  end\nend</pre>\n </div>\n</div>\n<p>I’ve used Ruby code to describe five database tables and four indexes. I create the corresponding database schema by running this command:<a id=\"I_indexterm7_tt557\" class=\"indexterm\"></a></p>\n<a id=\"I_programlisting7_tt558\"></a>\n<pre class=\"programlisting\"><strong class=\"userinput\"><code>$ rake db:migrate</code></strong></pre>",
      "slug" : "figuring-out-the-data-set"
    }, {
      "title" : "Resource Design",
      "type" : "page",
      "htmlContent" : "<p>In Chapters <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">5</a> and <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">6</a> I<a id=\"ch07_resources\" class=\"indexterm\"></a> had a lot of leeway in turning my imaginary data set into resources. The idea for my map service came from the Google Maps application with its image tiles, but I took it off in another direction. I added user accounts, custom places, and other features not found in any existing map service.</p>\n<p>This chapter works differently. I’m focusing on translating the ideas of del.icio.us into the Resource-Oriented Architecture. There are lots of ways of exposing a data set of tagged bookmarks, but I’m focusing on the ones del.icio.us actually uses. Let’s start by taking a look at what the del.icio.us web service has to offer.</p>\n<p>The del.icio.us web service is a REST-RPC hybrid service, described in English prose at <a class=\"ulink\" href=\"http://del.icio.us/help/api/\" target=\"_top\">http://del.icio.us/help/api/</a>. The web service itself is rooted at <a class=\"ulink\" href=\"https://api.del.icio.us/v1/\" target=\"_top\">https://api.del.icio.us/v1/</a>. The service exposes three RPC-style APIs, rooted at the relative URIs <code class=\"literal\">posts/</code>, <code class=\"literal\">tags/</code>, and <code class=\"literal\">bundles/</code>. Beneath these URIs the web service exposes a total of twelve RPC functions that can be invoked through HTTP GET. I need to define RESTful resources that can expose at least the functionality of these three APIs:</p>\n<p>First, the <code class=\"literal\">posts/</code> API, which lets the user fetch and manage her bookmark posts to del.icio.us:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><code class=\"function\">posts/get</code>: Search your posts by tag or date, or search for a specific bookmarked URI.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">posts/recent</code>: Fetch the <em class=\"replaceable\"><code>n</code></em> most recent posts by the authenticated user. The client may apply a tag filter: “fetch the <em class=\"replaceable\"><code>n</code></em> most recent posts that the authenticated user tagged with tag <em class=\"replaceable\"><code>t</code></em>”.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">posts/dates</code>: Fetch the number of posts by the authenticated user for each day: perhaps five posts on the 12th, two on the 15th, and so on. The client may apply a tag filter here, too.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">posts/all</code>: Fetch all posts for the authenticated user, ever. The client may apply a tag filter.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">posts/update</code>: Check when the authenticated user last posted a bookmark. Clients are supposed to check this before deciding to call the expensive <code class=\"function\">posts/all</code>.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">posts/add</code>: Create a bookmark for a URI. The client must specify a short description. It may choose to specify a long description, a set of tags, and a timestamp. A bookmark may be public or private (the default is public). A client may not bookmark the same URI more than once: calling <code class=\"function\">posts/add</code> again overwrites the old post with new information.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">posts/delete</code>: Deletes a user’s post for a particular URI.</p></li>\n </ul>\n</div>\n<p>Second, the <code class=\"literal\">tags/</code> API, which lets the authenticated user manage her tags separately from the bookmarks that use the tags:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><code class=\"function\">tags/get</code>: Fetch a list of tags used by the authenticated user.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">tags/rename</code>: Rename one of the authenticated user’s tags. All posts tagged with the old name will now be tagged with the new name instead.</p></li>\n </ul>\n</div>\n<p>Finally, the <code class=\"literal\">bundles</code> API, which lets the authenticated user group similar tags together.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><code class=\"function\">tags/bundles/all</code>: Fetch the user’s bundles. The resulting document lists the bundles, and each bundle lists the tags it contains.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">tags/bundles/set</code>: Group several tags together into a (possibly new) bundle.</p></li>\n  <li class=\"listitem\"><p><code class=\"function\">tags/bundles/delete</code>: Delete a bundle.</p></li>\n </ul>\n</div>\n<p>That’s the web service. As I mentioned in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, the service only gives you access to your own bookmarks and tags. The del.icio.us web site has social features as well, and I’m going to steal some of those features for my design.</p>\n<p>Here are some interesting “functions” exposed by the del.icio.us web site but not the web service:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><code class=\"literal\">/<em class=\"replaceable\"><code>{username}</code></em></code>: Fetch any user’s bookmarks.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">/<em class=\"replaceable\"><code>{username}</code></em>/<em class=\"replaceable\"><code>{tag}</code></em></code>: Fetch any user’s bookmarks, applying a tag filter.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">/tag/<em class=\"replaceable\"><code>{tag-name}</code></em></code>: Fetch bookmarks tagged with a particular tag, from all users.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">/url/<em class=\"replaceable\"><code>{URI-MD5}</code></em></code>: Fetch the list of users who have bookmarked a particular URI. The <em class=\"replaceable\"><code>{URI-MD5}</code></em> happens to be the MD5 hash of the URI, but from the average client’s point of view that’s not important: it’s an opaque string of bytes that somehow identifies a URI within the del.icio.us system.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">/recent</code>: Fetch the most recently posted bookmarks, from all users. The del.icio.us home page also shows this information.</p></li>\n </ul>\n</div>\n<p>Now that I know what the service has to do, arranging the features into resources is like working a logic puzzle. I want to expose as few kinds of resources as possible. But one kind of resource can only convey one concept, so sometimes I need to split a single feature across two kinds of resource. On the other hand, sometimes I can combine multiple RPC functions into one kind of resource, a resource that responds to several methods of HTTP’s uniform interface.</p>\n<h2>REST in Rails</h2>\n<p>I’m not designing these resources in a vacuum: I’m going to implement them in a Rails application. It’s worth taking a brief look at how RESTful applications work in Rails. Unlike some other frameworks, Rails doesn’t let you define your resources directly. Instead, it divides up an application’s functionality into<a id=\"I_indexterm7_tt560\" class=\"indexterm\"></a> <em class=\"firstterm\">controllers</em>: it’s the controllers that expose the resources. The first path variable in a request URI is used to route Rails to the appropriate controller class. For instance, in the URI <code class=\"literal\">/weblogs/4</code> the “weblogs” designates the controller: probably a class called <code class=\"classname\">WeblogController</code>. The “4” designates the database ID of a particular weblog.</p>\n<p>In previous versions of Rails, programmers defined RPC-style methods on controllers: methods like <code class=\"function\">rename</code> and <code class=\"function\">delete</code>. To rename a weblog you’d send a GET or an overloaded POST request to <code class=\"literal\">/weblogs/4/rename</code>. Rails applications, like most web applications, were REST-RPC hybrids.</p>\n<p>In Rails 1.2, programmers define special controller methods that correspond to the methods of HTTP’s uniform interface. For instance, sending a GET to <code class=\"literal\">/weblogs</code> triggers the <code class=\"classname\">WeblogController</code>’s <code class=\"function\">index</code> method, which is supposed to retrieve a list of the weblogs. Sending a POST to the same URI triggers the <code class=\"function\">WeblogController#create</code> method, which creates a subordinate resource beneath <code class=\"literal\">/weblogs</code>: say, a weblog with a URI of <code class=\"literal\">/weblogs/4</code>. The Rails controller exposes a resource—“the list of weblogs”—that responds to GET and POST. As you’d expect, when you POST to the “list” resource you get a subordinate resource: a new weblog.</p>\n<p>The subordinate resource also supports the uniform interface. If you wanted to rename a weblog in an RPC-style service, you might POST a new name to <code class=\"literal\">/weblogs/4/rename</code>. Under a RESTful regime, you PUT a new name to <code class=\"literal\">/weblogs/4</code>, triggering the <code class=\"function\">WeblogController#update</code> method. To delete a weblog, you send a DELETE request to its URI, triggering the controller’s <code class=\"function\">WeblogController#destroy</code> method. There’s no need to expose an RPC-style URI <code class=\"literal\">/weblogs/4/delete</code>, because HTTP’s uniform interface already knows about deleting.</p>\n<p>These two resources, a list and an item in the list, show up all the time. Every database table is a list that contains items. Anything that can be represented as an RSS or Atom feed is a list that contains items. Rails defines a RESTful architecture that makes a simplifying assumption: every resource you expose can be made to fit one of these two patterns. This makes things easy most of the time, but the cost is aggravation when you try to use Rails controllers to expose resources that don’t fit this simple model.</p>\n<p>I’m going to define my resources in terms of Rails controllers. These controllers impose constraints on my URI structure and my use of the uniform interface, and I need to design with those constraints in mind. By the time I’m done designing the controllers, I’ll know which resources the controllers expose, which URIs they answer to, and which methods of the uniform interface correspond to which RPC functions from the del.icio.us service. Basically, I’ll have completed steps 2 through 4 of the 9-step procedure from the <a class=\"xref\" href=\"ch06.html#turning_reqs\" title=\"Turning Requirements into Read/Write Resources\">Turning Requirements into Read/Write Resources</a>” section in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>: “Split the data set into resources,” “Name the resources with URIs,” and “Expose a subset of the uniform interface.” In <a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">Chapter&nbsp;12</a> I give a variant of the service design procedure specifically for Rails services.</p>\n<p>I’ll only be accessing my Rails application from my local machine. The root URI will be <em class=\"filename\">http://localhost:3000/v1</em>. When I give a relative URI below, like <code class=\"literal\">/users</code>, understand that I’m talking about <em class=\"filename\">http://localhost:3000/v1/users</em>. I only ever plan to write one version of this service, but I’m versioning the URIs, just in case. (When and how to version is discussed in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>).</p>\n<h2>The User Controller</h2>\n<p>Now<a id=\"I_indexterm7_tt561\" class=\"indexterm\"></a> I’m going to go back to that big list of RPC functions I found in the del.icio.us API and web site, and try to tease some Rails controllers out of it. One obvious controller is one that exposes information about user accounts. In Rails, this would be a class called <code class=\"classname\">UsersController</code>. As soon as I say that, a lot of decisions are made for me. Rails sets up a path of least resistance that looks like this:</p>\n<p>The user controller exposes a one-off “user list” resource, at the URI <code class=\"literal\">/users</code>. It also exposes a resource for every user on the system, at a URI that incorporates the user’s database ID: <code class=\"literal\">/users/52</code> and the like. These resources expose some subset of HTTP’s uniform interface. Which subset? Rails defines this with a programming-language interface in the superclass of all controller classes: <code class=\"classname\">ActionController::Base</code>. <a class=\"xref\" href=\"ch07.html#table_7_1\" title=\"Table&nbsp;7-1.&nbsp;How Rails wants my UsersController to look\">Table&nbsp;7-1</a> shows how the two interfaces line up.</p>\n<div class=\"table\">\n <a id=\"table_7_1\"></a>\n <div class=\"table-title\">\n  Table&nbsp;7-1.&nbsp;How Rails wants my UsersController to look\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Operation</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">HTTP action</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Rails method</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">List the users</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \"><a id=\"I_indexterm7_tt562\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt563\" class=\"indexterm\"></a>GET /users</td>\n     <td style=\"border-bottom: 0.5pt solid ; \"><code class=\"function\">UsersController#index</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Create a user</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">POST<a id=\"I_indexterm7_tt564\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt565\" class=\"indexterm\"></a> /users</td>\n     <td style=\"border-bottom: 0.5pt solid ; \"><code class=\"function\">UsersController#create</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">View a user</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET<a id=\"I_indexterm7_tt566\" class=\"indexterm\"></a> /users/52</td>\n     <td style=\"border-bottom: 0.5pt solid ; \"><code class=\"function\">UsersController#show</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Modify a user</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT<a id=\"I_indexterm7_tt567\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt568\" class=\"indexterm\"></a> /users/52</td>\n     <td style=\"border-bottom: 0.5pt solid ; \"><code class=\"function\">UsersController#update</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">Delete a user</td>\n     <td style=\"border-right: 0.5pt solid ; \">DELETE<a id=\"I_indexterm7_tt569\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt570\" class=\"indexterm\"></a> /users/52</td>\n     <td><code class=\"function\">UsersController#destroy</code></td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<p>So if I want to let clients create new user accounts, I implement <code class=\"function\">UsersController#create</code>, and my “user list” resource starts calling that method in response to POST requests.</p>\n<p>The path of least resistance is pretty good but I have a couple problems with it. First, I don’t want to let clients fetch the list of users, because del.icio.us doesn’t have that feature. (Presumably the del.icio.us administrative interface does have a feature like this.) That’s fine: I don’t have to expose GET on every resource, and I don’t have to define <code class=\"function\">index</code> in every controller. My user list resource, at the URI <code class=\"literal\">/users</code>, will only expose the POST method, for creating new users. My user list is a featureless container for user account resources, and the only thing a client can do with it is create a new account. This incorporates functionality like that at <a class=\"ulink\" href=\"https://secure.del.icio.us/register\" target=\"_top\">https://secure.del.icio.us/register</a>, where you can use your web browser to sign up for a del.icio.us account.</p>\n<div class=\"sidebar\">\n <a id=\"delicious-accounts\"></a>\n <div class=\"sidebar-title\">\n  User Account Creation\n </div>\n <p>The real del.icio.us site doesn’t expose user account creation through its web service. To create a user account you must prove you’re a human being, by typing in the string you see in a graphic. This graphic (called a <em class=\"firstterm\">CAPTCHA</em>) is an explicit attempt to move the human web off of the programmable web, to prevent automated clients (many of which are up to no good) from creating their own del.icio.us accounts.</p>\n <p>This is legitimate. Not every piece of functionality has to be part of your web service, and it’s your decision what to expose. But I don’t want to get into the details of web site and CAPTCHA design in this book, so I’m exposing user account creation as part of the web service.</p>\n</div>\n<p>Another problem is that URIs like <code class=\"literal\">/users/52</code> look ugly. They certainly don’t look like <a class=\"ulink\" href=\"http://del.icio.us/leonardr\" target=\"_top\">http://del.icio.us/leonardr</a>, the URI to my corresponding page on del.icio.us. This URI format is the Rails default because every object in a Rails application’s database can be uniquely identified by its table (“users”) and its ID (“52”). This URI might go away (if user 52 DELETEs her account), but it will never change, because database unique IDs don’t change.</p>\n<p>I’d rather expose readable URIs that might change occasionally than permanent URIs that don’t say anything, so I’m going to identify a user using elements of its resource state. I happen to know that users have unique names, so I’m going to expose my “user” resources at URIs like <code class=\"literal\">/users/leonardr</code>. Each resource of this type will expose the methods GET, PUT, and DELETE. This incorporates the functionality of the del.icio.us web site’s <code class=\"literal\">/<em class=\"replaceable\"><code>{username}</code></em></code> “function.” It also incorporates the pages on the web site (I didn’t mention these earlier) that let you edit and delete your own del.icio.us account.</p>\n<p>To expose this RESTful interface, I just need to implement four special methods on <code class=\"classname\">UsersController</code>. The <code class=\"function\">create</code> method implements POST on the “user list” resource at <code class=\"literal\">/users</code>. The other three methods implement HTTP methods on the “user” resources at <code class=\"literal\">/users/{username}</code>: <code class=\"function\">show</code> implements GET, <code class=\"function\">update</code> implements PUT, and <code class=\"function\">destroy</code> implements DELETE.</p>\n<h2>The Bookmarks Controller</h2>\n<p>Each user account<a id=\"ch07_controllers\" class=\"indexterm\"></a> <a id=\"I_indexterm7_tt571\" class=\"indexterm\"></a>has a number of subordinate resources associated with it: the user’s bookmarks. I’m going to expose these resources through a second controller class, rooted beneath the “user account” resource.</p>\n<p>The base URI of this controller will be <code class=\"literal\">/users/{username}/bookmarks</code>. Like the users controller, the bookmarks controller exposes two types of resource: a one-off resource for the list of a user’s bookmarks, and one resource for each individual bookmark.</p>\n<p>Rails wants to expose an individual bookmark under the URI <code class=\"literal\">/users/{username}/bookmarks/{database-id}</code>. I don’t like this any more than I like <code class=\"literal\">/users/{database-id}</code>. I’d like the URI to a bookmark to have some visible relationship to the URI that got bookmarked.</p>\n<p>My original plan was to incorporate the target URI in the URI<a id=\"I_indexterm7_tt572\" class=\"indexterm\"></a> to the bookmark. That way if I bookmarked <a class=\"ulink\" href=\"http://www.oreilly.com/\" target=\"_top\">http://www.oreilly.com/</a>, the bookmark resource would be available at <code class=\"literal\">/v1/users/leonardr/bookmarks/http://www.oreilly.com/</code>. Lots of services work this way, including<a id=\"I_indexterm7_tt573\" class=\"indexterm\"></a> <a class=\"ulink\" href=\"http://validator.w3.org/\" target=\"_top\">the W3C’s HTML validator</a>. Looking at one of these URIs you can easily tell who bookmarked what. Rails didn’t like this URI format, though, and after trying some hacks I decided to get back on Rails’s path of least resistance. Instead of embedding external URIs in my resource URIs, I’m going to put the URI through a one-way hash function and embed the hashed string instead.</p>\n<p>If you go to <a class=\"ulink\" href=\"http://del.icio.us/url/55020a5384313579a5f11e75c1818b89\" target=\"_top\">http://del.icio.us/url/55020a5384313579a5f11e75c1818b89</a> in your web browser, you’ll see the list of people who’ve bookmarked <a class=\"ulink\" href=\"http://www.oreilly.com/\" target=\"_top\">http://www.oreilly.com/</a>. There’s no obvious connection between the URI and its MD5 hash, but if you know the former you can calculate the latter. It’s certainly better than a totally opaque database ID. And since it’s a single alphanumeric string, Rails handles it with ease. My bookmark resources will have URIs like <code class=\"literal\">/v1/users/leonardr/bookmarks/55020a5384313579a5f11e75c1818b89</code>. That URI identifies the time I bookmarked <a class=\"ulink\" href=\"http://www.oreilly.com/\" target=\"_top\">http://www.oreilly.com/</a> (see <a class=\"xref\" href=\"ch07.html#example_7_2\" title=\"Example&nbsp;7-2.&nbsp;Calculating an MD5 hash in Ruby\">Example&nbsp;7-2</a>).</p>\n<div class=\"example\">\n <a id=\"example_7_2\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-2.&nbsp;Calculating an MD5 hash in Ruby\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">require 'digest/md5'\nDigest::MD5.new(\"http://www.oreilly.com/\").to_s\n# =&gt; \"55020a5384313579a5f11e75c1818b89\"</pre>\n </div>\n</div>\n<p>When a user is first created it has no bookmarks. A client creates bookmarks by sending a POST request to its own “bookmark list” resource, just as it might create a user account by sending a POST to the “user list” resource. This takes care of the <code class=\"function\">posts/add</code> and <code class=\"function\">posts/delete</code> functions from the del.icio.us API.</p>\n<div class=\"sidebar\">\n <a id=\"I_sidebar7_tt574\"></a>\n <div class=\"sidebar-title\">\n  Creating a New Bookmark\n </div>\n <p>There are two other ways to expose the ability to create a new bookmark. Both are RESTful, but neither is on the Rails path of least resistance.</p>\n <p>The first alternative is the one I chose for user accounts back in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>. In the fantasy map application, a client creates a user account by sending a PUT request to <code class=\"literal\">/users/{username}</code>. The corresponding solution for the user bookmark would be to have a client create a bookmark by sending a PUT request to <code class=\"literal\">/users/{username}/bookmarks/{URI-MD5}</code>. The client knows its own username and the URI it wants to bookmark, and it knows how to calculate MD5 hashes, so why not let it make the final URI itself?</p>\n <p>This would work fine within the ROA, but it’s not idiomatic for Rails. The simplest way to create new objects in RESTful Rails is to send a <a id=\"I_indexterm7_tt575\" class=\"indexterm\"></a>POST request to the corresponding “list” resource.</p>\n <p>The other alternative treats bookmarks as a subordinate resource of user accounts. To create a bookmark you send a POST request, not to <code class=\"literal\">/users/{username}/bookmarks</code> but to <code class=\"literal\">/users/{username}</code>. The bookmark is made available at <code class=\"literal\">/users/{username}/{URI-MD5}</code>. The “bookmarks” path fragment doesn’t exist at all.</p>\n <p>Those URIs are more compact, but Rails doesn’t support them (at least not very easily), because it needs that extra path fragment <code class=\"literal\">/bookmarks</code> to identify the <code class=\"classname\">BookmarksController</code>. There’s also no easy way of exposing POST on an individual user. The method <code class=\"function\">UsersController#create</code>, which responds to POST, is already being used to expose POST on the user <span class=\"emphasis\"><em>list</em></span>.</p>\n <p>It’s not a big deal in this case, but you can see how a framework can impose restrictions on the resource design, atop the rules and best practices of the Resource-Oriented Architecture.</p>\n</div>\n<p>Unlike with the list of users, I do want to let clients fetch the list of a user’s bookmarks. This means <code class=\"literal\">/users/{username}/bookmarks</code> will respond to GET. The individual bookmarks will respond to GET, PUT, and DELETE. This means the <code class=\"classname\">BookmarksController</code>: <code class=\"function\">index</code>, <code class=\"function\">create</code>, <code class=\"function\">show</code>, <code class=\"function\">update</code>, and <code class=\"function\">delete</code>.</p>\n<p>The “bookmark list” resource incorporates some of the functionality from the del.icio.us API functions <code class=\"function\">posts/get</code>, <code class=\"function\">posts/recent</code>, and <code class=\"function\">posts/all</code>.</p>\n<h2>The User Tags Controller</h2>\n<p>Bookmarks<a id=\"I_indexterm7_tt576\" class=\"indexterm\"></a> aren’t the only type of resource that conceptually fits “beneath” a user account. There’s also the user’s tag vocabulary. I’m not talking about tags in general here: I’m asking questions about which tags a particular user likes to use. These questions are handled by the user tags controller.</p>\n<p>This controller is rooted at <code class=\"literal\">/users/<em class=\"replaceable\"><code>{username}</code></em>/tags</code>. That’s the “user tag list” resource. It’s an algorithmic resource, generated from the tags a user uses to talk about her bookmarks. This resource corresponds roughly to the del.icio.us <code class=\"function\">tags/get</code> function. It’s a read-only resource: a user can’t modify her vocabulary directly, only by changing the way she uses tags in bookmarks.</p>\n<p>The resources at <code class=\"literal\">/users/<em class=\"replaceable\"><code>{username}</code></em>/tags/<em class=\"replaceable\"><code>{tag}</code></em></code> talk about the user’s use of a specific tag. My representation will show which bookmarks a user has filed under a particular tag. This class of resource corresponds to the <code class=\"literal\">/<em class=\"replaceable\"><code>{username}</code></em>/<em class=\"replaceable\"><code>{tag}</code></em></code> “function” from the web site. It also incorporates some stuff of the del.icio.us API functions <code class=\"function\">posts/get</code>, <code class=\"function\">posts/recent</code>, and <code class=\"function\">posts/all</code>.</p>\n<p>The “tag” resources are also algorithmic, but they’re not strictly read-only. A user can’t delete a tag except by removing it from all of her bookmarks, but I do want to let users rename tags. (Tag deletion is a plausible feature, but I’m not implementing it because, again, del.icio.us doesn’t have it.) So each user-tag resource will expose PUT for clients who want to rename that tag.</p>\n<p>Instead of PUT, I could have used overloaded POST to define a one-off “rename” method like the del.icio.us API’s <code class=\"literal\">tag/rename</code>. I didn’t, because that’s RPC-style thinking. The PUT method suffices to convey <span class=\"emphasis\"><em>any</em></span> state change, whether it’s a rename or something else. There’s a subtle difference between renaming the tag and changing its state so the name is different, but it’s the difference between an RPC-style interface and a uniform, RESTful one. It’s less work to program a computer to understand a generic “change the state” than to program it to understand “rename a tag.”</p>\n<h2>The Calendar Controller</h2>\n<p>A user’s posting history—her calendar— is handled<a id=\"I_indexterm7_tt577\" class=\"indexterm\"></a> by one more controller that lives “underneath” a user account resource. The posting history is another algorithmically generated, read-only resource: you can’t change your posting history except by posting. The controller’s root URI is <code class=\"literal\">/users/<em class=\"replaceable\"><code>{username}</code></em>/calendar</code>, and it corresponds to the del.icio.us API’s <code class=\"function\">posts/dates</code> function.</p>\n<p>I’ll also expose a variety of subresources, one for each tag in a user’s vocabulary. These resources will give a user’s posting history when only one tag is considered. These resources correspond to the del.icio.us API’s <code class=\"function\">posts/dates</code> function with a tag filter applied. Both kinds of resource, posting history and filtered posting history, will expose only GET.</p>\n<h2>The URI Controller</h2>\n<p>I mentioned earlier that URIs <a id=\"I_indexterm7_tt578\" class=\"indexterm\"></a>in a social bookmarking system have emergent properties. The URI controller gives access to some of those properties. It’s rooted at <code class=\"literal\">/uris/</code>, and it exposes URIs as resources independent from the users who bookmark them.</p>\n<p>I’m not exposing this controller’s root URI as a resource, though I could. The logical thing to put there would be a huge list of all URIs known to the application. But again, the site I’m taking for my model doesn’t have any feature like that. Instead, I’m exposing a series of resources at <code class=\"literal\">/uris/<em class=\"replaceable\"><code>{URI-MD5}</code></em></code>: one resource for each URI known to the application. The URI format is the same as <code class=\"literal\">/users/{username}/bookmarks/{URI-MD5}</code> in the user bookmark controller: calculate the MD5 hash of the target URI and stick it onto the end of the controller’s base URI.</p>\n<p>These resources expose the application’s knowledge about a specific URI, such as which users have bookmarked it. This corresponds to the <code class=\"literal\">/url/<em class=\"replaceable\"><code>{URI-MD5}</code></em></code> “function” on the del.icio.us web site.</p>\n<h2>The Recent Bookmarks Controller</h2>\n<p>My last implemented <a id=\"I_indexterm7_tt579\" class=\"indexterm\"></a>controller reveals another emergent property of the URIs. In this case the property is newness: which URIs were most recently posted.</p>\n<p>This controller is rooted at <code class=\"literal\">/recent</code>. The top-level “list” resource lists all the recently posted bookmarks. This corresponds to the <code class=\"literal\">/recent</code> “function” on the del.icio.us web site.</p>\n<p>The sub-resources at <code class=\"literal\">/recent/<em class=\"replaceable\"><code>{tag}</code></em></code> expose the list of recently posted bookmarks that were tagged with a particular tag. For instance, a client can GET <code class=\"literal\">/recent/recipes</code> to find recently posted URIs that were tagged with “recipes”. This corresponds to the <code class=\"literal\">/tag/<em class=\"replaceable\"><code>{tag-name}</code></em></code> function on the del.icio.us web site.</p>\n<h2>The Bundles Controller</h2>\n<p>Again, I’m not going<a id=\"I_indexterm7_tt580\" class=\"indexterm\"></a> to implement this controller, but I want to design it so you can see I’m not cheating. This controller is rooted at <code class=\"literal\">/user/<em class=\"replaceable\"><code>{username}</code></em>/bundles/</code>. An alternative is <code class=\"literal\">/user/<em class=\"replaceable\"><code>{username}</code></em>/tags/bundles/</code>, but that would prevent any user from having a tag named “bundles”. A client can send a GET request to the appropriate URI to get any user’s “bundle list”. A client can POST to its own bundle list to create a new bundle. This takes care of <code class=\"function\">tags/bundles/all</code> and part of <code class=\"function\">tags/bundles/set</code>.</p>\n<p>The sub-resources at <code class=\"literal\">/user/<em class=\"replaceable\"><code>{username}</code></em>/bundles/<em class=\"replaceable\"><code>{bundle}</code></em></code> expose the individual bundles by name. These respond to GET (to see which tags are in a particular bundle), PUT (to modify the tags associated with a bundle), and DELETE (to delete a bundle). This takes care of <code class=\"function\">tags/bundles/delete</code> and the rest of <code class=\"function\">tags/bundles/set</code>.<a id=\"I_indexterm7_tt581\" class=\"indexterm\"></a></p>\n<h2>The Leftovers</h2>\n<p>What’s left? I’ve covered almost all the functionality of the original del.icio.us API, but I haven’t placed the <code class=\"function\">posts/update</code> function. This function is designed to let a client avoid calling <code class=\"function\">posts/all</code> when there’s no new data there. Why bother? Because the <code class=\"function\">posts/all</code> function is extremely expensive on the server side. A del.icio.us client is supposed to keep track of the last time it called <code class=\"function\">posts/all</code>, and check that time against the “return value” of <code class=\"function\">posts/update</code> before calling the expensive function again.</p>\n<p>There’s already a solution for this built into HTTP: conditional GET. I cover it briefly in <a class=\"xref\" href=\"ch08.html#conditional-get\" title=\"Conditional GET\">Conditional GET</a> later in this chapter and I’ll cover it in more detail in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, but in this chapter you’ll see it implemented. By implementing conditional GET, I can give the time- and bandwidth-saving benefits of <code class=\"function\">posts/update</code> to most of the resources I’m exposing, not just the single most expensive one.</p>\n<h2>Remodeling the REST Way</h2>\n<p><a id=\"tags-and-tag-bundles\"></a>I’ve taken an RPC-style web service that was only RESTful in certain places and by accident, and turned it into a set of fully RESTful resources. I’d like to take a break now and illustrate how the two services line up with each other. Tables <a class=\"xref\" href=\"ch07.html#table_7_2\" title=\"Table&nbsp;7-2.&nbsp;Service comparison: user accounts\">7-2</a> through <a class=\"xref\" href=\"ch07.html#table_7_6\" title=\"Table&nbsp;7-6.&nbsp;Service comparison: tags and tag bundles\">7-6</a> show every social bookmarking operation I implemented, the HTTP request you’d send to invoke that operation on my RESTful web service, and how you’d invoke the corresponding operation on del.icio.us itself.</p>\n<div class=\"table\">\n <a id=\"table_7_2\"></a>\n <div class=\"table-title\">\n  Table&nbsp;7-2.&nbsp;Service comparison: user accounts\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Operation</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">On my service</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">On del.icio.us</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Create a user account<a id=\"I_indexterm7_tt582\" class=\"indexterm\"></a></td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">POST <code class=\"literal\">/users</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">POST <code class=\"literal\">/register</code> (via web site)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">View a user account</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}</code> (via web site)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Modify a user account</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT <code class=\"literal\">/users/{username}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">Various, via web site</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">Delete a user account</td>\n     <td style=\"border-right: 0.5pt solid ; \">DELETE <code class=\"literal\">/users/{username}</code></td>\n     <td>POST <code class=\"literal\">/settings/{username}/profile/delete</code> (via web site)</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<div class=\"table\">\n <a id=\"id390757\"></a>\n <div class=\"table-title\">\n  Table&nbsp;7-3.&nbsp;Service comparison: bookmark management\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Operation</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">On my service</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">On del.icio.us</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Post a bookmark<a id=\"I_indexterm7_tt583\" class=\"indexterm\"></a></td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">POST <code class=\"literal\">/users/{username}/bookmarks</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/add</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Fetch a bookmark</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/bookmarks/{URI-MD5}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/get</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Modify a bookmark</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT <code class=\"literal\">/users/{username}/bookmarks/{URI-MD5}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/add</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Delete a bookmark</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">DELETE <code class=\"literal\">/users/{username}/bookmarks/{URI-MD5}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/delete</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \" class=\"keep-together\">See when the user last posted a bookmark</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Use conditional HTTP GET</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/update</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Fetch a user’s posting history</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/calendar</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/dates</code> (your history only)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">Fetch a user’s posting history, filtered by tag</td>\n     <td style=\"border-right: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/calendar/{tag}</code></td>\n     <td>GET <code class=\"literal\">/posts/dates</code> with query string (your history only)</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<div class=\"table\">\n <a id=\"table_7_4\"></a>\n <div class=\"table-title\">\n  Table&nbsp;7-4.&nbsp;Service comparison: finding bookmarks\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Operation</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">On my service</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">On del.icio.us</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Fetch a user’s recent bookmarks</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/bookmarks</code> with query string</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/recent</code> (your bookmarks only)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Fetch all of a user’s bookmarks</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/bookmarks</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/all</code> (your bookmarks only)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Search a user’s bookmarks by date</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/bookmarks</code> with query string</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/posts/get</code> with query string (your bookmarks only)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">Fetch a user’s bookmarks tagged with a certain tag</td>\n     <td style=\"border-right: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/bookmarks/{tag}</code></td>\n     <td>GET <code class=\"literal\">/posts/get</code> with query string (your bookmarks only)</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<div class=\"table\">\n <a id=\"table_7_5\"></a>\n <div class=\"table-title\">\n  Table&nbsp;7-5.&nbsp;Service comparison: social features\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Operation</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">On my service</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">On del.icio.us</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">See recently posted bookmarks</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/recent</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/recent</code> (via web site)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">See recently posted bookmarks for a certain tag</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/recent/{tag}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/tag/{tag}</code> (via web site)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">See which users have bookmarked a certain URI</td>\n     <td style=\"border-right: 0.5pt solid ; \">GET <code class=\"literal\">/uris/{URI-MD5}</code></td>\n     <td>GET <code class=\"literal\">/url/{URI-MD5}</code> (via web site)</td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<div class=\"table\">\n <a id=\"table_7_6\"></a>\n <div class=\"table-title\">\n  Table&nbsp;7-6.&nbsp;Service comparison: tags and tag bundles\n </div>\n <div class=\"table-contents\">\n  <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n   <colgroup>\n    <col>\n    <col>\n    <col>\n   </colgroup>\n   <thead>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Operation</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">On my service</td>\n     <td style=\"border-bottom: 0.5pt solid ; \">On del.icio.us</td>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Fetch a user’s tag vocabulary<a id=\"I_indexterm7_tt584\" class=\"indexterm\"></a></td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/tags</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/tags/get</code> (your tags only)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Rename a tag</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT <code class=\"literal\">/users/{username}/tags/{tag}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/tags/rename</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Fetch the list of a user’s tag bundles</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/bundles</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/tags/bundles/all</code> (your bundles only)</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Group tags into a bundle</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">POST <code class=\"literal\">/users/{username}/bundles</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/tags/bundles/set</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Fetch a bundle</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/users/{username}/bundles/{bundle}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">N/A</td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Modify a bundle</td>\n     <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT <code class=\"literal\">/users/{username}/bundles/{bundle}</code></td>\n     <td style=\"border-bottom: 0.5pt solid ; \">GET <code class=\"literal\">/tags/bundles/set</code></td>\n    </tr>\n    <tr>\n     <td style=\"border-right: 0.5pt solid ; \">Delete a bundle</td>\n     <td style=\"border-right: 0.5pt solid ; \">DELETE <code class=\"literal\">/users/{username}/bundles/{bundle}</code></td>\n     <td>GET <code class=\"literal\">/tags/bundles/delete</code></td>\n    </tr>\n   </tbody>\n  </table>\n </div>\n</div>\n<p>I think you’ll agree that the RESTful service is more self-consistent, even accounting for the fact that some of the del.icio.us features come from the web service and some from the web site. <a class=\"xref\" href=\"ch07.html#table_7_6\" title=\"Table&nbsp;7-6.&nbsp;Service comparison: tags and tag bundles\">Table&nbsp;7-6</a> is probably the best for a straight-up comparison. There you can distinctly see the main advantage of my RESTful service: its use of the HTTP method to remove the operation name from the URI. This lets the URI identify an object in the object-oriented sense. By varying the HTTP method you can perform different operations on the object. Instead of having to understand some number of arbitrarily-named functions, you can understand a single class (in the object-oriented sense) whose instances expose a standardized interface.</p>\n<p>My service also lifts various restrictions found in the del.icio.us web service. Most notably, you can see other peoples’ public bookmarks. Now, sometimes restrictions are the accidental consequences of bad design, but sometimes they exist for a reason. If I were deploying this service commercially it might turn out that I want to add those limits back in. I might not want user A to have unlimited access to user B’s bookmark list. I don’t have to change my design to add these limits. I just have to change the authorization component of my service. I make it so that authenticating as <code class=\"literal\">userA</code> doesn’t authorize you to fetch <code class=\"literal\">userB</code>’s public bookmarks, any more than it authorizes you to delete <code class=\"literal\">userB</code>’s account. Or if bandwidth is the problem, I might limit how often any user can perform certain operations. I haven’t changed my resources at all: I’ve just added additional rules about when operations on those resources will succeed.</p>\n<h2>Implementation: The routes.rb File</h2>\n<p>Ready for some more code? I’ve split my data set into Rails controllers, and each Rails controller has divided its data set further into one or two kinds of resources. Rails has also made decisions about what my URIs will look like. I vetoed some of these decisions (like <code class=\"literal\">/users/52</code>, which I changed to <code class=\"literal\">/users/leonardr</code>), but most of them I’m going to let stand.</p>\n<p>I’ll implement the controllers as Ruby classes, but what about the URIs? I need some way of mapping path fragments like <code class=\"literal\">bookmarks/</code> to controller classes like <code class=\"classname\">BookmarksController</code>. In a Rails application, this is the job of the <em class=\"filename\">routes.rb</em> file. <a class=\"xref\" href=\"ch07.html#routes-rb\" title=\"Example&nbsp;7-3.&nbsp;The routes.rb file\">Example&nbsp;7-3</a> is a <em class=\"filename\">routes.rb</em> that sets up URIs for the six controllers I’ll implement later in the chapter.</p>\n<div class=\"example\">\n <a id=\"routes-rb\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-3.&nbsp;The routes.rb file\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\"># service/config/routes.rb\nActionController::Routing::Routes.draw do |map|\n  base = '/v1'\n\n  ## The first controller I define is the UsersController. The call to\n  ## map.resources sets it up so that all HTTP requests to /v1/users\n  ## or /v1/users/{username} are routed to the UsersController class.\n\n  # /v1/users =&gt; UsersController\n  map.resources :users, :path_prefix =&gt; base\n\n  ## Now I'm going to define a number of controllers beneath the\n  ## UsersController. They will respond to requests for URIs that start out\n  ## with /v1/users/{username}, and then have some extra stuff.\n  user_base = base + '/users/:username'\n\n  # /v1/users/{username}/bookmarks =&gt; BookmarksController\n  map.resources :bookmarks, :path_prefix =&gt; user_base\n\n  # /v1/users/{username}/tags =&gt; TagsController\n  map.resources :tags, :path_prefix =&gt; user_base\n\n  # /v1/users/{username}/calendar =&gt; CalendarController\n  map.resources :calendar, :path_prefix =&gt; user_base\n\n  ## Finally, two more controllers that are rooted beneath /v1.\n\n  # /v1/recent =&gt; RecentController\n  map.resources :recent, :path_prefix =&gt; base\n\n  # /v1/uris =&gt; UrisController\n  map.resources :uris, :path_prefix =&gt; base\nend</pre>\n </div>\n</div>\n<p>Now I’m committed to defining six controller classes. The code in <a class=\"xref\" href=\"ch07.html#routes-rb\" title=\"Example&nbsp;7-3.&nbsp;The routes.rb file\">Example&nbsp;7-3</a> determines the class names by tying into Rails’ naming conventions. My six classes are called <code class=\"classname\">UsersController</code>, <code class=\"classname\">BookmarksController</code>, <code class=\"classname\">TagsController</code>, <code class=\"classname\">CalendarController</code>, <code class=\"classname\">RecentController</code>, and <code class=\"classname\">UrisController</code>. Each class controls one or two kinds of resources. Each controller implements a specially-named Ruby method for each HTTP method the resources expose.<a id=\"I_indexterm7_tt585\" class=\"indexterm\"></a></p>",
      "slug" : "resource-design"
    }, {
      "title" : "Design the Representation(s) Accepted from the Client",
      "type" : "page",
      "htmlContent" : "<p>When a client<a id=\"ch07_rep1\" class=\"indexterm\"></a> wants to modify a user account or post a bookmark, how should it convey the resource state to the server? Rails transparently supports two incoming representation formats: form-encoded key-value pairs and the<a id=\"I_indexterm7_tt587\" class=\"indexterm\"></a> ActiveRecord XML serialization format.</p>\n<p>Form-encoding should<a id=\"I_indexterm7_tt588\" class=\"indexterm\"></a> be familiar to you. I mentioned it back in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>, and it’s everywhere in web applications. It’s the <code class=\"literal\">q=jellyfish</code> and <code class=\"literal\">color1=blue&amp;color2=green</code> you see in query strings on the human web. When a client makes a request that<a id=\"I_indexterm7_tt589\" class=\"indexterm\"></a> includes the query string <code class=\"literal\">color1=blue&amp;color2=green</code>, Rails gives the controller a hash that looks like this:<a id=\"I_programlisting7_tt590\"></a></p>\n<pre class=\"programlisting\">{\"color1\" =&gt; \"blue\", \"color2\" =&gt; \"green\"}</pre>\n<p>The service author doesn’t have to parse the representation: they can work directly with the<a id=\"I_indexterm7_tt591\" class=\"indexterm\"></a> key-value pairs.</p>\n<p>ActiveRecord<a id=\"I_indexterm7_tt592\" class=\"indexterm\"></a> is Rails’s object-relational library. It gives a native Ruby interface to the tables and rows in a relational database.<a id=\"I_indexterm7_tt593\" class=\"indexterm\"></a> In a Rails application, most exposed resources correspond to these ActiveRecord tables and rows. That’s the case for my service: all my users and bookmarks are database rows managed through ActiveRecord.</p>\n<p>Any ActiveRecord object, and the database row that underlies it, can be represented as a set of key-value pairs. These key-value pairs can be form-encoded, but ActiveRecord also knows how to encode them into XML documents. <a class=\"xref\" href=\"ch07.html#user-xml\" title=\"Example&nbsp;7-4.&nbsp;An XML representation of a user account\">Example&nbsp;7-4</a> gives an XML depiction of an ActiveRecord object from this chapter: a user account. This is the string you’d get by calling <code class=\"function\">to_xml</code> on a (yet-to-be-defined) <code class=\"classname\">User</code> object. <a class=\"xref\" href=\"ch07.html#user-form-encoded\" title=\"Example&nbsp;7-5.&nbsp;A form-encoded representation of a user account\">Example&nbsp;7-5</a> gives an equivalent form-encoded representation. <a class=\"xref\" href=\"ch07.html#user-hash\" title=\"Example&nbsp;7-6.&nbsp;A set of key-value pairs derived from XML or the form-encoded representation\">Example&nbsp;7-6</a> gives the hash that’s left when Rails parses the <a id=\"I_indexterm7_tt594\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt595\" class=\"indexterm\"></a>XML document or the form-encoded string as an incoming representation.</p>\n<div class=\"example\">\n <a id=\"user-xml\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-4.&nbsp;An XML representation of a user account\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;user&gt;\n &lt;name&gt;leonardr&lt;/name&gt;\n &lt;full-name&gt;Leonard Richardson&lt;/full-name&gt;\n &lt;email&gt;leonardr@example.com&lt;/email&gt;\n &lt;password&gt;mypassword&lt;/password&gt; \n&lt;/user&gt;</pre>\n </div>\n</div>\n<div class=\"example\">\n <a id=\"user-form-encoded\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-5.&nbsp;A form-encoded representation of a user account\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">user[name]=leonardr&amp;user[full-name]=Leonard%20Richardson\n&amp;user[email]=leonardr%40example.com&amp;user[password]=mypassword</pre>\n </div>\n</div>\n<div class=\"example\">\n <a id=\"user-hash\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-6.&nbsp;A set of key-value pairs derived from XML or the form-encoded representation\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">{ \"user[name]\" =&gt; \"leonardr\",\n  \"user[full_name]\" =&gt; \"Leonard Richardson\",\n  \"user[email]\" =&gt; \"leonardr@example.com\",\n  \"user[password]\" =&gt; \"mypassword\" }</pre>\n </div>\n</div>\n<p>I’m going to support both representation formats. I can do this by defining my keys for the form-encoded representation as <code class=\"literal\">user[name]</code> instead of just <code class=\"literal\">name</code>. This looks a little funny to the client, but it means that Rails will parse a form-encoded representation and an ActiveRecord XML representation into the same data structure: one that looks like the one in <a class=\"xref\" href=\"ch07.html#user-hash\" title=\"Example&nbsp;7-6.&nbsp;A set of key-value pairs derived from XML or the form-encoded representation\">Example&nbsp;7-6</a>.</p>\n<p>The keys for the key-value pairs of a user account representation are <code class=\"varname\">user[name]</code>, <code class=\"varname\">user[password]</code>, <code class=\"varname\">user[full_name]</code>, and <code class=\"varname\">user[email]</code>. Not coincidentally, these are the names of the corresponding fields in my database table <code class=\"literal\">users</code>.</p>\n<p>The keys for a representation of a bookmark are <code class=\"varname\">bookmark[short_description]</code>, <code class=\"varname\">bookmark[long_description]</code>, <code class=\"varname\">bookmark[timestamp]</code>, <code class=\"varname\">bookmark[public]</code>, and <code class=\"varname\">bookmark[tag][]</code>. These are all the names of database fields, except for <code class=\"varname\">bookmark[tag][]</code>, which corresponds to a bookmark’s tags. I’ll be handling tags specially, and you might recall they’re kept in separate database tables. For now, just note that the extra “[]” in the variable name tells Rails to expect multiple tags in a single request. </p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>There are other ways of allowing the client to specify multiple tags. The del.icio.us service itself represents a list of tags as a single <code class=\"varname\">tags</code> variable containing a space-separated string. This is good for a simple case, but in general I don’t like that because it reimplements something you can already do with the form-encoded format.</p>\n <p>A <a id=\"I_indexterm7_tt596\" class=\"indexterm\"></a>JSON data structure is another possible way of representing a bookmark. This would be a hash in which most keys correspond to strings, but where one key (<code class=\"varname\">tags</code>) corresponds to a list.</p>\n</div>\n<p>The incoming representation of a tag contains only one key-value pair: the key is <code class=\"varname\">tag[name]</code>.</p>\n<p>The incoming representation of a bundle contains two key-value pairs: <code class=\"varname\">bundle[name]</code> and <code class=\"varname\">bundle[tag][]</code>. The second one can show up multiple times in a single representation, since the point is to group multiple tags together. I’m approaching the implementation stage, so this is the last time I’ll mention bundles.</p>",
      "slug" : "design-the-representation-s-accepted-from-the-client"
    }, {
      "title" : "Design the Representation(s) Served to the Client",
      "type" : "page",
      "htmlContent" : "<p>I’ve got a huge number of options for outgoing representation formats: think back to the discussion in <a class=\"xref\" href=\"ch05.html#representingthemaplist\" title=\"Representing the List of Planets\">Representing the List of Planets</a>” in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>. Rails makes it easy to serve any number of representation formats, but the simplest to use is the XML representation you get when you call<a id=\"I_indexterm7_tt598\" class=\"indexterm\"></a> <code class=\"function\">to_xml</code> on an<a id=\"I_indexterm7_tt599\" class=\"indexterm\"></a> ActiveRecord object.</p>\n<p>This is a very convenient format to serve from Rails, but it’s got a big problem: it’s not a hypermedia format. A client that gets the user representation in <a class=\"xref\" href=\"ch07.html#user-xml\" title=\"Example&nbsp;7-4.&nbsp;An XML representation of a user account\">Example&nbsp;7-4</a> knows enough to reconstruct the underlying row in the <code class=\"literal\">users</code> table (minus the password). But that document says nothing about the relationship between that resource and other resources: the user’s bookmarks, tag vocabulary, or calendar. It doesn’t connect the “user” resource to any other resources. A service that serves only ActiveRecord XML documents isn’t well-connected.</p>\n<p>I’m going to serve <code class=\"function\">to_xml</code> representations in a couple places, just to keep the size of this chapter down. I’ll represent a user account and a user’s tag vocabulary with <code class=\"literal\">to_xml</code>. I’ll generate my own, custom <code class=\"function\">to_xml</code>-like document when representing a user’s posting history.</p>\n<p>When I think about the problem domain, another representation format leaps out at me: the Atom<a id=\"I_indexterm7_tt600\" class=\"indexterm\"></a> syndication format. Many of the resources I’m exposing are lists of bookmarks: recent bookmarks, bookmarks for a user, bookmarks for a tag, and so on. Syndication formats were designed to display lists of links. What’s more, there are already lots of software packages that understand URIs and syndication formats. If I expose bookmark lists through a standard syndication format, I’ll immediately gain a huge new audience for my service. Any program that manipulates syndication feeds can take my resources as input. What’s more, syndication feeds can contain links. If a resource can be represented as a syndication feed, I can link it to other resources. My resources will form a <span class=\"emphasis\"><em>web</em></span>, not just an unrelated set.</p>\n<p>My default representation will always be the <code class=\"function\">to_xml</code> one, but a client will be able to get an Atom representation of any list of bookmarks by tacking “.atom” onto the end of the appropriate URI. If a client GETs <code class=\"literal\">/users/leonardr/bookmarks/ruby</code>, it’ll see a linkless <code class=\"function\">to_xml</code> representation of the bookmarks belonging to the user “leonardr” and tagged with “ruby.” The URI <code class=\"literal\">/users/leonardr/bookmarks/ruby.atom</code> will give an Atom representation of the same resource, complete with links to related resources.<a id=\"I_indexterm7_tt601\" class=\"indexterm\"></a></p>",
      "slug" : "design-the-representation-s-served-to-the-client"
    }, {
      "title" : "Connect Resources to Each Other",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>There<a id=\"I_indexterm7_tt603\" class=\"indexterm\"></a> are many, many relationships between my resources. Think about the relationship between a user and her bookmarks, between a bookmark and the tags it was posted under, or between a URI and the users who’ve bookmarked it. But <a id=\"I_indexterm7_tt604\" class=\"indexterm\"></a>a <code class=\"literal\">to_xml</code> representation of a resource never links to the URI of another resource, so I can’t show those relationships in my representations. On the other hand, an Atom feed can contain links, and can capture relationships between resources.</p> \n  <p><a class=\"xref\" href=\"ch07.html#bookmarks-theory-and-practice\" title=\"Figure&nbsp;7-1.&nbsp;The bookmarking service in my head versus the actual service\">Figure&nbsp;7-1</a> shows my problem. When I think about the bookmarking service, I envision lots of conceptual links between the resources. But links only exist in the actual service when they’re embodied in representations. Atom representations contain lots of links, but <code class=\"literal\">to_xml</code> documents don’t. To give one example, the conceptual link between a user and the user’s bookmarks doesn’t actually exist in my service. A client is just supposed to “know” how to get a user’s bookmarks.</p> \n  <div class=\"figure\"> \n   <a id=\"bookmarks-theory-and-practice\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject7_tt605\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24576.png\" alt=\"The bookmarking service in my head versus the actual service\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;7-1.&nbsp;The bookmarking service in my head versus the actual service \n   </div> \n  </div> \n  <p>Also note that while the “user” resource is clearly the focal point of the service, neither diagram gives any clue as to how a client can get to that resource in the first place. I’ve described that in English prose. That means that my real audience is the people writing the web service clients, not the clients themselves.</p> \n  <p>This is a failure of connectivity, and it’s the same failure you can see in Amazon S3 and some other RESTful services. As REST becomes more popular, this kind of failure will probably be the last remaining vestige of the RPC style. I dealt with this problem in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> by defining a service home page that linked to a few top-level resources. These resources linked to more resources, and so on. My fantasy map application was completely connected.</p>\n </body>\n</html>",
      "slug" : "connect-resources-to-each-other"
    }, {
      "title" : "What’s Supposed to Happen?",
      "type" : "page",
      "htmlContent" : "<p>Rails exposes every<a id=\"I_indexterm7_tt606\" class=\"indexterm\"></a> database-backed application using only two resource patterns: lists (the database tables) and list items (the rows in a table). All list resources work pretty much the same way, as do all list item resources. Every “creation” operation follows the same rules and has similar failure conditions, whether the database row being created is a user, a bookmark, or something else. I can consider these rules as a sort of generic control flow, a set of general guidelines for implementing the HTTP interface for list and list item resources. I’ll start defining that control flow here, and pick it up again in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>.</p>\n<p>When a resource is created, the response code should be<a id=\"I_indexterm7_tt607\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt608\" class=\"indexterm\"></a> 201 (“Created”) and the <code class=\"literal\">Location</code> header should point the way to the resource’s location.</p>\n<p>When a resource is modified, the response code should be<a id=\"I_indexterm7_tt609\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt610\" class=\"indexterm\"></a> 200 (“OK”). If the resource state changes in a way that changes the URI to the resource (for instance, a user account is renamed), the response code is 301 (“Moved Permanently”) and the <code class=\"literal\">Location</code> header should provide the new URI.</p>\n<p>When an object is deleted, the response code should be 200 (“OK”).</p>\n<p>As far as possible, all resources that support GET should also support conditional GET. This means setting appropriate values for<a id=\"I_indexterm7_tt611\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt612\" class=\"indexterm\"></a> <code class=\"literal\">ETag</code> and <code class=\"literal\">Last-Modified</code>.</p>\n<p>One final rule, a rule about data security. Unlike the del.icio.us API, I don’t require authentication just to get information from the service. However, I do have a rule that no one should see a user’s private bookmarks unless they’re authenticated as that user. If you look at someone else’s bookmarks, you’ll get a representation that has her private bookmarks filtered out. You won’t see the full resource state: just the part you’re authorized to see. This principle extends past the bookmark lists themselves, and into things like the calendar and tag vocabulary. You should not see mysterious tags showing up in the representation of my tag vocabulary, tags that don’t correspond to any of the tags I used in my visible bookmarks. This last rule is specific to my social bookmarking application, but its lessons can be applied more generally.</p>",
      "slug" : "whats-supposed-to-happen"
    }, {
      "title" : "What Might Go Wrong?",
      "type" : "page",
      "htmlContent" : "<p>The main problem is<a id=\"I_indexterm7_tt613\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt614\" class=\"indexterm\"></a> unauthorized access. I can use the<a id=\"I_indexterm7_tt615\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt616\" class=\"indexterm\"></a> 401 response code (“Unauthorized”) any time the client tries to do something (edit a user’s account, rename a tag for a user) without providing the <a id=\"I_indexterm7_tt617\" class=\"indexterm\"></a>proper <code class=\"literal\">Authorization</code> header.</p>\n<p>A client might try to create a user account that already exists. From the point of view of the service, this looks like an attempt to modify the existing account without providing any authorization. The response code of 401 (“Unauthorized”) is appropriate, but it might be confusing to the client. My service will send a 401 response code when the authorization is provided but incorrect, and a<a id=\"I_indexterm7_tt618\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt619\" class=\"indexterm\"></a> 409 (“Conflict”) when no authorization at all is provided. This way, a client who thought she was creating a new account is less likely to be confused.</p>\n<p>Similarly, a client might try to rename a user account to a name that already exists. The 409 response code is appropriate here as well.</p>\n<p>Any resource that’s a list of bookmarks will support query variables <code class=\"varname\">limit</code> and <code class=\"varname\">date</code>. These variables place restrictions on which bookmarks should show up in the representation: the client can set a maximum number of bookmarks to retrieve, or restrict the operation to bookmarks posted on a certain date. If the client sends a nonsensical <code class=\"varname\">limit</code> or <code class=\"varname\">date</code>, the appropriate response code is<a id=\"I_indexterm7_tt620\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt621\" class=\"indexterm\"></a> 400 (“Bad Request”). I’ll also use 400 when a user tries to create or modify a resource, but doesn’t provide a valid representation.</p>\n<p>If the client tries to retrieve information about a nonexistent user, this service will do what del.icio.us does and send a response code of <a id=\"I_indexterm7_tt622\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt623\" class=\"indexterm\"></a>404 (“Not Found”). This is the client’s cue to create that user account if they wish. I’ll do the same if the client tries to get information about a URI that no one has bookmarked.</p>\n<p>A user can modify the URI listed in one of her bookmarks, but she can only have one bookmark for a given URI. If a user tries to change a bookmark’s URI to one she’s already bookmarked, a response code of 409 (“Conflict”) is appropriate. 409 is also the correct response if the user tries to POST a URI she’s already bookmarked. The uniform way to modify an existing bookmark is with PUT on the bookmark resource.</p>\n<p>If the client tries to create a user account or bookmark, but provides an incomplete or nonsensical representation, the response is 400 (“Bad Request”). For instance, the client might try to POST a new bookmark, but forget to send the URI of the bookmark. Or it might try to bookmark a “URI” that’s not a URI at all.</p>\n<p class=\"keep-together\">When creating a user, the client might send a JSON representation of a new user, instead of an ActiveRecord XML or form-encoded representation of the same data. In other words, it might send the totally wrong media type. The proper response code here is<a id=\"I_indexterm7_tt624\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt625\" class=\"indexterm\"></a> 415 (“Unsupported Media Type”). Rails handles this failure condition automatically.</p>",
      "slug" : "what-might-go-wrong"
    }, {
      "title" : "Controller Code",
      "type" : "page",
      "htmlContent" : "<p>Now we <a id=\"ch07_controllercode\" class=\"indexterm\"></a>come to the heart of the application: the code that converts incoming HTTP requests into specific actions on the database. I’m going to define a base class called <code class=\"classname\">ApplicationController</code>, which contains common code, including almost all of the tricky code. Then I’ll define the six controller classes I promised earlier.</p>\n<p>Each controller class will implement some <code class=\"literal\">actions</code>: methods that are called to handle a HTTP request. Rails defines a list of standard actions that correspond to methods from HTTP’s uniform interface. I mentioned these earlier: the <code class=\"literal\">index</code> action is invoked in response to <code class=\"literal\">GET</code> for a “list” type resource, and so on. Those are the actions I’ll be defining, though many of them will delegate to other actions with nonstandard names.</p>\n<p>There’s a lot of code in this application, but relatively little of it needs to be published in this book. Most of the low-level details are in Rails, the plugins, and the <code class=\"literal\">atom-tools</code> gem. I can express my high-level ideas almost directly in code. Of course, my reliance on external code occasionally has downsides, like the fact that some of my representations don’t contain links.</p>\n<h2>What Rails Doesn’t Do</h2>\n<p class=\"keep-together\">There’s one feature I want for my service that <span class=\"emphasis\"><em>isn’t</em></span> built into Rails or plugins, and there’s another that goes against Rails’s path of least resistance. I’m going to be implementing these features myself. These two items account for much of the tricky code in the service.</p>\n<div class=\"sect3\" title=\"Conditional GET\">\n <p>Wherever<a id=\"I_indexterm7_tt627\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt628\" class=\"indexterm\"></a> possible, a web service should send the response headers <code class=\"literal\">Last-Modified</code> and <code class=\"literal\">ETag</code> along with a representation. If the client makes future requests for the same resource, it can make its requests conditional on the representation having changed since the last GET. This can save time and bandwidth; see <a class=\"xref\" href=\"ch08.html#conditional-get\" title=\"Conditional GET\">Conditional GET</a>” in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a> for more on this topic.</p>\n <p>There are third-party Rails controllers that let the programmer provide values <a id=\"I_indexterm7_tt629\" class=\"indexterm\"></a>for <code class=\"literal\">Last-Modified</code> and <code class=\"literal\">ETag</code>. Core<a id=\"I_indexterm7_tt630\" class=\"indexterm\"></a> Rails doesn’t do this, and I don’t want to bring in the additional complexity of a third-party controller. I implement a fairly reusable solution for <code class=\"literal\">Last-Modified</code> in <a class=\"xref\" href=\"ch07.html#render-not-modified-or\" title=\"Example&nbsp;7-9.&nbsp;application.rb continued: render_not_modified_or\">Example&nbsp;7-9</a>.</p>\n</div>\n<div class=\"sect3\" title=\"param[:id] for things that aren’t IDs\">\n <p>Rails assumes that resources map to ActiveRecord objects. Specifically, it assumes that the URI to a “list item” resource identifies a row in a database table by ID. For instance, it assumes the client will request the URI <code class=\"literal\">/v1/users/4</code> instead of the more readable URI <code class=\"literal\">/v1/users/leonardr</code>.</p>\n <p>The client can still request <code class=\"literal\">/users/leonardr</code>, and the controller can still handle it. This just means that the username will be available as <code class=\"literal\">params[:id]</code> instead<a id=\"I_indexterm7_tt631\" class=\"indexterm\"></a> of something more descriptive, like <code class=\"literal\">params[:username]</code>.</p>\n <p>If a URI contains more than one path variable, then when I define that URI in <em class=\"filename\">routes.rb</em> I get to choose the <code class=\"varname\">params</code> name for all but the last one. The last variable always gets put into <code class=\"varname\">params[:id]</code>, even if it’s not an ID. The URI <code class=\"literal\">/v1/users/leonardr/tags/food</code> has two path variables, for example. <code class=\"varname\">params[:username]</code>, named back in <a class=\"xref\" href=\"ch07.html#routes-rb\" title=\"Example&nbsp;7-3.&nbsp;The routes.rb file\">Example&nbsp;7-3</a>, has a value of “leonardr”. The tag name is the one that gets put into <code class=\"varname\">params[:id]</code>. I’d rather call it <code class=\"varname\">params[:tag]</code>, but there’s no good way to do that in Rails. When you see <code class=\"varname\">params[:id]</code> in the code below, keep in mind that it’s never a database ID.</p>\n</div>\n<h2>The ApplicationController</h2>\n<p>This class is the abstract superclass of my six controllers, and it contains most of the common functionality (the rest will go into the ActiveRecord model classes). <a class=\"xref\" href=\"ch07.html#example_7_7\" title=\"Example&nbsp;7-7.&nbsp;app/controllers/application.rb\">Example&nbsp;7-7</a> starts by defining an action for the single most common operation in this service: fetching a list of bookmarks that meet some criteria.</p>\n<div class=\"example\">\n <a id=\"example_7_7\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-7.&nbsp;app/controllers/application.rb\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\"># app/controllers/application.rb\nrequire 'digest/sha1'\nrequire 'digest/md5'\nrequire 'rubygems'\nrequire 'atom/feed'\n\nclass ApplicationController &lt; ActionController::Base\n\n  # By default, show 50 bookmarks at a time.\n  @@default_limit = 50\n\n  ## Common actions\n\n  # This action takes a list of SQL conditions, adds some additional\n  # conditions like a date filter, and renders an appropriate list of\n  # bookmarks. It's used by BookmarksController, RecentController,\n  # and TagsController.\n  def show_bookmarks(conditions, title, feed_uri, user=nil, tag=nil)\n    errors = []\n\n    # Make sure the specified limit is valid. If no limit is specified,\n    # use the default.\n    if params[:limit] &amp;&amp; params[:limit].to_i &lt; 0\n      errors &lt;&lt; \"limit must be &gt;=0\"\n    end\n    params[:limit] ||= @@default_limit\n    params.delete(:limit) if params[:limit] == 0  # 0 means \"no limit\"\n\n    # If a date filter was specified, make sure it's a valid date.\n    if params[:date]\n      begin        \n        params[:date] = Date.parse(params[:date])\n      rescue ArgumentError\n        errors &lt;&lt; \"incorrect date format\"\n      end\n    end\n\n    if errors.empty?\n      conditions ||= [\"\"]\n      \n      # Add a restriction by date if necessary.\n      if params[:date]\n        conditions[0] &lt;&lt; \" AND \" unless conditions[0].empty?\n        conditions[0] &lt;&lt; \"timestamp &gt;= ? AND timestamp &lt; ?\"\n        conditions &lt;&lt; params[:date]\n        conditions &lt;&lt; params[:date] + 1\n      end\n\n      # Restrict the list to bookmarks visible to the authenticated user.\n      Bookmark.only_visible_to!(conditions, @authenticated_user)\n\n      # Find a set of bookmarks that matches the given conditions.\n      bookmarks = Bookmark.custom_find(conditions, tag, params[:limit])\n      \n      # Render the bookmarks however the client requested.\n      render_bookmarks(bookmarks, title, feed_uri, user)\n    else\n      render :text =&gt; errors.join(\"\\n\"), :status =&gt; \"400 Bad Request\"\n    end\n  end</pre>\n </div>\n</div>\n<p>The <code class=\"function\">show_bookmarks</code> method works like any Rails action: it gets query parameters<a id=\"I_indexterm7_tt632\" class=\"indexterm\"></a> like <code class=\"varname\">limit</code> from <code class=\"function\">params</code>, and verifies them. Then it fetches some data from the database and renders it with a view. A lot of my RESTful action methods will delegate to this method. If the RESTful action specifies no conditions, <code class=\"function\">show_bookmarks</code> will fetch all the bookmarks that match the date and tag filters, up to the limit. Most of my actions will impose additional conditions, like only fetching bookmarks posted by a certain user.</p>\n<p>The main difference between <code class=\"function\">show_bookmarks</code> and a traditional Rails action is in the view. Most Rails actions define the view with an ERb template like <em class=\"filename\">show.rhtml</em>: a combination of HTML and Ruby code that works like JSP templates or PHP code. Instead, I’m passing the job off to the <code class=\"function\">render_bookmarks</code> function (see <a class=\"xref\" href=\"ch07.html#render-bookmarks\" title=\"Example&nbsp;7-8.&nbsp;application.rb continued: render_bookmarks\">Example&nbsp;7-8</a>). This function uses code-based generators to build the XML and Atom documents that serve as representations for most of my application’s resources.</p>\n<div class=\"example\">\n <a id=\"render-bookmarks\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-8.&nbsp;\n  <em class=\"filename\">application.rb</em> continued: render_bookmarks\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # This method renders a list of bookmarks as a view in RSS, Atom, or\n  # ActiveRecord XML format. It's called by show_bookmarks\n  # above, which is used by three controllers. It's also used\n  # separately by UriController and BookmarksController.\n  # \n  # This view method supports conditional HTTP GET.\n  def render_bookmarks(bookmarks, title, feed_uri, user, except=[])\n    # Figure out a current value for the Last-Modified header.\n    if bookmarks.empty?\n      last_modified = nil\n    else\n      # Last-Modified is the most recent timestamp in the bookmark list.\n      most_recent_bookmark = bookmarks.max do |b1,b2|\n        b1.timestamp &lt;=&gt; b2.timestamp\n      end\n      last_modified = most_recent_bookmark.timestamp\n    end\n    \n    # If the bookmark list has been modified since it was last requested...\n    render_not_modified_or(last_modified) do\n      respond_to do |format|\n        # If the client requested XML, serialize the ActiveRecord\n        # objects to XML. Include references to the tags in the\n        # serialization.\n        format.xml  { render :xml =&gt; \n          bookmarks.to_xml(:except =&gt; except + [:id, :user_id],\n                           :include =&gt; [:tags]) }\n        # If the client requested Atom, turn the ActiveRecord objects\n        # into an Atom feed.\n        format.atom { render :xml =&gt; atom_feed_for(bookmarks, title, \n                                                   feed_uri, user) }\n      end\n    end\n  end</pre>\n </div>\n</div>\n<p>That method is also where I start handling conditional HTTP requests. I’ve chosen to use the timestamp of the most recent bookmark as the value of the HTTP header <code class=\"literal\">Last-Modified</code>.</p>\n<p>The rest of the conditional request handling is in the <code class=\"function\">render_not_modified_or</code> function (see <a class=\"xref\" href=\"ch07.html#render-not-modified-or\" title=\"Example&nbsp;7-9.&nbsp;application.rb continued: render_not_modified_or\">Example&nbsp;7-9</a>). It’s called just before <code class=\"function\">render_bookmarks</code> is about to write the list of bookmarks, and it applies the rules of conditional HTTP GET. If the list of bookmarks has changed since this client last requested it, this function calls the Ruby keyword <code class=\"literal\">yield</code> and the rest of the code in <code class=\"function\">render_bookmarks</code> runs normally. If the list of bookmarks hasn’t changed, this function short-circuits the Rails action, sending a response code of 304 (“Not Modified”) instead of serving the representation.</p>\n<div class=\"example\">\n <a id=\"render-not-modified-or\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-9.&nbsp;\n  <em class=\"filename\">application.rb</em> continued: render_not_modified_or\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  ## Helper methods\n\n  # A wrapper for actions whose views support conditional HTTP GET.\n  # If the given value for Last-Modified is after the incoming value\n  # of If-Modified-Since, does nothing. If Last-Modified is before\n  # If-Modified-Since, this method takes over the request and renders\n  # a response code of 304 (\"Not Modified\").\n  def render_not_modified_or(last_modified)\n    response.headers['Last-Modified'] = last_modified.httpdate if last_modified\n\n    if_modified_since = request.env['HTTP_IF_MODIFIED_SINCE']\n    if if_modified_since &amp;&amp; last_modified &amp;&amp;\n        last_modified &lt;= Time.httpdate(if_modified_since)\n      # The representation has not changed since it was last requested.\n      # Instead of processing the request normally, send a response\n      # code of 304 (\"Not Modified\").\n      render :nothing =&gt; true, :status =&gt; \"304 Not Modified\"\n    else\n      # The representation has changed since it was last requested.\n      # Proceed with normal request processing.\n      yield\n    end\n  end</pre>\n </div>\n</div>\n<p><a class=\"xref\" href=\"ch07.html#example_7_10\" title=\"Example&nbsp;7-10.&nbsp;application.rb continued: if_found.\">Example&nbsp;7-10</a> shows one more helper function used in multiple actions. The <code class=\"function\">if_found</code> method makes sure the client specified a URI that corresponds to an object in the database. If given a non-null object, nothing happens: <code class=\"function\">if_found</code> uses <code class=\"literal\">yield</code> to return control to the action that called it. If given a null object, the function short-circuits the request with a response code of 404 (“Not Found”), and the action never gets a chance to run.</p>\n<div class=\"example\">\n <a id=\"example_7_10\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-10.&nbsp;\n  <em class=\"filename\">application.rb</em> continued: if_found.\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # A wrapper for actions which require the client to have named a\n  # valid object. Sends a 404 response code if the client named a\n  # nonexistent object. See the user_id_from_username filter for an\n  # example.\n  def if_found(obj)\n    if obj\n      yield     else\n      render :text =&gt; \"Not found.\", :status =&gt; \"404 Not Found\"\n      false\n    end    \n  end</pre>\n </div>\n</div>\n<p>I’ve also implemented a number of <em class=\"firstterm\">filters</em>: pieces of code that run before the Rails actions do. Some Rails filters perform common setup tasks (see <a class=\"xref\" href=\"ch07.html#application-rb-filters\" title=\"Example&nbsp;7-11.&nbsp;application.rb continued: filters\">Example&nbsp;7-11</a>). This is the job of <code class=\"function\">authenticate</code>, which checks the client’s credentials. Filters may also check for a problem and short-circuit the request if they find one. This is the job of <code class=\"function\">must_authenticate</code>, and also <code class=\"function\">must_specify_user</code>, which depends on the <code class=\"function\">if_found</code> method defined above. Filters let me keep common code out of the individual actions.</p>\n<div class=\"example\">\n <a id=\"application-rb-filters\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-11.&nbsp;\n  <em class=\"filename\">application.rb</em> continued: filters\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  ## Filters\n\n  # All actions should try to authenticate a user, even those actions\n  # that don't require authorization. This is so we can show an\n  # authenticated user their own private bookmarks.\n  before_filter :authenticate\n\n  # Sets @authenticated_user if the user provides valid\n  # credentials. This may be used to deny access or to customize the\n  # view.\n  def authenticate    \n    @authenticated_user = nil\n    authenticate_with_http_basic do |user, pass|      \n      @authenticated_user = User.authenticated_user(user, pass)\n    end\n    return true\n  end\n\n  # A filter for actions that _require_ authentication. Unless the\n  # client has authenticated as some user, takes over the request and\n  # sends a response code of 401 (\"Unauthorized\").  Also responds with\n  # a 401 if the user is trying to operate on some user other than\n  # themselves. This prevents users from doing things like deleting\n  # each others' accounts.\n  def must_authenticate    \n    if @authenticated_user &amp;&amp; (@user_is_viewing_themselves != false)\n      return true\n    else\n      request_http_basic_authentication(\"Social bookmarking service\")      \n      return false\n    end    \n  end\n\n  # A filter for controllers beneath /users/{username}. Transforms \n  # {username} into a user ID. Sends a 404 response code if the user\n  # doesn't exist.\n  def must_specify_user\n    if params[:username]\n      @user = User.find_by_name(params[:username])      \n      if_found(@user) { params[:user_id] = @user.id }\n      return false unless @user\n    end\n    @user_is_viewing_themselves = (@authenticated_user == @user)\n    return true\n  end</pre>\n </div>\n</div>\n<p>Finally, the application controller is where I’ll implement my primary view method: <code class=\"function\">atom_feed_for</code> (see <a class=\"xref\" href=\"ch07.html#example_7_12\" title=\"Example&nbsp;7-12.&nbsp;application.rb concluded: atom_feed_for\">Example&nbsp;7-12</a>). This method turns a list of ActiveRecord <code class=\"classname\">Bookmark</code> objects into an Atom document. The controller that wants to serve a list of bookmarks needs to provide a title for the feed (such as “Bookmarks for leonardr”) and a URI to the resource being represented. The resulting document is rich in links. Every bookmark links to the external URI, to other people who bookmarked that URI, and to bookmarks that share tags with this one.</p>\n<div class=\"example\">\n <a id=\"example_7_12\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-12.&nbsp;\n  <em class=\"filename\">application.rb</em> concluded: atom_feed_for\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  ## Methods for generating a representation\n\n  # This method converts an array of ActiveRecord's Bookmark objects\n  # into an Atom feed.\n  def atom_feed_for(bookmarks, title, feed_uri, user=nil)\n    feed = Atom::Feed.new\n    feed.title = title\n    most_recent_bookmark = bookmarks.max do |b1,b2|\n      b1.timestamp &lt;=&gt; b2.timestamp\n    end\n    feed.updated = most_recent_bookmark.timestamp\n\n    # Link this feed to itself\n    self_link = feed.links.new\n    self_link['rel'] = 'self'\n    self_link['href'] = feed_uri + \".atom\"\n\n    # If this list is a list of bookmarks from a single user, that user is\n    # the author of the feed.\n    if user\n      user_to_atom_author(user, feed)\n    end\n\n    # Turn each bookmark in the list into an entry in the feed.\n    bookmarks.each do |bookmark|\n      entry = feed.entries.new\n      entry.title = bookmark.short_description\n      entry.content = bookmark.long_description\n\n      # In a real application, a bookmark would have a separate\n      # \"modification date\" field which was not under the control of\n      # the user. This would also make the Last-Modified calculations\n      # more accurate.\n      entry.updated = bookmark.timestamp      \n\n      # First, link this Atom entry to the external URI that the\n      # bookmark tracks.\n      external_uri = entry.links.new\n      external_uri['href'] = bookmark.uri\n\n      # Now we give some connectedness to this service. Link this Atom\n      # entry to this service's resource for this bookmark.\n      bookmark_resource = entry.links.new\n      bookmark_resource['rel'] = \"self\"\n      bookmark_resource['href'] = bookmark_url(bookmark.user.name, \n                                               bookmark.uri_hash) + \".atom\"\n      bookmark_resource['type'] = \"application/xml+atom\"\n\n      # Then link this entry to the list of users who've bookmarked\n      # this URI.\n      other_users = entry.links.new\n      other_users['rel'] = \"related\"\n      other_users['href'] = uri_url(bookmark.uri_hash) + \".atom\"\n      other_users['type'] = \"application/xml+atom\"\n\n      # Turn this entry's user into the \"author\" of this entry, unless\n      # we already specified a user as the \"author\" of the entire\n      # feed.\n      unless user\n        user_to_atom_author(bookmark.user, entry) \n      end\n\n      # For each of this bookmark's tags...\n      bookmark.tags.each do |tag|\n        # ...represent the tag as an Atom category.\n        category = entry.categories.new\n        category['term'] = tag\n        category['scheme'] = user_url(bookmark.user.name) + \"/tags\"\n\n        # Link to this user's other bookmarks tagged using this tag.\n        tag_uri = entry.links.new\n        tag_uri['href'] = tag_url(bookmark.user.name, tag.name) + \".atom\"\n        tag_uri['rel'] = 'related'\n        tag_uri['type'] = \"application/xml+atom\"\n\n        # Also link to all bookmarks tagged with this tag.\n        recent_tag_uri = entry.links.new\n        recent_tag_uri['href'] = recent_url(tag.name) + \".atom\"\n        recent_tag_uri['rel'] = 'related'\n        recent_tag_uri['type'] = \"application/xml+atom\"\n      end\n    end \n    return feed.to_xml\n  end\n\n  # Appends a representation of the given user to an Atom feed or element\n  def user_to_atom_author(user, atom)\n    author = atom.authors.new\n    author.name = user.full_name\n    author.email = user.email\n    author.uri = user_url(user.name)\n  end\nend</pre>\n </div>\n</div>\n<p><a class=\"xref\" href=\"ch07.html#sample-atom-bookmarks\" title=\"Example&nbsp;7-13.&nbsp;An Atom representation of a list of bookmarks\">Example&nbsp;7-13</a> shows what kind of Atom representation this method might serve.</p>\n<div class=\"example\">\n <a id=\"sample-atom-bookmarks\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-13.&nbsp;An Atom representation of a list of bookmarks\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;feed xmlns='http://www.w3.org/2005/Atom'&gt;\n &lt;title&gt;Bookmarks for leonardr&lt;/title&gt;\n &lt;screen&gt;\n &lt;updated&gt;2007-02-14T02:26:58-05:00&lt;/updated&gt;\n &lt;link href=\"http://localhost:3000/v1/users/leonardr/bookmarks.atom\" rel=\"self\"/&gt;\n &lt;author&gt;\n  &lt;name&gt;leonardr&lt;/name&gt;\n  &lt;uri&gt;http://localhost:3000/v1/users/leonardr&lt;/uri&gt;\n  &lt;email&gt;leonardr@example.com&lt;/email&gt;\n &lt;/author&gt;\n \n &lt;entry&gt;\n  &lt;title&gt;REST and WS-*&lt;/title&gt;\n  &lt;content&gt;Joe Gregorio's lucid explanation of RESTful principles&lt;/content&gt;\n  &lt;category term=\"rest\" scheme=\"http://localhost:3000/v1/users/leonardr/rest\"/&gt;\n  &lt;link href=\"http://bitworking.org/news/125/REST-and-WS\" rel=\"alternate\"/&gt;\n  &lt;link href=\"http://localhost:3000/v1/users/leonardr/bookmarks/68044f26e373de4a08ff343a7fa5f675.atom\" \n   rel=\"self\" type=\"application/xml+atom\"/&gt;\n  ...\n  &lt;link href=\"http://localhost:3000/v1/recent/rest.atom\"\n   rel=\"related\" type=\"application/xml+atom\"/&gt;\n  &lt;updated&gt;2007-02-14T02:26:58-05:00&lt;/updated&gt;\n &lt;/entry&gt;\n&lt;/feed&gt;</pre>\n </div>\n</div>\n<h2>The UsersController</h2>\n<p>Now I’m ready to show you<a id=\"ch07_userscontroller\" class=\"indexterm\"></a> some specific actions. I’ll start with the controller that makes user accounts possible. In the code in <a class=\"xref\" href=\"ch07.html#example_7_14\" title=\"Example&nbsp;7-14.&nbsp;app/controllers/users_controller.rb\">Example&nbsp;7-14</a>, note the call to <code class=\"function\">before_filter</code> that sets up the <code class=\"function\">must_authenticate</code> filter. You don’t need to authenticate to <code class=\"function\">create</code> (POST) a user account (as whom would you authenticate?), but you must authenticate<a id=\"I_indexterm7_tt633\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt634\" class=\"indexterm\"></a> to <code class=\"function\">modify</code> (PUT) or <code class=\"function\">destroy</code> (DELETE) an account.</p>\n<div class=\"example\">\n <a id=\"example_7_14\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-14.&nbsp;app/controllers/users_controller.rb\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">class UsersController &lt; ApplicationController  \n\n  # A client must authenticate to modify or delete a user account.\n  before_filter :must_authenticate, :only =&gt; [:modify, :destroy]\n\n  # POST /users\n  def create   \n    user = User.find_by_name(params[:user][:name])\n    if user\n      # The client tried to create a user that already exists.\n      headers['Location'] = user_url(user.name)\n      render :nothing =&gt; true, :status =&gt; \"409 Conflict\"\n    else   \n      user = User.new(params[:user])\n      if user.save\n        headers['Location'] = user_path(user.name)\n        render :nothing =&gt; true, :status =&gt; \"201 Created\"\n      else\n        # There was a problem saving the user to the database.\n        # Send the validation error messages along with a response\n        # code of 400.\n        render :xml =&gt; user.errors.to_xml, :status =&gt; \"400 Bad Request\"\n      end\n    end\n  end</pre>\n </div>\n</div>\n<p>The conventions of RESTful Rails impose a certain structure on <code class=\"classname\">UsersController</code> (and, indeed, on the name of the class itself). This controller exposes a resource for the list of users, and one resource for each particular user. The <code class=\"function\">create</code> method corresponds to a POST to the user list. The <code class=\"function\">show</code>, <code class=\"function\">update</code>, and <code class=\"function\">delete</code> methods correspond to a GET, PUT, or DELETE request on a particular user.</p>\n<p>The <code class=\"function\">create</code> method follows a pattern I’ll use for POST requests throughout this service. If the client tries to create a user that already exists, the response code is 409 (“Conflict”). If the client sends bad or incomplete data, the ActiveRecord validation rules (defined in the <code class=\"literal\">User</code>) model) fail, and the call to <code class=\"literal\">User#save</code> returns false. The response code then is 400 (“Bad Request”). If all goes well, the response code is 201 (“Created”) and the <code class=\"literal\">Location</code> header contains the URI of the newly created user. All I’ve done in <a class=\"xref\" href=\"ch07.html#example_7_15\" title=\"Example&nbsp;7-15.&nbsp;app/controllers/users_controller.rb continued\">Example&nbsp;7-15</a> is put into code the things I said in <a class=\"xref\" href=\"ch07.html#bookmarks-goright\" title=\"What’s Supposed to Happen?\">What’s Supposed to Happen?</a>” and <a class=\"xref\" href=\"ch07.html#bookmarks-gowrong\" title=\"What Might Go Wrong?\">What Might Go Wrong?</a>” earlier in this chapter. I’ll mention this generic control flow again in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>.</p>\n<div class=\"example\">\n <a id=\"example_7_15\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-15.&nbsp;app/controllers/users_controller.rb continued\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # PUT /users/{username}\n  def update\n    old_name = params[:id]\n    new_name = params[:user][:name]\n    user = User.find_by_name(old_name)\n\n    if_found user do\n      if old_name != new_name &amp;&amp; User.find_by_name(new_name)\n        # The client tried to change this user's name to a name\n        # that's already taken. Conflict!\n        render :nothing =&gt; true, :status =&gt; \"409 Conflict\"      \n      else        \n        # Save the user to the database.\n        user.update_attributes(params[:user])        \n        if user.save\n          # The user's name changed, which changed its URI.\n          # Send the new URI.\n          if user.name != old_name\n            headers['Location'] = user_path(user.name)\n            status = \"301 Moved Permanently\"\n          else\n            # The user resource stayed where it was.\n            status = \"200 OK\"\n          end\n          render :nothing =&gt; true, :status =&gt; status\n        else\n          # There was a problem saving the user to the database.\n          # Send the validation error messages along with a response\n          # code of 400.\n          render :xml =&gt; user.errors.to_xml, :status =&gt; \"400 Bad Request\"\n        end\n      end\n    end\n  end</pre>\n </div>\n</div>\n<p>The <code class=\"function\">update</code> method has a slightly different flow, and it’s a flow I’ll use for PUT requests throughout the service. The general outline is the same as for POST. The twist is that instead of trying to create a user (whose name might already be in use), the client can rename an existing user (and their new name might already be in use).</p>\n<p>I send a 409 response code (“Conflict”) if the client proposes a new username that already exists, and a 400 response code (“Bad Request”) if the data validation fails. If the client successfully edits a user, I send not a 201 response code (“Created”) but a simple 200 (“OK”).</p>\n<p>The exception is if the client successfully changes a user’s name. Now that resource is available under a different URI: say, <code class=\"literal\">/users/leonard</code> instead of <code class=\"literal\">/users/leonardr</code>. That means I need to send a response code of 301 (“Moved Permanently”) and put the user’s <span class=\"emphasis\"><em>new</em></span> URI in the <code class=\"literal\">Location</code> header.</p>\n<p>The GET and DELETE implementations are more straightforward, as shown in <a class=\"xref\" href=\"ch07.html#example_7_16\" title=\"Example&nbsp;7-16.&nbsp;app/controllers/users_controller.rb continued\">Example&nbsp;7-16</a>.</p>\n<div class=\"example\">\n <a id=\"example_7_16\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-16.&nbsp;app/controllers/users_controller.rb continued\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # GET /users/{username}\n  def show\n    # Find the user in the database.\n    user = User.find_by_name(params[:id])\n    if_found(user) do\n      # Serialize the User object to XML with ActiveRecord's to_xml.\n      # Don't include the user's ID or password when building the XML\n      # document.\n      render :xml =&gt; user.to_xml(:except =&gt; [:id, :password])\n    end\n  end\n\n  # DELETE /users/{username}\n  def destroy\n    user = User.find_by_name(params[:id])\n    if_found user do\n      # Remove the user from the database.\n      user.destroy\n      render :nothing =&gt; true, :status =&gt; \"200 OK\"\n    end\n  end\nend</pre>\n </div>\n</div>\n<p class=\"keep-together\">There is one hidden detail: the <code class=\"function\">if_found</code> method sends a response code of 404 (“Not Found”) if the user tries to GET or DELETE a nonexistent user. Otherwise, the response code is 200 (“OK”). I have not implemented conditional HTTP GET for user resources: I figured the possible bandwidth savings wasn’t big enough to justify the added complexity.<a id=\"I_indexterm7_tt635\" class=\"indexterm\"></a></p>\n<h2>The BookmarksController</h2>\n<p>This is the other main controller in this application (see <a class=\"xref\" href=\"ch07.html#bookmarks-controller-index\" title=\"Example&nbsp;7-17.&nbsp;app/controllers/bookmarks_controller.rb\">Example&nbsp;7-17</a>). It exposes a user’s list of bookmarks and each individual bookmark. The filters are interesting here. This <code class=\"classname\">BookmarksController</code> is for displaying a particular user’s bookmarks, and any attempt to see a nonexistent user’s bookmarks should be rebuffed with a stern 404 (“Not Found”). That’s the job of the <code class=\"function\">must_specify_user</code> filter I defined earlier. The <code class=\"function\">must_authenticate</code> filter works like it did in <code class=\"classname\">UsersController</code>: it prevents unauthenticated requests from getting through to Rails actions that require authentication. I’ve also got a one-off filter, <code class=\"function\">fix_params</code>, that enforces consistency in incoming representations of bookmarks.</p>\n<div class=\"example\">\n <a id=\"bookmarks-controller-index\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-17.&nbsp;app/controllers/bookmarks_controller.rb\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">class BookmarksController &lt; ApplicationController\n  before_filter :must_specify_user\n  before_filter :fix_params\n  before_filter :must_authenticate, :only =&gt; [:create, :update, :destroy]\n\n  # This filter cleans up incoming representations.\n  def fix_params    \n    if params[:bookmark]\n      params[:bookmark][:user_id] = @user.id if @user\n    end \n  end</pre>\n </div>\n</div>\n<p>The rest of <code class=\"classname\">BookmarksController</code> is just like <code class=\"classname\">UsersController</code>: fairly involved <code class=\"literal\">create</code> (POST) and <code class=\"literal\">update</code> (PUT) methods, simple <code class=\"literal\">show</code> (GET) and <code class=\"literal\">delete</code> (DELETE) methods (see <a class=\"xref\" href=\"ch07.html#example_7_18\" title=\"Example&nbsp;7-18.&nbsp;app/controllers/bookmarks_controller.rb continued\">Example&nbsp;7-18</a>). The only difference is that this controller’s list resource responds to GET, so I start with a simple implementation of <code class=\"function\">index</code>. Like many of the Rails actions I’ll define, <code class=\"function\">index</code> and <code class=\"function\">show</code> simply delegate to the <code class=\"function\">show_bookmarks</code> action.</p>\n<div class=\"example\">\n <a id=\"example_7_18\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-18.&nbsp;app/controllers/bookmarks_controller.rb continued\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # GET /users/{username}/bookmarks\n  def index\n    # Show this user's bookmarks by passing in an appropriate SQL\n    # restriction to show_bookmarks.\n    show_bookmarks([\"user_id = ?\", @user.id],\n                   \"Bookmarks for #{@user.name}\", \n                   bookmark_url(@user.name), @user)\n  end\n\n  # POST /users/{username}/bookmarks\n  def create\n    bookmark = Bookmark.find_by_user_id_and_uri(params[:bookmark][:user_id], \n                                                params[:bookmark][:uri])\n    if bookmark\n      # This user has already bookmarked this URI. They should be\n      # using PUT instead.\n      headers['Location'] = bookmark_url(@user.name, bookmark.uri)\n      render :nothing =&gt; true, :status =&gt; \"409 Conflict\"\n    else\n      # Enforce default values for 'timestamp' and 'public'\n      params[:bookmark][:timestamp] ||= Time.now\n      params[:bookmark][:public] ||= \"1\"\n\n      # Create the bookmark in the database.\n      bookmark = Bookmark.new(params[:bookmark])\n      if bookmark.save\n        # Add tags.\n        bookmark.tag_with(params[:taglist]) if params[:taglist]\n\n        # Send a 201 response code that points to the location of the\n        # new bookmark.\n        headers['Location'] = bookmark_url(@user.name, bookmark.uri)\n        render :nothing =&gt; true, :status =&gt; \"201 Created\"\n      else\n        render :xml =&gt; bookmark.errors.to_xml, :status =&gt; \"400 Bad Request\"\n      end\n    end\n  end\n\n  # PUT /users/{username}/bookmarks/{URI-MD5}\n  def update\n    bookmark = Bookmark.find_by_user_id_and_uri_hash(@user.id, params[:id])\n    if_found bookmark do\n      old_uri = bookmark.uri\n      if old_uri != params[:bookmark][:uri] &amp;&amp; \n          Bookmark.find_by_user_id_and_uri(@user.id, params[:bookmark][:uri])\n        # The user is trying to change the URI of this bookmark to a\n        # URI that they've already bookmarked. Conflict!\n        render :nothing =&gt; true, :status =&gt; \"409 Conflict\"\n      else\n        # Update the bookmark's row in the database.\n        if bookmark.update_attributes(params[:bookmark])\n          # Change the bookmark's tags.\n          bookmark.tag_with(params[:taglist]) if params[:taglist]\n          if bookmark.uri != old_uri\n            # The bookmark changed URIs. Send the new URI.\n            headers['Location'] = bookmark_url(@user.name, bookmark.uri)\n            render :nothing =&gt; true, :status =&gt; \"301 Moved Permanently\"\n          else\n            # The bookmark stayed where it was.\n            render :nothing =&gt; true, :status =&gt; \"200 OK\"\n          end\n        else\n          render :xml =&gt; bookmark.errors.to_xml, :status =&gt; \"400 Bad Request\"\n        end\n      end\n    end\n  end\n\n  # GET /users/{username}/bookmarks/{uri}\n  def show\n    # Look up the requested bookmark, and render it as a \"list\"\n    # containing only one item.\n    bookmark = Bookmark.find_by_user_id_and_uri_hash(@user.id, params[:id])\n    if_found(bookmark) do\n      render_bookmarks([bookmark], \n                       \"#{@user.name} bookmarked #{bookmark.uri}\",\n                       bookmark_url(@user.name, bookmark.uri_hash),\n                       @user)\n    end\n  end\n\n  # DELETE /users/{username}/bookmarks/{uri}\n  def destroy\n    bookmark = Bookmark.find_by_user_id_and_uri_hash(@user.id, params[:id])\n    if_found bookmark do\n      bookmark.destroy\n      render :nothing =&gt; true, :status =&gt; \"200 OK\"\n    end\n  end\nend</pre>\n </div>\n</div>\n<h2>The TagsController</h2>\n<p>This controller exposes a user’s tag vocabulary, and the list of bookmarks she’s filed under each tag (see <a class=\"xref\" href=\"ch07.html#example_7_19\" title=\"Example&nbsp;7-19.&nbsp;app/controllers/tags_controller.rb\">Example&nbsp;7-19</a>). There are two twists here: the tag vocabulary and the “tag rename” operation.</p>\n<p>The tag vocabulary is simply a list of a user’s tags, along with a count of how many times this user used the tag. I can get this data fairly easily with ActiveResource, and format it as a representation with <code class=\"literal\">to_xml</code>, but what about security? If you tag two public and six private bookmarks with “ruby,” when I look at your tag vocabulary, I should only see “ruby” used twice. If you tag a bunch of private bookmarks with “possible-acquisition,” I shouldn’t see “possible-acquisition” in your vocabulary at all. On the other hand, when you’re viewing your own bookmarks, you should be able to see the complete totals. I use some custom SQL to count only the public tags when appropriate. Incidentally, this is another resource that doesn’t support conditional GET.</p>\n<div class=\"example\">\n <a id=\"example_7_19\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-19.&nbsp;app/controllers/tags_controller.rb\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">class TagsController &lt; ApplicationController\n  before_filter :must_specify_user\n  before_filter :must_authenticate, :only =&gt; [:update]\n\n  # GET /users/{username}/tags\n  def index    \n    # A user can see all of their own tags, but only tags used\n    # in someone else's public bookmarks.\n    if @user_is_viewing_themselves\n      tag_restriction = ''\n    else\n      tag_restriction = \" AND bookmarks.public='1'\"\n    end\n    sql = [\"SELECT tags.*, COUNT(bookmarks.id) as count\" +\n           \" FROM tags, bookmarks, taggings\" +\n           \" WHERE taggings.taggable_type = 'Bookmark'\" +\n           \" AND tags.id = taggings.tag_id\" +\n           \" AND taggings.taggable_id = bookmarks.id\" + \n           \" AND bookmarks.user_id = ?\" + tag_restriction +\n           \" GROUP BY tags.name\", @user.id]\n    # Find a bunch of ActiveRecord Tag objects using custom SQL.\n    tags = Tag.find_by_sql(sql)\n\n    # Convert the Tag objects to an XML document.\n    render :xml =&gt; tags.to_xml(:except =&gt; [:id])\n  end</pre>\n </div>\n</div>\n<p>I said earlier I’d handle the “tag rename” operation with HTTP PUT. This makes sense since a rename is a change of state for an existing resource. The difference here is that this resource doesn’t correspond to a specific ActiveRecord object. There’s an ActiveRecord <code class=\"classname\">Tag</code> object for every tag, but that object represents everyone’s use of a tag. This controller doesn’t expose tags, per se: it exposes a particular user’s tag vocabulary.</p>\n<p>Renaming a <code class=\"classname\">Tag</code> object would rename it for everybody on the site. But if you rename “good” to “bad,” then that should only affect your bookmarks. Any bookmarks I’ve tagged as “good” should stay “good.” The client is not changing the tag, just one user’s <span class=\"emphasis\"><em>use</em></span> of the tag.</p>\n<p>From a RESTful perspective none of this matters. A resource’s state is changed with PUT, and that’s that. But the implementation is a bit tricky. What I need to do is find all the client’s bookmarks tagged with the given tag, strip off the old tag, and stick the new tag on. Unlike with users or bookmarks, I won’t be sending a 409 (“Conflict”) response code if the user renames an old tag to a tag that already exists. I’ll just merge the old tag into the new one (see <a class=\"xref\" href=\"ch07.html#example_7_20\" title=\"Example&nbsp;7-20.&nbsp;app/controllers/tags_controller.rb continued\">Example&nbsp;7-20</a>).</p>\n<div class=\"example\">\n <a id=\"example_7_20\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-20.&nbsp;app/controllers/tags_controller.rb continued\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # PUT /users/{username}/tags/{tag} \n  # This PUT handler is a little trickier than others, because we\n  # can't just rename a tag site-wide. Other users might be using the\n  # same tag.  We need to find every bookmark where this user uses the\n  # tag, strip the \"old\" name, and add the \"new\" name on.\n  def update\n    old_name = params[:id]\n    new_name = params[:tag][:name] if params[:tag]\n    if new_name\n      # Find all this user's bookmarks tagged with the old name\n      to_change = Bookmark.find([\"bookmarks.user_id = ?\", @user.id], \n                                old_name)\n      # For each such bookmark...\n      to_change.each do |bookmark|\n        # Find its tags.\n        tags = bookmark.tags.collect { |tag| tag.name }\n        # Remove the old name.\n        tags.delete(old_name)\n        # Add the new name.\n        tags &lt;&lt; new_name\n        # Assign the new set of tags to the bookmark.\n        bookmark.tag_with tags.uniq\n      end\n      headers['Location'] = tag_url(@user.name, new_name)\n      status = \"301 Moved Permanently\"\n    end\n    render :nothing =&gt; true, :status =&gt; status || \"200 OK\"\n  end\n\n  # GET /users/{username}/tags/{tag}\n  def show\n    # Show bookmarks that belong to this user and are tagged\n    # with the given tag.\n    tag = params[:id]\n    show_bookmarks([\"bookmarks.user_id = ?\", @user.id], \n                   \"#{@user.name}'s bookmarks tagged with '#{tag}'\",\n                   tag_url(@user.name, tag), @user, tag)\n  end\nend</pre>\n </div>\n</div>\n<h2>The Lesser Controllers</h2>\n<p>Every other controller in my application is read-only. This means it implements at most <code class=\"function\">index</code> and <code class=\"function\">show</code>. Hopefully by now you get the idea behind the controllers and their action methods, so I’ll cover the rest of the controllers briefly.</p>\n<div class=\"sect3\" title=\"The CalendarController\">\n <p>This resource, a user’s posting history, is something like the one exposed by <code class=\"classname\">TagsController#show</code>. I’m getting some counts from the database and rendering them as XML. This document doesn’t directly correspond to any ActiveRecord object, or list of such objects; it’s just a summary. As before, I need to be sure not to include other peoples’ private bookmarks in the count.</p>\n <p>The main body of code goes into the <code class=\"function\">Bookmark.calendar</code> method, defined in the <code class=\"classname\">Bookmark</code> model class (see <a class=\"xref\" href=\"ch07.html#bookmark-model\" title=\"The Bookmark Model\">The Bookmark Model</a>). The controller just renders the data.</p>\n <p>ActiveRecord’s <code class=\"function\">to_xml</code> doesn’t do a good job on this particular data structure, so I’ve implemented my own view function: <code class=\"function\">calendar_to_xml</code> (see <a class=\"xref\" href=\"ch07.html#example_7_21\" title=\"Example&nbsp;7-21.&nbsp;app/controllers/calendar_controller.rb\">Example&nbsp;7-21</a>). It <a id=\"I_indexterm7_tt636\" class=\"indexterm\"></a>uses <code class=\"classname\">Builder::XmlMarkup</code> (a Ruby utility that comes with Rails) to generate an XML document without writing much code.</p>\n <div class=\"example\">\n  <a id=\"example_7_21\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;7-21.&nbsp;app/controllers/calendar_controller.rb\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">class CalendarController &lt; ApplicationController\n  before_filter :must_specify_user\n\n  # GET /users/{username}/calendar\n  def index\n    calendar = Bookmark.calendar(@user.id, @user_is_viewing_themselves)\n    render :xml =&gt; calendar_to_xml(calendar)\n  end\n\n  # GET /users/{username}/calendar/{tag}\n  def show    \n    tag = params[:id]\n    calendar = Bookmark.calendar(@user.id, @user_is_viewing_themselves,\n                                 tag)\n    render :xml =&gt; calendar_to_xml(calendar, tag)\n  end\n\n  private\n\n  # Build an XML document out of the data structure returned by the\n  # Bookmark.calendar method.\n  def calendar_to_xml(days, tag=nil)\n    xml = Builder::XmlMarkup.new(:indent =&gt; 2)\n    xml.instruct!\n    # Build a 'calendar' element.\n    xml.calendar(:tag =&gt; tag) do\n      # For every day in the data structure...\n      days.each do |day|\n        # ...add a \"day\" element to the document\n        xml.day(:date =&gt; day.date, :count =&gt; day.count)\n      end\n    end\n  end\nend</pre>\n  </div>\n </div>\n</div>\n<div class=\"sect3\" title=\"The RecentController\">\n <p>The controller in <a class=\"xref\" href=\"ch07.html#example_7_22\" title=\"Example&nbsp;7-22.&nbsp;app/controllers/recent_controller.rb\">Example&nbsp;7-22</a> shows recently posted bookmarks. Its actions are just thin wrappers around the <code class=\"function\">show_bookmarks</code> method defined in <em class=\"filename\">application.rb</em>.</p>\n <div class=\"example\">\n  <a id=\"example_7_22\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;7-22.&nbsp;app/controllers/recent_controller.rb\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\"># recent_controller.rb\nclass RecentController &lt; ApplicationController\n\n  # GET /recent\n  def index\n    # Take bookmarks from the database without any special conditions.\n    # They'll be ordered with the most recently-posted first.\n    show_bookmarks(nil, \"Recent bookmarks\", recent_url)\n  end\n\n  # GET /recent/{tag}\n  def show\n    # The same as above, but only fetch bookmarks tagged with a\n    # certain tag.\n    tag = params[:id]\n    show_bookmarks(nil, \"Recent bookmarks tagged with '#{tag}'\", \n                   recent_url(tag), nil, tag)\n  end\nend</pre>\n  </div>\n </div>\n</div>\n<div class=\"sect3\" title=\"The UrisController\">\n <p>The controller in <a class=\"xref\" href=\"ch07.html#example_7_23\" title=\"Example&nbsp;7-23.&nbsp;app/controllers/uris_controller.rb\">Example&nbsp;7-23</a> shows what the site’s users think of a particular URI. It shows a list of bookmarks, all for the same URI but from different people and with different tags and descriptions.<a id=\"I_indexterm7_tt637\" class=\"indexterm\"></a></p>\n <div class=\"example\">\n  <a id=\"example_7_23\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;7-23.&nbsp;app/controllers/uris_controller.rb\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\"># uris_controller.rb\nclass UrisController &lt; ApplicationController\n  # GET /uris/{URI-MD5}\n  def show\n    # Fetch all the visible Bookmark objects that correspond to\n    # different people bookmarking this URI.\n    uri_hash = params[:id]\n    sql = [\"SELECT bookmarks.*, users.name as user from bookmarks, users\" +\n           \" WHERE users.id = bookmarks.user_id AND bookmarks.uri_hash = ?\",\n           uri_hash]\n    Bookmark.only_visible_to!(sql, @authenticated_user)\n    bookmarks = Bookmark.find_by_sql(sql)\n\n    if_found(bookmarks) do\n\n      # Render the list of Bookmark objects as XML or a syndication feed,\n      # depending on what the client requested.\n      uri = bookmarks[0].uri\n      render_bookmarks(bookmarks, \"Users who've bookmarked #{uri}\",\n                       uri_url(uri_hash), nil)\n    end\n  end\nend</pre>\n  </div>\n </div>\n</div>",
      "slug" : "controller-code"
    }, {
      "title" : "Model Code",
      "type" : "page",
      "htmlContent" : "<p>Those are the controllers.<a id=\"ch07_modelclasses\" class=\"indexterm\"></a> I’ve also got three “model” classes, corresponding to my three main database tables: <code class=\"classname\">User</code>, <code class=\"classname\">Bookmark</code>, and <code class=\"classname\">Tag</code>. The <code class=\"classname\">Tag</code> class is defined entirely through<a id=\"I_indexterm7_tt639\" class=\"indexterm\"></a> the <code class=\"literal\">acts_as_taggable</code> Rails plugin, so I’ve only got to define <code class=\"classname\">User</code> and <code class=\"classname\">Bookmark</code>.</p>\n<p>The model classes define validation rules for the database fields. If a client sends bad data (such as trying to create a user without specifying a name), the appropriate validation rule is triggered and the controller method sends the client a response code of 400 (“Bad Request”). The same model classes could be used in a conventional web application, or a GUI application. The validation errors would be displayed differently, but the same rules would always apply.</p>\n<p>The model classes also define a few methods which work against the database. These methods are used by the controllers.</p>\n<h2>The User Model</h2>\n<p>This is the simpler of the two models (see <a class=\"xref\" href=\"ch07.html#example_7_24\" title=\"Example&nbsp;7-24.&nbsp;app/models/user.rb\">Example&nbsp;7-24</a>). It has some validation rules, a one-to-many relationship with <code class=\"literal\">Bookmark</code> objects, and a few methods (called by the controllers) for validating passwords.</p>\n<div class=\"example\">\n <a id=\"example_7_24\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-24.&nbsp;app/models/user.rb\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">class User &lt; ActiveRecord::Base\n  # A user has many bookmarks. When the user is destroyed,\n  # all their bookmarks should also be destroyed.\n  has_many :bookmarks, :dependent =&gt; :destroy\n\n  # A user must have a unique username.\n  validates_uniqueness_of :name\n\n  # A user must have a username, full name, and email.\n  validates_presence_of :name, :full_name, :email\n\n  # Make sure passwords are never stored in plaintext, by running them\n  # through a one-way hash as soon as possible.\n  def password=(password)\n    super(User.hashed(password))\n  end\n\n  # Given a username and password, returns a User object if the\n  # password matches the hashed one on file. Otherwise, returns nil.\n  def self.authenticated_user(username, pass)\n    user = find_by_name(username)\n    if user\n      user = nil unless hashed(pass) == user.password\n    end\n    return user\n  end\n\n  # Performs a one-way hash of some data.\n  def self.hashed(password)\n    Digest::SHA1.new(password).to_s\n  end\nend</pre>\n </div>\n</div>\n<h2>The Bookmark Model</h2>\n<p>This is a more complicated model (see <a class=\"xref\" href=\"ch07.html#example_7_25\" title=\"Example&nbsp;7-25.&nbsp;app/models/bookmark.rb\">Example&nbsp;7-25</a>). First, let’s define the relationships between <code class=\"classname\">Bookmark</code> and the other model classes, along with some validation rules and a rule for generating the MD5 hash of a URI. We have to keep this information because the MD5 calculation only works in one direction. If a client requests <code class=\"literal\">/v1/uris/55020a5384313579a5f11e75c1818b89</code>, we can’t reverse the MD5 calculation. We need to be able to look up a URI by its MD5 hash.</p>\n<div class=\"example\">\n <a id=\"example_7_25\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-25.&nbsp;app/models/bookmark.rb\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">class Bookmark &lt; ActiveRecord::Base\n  # Every bookmark belongs to some user.\n  belongs_to :user\n\n  # A bookmark can have tags. The relationships between bookmarks and\n  # tags are managed by the acts_as_taggable plugin.\n  acts_as_taggable\n\n  # A bookmark must have an associated user ID, a URI, a short\n  # description, and a timestamp.\n  validates_presence_of :user_id, :uri, :short_description, :timestamp\n\n  # The URI hash should never be changed directly: only when the URI\n  # changes.\n  attr_protected :uri_hash\n\n  # And.. here's the code to update the URI hash when the URI changes.\n  def uri=(new_uri)\n    super\n    self.uri_hash = Digest::MD5.hexdigest(new_uri)\n  end\n\n  # This method is triggered by Bookmark.new and by\n  # Bookmark#update_attributes. It replaces a bookmark's current set\n  # of tags with a new set.\n  def tag_with(tags)\n    Tag.transaction do\n      taggings.destroy_all\n      tags.each { |name| Tag.find_or_create_by_name(name).on(self) }\n    end\n  end</pre>\n </div>\n</div>\n<p>That last method makes it possible to associate tags with bookmarks. The <code class=\"literal\">acts_as_taggable</code> plugin allows me to do basic queries like “what bookmarks are tagged with ‘ruby’?” Unfortunately, I usually need slightly more complex queries, like “what bookmarks belonging to <code class=\"literal\">leonardr</code> are tagged with ‘ruby’?”, so I can’t use the plugin’s <code class=\"function\">find_tagged_with</code> method. I need to define my own method that attaches a tag restriction to some preexisting restriction like “bookmarks belonging to <code class=\"literal\">leonardr</code>.”</p>\n<p>This <code class=\"function\">custom_find</code> method is the workhorse of the whole service, since it’s called by the <code class=\"function\">ApplicationController#show_bookmarks</code> method, which is called by many of the RESTful Rails actions (see <a class=\"xref\" href=\"ch07.html#example_7_26\" title=\"Example&nbsp;7-26.&nbsp;app/models/bookmark.rb continued\">Example&nbsp;7-26</a>).</p>\n<div class=\"example\">\n <a id=\"example_7_26\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-26.&nbsp;app/models/bookmark.rb continued\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # This method finds bookmarks, possibly ones tagged with a\n  # particular tag.\n  def self.custom_find(conditions, tag=nil, limit=nil)\n    if tag       \n      # When a tag restriction is specified, we have to find bookmarks\n      # the hard way: by constructing a SQL query that matches only\n      # bookmarks tagged with the right tag.\n      sql = [\"SELECT bookmarks.* FROM bookmarks, tags, taggings\" +\n             \" WHERE taggings.taggable_type = 'Bookmark'\" +\n             \" AND bookmarks.id = taggings.taggable_id\" +\n             \" AND taggings.tag_id = tags.id AND tags.name = ?\",\n             tag]\n      if conditions\n        sql[0] &lt;&lt; \" AND \" &lt;&lt; conditions[0]\n        sql += conditions[1..conditions.size]\n      end\n      sql[0] &lt;&lt; \" ORDER BY bookmarks.timestamp DESC\"\n      sql[0] &lt;&lt; \" LIMIT \" &lt;&lt; limit.to_i.to_s if limit\n      bookmarks = find_by_sql(sql)\n    else\n      # Without a tag restriction, we can find bookmarks the easy way:\n      # with the superclass find() implementation.\n      bookmarks = find(:all, {:conditions =&gt; conditions, :limit =&gt; limit,\n                              :order =&gt; 'timestamp DESC'})\n    end    \n    return bookmarks\n  end</pre>\n </div>\n</div>\n<p>There are two more database-related methods (see <a class=\"xref\" href=\"ch07.html#example_7_27\" title=\"Example&nbsp;7-27.&nbsp;app/models/bookmark.rb concluded\">Example&nbsp;7-27</a>). The <code class=\"function\">Bookmark.only_visible_to!</code> method manipulates a set of ActiveRecord conditions so that they only apply to bookmarks the given user can see. The <code class=\"function\">Bookmark.calendar</code> method groups a user’s bookmarks by the date they were posted. This implementation may not work for you, since it uses a SQL function (<code class=\"function\">DATE</code>) that’s not available for all databases.</p>\n<div class=\"example\">\n <a id=\"example_7_27\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-27.&nbsp;app/models/bookmark.rb concluded\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  # Restricts a bookmark query so that it only finds bookmarks visible\n  # to the given user. This means public bookmarks, and the given\n  # user's private bookmarks.\n  def self.only_visible_to!(conditions, user)\n    # The first element in the \"conditions\" array is a SQL WHERE\n    # clause with variable substitutions. The subsequent elements are\n    # the variables whose values will be substituted. For instance,\n    # if \"conditions\" starts out empty: [\"\"]...\n\n    conditions[0] &lt;&lt; \" AND \" unless conditions[0].empty?\n    conditions[0] &lt;&lt; \"(public='1'\"\n    if user\n      conditions[0] &lt;&lt; \" OR user_id=?\"\n      conditions &lt;&lt; user.id\n    end\n    conditions[0] &lt;&lt; \")\"\n\n    # ...its value might now be [\"(public='1' or user_id=?)\", 55].\n    # ActiveRecord knows how to turn this into the SQL WHERE clause\n    # \"(public='1' or user_id=55)\".\n  end \n\n  # This method retrieves data for the CalendarController. It uses the\n  # SQL DATE() function to group together entries made on a particular\n  # day.\n  def self.calendar(user_id, viewed_by_owner, tag=nil)    \n    if tag\n      tag_from = \", tags, taggings\"\n      tag_where = \"AND taggings.taggable_type = 'Bookmark'\" +\n        \" AND bookmarks.id = taggings.taggable_id\" +\n        \" AND taggings.tag_id = tags.id AND tags.name = ?\"\n    end\n\n    # Unless a user is viewing their own calendar, only count public\n    # bookmarks.\n    public_where = viewed_by_owner ? \"\" : \"AND public='1'\"\n\n    sql = [\"SELECT date(timestamp) AS date, count(bookmarks.id) AS count\" +\n           \" FROM bookmarks#{tag_from} \" +\n           \" WHERE user_id=? #{tag_where} #{public_where} \" +\n           \" GROUP BY date(timestamp)\", user_id]\n    sql &lt;&lt; tag if tag\n\n    # This will return a list of rather bizarre ActiveRecord objects,\n    # which CalendarController knows how to turn into an XML document.\n    find_by_sql(sql)\n  end\nend</pre>\n </div>\n</div>\n<p>Now you should be ready to start your Rails server in a console window, and start using the web service.<a id=\"I_indexterm7_tt640\" class=\"indexterm\"></a></p>\n<a id=\"I_programlisting7_tt641\"></a>\n<pre class=\"programlisting\">$ <strong class=\"userinput\"><code>script/server</code></strong></pre>",
      "slug" : "model-code"
    }, {
      "title" : "What Does the Client Need to Know?",
      "type" : "page",
      "htmlContent" : "<p>Of course, using the web service just means writing more code. Unlike a Rails service generated with <code class=\"literal\">script/generate scaffold</code> (see <a class=\"xref\" href=\"ch03.html#activeresource-introduction\" title=\"Clients Made Transparent with ActiveResource\">Clients Made Transparent with ActiveResource</a>” in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>), this service can’t be used as a web site. I didn’t create any HTML forms or HTML-based views of the data. This was done mainly for space reasons. Look back at <a class=\"xref\" href=\"ch07.html#render-bookmarks\" title=\"Example&nbsp;7-8.&nbsp;application.rb continued: render_bookmarks\">Example&nbsp;7-8</a> and the call to <code class=\"function\">respond_to</code>. It’s got a call to <code class=\"function\">format.xml</code> and a call to <code class=\"function\">format.atom</code>, and so on. That’s the sort of place I’d put a call to <code class=\"function\">format.html</code>, to render an ERb template as HTML.</p>\n<p>Eventually the site will be well-populated with peoples’ bookmarks, and the site will expose many interesting resources as interlinked Atom representations. Any program, including today’s web browsers, can take these resources as input: the client just needs to speak HTTP GET and know what to do with a syndication file.</p>\n<p>But how are those resources supposed to get on the site in the first place? The only existing general-purpose web service client is the web browser, and I haven’t provided any HTML forms for creating users or posting bookmarks. Even if I did, that would only take care of situations where the client is under the direct control of a human being.</p>\n<h2>Natural-Language Service Description</h2>\n<p>There are three<a id=\"I_indexterm7_tt643\" class=\"indexterm\"></a><a id=\"I_indexterm7_tt644\" class=\"indexterm\"></a> possibilities for making it easy to write clients; they’re more or less the ones I covered in Chapters <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">2</a> and <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">3</a>. The simplest is to publish an English description of the service’s layout. If someone wants to use my service they can study my description and write custom HTTP client code.</p>\n<p>Most of today’s RESTful and hybrid web services work this way. Instead of specifying the levers of state in<a id=\"I_indexterm7_tt645\" class=\"indexterm\"></a> hypermedia, they specify the levers in regular media—English text—which a human must interpret ahead of time. You’ll need a basic natural-language description of your service anyway, to serve as advertisement. You want people to immediately see what your service does and want to use it.</p>\n<p>I’ve already got a prose description of my social bookmarking service: it takes up much of this chapter. <a class=\"xref\" href=\"ch07.html#example_7_28\" title=\"Example&nbsp;7-28.&nbsp;A rest-open-uri client for the bookmark service\">Example&nbsp;7-28</a> is a simple command-line Ruby client for the service, based on that prose description. This client knows enough to create user accounts and post bookmarks.</p>\n<div class=\"example\">\n <a id=\"example_7_28\"></a>\n <div class=\"example-title\">\n  Example&nbsp;7-28.&nbsp;A rest-open-uri client for the bookmark service\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby\n#open-uri-bookmark-client.rb\nrequire 'rubygems'\nrequire 'rest-open-uri'\nrequire 'uri'\nrequire 'cgi'\n\n# An HTTP-based Ruby client for my social bookmarking service\nclass BookmarkClient\n\n  def initialize(service_root)\n    @service_root = service_root \n  end\n\n  # Turn a Ruby hash into a form-encoded set of key-value pairs.\n  def form_encoded(hash)\n    encoded = []\n    hash.each do |key, value|\n      encoded &lt;&lt; CGI.escape(key) + '=' + CGI.escape(value)\n    end\n    return encoded.join('&amp;')\n  end\n\n  # Create a new user.\n  def new_user(username, password, full_name, email)\n    representation = form_encoded({ \"user[name]\" =&gt; username,\n                                    \"user[password]\" =&gt; password,\n                                    \"user[full_name]\" =&gt; full_name,\n                                    \"user[email]\" =&gt; email })      \n    puts representation\n    begin\n      response = open(@service_root + '/users', :method =&gt; :post, \n                      :body =&gt; representation)\n      puts \"User #{username} created at #{response.meta['location']}\"\n    rescue OpenURI::HTTPError =&gt; e\n      response_code = e.io.status[0].to_i\n      if response_code == 409 # Conflict\n        puts \"Sorry, there's already a user called #{username}.\"\n      else\n        raise e\n      end\n    end\n  end\n\n  # Post a new bookmark for the given user.\n  def new_bookmark(username, password, uri, short_description)\n    representation = form_encoded({ \"bookmark[uri]\" =&gt; uri,\n                                    \"bookmark[short_description]\" =&gt; \n                                    short_description })\n    begin\n      dest = \"#{@service_root}/users/#{URI.encode(username)}/bookmarks\"\n      response = open(dest, :method =&gt; :post, :body =&gt; representation,\n                      :http_basic_authentication =&gt; [username, password])\n      puts \"Bookmark posted to #{response.meta['location']}\"\n    rescue OpenURI::HTTPError =&gt; e\n      response_code = e.io.status[0].to_i\n      if response_code == 401 # Unauthorized\n        puts \"It looks like you gave me a bad password.\"\n      elsif response_code == 409 # Conflict\n        puts \"It looks like you already posted that bookmark.\"\n      else\n        raise e\n      end\n    end    \n  end\nend\n\n# Main application\ncommand = ARGV.shift\nif ARGV.size != 4 || (command != \"new-user\" &amp;&amp; command != \"new-bookmark\")\n  puts \"Usage: #{$0} new-user [username] [password] [full name] [email]\"\n  puts \"Usage: #{$0} new-bookmark [username] [password]\" +\n    \" [URI] [short description]\"\n  exit\nend\n\nclient = BookmarkClient.new('http://localhost:3000/v1')\nif command == \"new-user\"\n  username, password, full_name, email = ARGV\n  client.new_user(username, password, full_name, email)\nelse\n  username, password, uri, short_description = ARGV\n  client.new_bookmark(username, password, uri, short_description)\nend</pre>\n </div>\n</div>\n<h2>Description Through Standardization</h2>\n<p>One alternative<a id=\"I_indexterm7_tt646\" class=\"indexterm\"></a> to explaining everything is to make your service like other services. If all services exposed the same representation formats, and mapped URIs to resources in the same way... well, we can’t get rid of client programming altogether, but clients could work on a higher level than HTTP.<sup>[<a id=\"id379329\" href=\"#ftn.id379329\" epub:type=\"noteref\" class=\"footnote\">23</a>]</sup>Conventions are powerful tools: in fact, they’re the same tools that REST uses. Every RESTful resource-oriented web service uses URIs to designate resources, and expresses operations in terms of HTTP’s uniform interface. The idea here is to apply higher-level conventions than REST’s, so that the client programmer doesn’t have to write as much code.</p>\n<p>Take the Rails architecture as an example. Rails is good at gently imposing its design preferences on the programmer. The result is that most RESTful Rails services do the same kind of thing in the same way. At bottom, the job of almost every Rails service is to send and accept representations of ActiveRecord objects. These services all map URIs to Rails controllers, Rails controllers to resources, resources to ActiveRecord objects, and ActiveRecord objects to rows in the database. The representation formats are also standardized: either as XML documents like the one in <a class=\"xref\" href=\"ch07.html#user-xml\" title=\"Example&nbsp;7-4.&nbsp;An XML representation of a user account\">Example&nbsp;7-4</a>, or form-encoded key-value pairs like the ones in <a class=\"xref\" href=\"ch07.html#user-form-encoded\" title=\"Example&nbsp;7-5.&nbsp;A form-encoded representation of a user account\">Example&nbsp;7-5</a>. They’re not the best representation formats, because it’s difficult to make connected services out of them, but they’re OK.</p>\n<p>The ActiveResource library, currently under development, is a client library that takes advantage of these similarities between Rails services. I first mentioned ActiveResource in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>, where I showed it in action against a very simple Rails service. It doesn’t replace custom client code, but it hides the details of HTTP access behind an interface that looks like ActiveRecord. The ActiveResource/ActiveRecord approach won’t work for all web services, or even all Rails web services. It doesn’t work very well on this service. But it’s not quite fair for me to judge ActiveResource by these standards, since it’s still in development. As of the time of writing, it’s more a promising possiblity than a real-world solution to a problem.</p>\n<h2>Hypermedia Descriptions</h2>\n<p>Even when the<a id=\"I_indexterm7_tt647\" class=\"indexterm\"></a> Ruby ActiveResource client is improved and officially released, it will be nothing more than the embodiment of some high-level design conventions. The conventions are useful: another web service framework might copy these conventions, and then Ruby’s ActiveResource client would work with it. An ActiveResource library written in another language will work with Rails services. But if a service doesn’t follow the conventions, ActiveResource can’t talk to it.</p>\n<p>What we need is a general framework, a way for each individual service to tell the client about its resource design, its representation formats, and the links it provides between resources. That will give us some of the benefits of standardized conventions, without forcing all web services to comply with more than a few minimal requirements.</p>\n<p>This brings us full circle to the REST notion of connectedness, of “hypermedia as the engine of application state.” I talk about connectedness so much because hypermedia links and forms <span class=\"emphasis\"><em>are</em></span> these machine-readable conventions for describing the differences between services. If your service only serves serialized data structures that show the current resource state, then of course you start thinking about additional standards and conventions. Your representations are only doing half a job.</p>\n<p>We don’t think the human web needs these additional standards, because the human web serves <span class=\"emphasis\"><em>documents</em></span> full of links and forms, not serialized data structures that need extra interpretation. The links and forms on the human web tell our web browsers how to manipulate application and resource state, in response to our expressed desires. It doesn’t matter that every web site was designed by a different person, because the differences between them are represented in machine-readable format.</p>\n<p>The XHTML links and forms in Chapters <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">5</a> and <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">6</a> are machine-readable descriptions of what makes the fantasy map service different from other services. In this chapter, the links embedded in the Atom documents are machine-readable descriptions of the connections that distinguish this service from others that serve Atom documents. In <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> I’ll consider three major hypermedia formats that can describe these differences between services: XHTML 4, XHTML 5, and WADL. For now, though, it’s time to take a step back and take a look at REST and the ROA as a whole.</p>",
      "slug" : "what-does-the-client-need-to-know"
    } ]
  }, {
    "title" : "8. REST and ROA Best Practices",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;8.&nbsp;REST and ROA Best Practices</h2>\n  </div>\n </div>\n</div>\n<p>By <a id=\"ch08_bestpractices\" class=\"indexterm\"></a><a id=\"ch08_resourceoriented\" class=\"indexterm\"></a>now you should have a good idea of how to build resource-oriented, RESTful web services. This chapter is a pause to gather in one place the most important ideas so far, and to fill in some of the gaps in my coverage.</p>\n<p>The gaps exist because the theoretical chapters have focused on basics, and the practical chapters have worked with specific services. I’ve implemented conditional HTTP GET but I haven’t explained it. I’ve implemented HTTP Basic authentication and a client for Amazon’s custom authentication mechanism, but I haven’t compared them to other kinds of HTTP authentication, and I’ve glossed over the problem of authenticating a client <span class=\"emphasis\"><em>to its own user</em></span>.</p>\n<p>The first part of this chapter is a recap of the main ideas of REST and the ROA. The second part describes the ideas I haven’t already covered. I talk about specific features of HTTP and tough cases in resource design. In <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> I discuss the building blocks of services: specific technologies and patterns that have been used to make successful web services. Taken together, this chapter and the next form a practical reference for RESTful web services. You can consult them as needed when making technology or design decisions.</p>",
    "textContent" : "Chapter 8. REST and ROA Best Practices\r\n\r\nBy now you should have a good idea of how to build resource-oriented, RESTful web services. This chapter is a pause to gather in one place the most important ideas so far, and to fill in some of the gaps in my coverage.\r\n\r\nThe gaps exist because the theoretical chapters have focused on basics, and the practical chapters have worked with specific services. I’ve implemented conditional HTTP GET but I haven’t explained it. I’ve implemented HTTP Basic authentication and a client for Amazon’s custom authentication mechanism, but I haven’t compared them to other kinds of HTTP authentication, and I’ve glossed over the problem of authenticating a client to its own user.\r\n\r\nThe first part of this chapter is a recap of the main ideas of REST and the ROA. The second part describes the ideas I haven’t already covered. I talk about specific features of HTTP and tough cases in resource design. In Chapter 9 I discuss the building blocks of services: specific technologies and patterns that have been used to make successful web services. Taken together, this chapter and the next form a practical reference for RESTful web services. You can consult them as needed when making technology or design decisions.",
    "slug" : "8-rest-and-roa-best-practices",
    "pages" : [ {
      "title" : "Resource-Oriented Basics",
      "type" : "page",
      "htmlContent" : "<p>The only<a id=\"I_indexterm8_tt649\" class=\"indexterm\"></a> differences between a web service and a web site are the audience (preprogrammed clients instead of human beings) and a few client capabilities. Both web services and web sites benefit from a resource-oriented design based on HTTP, URIs, and (usually) XML.</p>\n<p>Every interesting thing your application manages should be exposed as <a id=\"I_indexterm8_tt650\" class=\"indexterm\"></a>a <span class=\"emphasis\"><em>resource</em></span>. A resource can be anything a client might want to link to: a work of art, a piece of information, a physical object, a concept, or a grouping of references to other resources.</p>\n<p>A URI is the name of a resource. Every resource must have at least one name. A resource should have as few names as possible, and every name should be meaningful.</p>\n<p>The client cannot access resources directly. A web service serves<a id=\"I_indexterm8_tt651\" class=\"indexterm\"></a> <span class=\"emphasis\"><em>representations</em></span> of a resource: documents in specific data formats that contain information about the resource. The difference between a resource and its representation is somewhat academic for static web sites, where the resources are just files on disk that are sent verbatim to clients. The distinction takes on greater importance when the resource is a row in a database, a physical object, an abstract concept, or a real-world event in progress.</p>\n<p>All access to resources happens through HTTP’s uniform interface. These are the four basic HTTP verbs (GET, POST, PUT, and DELETE), and the two auxiliaries (HEAD and OPTIONS). Put complexity in your representations, in the variety of resources you expose, and in the links between resources. Don’t put it in the access methods.</p>",
      "slug" : "resource-oriented-basics"
    }, {
      "title" : "The Generic ROA Procedure",
      "type" : "page",
      "htmlContent" : "<p>Reprinted<a id=\"I_indexterm8_tt653\" class=\"indexterm\"></a> from <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>, this is an all-purpose procedure for splitting a problem space into RESTful resources.</p>\n<p>This procedure only takes into account the constraints of REST and the ROA. Your choice of framework may impose additional constraints. If so, you might as well take those into account while you’re designing the resources. In <a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">Chapter&nbsp;12</a> I give a modified version of this procedure that works with Ruby on Rails.</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>Figure out the data set</p></li>\n  <li class=\"listitem\"><p>Split the data set into resources</p><p>For each kind of resource:</p></li>\n  <li class=\"listitem\"><p>Name the resources with URIs</p></li>\n  <li class=\"listitem\"><p>Expose a subset of the uniform interface</p></li>\n  <li class=\"listitem\"><p>Design the representation(s) accepted from the client</p></li>\n  <li class=\"listitem\"><p>Design the representation(s) served to the client</p></li>\n  <li class=\"listitem\"><p>Integrate this resource into existing resources, using hypermedia links and forms</p></li>\n  <li class=\"listitem\"><p>Consider the typical course of events: what’s supposed to happen? Standard control flows like the Atom Publishing Protocol can help (see <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>).</p></li>\n  <li class=\"listitem\"><p>Consider error conditions: what might go wrong? Again, standard control flows can help.</p></li>\n </ol>\n</div>",
      "slug" : "the-generic-roa-procedure"
    }, {
      "title" : "Addressability",
      "type" : "page",
      "htmlContent" : "<p>A web service<a id=\"I_indexterm8_tt655\" class=\"indexterm\"></a> is addressable if it exposes the interesting aspects of its data set through resources. Every resource has its own unique <a id=\"I_indexterm8_tt656\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt657\" class=\"indexterm\"></a>URI: in fact, URI just stands for “Universal Resource Identifier.” Most RESTful web services expose an infinite number of URIs. Most RPC-style web services expose very few URIs, often as few as one.</p>\n<h2>Representations Should Be Addressable</h2>\n<p>A URI should never represent more than one resource. Then it wouldn’t be a <span class=\"emphasis\"><em>Universal</em></span> Resource Identifier. Furthermore, I suggest that<a id=\"I_indexterm8_tt658\" class=\"indexterm\"></a> every <span class=\"emphasis\"><em>representation</em></span> of a resource should have its own URI. This is because URIs are often passed around or used as input to other web services. The expectation then is that the URI designates a particular representation of the resource.</p>\n<p>Let’s say you’ve exposed a press release at <code class=\"literal\">/releases/104</code>. There’s an English and a Spanish version of the press release, an HTML and plain-text version of each. Your clients should be able set the <code class=\"literal\">Accept-Language</code> request header to choose an English or Spanish representation of <code class=\"literal\">/releases/104</code>, and the <code class=\"literal\">Accept</code> request header to choose an HTML or plain-text representation. But you should also give each representation a separate URI: maybe URIs like <code class=\"literal\">/releases/104.en</code>, <code class=\"literal\">/releases/104.es.html</code>, and <code class=\"literal\">/releases/104.txt</code>.</p>\n<p>In the bookmarking service from <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, I exposed two representations of a set of bookmarks: a generic XML representation at <code class=\"literal\">/v1/users/leonardr/bookmarks.xml</code>, and an Atom representation at <code class=\"literal\">/v1/users/leonardr/bookmarks.atom</code>. I also exposed a canonical URI for the resource at <code class=\"literal\">/v1/users/leonardr/bookmarks</code>. A client can set its <code class=\"literal\">Accept</code> request header to distinguish between Atom and generic XML representations of <code class=\"literal\">/v1/users/leonardr/bookmarks</code>, or it can tweak the URI to get a different representation. Both techniques work, and both techniques are RESTful, but a URI travels better across clients if it specifies a resource <span class=\"emphasis\"><em>and</em></span> a representation.</p>\n<p>It’s OK for a client to send information in HTTP request headers, so long as the server doesn’t make that the only way of selecting a resource or representation. Headers can also contain sensitive information like authentication credentials, or information that’s different for every client. But headers shouldn’t be the only tool a client has to specify which representation is served or which resource is selected.</p>",
      "slug" : "addressability"
    }, {
      "title" : "State and Statelessness",
      "type" : "page",
      "htmlContent" : "<p>There<a id=\"I_indexterm8_tt661\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt662\" class=\"indexterm\"></a> are two types of state in a RESTful service. There’s <a id=\"I_indexterm8_tt663\" class=\"indexterm\"></a>resource state, which is information about resources, and application state, which is information about the path the client has taken through the application. Resource state stays on the server and is only sent to the client in the form of representations. Application state stays on the client until it can be used to create, modify, or delete a resource. Then it’s sent to the server as part of a POST, PUT, or DELETE request, and becomes resource state.</p>\n<p>A RESTful service is “stateless” if the server never stores any <a id=\"I_indexterm8_tt664\" class=\"indexterm\"></a>application state. In a stateless application, the server considers each client request in isolation and in terms of the current resource state. If the client wants any application state to be taken into consideration, the client must submit it as part of the request. This includes things like authentication credentials, which are submitted with every request.</p>\n<p>The client manipulates resource state by sending a representation as part of a PUT or POST request. (DELETE requests work the same way, but there’s no representation.) The server manipulates client state by sending representations in response to the client’s GET requests. This is where the name<a id=\"I_indexterm8_tt665\" class=\"indexterm\"></a> “Representational State Transfer” comes from.</p>",
      "slug" : "state-and-statelessness"
    }, {
      "title" : "Connectedness",
      "type" : "page",
      "htmlContent" : "<p>The server can guide the client from one application state to another by sending links and forms in its representations. I call <a id=\"I_indexterm8_tt667\" class=\"indexterm\"></a>this <span class=\"emphasis\"><em>connectedness</em></span> because the links and forms connect the resources to each other. The Fielding thesis calls this “hypermedia as the engine of application state.”</p>\n<p>In a well-connected service, the client can make a path through the application by following links and filling out forms. In a service that’s not connected, the client must use predefined rules to construct every URI it wants to visit. Right now the human web is very well-connected, because most pages on a web site can be reached by following links from the main page. Right now the programmable web is not very well-connected.</p>\n<p>The server can also guide the client from one <span class=\"emphasis\"><em>resource</em></span> state to another by sending forms in its representations. Forms guide the client through the process of modifying resource state with a PUT or POST request, by giving hints about what representations are acceptable.</p>\n<p>Links and forms reveal the levers of state: requests the client might make in the future to change application or resource state. Of course, the levers of state can be exposed only when the representation format supports links or forms. A hypermedia format like XHTML is good for this; so is an XML format that can have XHTML or WADL embedded in it.</p>",
      "slug" : "connectedness"
    }, {
      "title" : "The Uniform Interface",
      "type" : "page",
      "htmlContent" : "<p>All interaction<a id=\"ch08_uniform\" class=\"indexterm\"></a> between clients and resources is mediated through a few basic HTTP methods. Any resource will expose some or all of these methods, and a method does the same thing on every resource that supports it.</p>\n<p>A GET <a id=\"I_indexterm8_tt669\" class=\"indexterm\"></a>request is a request for information about a resource. The information is delivered as a set of headers and a representation. The client never sends a representation along with a GET request.</p>\n<p>A HEAD request <a id=\"I_indexterm8_tt670\" class=\"indexterm\"></a>is the same as a GET request, except that only the headers are sent in response. The representation is omitted.</p>\n<p>A PUT <a id=\"I_indexterm8_tt671\" class=\"indexterm\"></a>request is an assertion about the state of a resource. The client usually sends a representation along with a PUT request, and the server tries to create or change the resource so that its state matches what the representation says. A PUT request with no representation is just an assertion that a resource should exist at a certain URI.</p>\n<p>A DELETE request <a id=\"I_indexterm8_tt672\" class=\"indexterm\"></a>is an assertion that a resource should no longer exist. The client never sends a representation along with a DELETE request.</p>\n<p>A POST request <a id=\"I_indexterm8_tt673\" class=\"indexterm\"></a>is an attempt to create a new resource from an existing one. The existing resource may be the parent of the new one in a data-structure sense, the way the root of a tree is the parent of all its leaf nodes. Or the existing resource may be a special “factory” resource whose only purpose is to generate other resources. The representation sent along with a POST request describes the initial state of the new resource. As with PUT, a POST request doesn’t need to include a representation at all.</p>\n<p>A POST request may also be used to append to the state of an existing resource, without creating a whole new resource.</p>\n<p>An OPTIONS <a id=\"I_indexterm8_tt674\" class=\"indexterm\"></a>request is an attempt to discover the levers of state: to find out which subset of the uniform interface a resource supports. It’s rarely used. Today’s services specify the levers of state up front, either in human-readable documentation or in hypermedia documents like XHTML and WADL files.</p>\n<p>If you find yourself wanting to add another method or additional features to HTTP, you can overload POST (see <a class=\"xref\" href=\"ch08.html#overloading_post\" title=\"Overloading POST\">Overloading POST</a> below), but you probably need to add another kind of resource. If you start wanting to add transactional support to HTTP, you should probably expose transactions as resources that can be created, updated, and deleted. See <a class=\"xref\" href=\"ch08.html#resource-design\" title=\"Resource Design\">Resource Design</a>” later in this chapter for more on this technique.</p>\n<h2>Safety and Idempotence</h2>\n<p>A GET or HEAD<a id=\"I_indexterm8_tt675\" class=\"indexterm\"></a> request should be <span class=\"emphasis\"><em>safe</em></span>: a client that makes a GET or HEAD request is not requesting any changes to server state. The server might decide on its own to change state (maybe by logging the request or incrementing a hit counter), but it should not hold the client responsible for those changes. Making any number of GET requests to a certain URI should have the same practical effect as making no requests at all.</p>\n<p>A PUT or DELETE request should be <span class=\"emphasis\"><em>idempotent</em></span>. Making more than one PUT or DELETE request to a given URI should have the same effect as making only one. One common problem: PUT requests that set resource state in relative terms like “increment <code class=\"varname\">value</code> by 5.” Making 10 PUT requests like that is a lot different from just making one. PUT requests should set items of resource state to specific values.</p>\n<p>The safe methods, GET and HEAD, are automatically idempotent as well. POST requests for resource creation are neither safe nor idempotent. An <a id=\"I_indexterm8_tt676\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt677\" class=\"indexterm\"></a>overloaded POST request might or might not be safe or idempotent. There’s no way for a client to tell, since overloaded POST can do anything at all. You can make POST idempotent with POST Once Exactly (see <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>).</p>\n<h2>New Resources: PUT Versus POST</h2>\n<p>You can expose the<a id=\"I_indexterm8_tt678\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt679\" class=\"indexterm\"></a> creation of new resources through PUT, POST, or both. But a client can only use PUT to create resources when it can calculate the final URI of the new resource. In Amazon’s S3 service, the URI path to a bucket is <code class=\"literal\">/{bucket-name}</code>. Since the client chooses the bucket name, a client can create a bucket by constructing the corresponding URI and sending a PUT request to it.</p>\n<p>On the other hand, the URI to a resource in a typical Rails web service looks like <code class=\"literal\">/{database-table-name}/{database-ID}</code>. The name of the database table is known in advance, but the ID of the new resource won’t be known until the corresponding record is saved to the database. To create a resource, the client must POST to a “factory” resource, located at <code class=\"literal\">/{database-table-name}</code>. The server chooses a URI for the new resource.</p>\n<h2>Overloading POST</h2>\n<p>POST<a id=\"I_indexterm8_tt680\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt681\" class=\"indexterm\"></a> isn’t just for creating new resources and appending to representations. You can also use it to turn a resource into a tiny RPC-style message processor. A resource that receives an overloaded POST request can scan the incoming representation for additional method information, and carry out any task whatsoever. This gives the resource a wider vocabulary than one that supports only the uniform interface.</p>\n<p>This is how most web applications work.<a id=\"I_indexterm8_tt682\" class=\"indexterm\"></a> XML-RPC <a id=\"I_indexterm8_tt683\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt684\" class=\"indexterm\"></a>and SOAP/WSDL web services also run over overloaded POST. I strongly discourage the use of overloaded POST, because it ruins the uniform interface. If you’re tempted to expose complex objects or processes through overloaded POST, try giving the objects or processes their own URIs, and exposing them as resources. I show several examples of this in <a class=\"xref\" href=\"ch08.html#resource-design\" title=\"Resource Design\">Resource Design</a>” later in this chapter.</p>\n<p>There are two noncontroversial uses for overloaded POST. The first is to <span class=\"emphasis\"><em>simulate</em></span> HTTP’s uniform interface for clients like web browsers that don’t support PUT or DELETE. The second is to work around limits on the maximum length of a<a id=\"I_indexterm8_tt685\" class=\"indexterm\"></a> URI. The HTTP standard specifies no limit on how long a URI can get, but many clients and servers impose their own limits: Apache won’t respond to requests for URIs longer than 8 KB. If a client can’t make a GET request to <span class=\"emphasis\"><em>http://www.example.com/numbers/1111111</em></span> because of URI length restrictions (imagine a million more ones there if you like), it can make a POST request to <span class=\"emphasis\"><em>http://www.example.com/numbers?_method=GET</em></span> and put “1111111” in the entity-body.</p>\n<p>If you want to do without PUT and DELETE altogether, it’s entirely RESTful to expose safe operations on resources through GET, and all other operations through overloaded POST. Doing this violates my Resource-Oriented Architecture, but it conforms to the less restrictive rules of REST. REST says you should use a uniform interface, but it doesn’t say which one.</p>\n<p>If the uniform interface really doesn’t work for you, or it’s not worth the effort to make it work, then go ahead and overload POST, but don’t lose the resource-oriented design. Every URI you expose should still be a resource: something a client might want to link to. A lot of web applications create new URIs for operations exposed through overloaded POST. You get URIs like <code class=\"literal\">/weblog/myweblog/rebuild-index</code>. It doesn’t make sense to link to that URI. Instead of putting method information in the URI, expose overloaded POST on your existing resources (<code class=\"literal\">/weblog/myweblog</code>) and ask for method information in the incoming representation (<code class=\"literal\">method=rebuild-index</code>). This way, <code class=\"literal\">/weblog/myweblog</code> still acts like a resource, albeit one that doesn’t totally conform to the uniform interface. It responds to GET, PUT, DELETE... and also “rebuild-index” through overloaded POST. It’s still an object in the object-oriented sense.</p>\n<p>A rule of thumb: if you’re using overloaded POST, and you never expose GET and POST on the same URI, you’re probably not exposing resources at all. You’ve probably got an RPC-style service.<a id=\"I_indexterm8_tt686\" class=\"indexterm\"></a></p>",
      "slug" : "the-uniform-interface"
    }, {
      "title" : "This Stuff Matters",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>The principles of REST and the ROA are not arbitrary restrictions. They’re simplifying assumptions that give advantages to resource-oriented services over the competition. RESTful resource-oriented services are simpler, easier to use, more interoperable, and easier to combine than RPC-style services. As I introduced the principles of the ROA in <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a>, I gave brief explanations of the ideas underlying the principles. In addition to recapping these ideas to help this chapter serve as a summary, I’d like to revisit them now in light of the real designs I’ve shown for resource-oriented services: the map service of Chapters <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">5</a> and <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">6</a>, and the social bookmarking service of <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>.</p> \n  <h2>Why Addressability Matters</h2> \n  <p>Addressability<a id=\"I_indexterm8_tt688\" class=\"indexterm\"></a> means that every interesting aspect of your service is immediately accessible from outside. Every interesting aspect of your service has a URI: a unique identifier in a format that’s familiar to every computer-literate person. This identifier can be bookmarked, passed around between applications, and used as a stand-in for the actual resource. Addressability makes it possible for others to make <span class=\"emphasis\"><em>mashups</em></span> of your service: to use it in ways you never imagined.</p> \n  <p>In <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a> I compared URIs to cell addresses in a spreadsheet, and to file paths in a command-line shell. The web is powerful in the same way that spreadsheets and command-line shells are powerful. Every piece of information has a structured name that can be used as a reference to the real thing.</p> \n  <h2>Why Statelessness Matters</h2> \n  <p>Statelessness<a id=\"I_indexterm8_tt689\" class=\"indexterm\"></a> is the simplifying assumption to beat all simplifying assumptions. Each of a client’s requests contains all application states necessary to understand that request. None of this information is kept on the server, and none of it is implied by previous requests. Every request is handled in isolation and evaluated against the current resource state.</p> \n  <p>This makes it trivial to scale your application up. If one server can’t handle all the requests, just set up a load balancer and make a second server handle half the requests. Which half? It doesn’t matter, because every request is self-contained. You can assign requests to servers randomly, or with a simple round-robin algorithm. If two servers can’t handle all the requests, you add a third server, ad infinitum. If one server goes down, the others automatically take over for it. When your application is stateless, you don’t need to coordinate activity between servers, sharing memory or creating “server affinity” to make sure the same server handles every request in a “session.” You can throw web servers at the problem until the bottleneck becomes access to your <span class=\"emphasis\"><em>resource</em></span> state. Then you have to get into database replication, mirroring, or whatever strategy is most appropriate for the way you’ve chosen to store your resource state.</p> \n  <p>Stateless applications are also more reliable. If a client makes a request that times out, statelessness means the client can resend the request without worrying that its “session” has gone into a strange state that it can’t recover from. If it was a POST request, the client might have to worry about what the request did to the <span class=\"emphasis\"><em>resource</em></span> state, but that’s a different story. The client has complete control over the application state at all times.</p> \n  <p>There’s an old joke. Patient: “Doctor, it hurts when I try to scale a system that keeps client state on the server!” Doctor: “Then don’t do that.” That’s the idea behind statelessness: don’t do the thing that causes the trouble.</p> \n  <h2>Why the Uniform Interface Matters</h2> \n  <p>I covered this<a id=\"I_indexterm8_tt690\" class=\"indexterm\"></a> in detail near the end of <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a>, so I’ll just give a brief recap here. If you say to me, “I’ve exposed a resource at <code class=\"literal\">http://www.example.com/myresource</code>,” that gives me no information about what that resource is, but it tells me a whole lot about how I can manipulate it. I know how to fetch a representation of it (GET), I know how to delete it (DELETE), I know roughly how to modify its state (PUT), and I know roughly how to spawn a subordinate resource from it (POST).</p> \n  <p>There are still details to work out: which of these activities the resource actually supports,<sup>[<a id=\"id428478\" href=\"#ftn.id428478\" epub:type=\"noteref\" class=\"footnote\">24</a>]</sup>which representation formats the resource serves and expects, and what this resource represents in the real world. But every resource works basically the same way and can be accessed with a universal client. This is a big part of the success of the Web.</p> \n  <p>The restrictions imposed by the uniform interface (safety for GET and HEAD, idempotence for PUT and DELETE), make HTTP more reliable. If your request didn’t go through, you can keep resending it with no ill effects. The only exception is with POST requests. (See <a class=\"xref\" href=\"ch09.html#post-once-exactly\" title=\"POST Once Exactly\">POST Once Exactly</a>” in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> for ways of making POST idempotent.)</p> \n  <p>The power of the uniform interface is not in the specific methods exposed. The human web has a different uniform interface—it uses GET for safe operations, and POST for everything else—and it does just fine. The power is the uniformity: everyone uses the same methods for everything. If you deviate from the ROA’s uniform interface (say, by adopting the human web’s uniform interface, or WebDAV’s uniform interface), you switch communities: you gain compatibility with certain web services at the expense of others.</p> \n  <h2>Why Connectedness Matters</h2> \n  <p>Imagine the aggravation<a id=\"I_indexterm8_tt691\" class=\"indexterm\"></a> if instead of hypertext links, web pages gave you English instructions on how to construct the URI to the next page. That’s how most of today’s RESTful web services work: the resources aren’t connected to each other. This makes web services more brittle than human-oriented web sites, and it means that emergent properties of the Web (like Google’s PageRank) don’t happen on the programmable web.</p> \n  <p>Look at Amazon S3. It’s a perfectly respectable resource-oriented service. It’s addressable, it’s stateless, and it respects the uniform interface. But it’s not connected at all. The representation of the<a id=\"I_indexterm8_tt692\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt693\" class=\"indexterm\"></a> S3 bucket list gives the name of each bucket, but it doesn’t link to the buckets. The representation of a bucket gives the name of each object in the bucket, but it doesn’t link to the objects. We humans know these objects are conceptually linked, but there are no actual links in the representations (see <a class=\"xref\" href=\"ch08.html#s3-in-theory-and-practice\" title=\"Figure&nbsp;8-1.&nbsp;We see links, but there are none\">Figure&nbsp;8-1</a>).</p> \n  <div class=\"figure\"> \n   <a id=\"s3-in-theory-and-practice\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject8_tt694\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24578.png\" alt=\"We see links, but there are none\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;8-1.&nbsp;We see links, but there are none \n   </div> \n  </div> \n  <p>An S3 client can’t get from one resource to another by following <a id=\"I_indexterm8_tt695\" class=\"indexterm\"></a>links. Instead it must internalize rules about how to construct the URI to a given bucket or object. These rules are given in the S3 technical documentation, not anywhere in the service itself. I demonstrated the rules in <a class=\"xref\" href=\"ch03.html#s3-resources\" title=\"Resources\">Resources</a>” in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>. This wouldn’t work on the human web, but in a web service we don’t complain. Why is that?</p> \n  <p>In general, we expect less from web services than from the human web. We experience the programmable web through customized clients, not generic clients like web browsers. These customized clients can be programmed with rules for URI construction. Most information on the programmable web is also available on the human web, so a lack of connectedness doesn’t hide data from generic clients like search engines. Or else the information is hidden behind an authentication barrier and you don’t want a search engine seeing it anyway.</p> \n  <p>The S3 service gets away with a lack of connectedness because it only has three simple rules for URI construction. The URI to a bucket is just a slash and the URI-escaped name of the bucket. It’s not difficult to program these rules into a client. The only bug that’s at all likely is a failure to URI-escape the bucket or object name. Of course, there are additional rules for filtering and paginating the contents of buckets, which I skimmed over in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>. Those rules are more complex, and it would be better for S3 representations to provide hypermedia forms instead of making clients construct these URIs on their own.</p> \n  <p>More importantly, the S3 resources have simple and stable relationships to each other. The bucket list contains buckets, and a bucket contains objects. A link is just an indication of a relationship between two resources. A simple relationship is easy to program into a client, and “contains” is one of the simplest. If a client is preprogrammed with the relationships between resources, links that only serve to convey those relationships are redundant.</p> \n  <p>The social bookmarking service I implemented in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> is a little better-connected than S3. It represents lists of bookmarks as Atom documents full of internal and external links. But it’s not totally connected: its representation of a user doesn’t link to that user’s bookmarks, posting history, or tag vocabulary (look back to <a class=\"xref\" href=\"ch07.html#bookmarks-theory-and-practice\" title=\"Figure&nbsp;7-1.&nbsp;The bookmarking service in my head versus the actual service\">Figure&nbsp;7-1</a>). And there’s no information about where to find a user in the service, or how post a bookmark. The client is just supposed to know how to turn a username into a URI, and just supposed to know how to represent a bookmark.</p> \n  <p class=\"keep-together\">It’s easy to see how this is theoretically unsatisfying. A service ought to be self-describing, and not rely on some auxiliary English text that tells programmers how to write clients. It’s also easy to see that a client that relies on rules for URI construction is more brittle. If the server changes those rules, it breaks all the clients. It’s less easy to see the problems that stem from a lack of connectedness when the relationships between resources are complex or unstable. These problems can break clients even when the rules for URI construction never change.</p> \n  <p>Let’s go back to the mapping service from <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>. My representations were full of hyperlinks and forms, most of which were not technically necessary. Take this bit of markup from the representation of a road map that was in <a class=\"xref\" href=\"ch05.html#xhtml-map-representation\" title=\"Example&nbsp;5-6.&nbsp;An XHTML representation of the road map of Earth\">Example&nbsp;5-6</a>:</p> \n  <pre class=\"screen\">&lt;a class=\"zoom_in\" href=\"/road.1/Earth/37.0,-95.8\" /&gt;Zoom out&lt;/a&gt;\n&lt;a class=\"zoom_out\" href=\"/road.3/Earth/37.0,-95.8\" /&gt;Zoom in&lt;/a&gt;</pre> \n  <p>Instead of providing these links everywhere, the service provider could put up an English document telling the authors of automated clients how to manipulate the zoom level in the first path variable. That would disconnect some related resources (the road map at different zoom levels), but it would save some bandwidth in every representation and it would have little effect on the actual code of any automated client. Personally, if I was writing a client for this service, I’d rather get from zoom level 8 to zoom level 4 by setting <code class=\"literal\">road.4</code> directly, than by following the “Zoom out” link over and over again. My client will break if the URI construction rule ever changes, but maybe I’m willing to take that risk.</p> \n  <p>Now consider this bit of markup from the representation of the planet Earth. It’s reprinted from <a class=\"xref\" href=\"ch05.html#xhtml-planet-representation\" title=\"Example&nbsp;5-7.&nbsp;An XHTML representation of a place: the planet Earth\">Example&nbsp;5-7</a>:</p> \n  <pre class=\"screen\"> &lt;dl class=\"place\"&gt;\n  &lt;dt&gt;name&lt;/dt&gt; &lt;dd&gt;Earth&lt;/dd&gt;\n  &lt;dt&gt;maps&lt;/dt&gt;\n    &lt;ul class=\"maps\"&gt;\n     &lt;li&gt;&lt;a class=\"map\" href=\"/road/Earth\"&gt;Road&lt;/a&gt;&lt;/li&gt;\n     &lt;li&gt;&lt;a class=\"map\" href=\"/satellite/Earth\"&gt;Satellite&lt;/a&gt;&lt;/li&gt;\n     ...\n    &lt;/ul&gt;</pre> \n  <p>The URIs are technically redundant. The name of the place indicates that these are maps of Earth, and the link text indicates that there’s a satellite and a road map. Given those two pieces of information, a client can construct the corresponding map URI using a rule like the one for S3 objects: slash, map type, slash, planet name. Since the URIs can be replaced by a simple rule, the service might follow the S3 model and save some bandwidth by presenting the representation of Earth in an XML format like this:</p> \n  <pre class=\"screen\">&lt;place name=\"Earth\" type=\"planet\"&gt;\n &lt;map type=\"satellite\" /&gt;\n &lt;map type=\"road\" /&gt;\n ...\n&lt;/place&gt;</pre> \n  <p>If I was writing a client for this service, I would rather be given those links than have to construct them myself, but it’s up for debate.</p> \n  <p>Here’s another bit of markup from <a class=\"xref\" href=\"ch05.html#xhtml-map-representation\" title=\"Example&nbsp;5-6.&nbsp;An XHTML representation of the road map of Earth\">Example&nbsp;5-6</a>. These links are to help the client move from one tile on the map to another.</p> \n  <pre class=\"screen\">&lt;a class=\"map_nav\" href=\"46.0518,-95.8\"&gt;North&lt;/a&gt;\n&lt;a class=\"map_nav\" href=\"41.3776,-89.7698\"&gt;Northeast&lt;/a&gt;\n&lt;a class=\"map_nav\" href=\"36.4642,-84.5187\"&gt;East&lt;/a&gt;\n&lt;a class=\"map_nav\" href=\"32.3513,-90.4459\"&gt;Southeast&lt;/a&gt;</pre> \n  <p>It’s technically possible for a client to generate these URIs based on rules. After all, the server is generating them based on rules. But the rules involve knowing how latitude and longitude work, the scale of the map at the current zoom level, and the size and shape of the planet. Any client programmer would agree it’s easier to navigate a map by following the links than by calculating the coordinates of tiles. We’ve reached a point at which the relationships between resources are too complex to be expressed in simple rules. Connectedness becomes very important.</p> \n  <p>This is where Google Maps’s tile-based navigation system pays off (I described that system back in <a class=\"xref\" href=\"ch05.html#representing-maps\" title=\"Representing Maps and Points on Maps\">Representing Maps and Points on Maps</a>” in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>, if you’re curious). Google Maps addresses its tiles by arbitrary X and Y coordinates instead of latitude and longitude. Finding the tile to the north is usually as easy as subtracting one from the value of Y. The relationships between tiles are much simpler. Nobody made me design my tile system in terms of latitude and longitude. If latitude/longitude calculations are why I have to send navigation links along with every map representation, maybe I should rethink my strategy and expose simpler URIs, so that my clients can generate them more easily.</p> \n  <p>But there’s another reason why connectedness is valuable: it makes it possible for the client to handle relationships that change over time. Links not only hide the rules about how to build a URI for a given resource, they embody the rules of how resources are related to each other. Here’s a terrifying example to illustrate the point.</p> \n  <div class=\"sect3\" title=\"A terrifying example\"> \n   <p>Suppose I get some new map data for my service. It’s more accurate than the old data, but the scale is a little different. At zoom level 8, the client sees a slightly smaller map than it did before. Let’s say at zoom level 8, a tile 256 pixels square now depicts an area three-quarters of a mile square, instead of seven-eigths of a mile square.</p> \n   <p>At first glance, this has no effect on anything. Latitude and longitude haven’t changed, so every point on the old map is in the same place on the new map. Google Maps-style tile URIs would break at this point, because they use X and Y instead of latitude and longitude. When the map data was updated, I’d have to recalculate all the tile images. Many points on the map would suddenly shift to different tiles, and get different X and Y coordinates. But all of my URIs still work. Every point on the map has the same URI it did before.</p> \n   <p>In this new data set, the URI <code class=\"literal\">/road.8/Earth/40.76,-73.98.png</code> still shows part of the island of Manhattan, and the URI <code class=\"literal\">/road.8/Earth/40.7709,-73.98</code> still shows a point slightly to the north. But the rules have changed for finding the tile <span class=\"emphasis\"><em>directly</em></span> to the north of another tile. Those two tile graphics are centered on the same coordinates as before, but now each tile depicts a slightly smaller space. They used to be adjacent on the map, but now there’s a gap between them (see <a class=\"xref\" href=\"ch08.html#manhattan-map\" title=\"Figure&nbsp;8-2.&nbsp;When clients choose URIs for map tiles: before and after\">Figure&nbsp;8-2</a>).</p> \n   <div class=\"figure\"> \n    <a id=\"manhattan-map\"></a> \n    <div class=\"figure-contents\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject8_tt696\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24580.png.jpg\" alt=\"When clients choose URIs for map tiles: before and after\"> \n     </div> \n    </div> \n    <div class=\"figure-title\">\n      Figure&nbsp;8-2.&nbsp;When clients choose URIs for map tiles: before and after \n    </div> \n   </div> \n   <p>If a client application finds nearby tiles by following the navigation links I provide, it will automatically adapt to the new map scale. But an application that “already knows” how to turn latitude and longitude into image URIs will suddenly start showing maps that look like <span class=\"emphasis\"><em>MAD Magazine</em></span> fold-ins.</p> \n   <p>I made a reasonable change to my service that didn’t change any URIs, but it broke clients that always construct their own URIs. What changed was not the resources but the relationships between them: not the rules for constructing URIs but the rules for driving the application from one state to another. Those rules are embedded in my navigation links, and a client duplicates those rules at its own peril.</p> \n   <p>And that’s why it’s important to connect your resources to each other. It’s fine to expect your clients to use your rules to construct an initial URI (say, a certain place on the map at a certain zoom level), but if they need to navigate from one URI to another, you should provide appropriate links. As the programmable web matures, connectedness will become more and more important.</p> \n  </div>\n </body>\n</html>",
      "slug" : "this-stuff-matters"
    }, {
      "title" : "Resource Design",
      "type" : "page",
      "htmlContent" : "<p>You’ll <a id=\"ch08_rd\" class=\"indexterm\"></a>need one resource for each “thing” exposed by your service. “Resource” is about as vague as “thing,” so any kind of data or algorithm you want to expose can be a resource. There are three kinds of resources:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>Predefined one-off resources, such as your service’s home page or a static list of links to resources. A resource of this type corresponds to something you’ve only got a few of: maybe a class in an object-oriented system, or a database table in a database-oriented system.</p></li>\n  <li class=\"listitem\"><p>A large (possibly infinite) number of resources corresponding to individual items of data. A resource of this type might correspond to an object in an object-oriented system, or a database row in a database-oriented system.</p></li>\n  <li class=\"listitem\"><p>A large (probably infinite) number of resources corresponding to the possible outputs of an algorithm. A resource of this type might correspond to the results of a query in a database-oriented system. Lists of search results and filtered lists of resources fall into this category.</p></li>\n </ul>\n</div>\n<p>There are some difficult cases in resource design, places where it seems you must manipulate a resource in a way that doesn’t fit the uniform interface. The answer is almost always to expose the thing that’s causing the problem as a new set of resources. These new resources may be more abstract then the rest of your resources, but that’s fine: a resource can be anything.</p>\n<h2>Relationships Between Resources</h2>\n<p>Suppose<a id=\"I_indexterm8_tt697\" class=\"indexterm\"></a> Alice and Bob are resources in my service. That is, they’re people in the real world, but my service gives them URIs and offers representations of their state. One day Alice and Bob get married. How should this be represented in my service?</p>\n<p>A client can PUT to Alice’s URI, modifying her state to reflect the fact that she’s married to Bob, and then PUT to Bob’s URI to say he’s married to Alice. That’s not very satisfying because it’s two steps. A client might PUT to Alice’s URI and forget to PUT to Bob’s. Now Alice is married to Bob but not vice versa.</p>\n<p>Instead I should treat the marriage, this relationship between two resources, as a thing in itself: a third resource. A client can declare two people married by sending a PUT request to a “marriage” URI or a POST request to a “registrar” URI (it depends on how I choose to do the design). The representation includes links to Alice and Bob’s URIs: it’s an assertion that the two are married. The server applies any appropriate rules about who’s allowed to get married, and either sends an error message or creates a new resource representing the marriage. Other resources can now link to this resource, and it responds to the uniform interface. A client can GET it or DELETE it (though hopefully DELETEing it won’t be necessary).</p>\n<h2>Asynchronous Operations</h2>\n<p>HTTP has a<a id=\"I_indexterm8_tt698\" class=\"indexterm\"></a> synchronous request-response model. The client opens an Internet socket to the server, makes its request, and keeps the socket open until the server has sent the response. If the client doesn’t care about the response it can close the socket early, but to get a response it must leave the socket open until the server is ready.</p>\n<p>The problem is not all operations can be completed in the time we expect an HTTP request to take. Some operations take hours or days. An HTTP request would surely be timed out after that kind of inactivity. Even if it didn’t, who wants to keep a socket open for days just waiting for a server to respond? Is there no way to expose such operations asynchronously through HTTP?</p>\n<p>There is, but it requires that the operation be split into two or more synchronous requests. The first request spawns the operation, and subsequent requests let the client learn about the status of the operation. The secret is the status <a id=\"I_indexterm8_tt699\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt700\" class=\"indexterm\"></a>code 202 (“Accepted”).</p>\n<p>I’ll demonstrate one strategy for implementing asynchronous requests with the 202 status code. Let’s say we have a web service that handles a queue of requests. The client makes its service request normally, possibly without any knowledge that the request will be handled asynchronously. It sends a request like this one:</p>\n<pre class=\"screen\">POST /queue HTTP/1.1\nHost: jobs.example.com\nAuthorization: Basic mO1Tcm4hbAr3gBUzv3kcceP=\n\nGive me the prime factorization of this 100000-digit number:\n...</pre>\n<p>The server accepts the request, creates a new job, and puts it at the end of the queue. It will take a long time for the new job to be completed, or there wouldn’t be a need for a queue in the first place. Instead of keeping the client waiting until the job finally runs, the server sends this response right away:</p>\n<pre class=\"screen\">202 Accepted\nLocation: http://jobs.example.com/queue/job11a4f9</pre>\n<p>The server has created a new “job” resource and given it a URI that doesn’t conflict with any other job. The asynchronous operation is now in progress, and the client can make GET requests to that URI to see how it’s going— that is, to get the current state of the “job” resource. Once the operation is complete, any results will become available as a representation of this resource. Once the client is done reading the results it can DELETE the job resource. The client may even be able to cancel the operation by DELETEing its job prematurely.</p>\n<p>Again, I’ve overcome a perceived limitation of the Resource-Oriented Architecture by exposing a new kind of resource corresponding to the thing that was causing the problem. In this case, the problem was how to handle asynchronous operations, and the solution was to expose each asynchronous operation as a new resource.</p>\n<p>There’s one wrinkle. Because every request to start an asynchronous operation makes the server create a new resource (if only a transient one), such requests are neither safe nor idempotent. This means you can’t spawn asynchronous operations with GET, DELETE, or (usually) PUT. The only HTTP method you can use and still respect the uniform interface is POST. This means you’ll need to expose different resources for asynchronous operations than you would for synchronous operations. You’ll probably do something like the job queue I just demonstrated. You’ll expose a single resource—the job queue—to which the client POSTs to create a subordinate resource—the job. This will hold true whether the purpose of the asynchronous operation is to read some data, to make a calculation (as in the factoring example), or to modify the data set.</p>\n<h2>Batch Operations</h2>\n<p>Sometimes <a id=\"I_indexterm8_tt701\" class=\"indexterm\"></a>clients need to operate on more than one resource at once. You’ve already seen this: a list of search results is a kind of batch GET. Instead of fetching a set of resources one at a time, the client specifies some criteria and gets back a document containing abbreviated representations of many resources. I’ve also mentioned “factory” resources that respond to POST and create subordinate resources. The factory idea is easy to scale up. If your clients need to create resources in bulk, you can expose a factory resource whose incoming representation describes a set of resources instead of just one, and creates many resources in response to a single request.</p>\n<p>What about modifying or deleting a set of resources at once? Existing resources are identified by URI, but addressability means an HTTP request can only point to a single URI, so how can you DELETE two resources at once? Remember that URIs can contain embedded URI paths, or even whole other URIs (if you escape them). One way to let a client modify multiple resources at once is to expose a resource for every <span class=\"emphasis\"><em>set</em></span> of resources. For instance, <span class=\"emphasis\"><em>http://www.example.com/sets/resource1;subdir/resource2</em></span> might refer to a set of two resources: the one at <span class=\"emphasis\"><em>http://www.example.com/resource1</em></span> and the one at <span class=\"emphasis\"><em>http://www.example.com/subdir/resource2</em></span>. Send a DELETE to that “set” resource and you delete both resources in the set. Send a PUT instead, with a representation of each resource in the set, and you can modify both resources with a single HTTP request.</p>\n<p>You might be wondering what HTTP status code to send in response to a batch operation. After all, one of those PUTs might succeed while the other one fails. Should the status code be 200 (“OK”) or 500 (“Internal Server Error”)? One solution is to make a batch operation spawn a series of asynchronous jobs. Then you can send 202 (“Accepted”), and show the client how to check on the status of the individual jobs. Or, you can use an extended HTTP status code created by the WebDAV extension to HTTP: 207 (“Multi-Status”).</p>\n<p>The 207 status code tells the client to look in the <a id=\"I_indexterm8_tt702\" class=\"indexterm\"></a>entity-body for a <span class=\"emphasis\"><em>list</em></span> of status codes like 200 (“OK”) and 500 (“Internal Server Error”). The entity-body is an XML document that tells the client which operations succeeded and which failed. This is not an ideal solution, since it moves information about what happened out of the status code and into the response entity-body. It’s similar to the way overloaded POST moves the method information out of the HTTP method and into the request entity-body. But since there might be a different status code for every operation in the batch, you’re really limited in your options here. <a class=\"xref\" href=\"apb.html\" title=\"Appendix&nbsp;B.&nbsp;The HTTP Response Code Top 42\">Appendix&nbsp;B</a> has more information about the 207 status code.</p>\n<h2>Transactions</h2>\n<p>In the Resource-Oriented Architecture, every incoming HTTP request has some resource as its destination. But some services expose operations that span multiple resources. The classic example is an operation that transfers money from a checking to a savings account. In a database-backed system you’d<a id=\"I_indexterm8_tt703\" class=\"indexterm\"></a> use a transaction to prevent the possibility of losing or duplicating money. Is there a resource-oriented way to implement transactions?</p>\n<p>You can expose simple transactions as batch operations, or use overloaded POST, but here’s another way. It involves (you guessed it) exposing the transactions themselves as resources. I’ll show you a sample transaction using the account transfer example. Let’s say the “checking account” resource is exposed at <code class=\"literal\">/accounts/checking/11</code>, and the “savings account” resource is exposed at <code class=\"literal\">/accounts/savings/55</code>. Both accounts have a current balance of $200, and I want to transfer $50 from checking to savings.</p>\n<p>I’ll quickly walk you through the requests and then explain them. First I create a transaction by sending a POST to a transaction factory resource:</p>\n<pre class=\"screen\">POST /transactions/account-transfer HTTP/1.1\nHost: example.com</pre>\n<p>The response gives me the URI of my newly created transaction resource:</p>\n<pre class=\"screen\">201 Created\nLocation: /transactions/account-transfer/11a5</pre>\n<p>I PUT the first part of my transaction: the new, reduced balance of the checking account.</p>\n<pre class=\"screen\">PUT /transactions/account-transfer/11a5/accounts/checking/11 HTTP/1.1\nHost: example.com\n\nbalance=150</pre>\n<p>I PUT the second part of my transaction: the new, increased balance of the savings account.</p>\n<pre class=\"screen\">PUT /transactions/account-transfer/11a5/accounts/savings/55 HTTP/1.1\nHost: example.com\n\nbalance=250</pre>\n<p>At any point up to this I can DELETE the transaction resource to roll back the transaction. Instead, I’m going to commit the transaction:</p>\n<pre class=\"screen\">PUT /transactions/account-transfer/11a5 HTTP/1.1\nHost: example.com\n\ncommitted=true</pre>\n<p>This is the server’s chance to make sure that the transaction doesn’t create any inconsistencies in resource state. For an “account transfer” transaction the server should check whether the transaction tries to create or destroy any money, or whether it tries to move money from one person to another without authorization. If everything checks out, here’s the response I might get from my final PUT:</p>\n<pre class=\"screen\">200 OK\nContent-Type: application/xhtml+xml\n\n...\n&lt;a href=\"/accounts/checking/11\"&gt;Checking #11&lt;/a&gt;: New balance $150\n&lt;a href=\"/accounts/savings/55\"&gt;Savings #55&lt;/a&gt;: New balance $250\n...</pre>\n<p>At this point I can DELETE the transaction and it won’t be rolled back. Or the server might delete it automatically. More likely, it will be archived permanently as part of an audit trail. It’s an addressable resource. Other resources, such as a list of transactions that affected checking account #11, can link to it.</p>\n<p>The challenge in representing transactions RESTfully is that every HTTP request is supposed to be a self-contained operation that operates on one resource. If you PUT a new balance to <code class=\"literal\">/accounts/checking/11</code>, then either the PUT succeeds or it doesn’t. But during a transaction, the state of a resource is in flux. Look at the checking account from inside the transaction, and the balance is $150. Look at it from outside, and the balance is still $200. It’s almost as though there are two different resources.</p>\n<p>That’s how this solution presents it: as two different resources. There’s the actual checking account, at <code class=\"literal\">/accounts/checking/11</code>, and there’s one transaction’s view of the checking account, at <code class=\"literal\">/transactions/account-transfer/11a5/accounts/checking/11</code>. When I POSTed to create <code class=\"literal\">/transactions/account-transfer/11a5/</code>, the service exposed additional resources beneath the transaction URI: probably one resource for each account on the system. I manipulated those resources as I would the corresponding account resources, but my changes to resource state didn’t go “live” until I committed the transaction.</p>\n<p>How would this be implemented behind the scenes? Probably with something that takes incoming requests and builds a queue of actions associated with the transaction. When the transaction is committed the server might start a database transaction, apply the queued actions, and then try to commit the database transaction. A failure to commit would be propagated as a failure to commit the web transaction.</p>\n<p>A RESTful transaction is more complex to implement than a database or programming language transaction. Every step in the transaction comes in as a separate HTTP request. Every step identifies a resource and fits the uniform interface. It might be easier to punt and use overloaded POST. But if you implement transactions RESTfully, your transactions have the benefits of resources: they’re addressable, operations on them are transparent, and they can be archived or linked to later. Yet again, the way to deal with an action that doesn’t fit the uniform interface is to expose the action itself as a resource.</p>\n<h2>When In Doubt, Make It a Resource</h2>\n<p>The techniques I’ve shown you are not the official RESTful or resource-oriented ways to handle transactions, asynchronous operations, and so on. They’re just the best ones I could think up. If they don’t work for you, you’re free to try another arrangement.</p>\n<p>The larger point of this section is that when I say “anything can be a resource” I do mean <span class=\"emphasis\"><em>anything</em></span>. If there’s a concept that’s causing you design troubles, you can usually fit it into the ROA by exposing it as a new kind of resource. If you need to violate the uniform interface for performance reasons, you’ve always got overloaded POST. But just about anything can be made to respond to the uniform interface.<a id=\"I_indexterm8_tt704\" class=\"indexterm\"></a></p>",
      "slug" : "resource-design"
    }, {
      "title" : "URI Design",
      "type" : "page",
      "htmlContent" : "<p>URIs should be<a id=\"I_indexterm8_tt706\" class=\"indexterm\"></a> meaningful and well structured. Wherever possible, a client should be able to construct the URI for the resource they want to access. This increases the “surface area” of your application. It makes it possible for clients to get directly to any state of your application without having to traverse a bunch of intermediate resources. (But see <a class=\"xref\" href=\"ch08.html#why_connectedness\" title=\"Why Connectedness Matters\">Why Connectedness Matters</a>” earlier in this chapter; links are the most reliable way to convey the relationships between resources.)</p>\n<p>When designing URIs, use<a id=\"I_indexterm8_tt707\" class=\"indexterm\"></a> path variables to separate elements of a hierarchy, or a path through a directed graph. Example: <code class=\"literal\">/weblogs/myweblog/entries/100</code> goes from the general to the specific. From a list of weblogs, to a particular weblog, to the entries in that weblog, to a particular entry. Each path variable is in some sense “inside” the previous one.</p>\n<p>Use punctuation characters to separate multiple pieces of data at the same level of a hierarchy. Use<a id=\"I_indexterm8_tt708\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt709\" class=\"indexterm\"></a> commas when the order of the items matters, as it does in latitude and longitude: <code class=\"literal\">/Earth/37.0,-95.2</code>. Use semicolons when the order doesn’t matter: <code class=\"literal\">/color-blends/red;blue</code>.</p>\n<p>Use query variables only to suggest arguments being plugged into an algorithm, or when the other two techniques fail. If two URIs differ only in their <a id=\"I_indexterm8_tt710\" class=\"indexterm\"></a>query variables, it implies that they’re the different sets of inputs into the same underlying algorithm.</p>\n<p>URIs are supposed to designate resources, not operations on the resources. This means it’s almost never appropriate to put the names of operations in your URIs. If you have a URI that looks like <code class=\"literal\">/object/do-operation</code>, you’re in danger of slipping into the RPC style. Nobody wants to link to <code class=\"literal\">do-operation</code>: they want to link to the <code class=\"literal\">object</code>. Expose the operation through the uniform interface, or use <a id=\"I_indexterm8_tt711\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt712\" class=\"indexterm\"></a>overloaded POST if you have to, but make your URIs designate objects, not operations on the objects.</p>\n<p>I can’t make this an ironclad rule, because a resource can be anything. Operations on objects can be first-class objects, similar to how methods in a dynamic programming language are first-class objects. <code class=\"literal\">/object/do-operation</code> might be a full-fledged resource that responds to GET, PUT, and DELETE. But if you’re doing this, you’re well ahead of the current web services curve, and you’ve got weightier issues on your mind than whether you’re contravening some best practice I set down in a book.</p>",
      "slug" : "uri-design"
    }, {
      "title" : "Outgoing Representations",
      "type" : "page",
      "htmlContent" : "<p>Most of the <a id=\"I_indexterm8_tt713\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt714\" class=\"indexterm\"></a>documents you serve will be representations of resources, but some of them will be error conditions. Use HTTP status codes to convey how the client should regard the document you serve. If there’s an error, you should set the status code to indicate an appropriate error condition, possibly 400 (“Bad Request”). Otherwise, the client might treat your error message as a representation of the resource it requested.</p>\n<p>The status code says what the document is for.<a id=\"I_indexterm8_tt715\" class=\"indexterm\"></a> The <code class=\"literal\">Content-Type</code> response header says what format the document is in. Without this header, your clients won’t know how to parse or handle the documents you serve.</p>\n<p>Representations should be human-readable, but computer-oriented. The job of the human web is to present information for direct human consumption. The main job of the programmable web is to present the same information for manipulation by computer programs. If your service exposes a set of instrument readings, the focus should be on providing access to the raw data, not on making human-readable graphs. Clients can make their own graphs, or pipe the raw data into a graph-generation service. You can provide graphs as a convenience, but a graph should not be the main representation of a set of numbers.</p>\n<p>Representations should be useful: that is, they should expose interesting data instead of irrelevant data that no one will use. A single representation should contain all relevant information necessary to fulfill a need. A client should not have to get several representations of the same resource to perform a single operation.</p>\n<p>That said, it’s difficult to anticipate what part of your data set clients will use. When in doubt, expose all the state you have for a resource. This is what a Rails service does by default: it exposes representations that completely describe the corresponding database rows.</p>\n<p>A resource’s representations should change along with its state.</p>",
      "slug" : "outgoing-representations"
    }, {
      "title" : "Incoming Representations",
      "type" : "page",
      "htmlContent" : "<p>I don’t have a lot to say<a id=\"I_indexterm8_tt716\" class=\"indexterm\"></a> about incoming representations, apart from talking about specific formats, which I’ll do in the next chapter. I will mention the two main kinds of incoming representations. Simple representations are usually key-value pairs: set this item of resource state to that value: <code class=\"literal\">username=leonardr</code>. There are lots of representations for key-value pairs, form-encoding being the most popular.</p>\n<p>If your resource state is too complex to represent with key-value pairs, your service should accept incoming representations in the same format it uses to serve outgoing representations. A client should be able to fetch a representation, modify it, and PUT it back where it found it. It doesn’t make sense to have your clients understand one complex data format for outgoing representations and another, equally complex format for incoming representations.</p>",
      "slug" : "incoming-representations"
    }, {
      "title" : "Service Versioning",
      "type" : "page",
      "htmlContent" : "<p>Web <a id=\"I_indexterm8_tt717\" class=\"indexterm\"></a>sites can (and do) undergo drastic redesigns without causing major problems, because their audience is made of human beings. Humans can look at a web page and understand what it means, so they’re good at adapting to changes. Although URIs on the Web are not supposed to change, in practice they can (and do) change all the time. The consequences are serious—external links and bookmarks still point to the old URIs—but your everyday use of a web site isn’t affected. Even so, after a major redesign, some web sites keep the old version around for a while. The web site’s users need time to adapt to the new system.</p>\n<p>Computer programs are terrible at adapting to changes. A human being (a programmer) must do the adapting for them. This is why <a id=\"I_indexterm8_tt718\" class=\"indexterm\"></a>connectedness is important, and why extensible representation formats (like Atom and XHTML) are so useful. When the client’s options are described by hypermedia, a programmer can focus on the high-level semantic meaning of a service, rather than the implementation details. The implementations of resources, the URIs to the resources, and even the hypermedia representations themselves can change, but as long as the semantic cues are still there, old clients will still work.</p>\n<p>The mapping service from <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> was completely connected and served representations in an extensible format. The URI to a resource followed a certain pattern, but you didn’t need that fact to use the service: the representations were full of links, and the links were annotated with semantic content like “zoom_in” and “coordinates.” In <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a> I added new resources and added new features to the representations, but a client written against the <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> version would still work. (Except for the protocol change: the <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> service was served through HTTP, and the <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a> service through HTTPS.) All the semantic cues stayed the same, so the representations still “meant” the same thing.</p>\n<p>By contrast, the bookmarking service from <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> isn’t well connected. You can’t get a representation of a user except by applying a URI construction rule I described in English prose. If I change that rule, any clients you wrote will break. In a situation like this, the service should allow for a transitional period where the old resources work alongside the new ones. The simplest way is to incorporate version information into the resources’ URIs. That’s what I did in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>: my URIs looked like <code class=\"literal\">/v1/users/leonardr</code> instead of <code class=\"literal\">/users/leonardr</code>.</p>\n<p>Even a well-connected service might need to be versioned. Sometimes a rewrite of the service changes the meaning of the representations, and all the clients break, even ones that understood the earlier semantic cues. When in doubt, version your service.</p>\n<p>You can use any of the methods developed over the years for numbering software releases. Your URI might designate the version as <code class=\"literal\">v1</code>, or <code class=\"literal\">1.4.0</code>, or <code class=\"literal\">2007-05-22</code>. The simplest way to incorporate the version is to make it the first path variable: <code class=\"literal\">/v1/resource</code> versus <code class=\"literal\">/v2/resource</code>. If you want to get a little fancy, you can incorporate the version number into the hostname: <code class=\"literal\">v1.service.example.com</code> versus <code class=\"literal\">v2.service.example.com</code>.</p>\n<p>Ideally, you would keep the old versions of your services around until no more clients use them, but this is only possible in private settings where you control all the clients. More realistically, you should keep old versions around until architectural changes make it impossible to expose the old resources, or until the maintenance cost of the old versions exceeds the cost of actively helping your user base migrate.</p>",
      "slug" : "service-versioning"
    }, {
      "title" : "Permanent URIs Versus Readable URIs",
      "type" : "page",
      "htmlContent" : "<p>I think there<a id=\"I_indexterm8_tt720\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt721\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt722\" class=\"indexterm\"></a> should be an intuitive correspondence between a URI and the resource it identifies. REST doesn’t forbid this, but it doesn’t require it either. REST says that resources should have names, not that the names should mean anything. The URI <code class=\"literal\">/contour/Mars</code> doesn’t have to be the URI to the contour map of Mars: it could just as easily be the URI to the radar map of Venus, or the list of open bugs in a bug tracker. But making a correspondence between URI and resource is one of the most useful things you can do for your clients. Usability expert<a id=\"I_indexterm8_tt723\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt724\" class=\"indexterm\"></a> Jakob Nielsen recommends this in his essay <a class=\"ulink\" href=\"http://www.useit.com/alertbox/990321.html\" target=\"_top\">“URL as UI”</a>. If your URIs are intuitive enough, they form part of your service’s user interface. A client can get right to the resource they want by constructing an appropriate URI, or surf your resources by varying the URIs.</p>\n<p>There’s a problem, though. A meaningful URI talks about the resource, which means it contains elements of resource state. What happens when the resource state changes? Nobody will ever successfully rename the planet Mars (believe me, I’ve tried), but towns change names occasionally, and businesses change names all the time. I ran into trouble in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a> because I used latitude and longitude to designate a “place” that turned out to be a moving ship. Usernames change. People get married and change their names. Almost any piece of resource state that might add meaning to a URI can change, breaking the URI.</p>\n<p>This is why Rails applications expose URIs that incorporate database table IDs, URIs like <code class=\"literal\">/weblogs/4</code>. I dissed those URIs in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, but their advantage is that they’re based on a bit of resource state that never changes. It’s state that’s totally useless to the client, but it never changes, and that’s worth something too.</p>\n<p>Jakob Nielsen makes the case for meaningful URIs, but<a id=\"I_indexterm8_tt725\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt726\" class=\"indexterm\"></a> Tim Berners-Lee makes the case for <em class=\"firstterm\">URI opacity</em>: “meaningless” URIs that never change. Berners-Lee’s <a class=\"ulink\" href=\"http://www.w3.org/DesignIssues/Axioms.html\" target=\"_top\"><em class=\"citetitle\">Axioms of Web Architecture</em></a> describes URI opacity like this: <span class=\"quote\">“<span class=\"quote\">When you are not dereferencing you should not look at the contents of the URI string to gain other information.</span>”</span> That is: you can use a URI as the name of a resource, but you shouldn’t pick the URI apart to see what it says, and you shouldn’t assume that you can vary the resource by varying the URI. Even if a URI really looks meaningful, you can’t make any assumptions.</p>\n<p>This is a good rule for a general web client, because there are no guarantees about URIs on the Web as a whole. Just because a URI ends in “.html” doesn’t mean there’s an HTML document on the other side. But today’s average RESTful web service is built around rules for URI construction. With URI Templates, a web service can make promises about whole <span class=\"emphasis\"><em>classes</em></span> of URIs that fit a certain pattern. The best argument for URI opacity on the programmable web is the fact that a non-opaque URI incorporates resource state that might change. To use another of Tim Berners-Lee’s coinages, opaque URIs are “cool.”<sup>[<a id=\"id404168\" href=\"#ftn.id404168\" class=\"footnote\">25</a>]</sup></p>\n<p>So which is it? URI as UI, or URI opacity? For once in this book I’m going to give you the cop-out answer: it depends. It depends on which is worse for your clients: a URI that has no visible relationship to the resource it names, or a URI that breaks when its resource state changes. I almost always come down on the side of URI as UI, but that’s just my opinion.</p>\n<p>To show you how subjective this is, I’d like to break the illusion of the authorial “I” for just a moment. The authors of this book both prefer informative URIs to opaque ones, but Leonard tries to choose URIs using the bits of resource state that are least likely to change. If he designed a weblog service, he’d put the date of a weblog entry in that entry’s URI, but he wouldn’t put the entry title in there. He thinks the title’s too easy to change. Sam would rather put the title in the URI, to help with search engine optimization and to give the reader a clue what content is behind the URI. Sam would handle retitled entries by setting up a permanent redirect at the old URI.</p>",
      "slug" : "permanent-uris-versus-readable-uris"
    }, {
      "title" : "Standard Features of HTTP",
      "type" : "page",
      "htmlContent" : "<p>HTTP has<a id=\"ch08_httpstandard\" class=\"indexterm\"></a> several features designed to solve specific engineering problems. Many of these features are not widely known, either because the problems they solve don’t come up very often on the human web, or because today’s web browsers implement them transparently. When working on the programmable web, you should know about these features, so you don’t reinvent them or prematurely give up on HTTP as an application protocol.</p>\n<h2>Authentication and Authorization</h2>\n<p>By now you<a id=\"ch08_authhttp\" class=\"indexterm\"></a><a id=\"ch08_aaa\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt728\" class=\"indexterm\"></a> probably know that HTTP authentication and authorization are handled with HTTP headers—“stickers” on the HTTP “envelope.” You might not know that these headers were designed to be extensible. HTTP defines two authentication schemes, but there’s a standard way of integrating other authentication schemes into HTTP, by customizing values for the headers <code class=\"literal\">Authorization</code> and <code class=\"literal\">WWW-Authenticate</code>. You can even define custom authentication schemes and integrate them into HTTP: I’ll show you how that’s done by adapting a small portion of the WS-Security standard to work with HTTP authentication. But first, I’ll cover the two predefined schemes.</p>\n<div class=\"sect3\" title=\"Basic authentication\">\n <p><em class=\"firstterm\">Basic</em> authentication<a id=\"I_indexterm8_tt729\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt730\" class=\"indexterm\"></a> is a simple challenge/response. If you try to access a resource that’s protected by basic authentication, and you don’t provide the proper credentials, you receive a challenge and you have to make the request again. It’s used by the del.icio.us web service I showed you in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, as well as my mapping service in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a> and my del.icio.us clone in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>.</p>\n <p class=\"keep-together\">Here’s an example. I make a request for a protected resource, not realizing it’s protected:</p>\n <div class=\"informalexample\">\n  <pre class=\"screen\">GET /resource.html HTTP/1.1\nHost: www.example.com</pre>\n </div>\n <p>I didn’t include the right credentials. In fact, I didn’t include any credentials at all. The server sends me the following response:</p>\n <div class=\"informalexample\">\n  <pre class=\"screen\">401 Unauthorized\nWWW-Authenticate: Basic realm=\"My Private Data\"</pre>\n </div>\n <p>This is a challenge. The server dares me to repeat my request with the correct credentials. <a id=\"I_indexterm8_tt731\" class=\"indexterm\"></a>The <code class=\"literal\">WWW-Authenticate</code> header gives two clues about what credentials I should send. It identifies what kind of authentication it’s using (in this case, Basic), and it names a <em class=\"firstterm\">realm</em>. The realm can be any name you like, and it’s generally used to identify a collection of resources on a site. In <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> the realm was “Social bookmarking service” (I defined it in <a class=\"xref\" href=\"ch07.html#application-rb-filters\" title=\"Example&nbsp;7-11.&nbsp;application.rb continued: filters\">Example&nbsp;7-11</a>). A single web site might have many sets of protected resources guarded in different ways: the realm lets the client know which authentication credentials it should provide. The realm is the <span class=\"emphasis\"><em>what</em></span>, and the authentication type is the <span class=\"emphasis\"><em>how</em></span>.</p>\n <p>To meet a Basic authentication challenge, the client needs a username and a password. This information might be filed in a cache under the name of the realm, or the client may have to prompt an end user for this information. Once the client has this information, username and password are combined into a single string and encoded with<a id=\"I_indexterm8_tt732\" class=\"indexterm\"></a> base 64 encoding. Most languages have a standard library for doing this kind of encoding: <a class=\"xref\" href=\"ch08.html#example_8_1\" title=\"Example&nbsp;8-1.&nbsp;Base 64 encoding in Ruby\">Example&nbsp;8-1</a> uses Ruby to encode a username and password.</p>\n <div class=\"example\">\n  <a id=\"example_8_1\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;8-1.&nbsp;Base 64 encoding in Ruby\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">#!/usr/bin/ruby\n# calculate-base64.rb\nUSER=\"Alibaba\"\nPASSWORD=\"open sesame\"\n\nrequire 'base64'\nputs Base64.encode64(\"#{USER}:#{PASSWORD}\")\n# QWxpYmFiYTpvcGVuIHNlc2FtZQ==</pre>\n  </div>\n </div>\n <p>This seemingly random string of characters is the value of <a id=\"I_indexterm8_tt733\" class=\"indexterm\"></a>the <code class=\"literal\">Authorization</code> header. Now I can send my request again, using the username and password as Basic auth credentials.</p>\n <div class=\"informalexample\">\n  <pre class=\"screen\">GET /resource.html HTTP/1.1\nHost: www.example.com\nAuthorization: Basic QWxpYmFiYTpvcGVuIHNlc2FtZQ==</pre>\n </div>\n <p>The server decodes this string and matches it against its user and password list. If they match, the response is processed further. If not, the request fails, and once again the status code<a id=\"I_indexterm8_tt734\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt735\" class=\"indexterm\"></a> is 401 (“Unauthorized”).</p>\n <p>Of course, if the server can decode this string, so can anyone who snoops on your network traffic. Basic authentication effectively transmits usernames and passwords in plain text. One solution to this is to use HTTPS, also known as Transport Level Security or Secure Sockets Layer. HTTPS encrypts all communications between client and server, incidentally including the <code class=\"literal\">Authorization</code> header. When I added authentication to my map service in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>, I switched from plain HTTP to encrypted HTTPS.</p>\n</div>\n<div class=\"sect3\" title=\"Digest authentication\">\n <p>HTTP Digest <a id=\"ch08_digesthttp\" class=\"indexterm\"></a><a id=\"ch08_httpdigest\" class=\"indexterm\"></a>authentication is another way to hide the authorization credentials from network snoops. It’s more complex than Basic authentication, but it’s secure even over unencrypted HTTP. Digest follows the same basic pattern as Basic: the client issues a request, and gets a challenge. Here’s a sample challenge:</p>\n <div class=\"informalexample\">\n  <pre class=\"screen\">401 Unauthorized\nWWW-Authenticate: Digest realm=\"My Private Data\",\n  qop=\"auth\",\n  nonce=\"0cc175b9c0f1b6a831c399e269772661\",\n  opaque=\"92eb5ffee6ae2fec3ad71c777531578f\"</pre>\n </div>\n <p>This time, the<a id=\"I_indexterm8_tt736\" class=\"indexterm\"></a> <code class=\"literal\">WWW-Authenticate</code> header says that the authentication type is <code class=\"literal\">Digest</code>. The header specifies a realm as before, but it also contains three other pieces of information, including a <em class=\"firstterm\">nonce</em>: a random string that changes on every request.</p>\n <p>The client’s responsibility is to turn this information into an encrypted string that proves the client knows the password, but that doesn’t actually contain the password. First the client generates a client-side nonce and a sequence number. Then the client makes a single “digest” string out of a huge amount of information: the HTTP method and path from the request, the four pieces of information from the challenge, the username and password, the client-side nonce, and the sequence number. The formula for doing this is considerably more complicated than for Basic authentication (see <a class=\"xref\" href=\"ch08.html#example_8_2\" title=\"Example&nbsp;8-2.&nbsp;HTTP digest calculation in Ruby\">Example&nbsp;8-2</a>).</p>\n <div class=\"example\">\n  <a id=\"example_8_2\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;8-2.&nbsp;HTTP digest calculation in Ruby\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">#!/usr/bin/ruby\n# calculate-http-digest.rb\nrequire 'md5'\n\n#Information from the original request\nMETHOD=\"GET\"\nPATH=\"/resource.html\"\n\n# Information from the challenge\nREALM=\"My Private Data\"\nNONCE=\"0cc175b9c0f1b6a831c399e269772661\",\nOPAQUE=\"92eb5ffee6ae2fec3ad71c777531578f\"\nQOP=\"auth\"\n\n# Information calculated by or known to the client\nNC=\"00000001\"\nCNONCE=\"4a8a08f09d37b73795649038408b5f33\"\nUSER=\"Alibaba\"\nPASSWORD=\"open sesame\"\n\n# Calculate the final digest in three steps.\nha1 = MD5::hexdigest(\"#{USER}:#{REALM}:#{PASSWORD}\")\nha2 = MD5::hexdigest(\"#{METHOD}:#{PATH}\")\nha3 = MD5::hexdigest(\"#{ha1}:#{NONCE}:#{NC}:#{CNONCE}:#{QOP}:#{ha2}\")\n\nputs ha3\n# 2370039ff8a9fb83b4293210b5fb53e3</pre>\n  </div>\n </div>\n <p>The digest string is similar to the S3 request signature in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>. It proves certain things about the client. You could never produce this string unless you knew the client’s username and password, knew what request the client was trying to make, and knew which challenge the server had sent in response to the first request.</p>\n <p>Once the digest is calculated, the client resends the request and passes back all the constants (except, of course, the password), as well as the final result of the calculation:</p>\n <div class=\"informalexample\">\n  <pre class=\"screen\">GET /resource.html HTTP/1.1\nHost: www.example.com\nAuthorization: Digest username=\"Alibaba\",\n  realm=\"My Private Data\",\n  nonce=\"0cc175b9c0f1b6a831c399e269772661\",\n  uri=\"/resource.html\",\n  qop=auth,\n  nc=00000001,\n  cnonce=\"4a8a08f09d37b73795649038408b5f33\",\n  response=\"2370039ff8a9fb83b4293210b5fb53e3\",\n  opaque=\"92eb5ffee6ae2fec3ad71c777531578f\"</pre>\n </div>\n <p>The cryptography is considerably more complicated, but the process is the same as for HTTP Basic auth: request, challenge, response. One key difference is that even the server can’t figure out your password from the digest. When a client initially sets a password for a realm, the server needs to calculate the hash of <code class=\"literal\">user:realm:password</code> (<code class=\"literal\">ha1</code> in the example above), and keep it on file. That gives the server the information it needs to calculate the final value of <code class=\"literal\">ha3</code>, without storing the user’s actual password.</p>\n <p>A second difference is that every request the client makes is actually two requests. The point of the first request is to get a challenge: it includes no authentication information, and it always fails with a status code of 401 (“Unauthorized”). But the <code class=\"literal\">WWW-Authenticate</code> header includes a unique nonce, which the client can use to construct an appropriate <code class=\"literal\">Authorization</code> header. It makes a second request, using this header, and this one is the one that succeeds. In Basic auth, the client can avoid the challenge by sending its authorization credentials along with the first request. That’s not possible in Digest.</p>\n <p>Digest authentication has some options I haven’t shown here. Specifying <code class=\"literal\">qop=auth-int</code> instead of <code class=\"literal\">qop=auth</code> means that the calculation of <code class=\"literal\">ha2</code> above must include the request’s entity-body, not just the HTTP method and the URI path. This prevents a man-in-the-middle from tampering with the representations that accompany PUT and POST requests.</p>\n <p>My goal here isn’t to dwell on the complex mathematics— that’s what libraries are for. I want to demonstrate the central role the <code class=\"literal\">WWW-Authenticate</code> and <code class=\"literal\">Authorization</code> headers play in this exchange. The <code class=\"literal\">WWW-Authenticate</code> header says, “Here’s everything you need to know to authenticate, assuming you know the secret.” The <code class=\"literal\">Authorization</code> header says, “I know the secret, and here’s the proof.” Everything else is parameter parsing and a few lines of code.<a id=\"I_indexterm8_tt737\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt738\" class=\"indexterm\"></a></p>\n</div>\n<div class=\"sect3\" title=\"WSSE username token\">\n <p>What if <a id=\"ch08_wssehttp\" class=\"indexterm\"></a><a id=\"ch08_httpwsse\" class=\"indexterm\"></a>neither HTTP Basic or HTTP Digest work for you? You can define your own standards for what goes<a id=\"I_indexterm8_tt739\" class=\"indexterm\"></a> into <code class=\"literal\">WWW-Authenticate</code> and <code class=\"literal\">Authorization</code>. Here’s<a id=\"I_indexterm8_tt740\" class=\"indexterm\"></a> one real-life example. It turns out that, for a variety of technical reasons, users with low-cost hosting accounts can’t take advantage of either HTTP Basic or HTTP Digest.<sup>[<a id=\"id433005\" href=\"#ftn.id433005\" class=\"footnote\">26</a>]</sup> At one time, this was important to a segment of the Atom community. Coming up with an entirely new cryptographically secure option was beyond the ability of the Atom working group. Instead, they looked to the WS-Security specification, which defines several different ways of authenticating SOAP messages with SOAP headers. (SOAP headers are the “stickers” on the SOAP envelope I mentioned back in <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a>.) They took a single idea—WS-Security UsernameToken—from this standard and ported it from SOAP headers to HTTP headers. They defined an extension to HTTP that used <code class=\"literal\">WWW-Authenticate</code> and <code class=\"literal\">Authorization</code> in a way that people with low-cost hosting accounts could use. We call the resulting extension WSSE UsernameToken, or WSSE for short. (WSSE just means<a id=\"I_indexterm8_tt743\" class=\"indexterm\"></a> WS-Security Extension. Other extensions would have a claim to the same name, but there aren’t any others right now.)</p>\n <p>WSSE is like Digest in that the client runs their password through a hash algorithm before sending it across the network. The basic pattern is the same: the client makes a request, gets a challenge, and formulates a response. A WSSE challenge might look like this:</p>\n <div class=\"informalexample\">\n  <pre class=\"screen\">HTTP/1.1 401 Unauthorized\nWWW-Authenticate: WSSE realm=\"My Private Data\", profile=\"UsernameToken\"</pre>\n </div>\n <p>Instead of Basic or Digest, the authentication type is <code class=\"literal\">WSSE</code>. The realm serves the same purpose as before, and the “profile” tells the client that the server expects it to generate a response using the <code class=\"literal\">UsernameToken</code> rules (as opposed to some other rule from WS-Security that hasn’t yet been ported to HTTP headers). The <code class=\"literal\">UsernameToken</code> rules mean that the client generates a nonce, then hashes their password along with the nonce and the current date (see <a class=\"xref\" href=\"ch08.html#example_8_3\" title=\"Example&nbsp;8-3.&nbsp;Calculating a WSSE digest\">Example&nbsp;8-3</a>).</p>\n <div class=\"example\">\n  <a id=\"example_8_3\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;8-3.&nbsp;Calculating a WSSE digest\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">#!/usr/bin/ruby\n# calculate-wsse-digest.rb\nrequire 'base64'\nrequire 'sha1'\n\nPASSWORD = \"open sesame\"\nNONCE = \"EFD89F06CCB28C89\",\nCREATED = \"2007-04-13T09:00:00Z\"\n\nputs Base64.encode64(SHA1.digest(\"#{NONCE}#{CREATED}#{PASSWORD}\"))\n# Z2Y59TewHV6r9BWjtHLkKfUjm2k=</pre>\n  </div>\n </div>\n <p>Now the client can send a response to the WSSE challenge:</p>\n <div class=\"informalexample\">\n  <pre class=\"screen\">GET /resource.html HTTP/1.1\nHost: www.example.com\nAuthorization: WSSE profile=\"UsernameToken\"\nX-WSSE: UsernameToken Username=\"Alibaba\",\n  PasswordDigest=\"Z2Y59TewHV6r9BWjtHLkKfUjm2k=\",\n  Nonce=\"EFD89F06CCB28C89\",\n  Created=\"2007-04-13T09:00:00Z\"</pre>\n </div>\n <p>Same headers. Different authentication method. Same message flow. Different hash algorithm. That’s all it takes to extend HTTP authentication. If you’re curious, here’s what those authentication credentials would look like as a SOAP header under the original WS-Security UsernameToken standard.</p>\n <div class=\"informalexample\">\n  <pre class=\"screen\">&lt;wsse:UsernameToken\n   xmlns:wsse=\"http://schemas.xmlsoap.org/ws/2002/xx/secext\"\n   xmlns:wsu=\"http://schemas.xmlsoap.org/ws/2002/xx/utility\"&gt;\n   &lt;wsse:Username&gt;Alibaba&lt;/wsse:Username&gt;\n   &lt;wsse:Password Type=\"wsse:PasswordDigest\"&gt;\n      Z2Y59TewHV6r9BWjtHLkKfUjm2k=\n   &lt;/wsse:Password&gt;\n   &lt;wsse:Nonce&gt;EFD89F06CCB28C89&lt;/wsse:Nonce&gt;\n   &lt;wsu:Created&gt;2007-04-13T09:00:00Z&lt;/wsu:Created&gt;\n&lt;/wsse:UsernameToken&gt;</pre>\n </div>\n <p>WSSE UsernameToken authentication has two big advantages. It doesn’t send the password in the clear over the network, the way HTTP Basic does, and it doesn’t require any special setup on the server side, the way HTTP Digest usually does. It’s got one big disadvantage. Under HTTP Basic and Digest, the server can keep a one-way hash of the password instead of the password itself. If the server gets cracked, the passwords are still (somewhat) safe. With WSSE UsernameToken, the server must store the password in plain text, or it can’t verify the responses to its challenges. If someone cracks the server, they’ve got all the passwords. The extra complexity of HTTP Digest is meant to stop this from happening. Security always involves tradeoffs like these.<a id=\"I_indexterm8_tt744\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt745\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt746\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt747\" class=\"indexterm\"></a></p>\n</div>\n<h2>Compression</h2>\n<p>Textual representations<a id=\"I_indexterm8_tt748\" class=\"indexterm\"></a> like XML documents can be compressed to a fraction of their original size. An HTTP client library can request a compressed version of a representation and then transparently decompress it for its user. Here’s how it works: along with an HTTP request the client sends <a id=\"I_indexterm8_tt749\" class=\"indexterm\"></a>an <code class=\"literal\">Accept-Encoding</code> header that says what kind of compression algorithms the client understands. The two standard values for <code class=\"literal\">Accept-Encoding</code> <a id=\"I_indexterm8_tt750\" class=\"indexterm\"></a>are compress and gzip.</p>\n<pre class=\"screen\">GET /resource.html HTTP/1.1\nHost: www.example.com\nAccept-Encoding: gzip,compresss</pre>\n<p>If the server understands one of the compression algorithms from <code class=\"literal\">Accept-Encoding</code>, it can use that algorithm to compress the representation before serving it. The server sends the <a id=\"I_indexterm8_tt751\" class=\"indexterm\"></a>same <code class=\"literal\">Content-Type</code> it would send if the representation wasn’t compressed. But it also sends the <code class=\"literal\">Content-Encoding</code> header, so the client knows the document has been compressed:</p>\n<p><a id=\"I_programlisting8_tt752\"></a></p>\n<pre class=\"programlisting\">200 OK\nContent-Type: text/html\nContent-Encoding: gzip\n\n[Binary representation goes here]</pre>\n<p>The client decompresses the data using the algorithm given<a id=\"I_indexterm8_tt753\" class=\"indexterm\"></a> in <code class=\"literal\">Content-Encoding</code>, and then treats it as the media type given as <code class=\"literal\">Content-Type</code>. In this case the client would use the gzip algorithm to decompress the binary data back into an HTML document. This technique can save a lot of bandwidth, with very little cost in additional complexity.</p>\n<p>You probably remember that I think different representations of a resource should have distinct URIs. Why do I recommend using HTTP headers to distinguish between compressed and uncompressed versions of a representation? Because I don’t think the compressed and uncompressed versions are different representations. Compression, like encryption, is something that happens to a representation in transit, and must be undone before the client can use the representation. In an ideal world, HTTP clients and servers would compress and decompress representations automatically, and programmers should not have to even think about it. Today, most web browsers automatically request compressed representations, but few programmable clients do.</p>\n<h2>Conditional GET</h2>\n<p>Conditional HTTP GET<a id=\"ch08_conditional\" class=\"indexterm\"></a> allows a server and client to work together to save bandwidth. I covered it briefly in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>, in the context of the mapping service. There, the problem was sending the same map tiles over and over again to clients who had already received them. This is a more general treatment of the same question: how can a service keep from sending representations to clients that already have them?</p>\n<p>Neither client nor server can solve this problem alone. If the client retrieves a representation and never talks to the server again, it will never know when the representation has changed. The server keeps no application state, so it doesn’t know when a client last retrieved a certain representation. HTTP isn’t a reliable protocol anyway, and the client might not have received the representation the first time. So when the client requests a representation, the server has no idea whether the client has done this before—unless the client provides that information as part of the application state.</p>\n<p>Conditional HTTP GET requires client and server to work together. When the server sends a representation, it sets some HTTP response headers: <code class=\"literal\">Last-Modified</code> and/or <code class=\"literal\">ETag</code>. When the client requests the same representation, it should send the values for those headers as <code class=\"literal\">If-Modified-Since</code> and/or <code class=\"literal\">If-None-Match</code>. This lets the server make a decision about whether or not to resend the representation. <a class=\"xref\" href=\"ch08.html#fetch-oreilly-conditional\" title=\"Example&nbsp;8-4.&nbsp;Make a regular GET request, then a conditional GET request\">Example&nbsp;8-4</a> gives a demonstration of conditional HTTP GET.</p>\n<div class=\"example\">\n <a id=\"fetch-oreilly-conditional\"></a>\n <div class=\"example-title\">\n  Example&nbsp;8-4.&nbsp;Make a regular GET request, then a conditional GET request\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby\n# fetch-oreilly-conditional.rb\n\nrequire 'rubygems'\nrequire 'rest-open-uri'\nuri = 'http://www.oreilly.com'\n\n# Make an HTTP request and then describe the response.\ndef request(uri, *args)\n  begin\n    response = open(uri, *args)\n  rescue OpenURI::HTTPError =&gt; e\n    response = e.io\n  end\n    \n  puts \" Status code: #{response.status.inspect}\"\n  puts \" Representation size: #{response.size}\"\n  last_modified = response.meta['last-modified']\n  etag = response.meta['etag']\n  puts \" Last-Modified: #{last_modified}\"\n  puts \" Etag: #{etag}\"\n  return last_modified, etag\nend    \n\nputs \"First request:\"\nlast_modified, etag = request(uri)\n\nputs \"Second request:\"\nrequest(uri, 'If-Modified-Since' =&gt; last_modified, 'If-None-Match' =&gt; etag)</pre>\n </div>\n</div>\n<p>If you run that code once, it’ll fetch <a class=\"ulink\" href=\"http://www.oreilly.com\" target=\"_top\">http://www.oreilly.com</a> twice: once normally and once conditionally. It prints information about each request. The printed output for the first request will look something like this:</p>\n<pre class=\"screen\">First request:\n Status code: [\"200\", \"OK\"]\n Representation size: 41123\n Last-Modified: Sun, 21 Jan 2007 09:35:19 GMT\n Etag: \"7359b7-a37c-45b333d7\"</pre>\n<p>The <code class=\"literal\">Last-Modified</code> and <code class=\"literal\">Etag</code> headers <a id=\"I_indexterm8_tt754\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt755\" class=\"indexterm\"></a>are the ones that make HTTP conditional GET possible. To use them, I make the HTTP request again, but this time I use the value of <code class=\"literal\">Last-Modified</code> as <code class=\"literal\">If-Modified-Since</code>, and the value <a id=\"I_indexterm8_tt756\" class=\"indexterm\"></a>of <code class=\"literal\">ETag</code> as <code class=\"literal\">If-None-Match</code>. Here’s the result:</p>\n<pre class=\"screen\">Second request:\n Status code: [\"304\", \"Not Modified\"]\n Representation size: 0\n Last-Modified:\n Etag: \"7359b7-a0a3-45b5d90e\"</pre>\n<p>Instead of a 40-KB representation, the second request gets a 0-byte representation. Instead of 200 (“OK”), the status code is 304 (“Not Modified”). <a id=\"I_indexterm8_tt757\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt758\" class=\"indexterm\"></a>The second request saved 40 KB of bandwidth because it made the HTTP request conditional on the representation of <a class=\"ulink\" href=\"http://www.oreilly.com/\" target=\"_top\">http://www.oreilly.com/</a> actually having changed since last time. The representation didn’t change, so it wasn’t resent.</p>\n<p><code class=\"literal\">Last-Modified</code> is a pretty easy header to understand: it’s the last time the representation of this resource changed. You may be able to view this information in your web browser by going to “view page info” or something similar. Sometimes humans check a web page’s <code class=\"literal\">Last-Modified</code> time to see how recent the data is, but its main use is in conditional HTTP requests.</p>\n<p><code class=\"literal\">If-Modified-Since</code> makes<a id=\"I_indexterm8_tt759\" class=\"indexterm\"></a> an HTTP request conditional. If the condition is met, the server carries out the request as it would normally. Otherwise, the condition fails and the server does something unusual. For <code class=\"literal\">If-Modified-Since</code>, the condition is: “the representation I’m requesting must have changed after this date.” The condition succeeds when the server has a newer representation than the client does. If the client and server have the same representation, the condition fails and the server does something unusual: it omits the representation and sends a status code of 304 (“Not Modified”). That’s the server’s way of telling the client: “reuse the representation you saved from last time.”</p>\n<p>Both client and server benefit here. The server doesn’t have to send a representation of the resource, and the client doesn’t have to wait for it. Both sides save bandwidth. This is one of the tricks underlying your web browser’s cache, and there’s no reason not to use it in custom web clients.</p>\n<p>How does the server calculate when a representation was last modified? A web server like Apache has it easy: it mostly serves static files from disk, and filesystems already track the modification date for every file. Apache just gets that information from the filesystem. In more complicated scenarios, you’ll need to break the representation down into its component parts and see when each bit of resource state was last modified. In <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, the <code class=\"literal\">Last-Modified</code> value for a list of bookmarks was the most recent timestamp in the list. If you’re not tracking this information, the bandwidth savings you get by supporting <code class=\"literal\">Last-Modified</code> might make it worth your while to start tracking it.</p>\n<p>Even when a server provides <code class=\"literal\">Last-Modified</code>, it’s not totally reliable. Let’s say a client GETs a representation at 12:30:00.3 and sees a <code class=\"literal\">Last-Modified</code> with the time “12:30:00.” A tenth of a second later, the representation changes, but the <code class=\"literal\">Last-Modified</code> time is still “12:30:00.” If the client tries a conditional GET request using <code class=\"literal\">If-Modified-Since</code>, the server will send a 304 (“Not Modified”) response, even though the resource was modified after the original GET. One second is not a high enough resolution to keep track of when a resource changes. In fact, no resolution is high enough to keep track of when a resource changes with total accuracy.</p>\n<p>This is not quite satisfactory. The world cries out for a completely reliable way of checking whether or not a representation has been modified since last you retrieved it. Enter the <code class=\"literal\">Etag</code> response header. The <code class=\"literal\">Etag</code> (it stands for “entity tag”) is a nonsensical string that must change whenever the corresponding representation changes.</p>\n<p>The <code class=\"literal\">If-None-Match</code> request header is to <code class=\"literal\">Etag</code> as the <code class=\"literal\">If-Modified-Since</code> request header is to <code class=\"literal\">Last-Modified</code>. It’s a way of making an HTTP request conditional. In this case, the condition is “the representation has changed, as embodied in the entity tag.” It’s supposed to be a totally reliable way of identifying changes between representations.</p>\n<p>It’s easy to generate a good <code class=\"literal\">ETag</code> for any representation. Transformations like the MD5 hash can turn any string of bytes into a short string that’s unique except in pathological cases. The problem is, by the time you can run one of those transformations, you’ve already created the representation as a string of bytes. You may save bandwidth by not sending the representation over the wire, but you’ve already done everything necessary to build it.</p>\n<p>The Apache server uses filesystem information like file size and modification time to generate <code class=\"literal\">Etag</code> headers for static files without reading their contents. You might be able to do the same thing for your representations: pick the data that tends to change, or summary data that changes along with the representation. Instead of doing an MD5 sum of the entire representation, just do a sum of the important data. The <code class=\"literal\">Etag</code> header doesn’t need to incorporate every bit of data in the representation: it just has to change whenever the representation changes.</p>\n<p>If a server provides both <code class=\"literal\">Last-Modified</code> and <code class=\"literal\">Etag</code>, the client can provide both <code class=\"literal\">If-Modified-Since</code> and <code class=\"literal\">If-None-Match</code> in subsequent requests (as I did in <a class=\"xref\" href=\"ch08.html#fetch-oreilly-conditional\" title=\"Example&nbsp;8-4.&nbsp;Make a regular GET request, then a conditional GET request\">Example&nbsp;8-4</a>). The server should make both checks: it should only send a new representation if the representation has changed <span class=\"emphasis\"><em>and</em></span> the <code class=\"literal\">Etag</code> is different.<a id=\"I_indexterm8_tt760\" class=\"indexterm\"></a></p>\n<h2>Caching</h2>\n<p>Conditional HTTP GET <a id=\"I_indexterm8_tt761\" class=\"indexterm\"></a>gives the client<a id=\"ch08_caching\" class=\"indexterm\"></a> a way to refresh a representation by making a GET request that uses very little bandwidth if the representation has not changed. Caching gives the client some rough guidelines that can make it unnecessary to make that second GET request at all.</p>\n<p>HTTP caching is a complex topic, even though I’m limiting my discussion to client-side caches and ignoring proxy caches that sit between the client and the server.<sup>[<a id=\"id384698\" href=\"#ftn.id384698\" epub:type=\"noteref\" class=\"footnote\">27</a>]</sup>The basics are these: when a client makes an HTTP GET or<a id=\"I_indexterm8_tt765\" class=\"indexterm\"></a> HEAD request, it might be able to cache the HTTP response document, headers and all. The next time the client is asked to make the same GET or HEAD request, it may be able to return the cached document instead of actually making the request again. From the perspective of the user (a human using a web browser, or a computer program using an HTTP library), caching is transparent. The user triggers a request, but instead of making an actual HTTP request, the client retrieves a cached response from the server and presents it as though it were freshly retrieved. I’m going to focus on three topics from the point of view of the service provider: how you can tell the client to cache, how you can tell the client <span class=\"emphasis\"><em>not</em></span> to cache, and when the client might be caching without you knowing it.</p>\n<div class=\"sect3\" title=\"Please cache\">\n <p>When the server responds to a GET or HEAD request, it may send a date in the response header <code class=\"literal\">Expires</code>. For instance:</p>\n <pre class=\"screen\">Expires: Tue, 30 Jan 2007 17:02:06 GMT</pre>\n <p>This header tells the client (and any proxies between the server and client) how long the response may be cached. The date may range from a date in the past (meaning the response has expired by the time it gets to the client) to a date a year in the future (which means, roughly, “the response will never expire”). After the time specified in <code class=\"literal\">Expires</code>, the response becomes <em class=\"firstterm\">stale</em>. This doesn’t mean that it must be removed from the cache immediately. The client might be able to make a conditional GET request, find out that the response is actually still fresh, and update the cache with a new expiration date.</p>\n <p>The value of <code class=\"literal\">Expires</code> is a rough guide, not an exact date. Most services can’t predict to the second when a response is going to change. If <code class=\"literal\">Expires</code> is an hour in the future, that means the server is pretty sure the response won’t change for at least an hour. But something could legitimately happen to the resource the second after that response is sent, invalidating the cached response immediately. When in doubt, the client can make another HTTP request, hopefully a conditional one.</p>\n <p>The server should not send an <code class=\"literal\">Expires</code> that gives a date more than a year in the future. Even if the server is totally confident that a particular response will never change, a year is a long time. Software upgrades and other events in the real world tend to invalidate cached responses sooner than you’d expect.</p>\n <p>If you don’t want to calculate a date at which a response should become stale, you can <a id=\"I_indexterm8_tt766\" class=\"indexterm\"></a>use <code class=\"literal\">Cache-Control</code> to say that a response should be cached for a certain number of seconds. This response can be cached for an hour:</p>\n <pre class=\"screen\">Cache-Control: max-age=3600</pre>\n</div>\n<div class=\"sect3\" title=\"Thank you for not caching\">\n <p>That covers the case when the server would like the client to cache. What about the opposite? Some responses to GET requests are dynamically generated and different every time: caching them would be useless. Some contain sensitive information that shouldn’t be stored where someone else might see it: caching them would cause security problems. Use the <code class=\"literal\">Cache-Control</code> header to convey that the client should not cache the representation at all:</p>\n <pre class=\"screen\">Cache-Control: no-cache</pre>\n <p>Where <code class=\"literal\">Expires</code> is a fairly simple response header, <code class=\"literal\">Cache-Control</code> header is very complex. It’s the primary interface for controlling client-side caches, and proxy caches between the client and server. It can be sent as a request or as a response header, but I’m just going to talk about its use as a response header, since my focus is on how the server can work with a client-side cache.</p>\n <p>I already showed how specifying “max-age” in <code class=\"literal\">Cache-Control</code> controls how long a response can stay fresh in a cache. A value of “no-cache” prevents the client from caching a response at all. A third value you might find useful is “private,” which means that the response may be cached by a client cache, but not by any proxy cache between the client and server.</p>\n</div>\n<div class=\"sect3\" title=\"Default caching rules\">\n <p>In the absence of <code class=\"literal\">Expires</code> or <code class=\"literal\">Cache-Control</code>, section 13 of the HTTP standard defines a complex set of rules about when a client can cache a response. Unless you’re going to set caching headers on every response, you’ll need to know when a client is likely to cache what you send, so that you can override the defaults when appropriate. I’ll summarize the basic common-sense rules here.</p>\n <p>In general, the client may cache the responses to its successful HTTP GET and HEAD requests. “Success” is defined in terms of the HTTP status code: the most common success codes are 200 (“OK”), 301 (“Moved Permanently”), and 410 (“Gone”).</p>\n <p>Many (poorly-designed) web applications expose URIs that trigger side effects when you GET them. These dangerous URIs usually contain query strings. The HTTP standard recommends that if a URI contains a query string, the response from that URI should not be automatically cached: it should only be cached if the server explicitly says caching is OK. If the client GETs this kind of URI twice, it should trigger the side effects twice, not trigger them once and then get a cached copy of the response from last time.</p>\n <p>If a client then finds itself making a<a id=\"I_indexterm8_tt767\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt768\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt769\" class=\"indexterm\"></a> PUT, POST, or DELETE request to a URI, any cached responses from that URI immediately become stale. The same is true of any URI mentioned in the <code class=\"literal\">Location</code> or <code class=\"literal\">Content-Location</code> of<a id=\"I_indexterm8_tt770\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt771\" class=\"indexterm\"></a> a response to a PUT, POST, or DELETE request. There’s a wrinkle here, though: site A can’t affect how the client caches responses from site B. If you POST to <span class=\"emphasis\"><em>http://www.example.com/resource</em></span>, then any cached response from <code class=\"literal\">http://www.example.com/resource</code> is automatically stale. If the response comes back with a <code class=\"literal\">Location</code> of <span class=\"emphasis\"><em>http://www.example.com/resource2</em></span>, then any cached response from <code class=\"literal\">http://www.example.com/resource2</code> is also stale. But if the <code class=\"literal\">Location</code> is <em class=\"filename\">http://www.oreilly.com/resource2</em>, it’s not OK to consider a cached response from <code class=\"literal\">http://www.oreilly.com/resource2</code> to be stale. The site at <code class=\"literal\">www.example.com</code> doesn’t tell <code class=\"literal\">www.oreilly.com</code> what to do.</p>\n <p>If none of these rules apply, and if the server doesn’t specify how long to cache a response, the decision falls to the client side. Responses may be removed at any time or kept forever. More realistically, a client-side cache should consider a response to be stale after some time between an hour and a day. Remember that a stale response doesn’t have to be removed from the cache: the client might make a conditional GET request to check whether the cached response can still be used. If the condition succeeds, the cached response is still fresh and it can stay in the cache.<a id=\"I_indexterm8_tt772\" class=\"indexterm\"></a></p>\n</div>\n<h2>Look-Before-You-Leap Requests</h2>\n<p>Conditional GET is designed to save the server<a id=\"I_indexterm8_tt773\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt774\" class=\"indexterm\"></a> from sending enormous representations to a client that already has them. Another feature of HTTP, less often used, can save the <span class=\"emphasis\"><em>client</em></span> from fruitlessly sending enormous (or sensitive) representations to the <span class=\"emphasis\"><em>server</em></span>. There’s no official name for this kind of request, so I’ve came up with a silly name: look-before-you-leap requests.</p>\n<p>To make a LBYL request, a client sends a PUT or POST request normally, but omits the entity-body.<a id=\"I_indexterm8_tt775\" class=\"indexterm\"></a> Instead, the client sets the <code class=\"literal\">Expect</code> request header to the string “100-continue”. <a class=\"xref\" href=\"ch08.html#sample-lbyl\" title=\"Example&nbsp;8-5.&nbsp;A sample look-before-you-leap request\">Example&nbsp;8-5</a> shows a sample LBYL request.</p>\n<div class=\"example\">\n <a id=\"sample-lbyl\"></a>\n <div class=\"example-title\">\n  Example&nbsp;8-5.&nbsp;A sample look-before-you-leap request\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">PUT /filestore/myfile.txt HTTP/1.1\nHost: example.com\nContent-length: 524288000\nExpect: 100-continue</pre>\n </div>\n</div>\n<p>This is not a real PUT request: it’s a question about a possible future PUT request. The client is asking the server: “would you allow me to PUT a new representation to the resource at <code class=\"literal\">/filestore/myfile.txt</code>?” The server makes its decision based on the current state of that resource, and the HTTP headers provided by the client. In this case the server would examine <code class=\"literal\">Content-length</code> and decide whether it’s willing to accept a 500 MB file.</p>\n<p>If the answer is yes, the server sends a status code of 100 (“Continue”). Then the client is expected to resend the PUT request, omitting the <code class=\"literal\">Expect</code> and including the 500-MB representation in the entity-body. The server has agreed to accept that representation.</p>\n<p>If the answer is no, the server sends a status code of 417 (“Expectation Failed”). The answer might be no because the resource at <code class=\"literal\">/filestore/myfile.txt</code> is write-protected, because the client didn’t provide the proper authentication credentials, or because 500 MB is just too big. Whatever the reason, the initial look-before-you-leap request has saved the client from sending 500 MB of data only to have that data rejected. Both client and server are better off.</p>\n<p>Of course, a client with a bad representation can lie about it in the headers just to get a status code of 100, but it won’t do any good. The server won’t accept a bad representation on the second request, any more than it would have on the first request.</p>\n<h2>Partial GET</h2>\n<p>Partial HTTP<a id=\"I_indexterm8_tt776\" class=\"indexterm\"></a> GET allows a client to fetch only a subset of a representation. It’s usually used to resume interrupted downloads. Most web servers support partial GET for static content; so does Amazon’s S3 service.</p>\n<p><a class=\"xref\" href=\"ch08.html#fetch-oreilly-partial\" title=\"Example&nbsp;8-6.&nbsp;Make two partial HTTP GET requests\">Example&nbsp;8-6</a> is a bit of code that makes two partial HTTP GET requests to the same URI. The first request gets bytes 10 through 20, and the second request gets everything from byte 40,000 to the end.</p>\n<div class=\"example\">\n <a id=\"fetch-oreilly-partial\"></a>\n <div class=\"example-title\">\n  Example&nbsp;8-6.&nbsp;Make two partial HTTP GET requests\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">#!/usr/bin/ruby\n# fetch-oreilly-partial.rb\n\nrequire 'rubygems'\nrequire 'rest-open-uri'\nuri = 'http://www.oreilly.com/'\n\n# Make a partial HTTP request and describe the response.\ndef partial_request(uri, range)\n  begin\n    response = open(uri, 'Range' =&gt; range)\n  rescue OpenURI::HTTPError =&gt; e\n    response = e.io\n  end\n\n  puts \" Status code: #{response.status.inspect}\"\n  puts \" Representation size: #{response.size}\"\n  puts \" Content Range: #{response.meta['content-range']}\"\n  puts \" Etag: #{response.meta['etag']}\"\nend    \n\nputs \"First request:\"\npartial_request(uri, \"bytes=10-20\")\n\nputs \"Second request:\"\npartial_request(uri, \"bytes=40000-\")</pre>\n </div>\n</div>\n<p>When I run that code I see this for the first request:</p>\n<pre class=\"screen\">First request:\n Status code: [\"206\", \"Partial Content\"]\n Representation size: 11\n Content Range: bytes 10-20/41123\n Etag: \"7359b7-a0a3-45b5d90e\"</pre>\n<p>Instead of 40 KB, the server has only sent me the 11 bytes I requested. Similarly for the second request:</p>\n<pre class=\"screen\">Second request:\n Status code: [\"206\", \"Partial Content\"]\n Representation size: 1123\n Content Range: bytes 40000-41122/41123\n Etag: \"7359b7-a0a3-45b5d90e\"</pre>\n<p>Note that the <code class=\"literal\">Etag</code> is the same in both cases. In fact, it’s the same as it was back when I ran the conditional GET code back in <a class=\"xref\" href=\"ch08.html#fetch-oreilly-conditional\" title=\"Example&nbsp;8-4.&nbsp;Make a regular GET request, then a conditional GET request\">Example&nbsp;8-4</a>. The value of <code class=\"literal\">Etag</code> is always a value calculated for the whole document. That way I can combine conditional GET and partial GET.</p>\n<p>Partial GET might seem like a way to let the client access subresources of a given resource. It’s not. For one thing, a client can only address part of a representation by giving a byte range. That’s not very useful unless your representation is a binary data structure. More importantly, if you’ve got subresources that someone might want to talk about separately from the containing resource, guess what: you’ve got more resources. A resource is anything that might be the target of a hypertext link. Give those subresources their own URIs.<a id=\"I_indexterm8_tt777\" class=\"indexterm\"></a></p>",
      "slug" : "standard-features-of-http"
    }, {
      "title" : "Faking PUT and DELETE",
      "type" : "page",
      "htmlContent" : "<p>Not all clients<a id=\"I_indexterm8_tt778\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt779\" class=\"indexterm\"></a> support HTTP PUT and DELETE. The action of an XHTML 4 form can only be GET or POST, and this has made a lot of people think that PUT and DELETE aren’t real HTTP methods. Some firewalls block HTTP PUT and DELETE but not POST. If the server supports it, a client can get around these limitations by tunneling PUT and DELETE requests through<a id=\"I_indexterm8_tt780\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt781\" class=\"indexterm\"></a> overloaded POST. There’s no reason these techniques can’t work with other HTTP actions like HEAD, but PUT and DELETE are the most common.</p>\n<p>I recommend a tunneling technique pioneered by today’s most RESTful web frameworks: include the “real” HTTP method in the query string. Ruby on Rails defines a hidden form field called <code class=\"varname\">_method</code> which references the “real” HTTP method. If a client wants to delete the resource at <code class=\"literal\">/my/resource</code> but can’t make an HTTP DELETE request, it can make a POST request to <code class=\"literal\">/my/resource?_method=delete</code>, or include <code class=\"literal\">_method=delete</code> in the entity-body.<a id=\"I_indexterm8_tt782\" class=\"indexterm\"></a> Restlet uses the <code class=\"varname\">method</code> variable for the same purpose.</p>\n<p>The second way is to include the “real” HTTP action in the <code class=\"literal\">X-HTTP-Method-Override</code> HTTP request header. Google’s GData API recognizes this header. I recommend appending to the query string instead. A client that doesn’t support PUT and DELETE is also likely to not support custom HTTP request headers.</p>",
      "slug" : "faking-put-and-delete"
    }, {
      "title" : "The Trouble with Cookies",
      "type" : "page",
      "htmlContent" : "<p>A web service that sends<a id=\"I_indexterm8_tt783\" class=\"indexterm\"></a> HTTP cookies violates the principle of statelessness. In fact, it usually violates statelessness twice. It moves application state onto the server even though it belongs on the client, and it stops clients from being in charge of their own application state.</p>\n<p>The first problem is simple to explain. Lots of web frameworks use cookies to implement sessions. They set cookies that look like the Rails cookie I showed you back in <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a>:</p>\n<div class=\"informalexample\">\n <pre class=\"screen\">Set-Cookie: _session_id=c1c934bbe6168dcb904d21a7f5644a2d; path=/</pre>\n</div>\n<p>That long hexadecimal number is stored as client state, but it’s not application state. It’s a meaningless key into a session hash: a bunch of application state stored on the server. The client has no access to this application state, and doesn’t even know what’s being stored. The client can only send its cookie with every request and let the server look up whatever application state the server thinks is appropriate. This is a pain for the client, and it’s no picnic for the server either. The server has to keep this application state all the time, not just while the client is making a request.</p>\n<p>OK, so cookies shouldn’t contain session IDs: that’s just an excuse to keep application state on the server. What about cookies that really do contain application state? What if you serialize the actual session hash and send it as a cookie, instead of just sending a reference to a hash on the server?</p>\n<p>This can be RESTful, but it’s usually not. The cookie standard says that the client can get rid of a cookie when it expires, or when the client terminates. This is a pretty big restriction on the client’s control over application state. If you make 10 web requests and suddenly the server sends you a cookie, you have to start sending this cookie with your future requests. You can’t make those 10 precookie requests unless you quit and start over. To use a web browser analogy, your “Back” button is broken. You can’t put the application in any of the states it was in before you got the cookie.</p>\n<p>Realistically, no client follows the cookie standard that slavishly. Your web browser lets you choose which cookies to accept, and lets you destroy cookies without restarting your browser. But clients aren’t generally allowed to <span class=\"emphasis\"><em>modify</em></span> the server’s cookies, or even understand what they mean. If the client sends application state without knowing what it means, it doesn’t really know what request it’s making. The client is just a custodian for whatever state the server thinks it should send. Cookies are almost always a way for the server to force the client to do what it wants, without explaining why. It’s more RESTful for the server to guide the client to new application states using hypermedia links and forms.</p>\n<p>The only RESTful use of cookies is one where the client is in charge of the cookie value. The server can suggest values for a cookie using the <code class=\"literal\">Set-Cookie</code> header, just like it can suggest links the client might want to follow, but the client chooses what cookie to send just as it chooses what links to follow. In some browser-based applications, cookies are created by the client and never sent to the server. The cookie is just a convenient container for application state, which makes its way to the server in representations and URIs. That’s a very RESTful use of cookies.</p>",
      "slug" : "the-trouble-with-cookies"
    }, {
      "title" : "Why Should a User Trust the HTTP Client?",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>HTTP authentication covers client-server authentication: the process by which the web service client proves to the server that it has some user’s credentials. What HTTP doesn’t cover is why the user should trust the web service client with its credentials. This isn’t usually a problem on the human web, because we implicitly trust our web browsers (even when we shouldn’t, like when there’s spyware present on the system). If I’m using a web application on <code class=\"literal\">example.com</code>, I’m comfortable supplying my <code class=\"literal\">example.com</code> username and password.</p> \n  <p>But what if, behind the scenes, the web application on <code class=\"literal\">example.com</code> is a client for eBay’s web services? What if it asks me for my eBay authentication information so it can make hidden web service requests to <code class=\"literal\">ebay.com</code>? Technically speaking, there’s no difference between this application and a phishing site that pretends to be <code class=\"literal\">ebay.com</code>, trying to trick me into giving it my eBay username and password.</p> \n  <p>The standalone client programs presented in this book authenticate by encoding the end user’s username and password in the <code class=\"literal\">Authorization</code> header. That’s how many web services work. It works fine on the human web, because the HTTP clients are our own trusted web browsers. But when the HTTP client is an untrusted program, possibly running on a foreign computer, handing it your username and password is naive at best. There’s another way. Some web services attack phishing by preventing their clients from handling usernames and passwords at all.</p> \n  <p>In this scenario, the end user uses her web browser (again, trusted implicitly) to get <a id=\"I_indexterm8_tt784\" class=\"indexterm\"></a>an <em class=\"firstterm\">authorization token</em>. She gives this token to the web service client instead of giving her username and password, and the web service client sends this token in the <code class=\"literal\">Authorization</code> header. The end user is basically delegating the ability to make web service calls as herself. If the web service client abuses that ability, its authorization token can be revoked without making the user change her password.</p> \n  <p>Google, eBay, Yahoo!, and Flickr all have user-client authorization systems of this type. Amazon’s request signing, which I showed you in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>, fulfills the same function. There’s no official standard, but all four systems are similar in concept, so I’ll discuss them in general terms. When I need to show you specific URIs, I’ll use Google’s and Flickr’s user-client authorization systems as examples.</p> \n  <h2>Applications with a Web Interface</h2> \n  <p>Let’s<a id=\"ch08_webapp\" class=\"indexterm\"></a><a id=\"ch08_appweb\" class=\"indexterm\"></a> start with the simplest case: a web application that needs to access a web service such as <a id=\"I_indexterm8_tt785\" class=\"indexterm\"></a>Google Calendar. It’s the simplest case because the web application has the same user interface as the application that gives out authorization tokens: a web browser. When a web application needs to make a Google web service call, it serves an HTTP redirect that sends the end user to a URI at <code class=\"literal\">google.com</code>. The URI might look something like this:</p> \n  <pre class=\"screen\">https://www.google.com/accounts/AuthSubRequest\n ?scope=http%3A%2F%2Fwww.google.com%2Fcalendar%2Ffeeds%2F\n &amp;next=http%3A%2F%2Fcalendar.example.com%2Fmy</pre> \n  <p>That URI has two other URIs embedded in it as query variables. The <code class=\"literal\">scope</code> variable, with a value of <a class=\"ulink\" href=\"http://www.google.com/calendar/feeds/\" target=\"_top\">http://www.google.com/calendar/feeds/</a>, is the base URI of the web service we’re trying to get an authorization token for. The <code class=\"literal\">next</code> variable, value <em class=\"filename\">http://calendar.example.com/my</em>, will be used when Google hands control of the end user’s web browser back to the web application.</p> \n  <p>When the end user’s browser hits this URI, Google serves a web page that tells the end user that <code class=\"literal\">example.com</code> wants to access her Google Calendar account on her behalf. If the user decides she trusts <code class=\"literal\">example.com</code>, she authenticates with Google. She never gives her Google username or password to <code class=\"literal\">example.com</code>.</p> \n  <p>After authenticating the user, Google hands control back to the original web application by redirecting the end user’s browser to a URI based on the value of the query variable <code class=\"literal\">next</code> in the original request. In this example, <code class=\"literal\">next</code> was <em class=\"filename\">http://calendar.example.com/my</em>, so Google might redirect the end user to <em class=\"filename\">http://calendar.example.com/my?token=IFM29SdTSpKL77INCn</em>. The new query variable <code class=\"literal\">token</code> contains a one-time authorization token. The web application can put this token in the <code class=\"literal\">Authorization</code> header when it makes a web service call to Google Calendar:</p> \n  <pre class=\"screen\">Authorization: AuthSub token=\"IFM29SdTSpKL77INCn\"</pre> \n  <p>Now the web application can make a web-service call as the end user, without actually knowing anything about the end user. The authentication information never leaves <code class=\"literal\">google.com</code>, and the authorization token is only good for one request.</p> \n  <p>Those are the basics. Google’s user-client authorization mechanism has lots of other features. A web service client can use the one-time authorization token to get a “session token” that’s good for more than one request. A client can digitally sign requests, similarly to how I signed Amazon S3 requests back in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>. These features are different for every user-client authorization mechanism, so I won’t dwell on them here. The point is this flow (shown graphically in <a class=\"xref\" href=\"ch08.html#user-client-authorization-web\" title=\"Figure&nbsp;8-3.&nbsp;How a web application gets authorization to use Google Calendar\">Figure&nbsp;8-3</a>): control moves from the web application’s domain to the web service’s domain. The user authenticates with the web service, and authorizes the foreign web application to act on her behalf. Then control moves back to the web application’s domain. Now the web app has an authorization token that it can use in the <code class=\"literal\">Authorization</code> header. It can make web service calls without knowing the user’s username and password.</p> \n  <div class=\"figure\"> \n   <a id=\"user-client-authorization-web\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"mediaobject\"> \n     <a id=\"I_mediaobject8_tt786\"></a> \n     <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24582.png\" alt=\"How a web application gets authorization to use Google Calendar\"> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;8-3.&nbsp;How a web application gets authorization to use Google Calendar \n   </div> \n  </div> \n  <h2>Applications with No Web Interface</h2> \n  <p>For applications that expose a web interface, browser-based user-client authorization makes sense. The user is already in her web browser, and the application she’s using is running on a faraway server. She doesn’t trust the web application with her password, but she does trust her own web browser. But what if the web service client is a standalone application running on the user’s computer? What if it’s got a GUI or command-line interface, but it’s not a web browser?</p> \n  <p>There are two schools of thought on this. The first is that the end user should trust any client-side application as much as she trusts her web browser. Web applications run on an untrusted computer, but I control every web service client that runs on my computer. I can keep track of what the clients are doing and kill them if they get out of control.</p> \n  <p>If you as a service designer subscribe to this philosophy, there’s no need to hide the end user’s username and password from desktop clients. They’re all just as trustworthy as the web browser. Google takes this attitude. Its <a class=\"ulink\" href=\"http://code.google.com/apis/accounts/AuthForInstalledApps.html\" target=\"_top\">authentication mechanism for client-side applications</a> is different from the web-based one I described above. Both systems are based on tokens, but desktop applications get an authorization token by gathering the user’s username and password and “logging in” as them—not by redirecting the user’s browser to a Google login page. This token serves little purpose from a security standpoint. The client needs a token to make web service requests, but it can only get one if it knows the user’s username and password—a far more valuable prize.</p> \n  <p>If you don’t like this, then you probably think the web browser is the only client an end user should trust with her username and password. This creates a problem for the programmer of a desktop client. Getting an authentication token means starting up a trusted client—the web browser—and getting the end user to visit a certain URI. For the Flickr service the URI might look like this:</p> \n  <pre class=\"screen\">http://flickr.com/services/auth/?perms=write&amp;api_sig=925e1&amp;api_key=1234&amp;frob=abcd</pre> \n  <p>The most important query variable here is <code class=\"literal\">frob</code>. That’s a predefined ID, obtained through an earlier web service call, and I’ll use it in a moment. The first thing the end user sees is that her browser suddenly pops up and visits this URI, which shows a Flickr login screen. The end user gives her authentication credentials and authorizes the client with <code class=\"literal\">api_key=1234</code> to act on her behalf. In the Google example above, the web service client was the web application at <code class=\"literal\">example.com</code>. Here, the web service client is the application running on the end user’s own desktop.</p> \n  <p>Without the <code class=\"literal\">frob</code>, the desktop client at this point would have to cajole the end user to copy and paste the authorization token from the browser into the desktop client. But the client and the service agreed on a <code class=\"literal\">frob</code> ahead of time, and the desktop client can use this <code class=\"literal\">frob</code> to get the authorization token. The end user can close her browser at this point, and the desktop client makes a GET request to a URI that looks like this:</p> \n  <pre class=\"screen\">http://flickr.com/services/rest/?method=flickr.auth.getToken\n&amp;api_sig=1f348&amp;api_key=1234&amp;frob=abcd</pre> \n  <p>The eBay and Flickr web services use a mechanism like this: what Flickr calls a frob, eBay calls an runame. The end user can authorize a standalone client to make web service requests on her behalf, without ever telling it her username or password. I’ve diagrammed the whole process in <a class=\"xref\" href=\"ch08.html#user-client-authorization-desktop\" title=\"Figure&nbsp;8-4.&nbsp;How a web application gets authorization to use Flickr\">Figure&nbsp;8-4</a>.</p> \n  <div class=\"figure\"> \n   <a id=\"user-client-authorization-desktop\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"mediaobject\"> \n     <a id=\"I_mediaobject8_tt787\"></a> \n     <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24584.png\" alt=\"How a web application gets authorization to use Flickr\"> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;8-4.&nbsp;How a web application gets authorization to use Flickr \n   </div> \n  </div> \n  <p>Some mobile devices have network connectivity but no web browser. A web service that thinks the only trusted client is a web browser must make special allowances for such devices, or live with the fact that it’s locking them out.<a id=\"I_indexterm8_tt788\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt789\" class=\"indexterm\"></a></p> \n  <h2>What Problem Does this Solve?</h2> \n  <p>Despite appearances, I’ve gone into very little detail: just enough to give you a feel for the two ways an end user might delegate her authority to make web service calls. Even in the high-level view it’s a complex system, and it’s worth asking what problem it actually solves. After all, the end user still has to type her username and password into a web form, and nothing prevents a malicious application writer from sending the browser to a fake authentication page instead of the real page. Phishers redirect people to fake sign-in pages all the time, and a lot of people fall for it. So what does this additional infrastructure really buy?</p> \n  <p>If you look at a bank or some other web site that’s a common target of phishing attacks, you’ll see a big warning somewhere that looks like this: “Never type in your <code class=\"literal\">mybank.com</code> username and password unless you’re using a web browser and visiting a URI that starts with <a class=\"ulink\" href=\"https://www.mybank.com/\" target=\"_top\">https://www.mybank.com/</a>.” Common sense, right? It’s not the most ironclad guarantee of security, but if you’re careful you’ll be all right. Yet most web services can’t even provide this milquetoast cover. The standalone applications presented throughout this book take your service username and password as input. Can you trust them? If the web site at <code class=\"literal\">example.com</code> wants to help you manage your del.icio.us bookmarks, you need to give it your del.icio.us username and password. Do you trust <code class=\"literal\">example.com</code>?</p> \n  <p>The human web has a universal client: the web browser. It’s not a big leap of faith to trust a single client that runs on your computer. The programmable web has different clients for different purposes. Should the end user trust all those clients? The mechanisms I described in this section let the end user use her web browser—which she already trusts—as a way of bestowing lesser levels of trust on other clients. If a client abuses the trust, it can be blocked from making future web service requests. These strategies don’t eliminate phishing attacks, but they make it possible for a savvy end user to avoid them, and they allow service providers to issue warnings and disclaimers. Without these mechanisms, it’s technically impossible for the end user to tell the difference between a legitimate client and a phishing site. They both take your password: the only difference is what they do with it.<a id=\"I_indexterm8_tt790\" class=\"indexterm\"></a><a id=\"I_indexterm8_tt791\" class=\"indexterm\"></a></p>\n </body>\n</html>",
      "slug" : "why-should-a-user-trust-the-http-client"
    } ]
  }, {
    "title" : "9. The Building Blocks of Services",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;9.&nbsp;The Building Blocks of Services</h2>\n  </div>\n </div>\n</div>\n<p>Throughout <a id=\"ch09_services\" class=\"indexterm\"></a>this book I’ve said that web services are based on three fundamental technologies: HTTP, URIs, and XML. But there are also lots of technologies that build on top of these. You can usually save yourself some work and broaden your audience by adopting these extra technologies: perhaps a domain-specific XML vocabulary, or a standard set of rules for exposing resources through HTTP’s uniform interface. In this chapter I’ll show you several technologies that can improve your web services. Some you’re already familiar with and some will probably be new to you, but they’re all interesting and powerful.</p>",
    "textContent" : "Chapter 9. The Building Blocks of Services\r\n\r\nThroughout this book I’ve said that web services are based on three fundamental technologies: HTTP, URIs, and XML. But there are also lots of technologies that build on top of these. You can usually save yourself some work and broaden your audience by adopting these extra technologies: perhaps a domain-specific XML vocabulary, or a standard set of rules for exposing resources through HTTP’s uniform interface. In this chapter I’ll show you several technologies that can improve your web services. Some you’re already familiar with and some will probably be new to you, but they’re all interesting and powerful.",
    "slug" : "9-the-building-blocks-of-services",
    "pages" : [ {
      "title" : "Representation Formats",
      "type" : "page",
      "htmlContent" : "<p>What <a id=\"ch09_repformats\" class=\"indexterm\"></a>representation formats should your service actually send and receive? This is the question of how data should be represented, and it’s an epic question. I have a few suggestions, which I present here in a rough order of precedence. My goal is to help you pick a format that says something about the semantics of your data, so you don’t find yourself devising yet another one-off XML vocabulary that no one else will use.</p>\n<p>I assume your clients can accept whatever representation format you serve. The known needs of your clients take priority over anything I can say here. If you know your data is being fed directly into Microsoft Excel, you ought to serve representations in Excel format or a compatible CSV format. My advice also does not extend to document formats that can only be understood by humans. If you’re serving audio files, I’ve got nothing to say about which audio format you should choose. To a first approximation, a programmed client finds all audio files equally unintelligible.</p>\n<h2>XHTML</h2>\n<p>Media<a id=\"ch09_xhtml\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt792\" class=\"indexterm\"></a> type: <code class=\"literal\">application/xhtml+xml </code></p>\n<p>The <a id=\"I_indexterm9_tt793\" class=\"indexterm\"></a>common <code class=\"literal\">text/html</code> media type is deprecated for XHTML. It’s also the only media type that Internet Explorer handles as HTML. If your service might be serving XHTML data directly to web browsers, you might want to serve it as <code class=\"literal\">text/html</code>.</p>\n<p>My number-one representation recommendation is the format I’ve been using in my own services throughout this book, and the one you’re probably most familiar with. HTML drives the human web, and XHTML can drive the programmable web. The XHTML standard (<a class=\"ulink\" href=\"http://www.w3.org/TR/xhtml1/\" target=\"_top\">http://www.w3.org/TR/xhtml1/</a>) relies on the HTML standard to do most of the heavy lifting (<a class=\"ulink\" href=\"http://www.w3.org/TR/html401/\" target=\"_top\">http://www.w3.org/TR/html401/</a>).</p>\n<p>XHTML is HTML <a id=\"I_indexterm9_tt794\" class=\"indexterm\"></a>under a few restrictions that make every XHTML document also valid<a id=\"I_indexterm9_tt795\" class=\"indexterm\"></a> XML. If you know HTML, you know most of what there is to know about XHTML, but there are some syntactic differences, like how to present self-closing tags. The tag names and attributes are the same: XHTML is expressive in the same ways as HTML. Since the XHTML standard just points to the HTML standard and then adds some restrictions to it, I tend to refer to “HTML tags” and the like except where there really is a difference between XHTML and HTML.</p>\n<p>I don’t actually recommend HTML as a representation format, because it can’t be reliably parsed with an XML parser. There are many excellent and liberal HTML parsers, though (I mentioned a few in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>), so your clients have options if you can’t or don’t want to serve XHTML. Right now, XHTML is a better choice if you expect a wide variety of clients to handle your data.</p>\n<p>HTML can represent many common types of data: nested lists<a id=\"I_indexterm9_tt796\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt797\" class=\"indexterm\"></a> (tags like <code class=\"literal\">ul</code> and <code class=\"literal\">li</code>), key-value pairs<a id=\"I_indexterm9_tt798\" class=\"indexterm\"></a> (the <code class=\"literal\">dl</code> tag and its children), and tabular data<a id=\"I_indexterm9_tt799\" class=\"indexterm\"></a> (the <code class=\"literal\">table</code> tag and its children). It supports many different kinds of hypermedia. HTML does have its shortcomings: its hypermedia forms are limited, and won’t fully support HTTP’s uniform interface until HTML 5 is released.</p>\n<p>HTML is also poor in semantic content. Its tag vocabulary is very computer-centric. It has special tags for representing computer code and output, but nothing for the other structured fruits of human endeavor, like poetry. One resource can link to another resource, and there are standard HTML<a id=\"I_indexterm9_tt800\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt801\" class=\"indexterm\"></a> attributes (<code class=\"literal\">rel</code> and <code class=\"literal\">rev</code>) for expressing the relationship between the linker and the linkee. But the HTML standard defines only 15 possible relationships between resources, including “alternate,” “stylesheet,” “next,” “prev,” and “glossary.” See <a class=\"ulink\" href=\"http://www.w3.org/TR/html401/types.html#type-links\" target=\"_top\">http://www.w3.org/TR/html401/types.html#type-links</a> for a complete list.</p>\n<p>Since HTML pages are representations of resources, and resources can be anything, these 15 relationships barely scratch the surface. HTML might be called upon to represent the relationship between any two things. Of course, I can come up with my own values for <code class=\"literal\">rel</code> and <code class=\"literal\">rev</code> to supplement the official 15, but if everyone does that confusion will reign: we’ll all pick different values to represent the same relationships. If I link my web page to my wife’s web page, should I specify my relationship to her as husband, spouse, or sweetheart? To a human it doesn’t matter much, but to a computer program (the real client on the programmable web) it matters a lot. Similarly, HTML can easily represent a list, and there’s a standard <a id=\"I_indexterm9_tt802\" class=\"indexterm\"></a>HTML attribute (<code class=\"literal\">class</code>) for expressing what kind of list it is. But HTML doesn’t say what kinds of lists there are.</p>\n<p>This isn’t HTML’s fault, of course. HTML is supposed to be used by people who work in any field. But once you’ve chosen a field, everyone who works in that field should be able to agree on what kinds of lists there are, or what kinds of relationships can exist between resources. This is why people have started getting together and adding standard semantics to XHTML with microformats.<a id=\"I_indexterm9_tt803\" class=\"indexterm\"></a></p>\n<h2>XHTML with Microformats</h2>\n<p>Media type: <code class=\"literal\">application/xhtml+xml</code></p>\n<p><a class=\"ulink\" href=\"http://microformats.org/\" target=\"_top\">Microformats</a> are lightweight<a id=\"ch09_xmicro\" class=\"indexterm\"></a><a id=\"ch09_micro\" class=\"indexterm\"></a> standards that extend XHTML to give domain-specific semantics to HTML tags. Instead of reinventing data storage techniques like lists, microformats use existing HTML tags like <code class=\"literal\">ol</code>, <code class=\"literal\">span</code>, and <code class=\"literal\">abbr</code>. The semantic content usually lives in custom values for the attributes of the tags, such as <code class=\"literal\">class</code>, <code class=\"literal\">rel</code>, and <code class=\"literal\">rev</code>. <a class=\"xref\" href=\"ch09.html#hcard-telephone-number\" title=\"Example&nbsp;9-1.&nbsp;A telephone number represented in the hCard microformat\">Example&nbsp;9-1</a> shows an example: someone’s home telephone number represented in the microformat known <a id=\"I_indexterm9_tt804\" class=\"indexterm\"></a>as hCard.</p>\n<div class=\"example\">\n <a id=\"hcard-telephone-number\"></a>\n <div class=\"example-title\">\n  Example&nbsp;9-1.&nbsp;A telephone number represented in the hCard microformat\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;span class=\"tel\"&gt;\n &lt;span class=\"type\"&gt;home&lt;/span&gt;:\n &lt;span class=\"value\"&gt;+1.415.555.1212&lt;/span&gt;\n&lt;/span&gt;</pre>\n </div>\n</div>\n<p>Microformat adoption is growing, especially as more special-purpose devices get on the web. Any microformat document can be embedded in an XHTML page, because it is XHTML. A web service can serve an XHTML representation that contains microformat documents, along with links to other resources and forms for creating new ones. This document can be automatically parsed for its microformat data, or rendered for human consumption with a standard web browser.</p>\n<p>As of the time of writing there were nine microformat specifications. The best-known is probably <code class=\"literal\">rel-nofollow</code>, a standard value for the <code class=\"literal\">rel</code> attribute invented by engineers at Google as a way of fighting comment spam on weblogs. Here’s a complete list of official microformats:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">hCalendar</span>\n  </dt>\n  <dd>\n   <p>A way <a id=\"I_indexterm9_tt805\" class=\"indexterm\"></a>of representing events on a calendar or planner. Based on the IETF iCalendar format.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">hCard</span>\n  </dt>\n  <dd>\n   <p>A way <a id=\"I_indexterm9_tt806\" class=\"indexterm\"></a>of representing contact information for people and organizations. Based on the vCard standard defined in RFC 2426.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">rel-license</span>\n  </dt>\n  <dd>\n   <p>A new<a id=\"I_indexterm9_tt807\" class=\"indexterm\"></a> value for the <code class=\"literal\">rel</code> attribute, used when linking to the license terms for a XHTML document. For example:</p>\n   <pre class=\"screen\">&lt;a href=\"http://creativecommons.org/licenses/by-nd/\" rel=\"license\"&gt;\n Made avaliable under a Creative Commons Attribution-NoDerivs license.\n&lt;/a&gt;</pre>\n   <p>That’s standard XHTML. The only thing the microformat does is define a meaning for the string <code class=\"literal\">license</code> when it shows up in the <code class=\"literal\">rel</code> attribute.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">rel-nofollow</span>\n  </dt>\n  <dd>\n   <p>A new value<a id=\"I_indexterm9_tt808\" class=\"indexterm\"></a> for the <code class=\"literal\">rel</code> attribute, used when linking to URIs without necessarily endorsing them.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">rel-tag</span>\n  </dt>\n  <dd>\n   <p>A new value <a id=\"I_indexterm9_tt809\" class=\"indexterm\"></a>for the <code class=\"literal\">rel</code> attribute, used to label a web page according to some external classification system.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">VoteLinks</span>\n  </dt>\n  <dd>\n   <p>A new value for the <code class=\"literal\">rev</code> attribute, an extension of the<a id=\"I_indexterm9_tt810\" class=\"indexterm\"></a> idea behind <code class=\"literal\">rel-nofollow</code>. VoteLinks lets you say how you feel about the resource you’re linking to by casting a “vote.” For instance:</p>\n   <pre class=\"screen\">&lt;a rev=\"vote-for\" href=\"http://www.example.com\"&gt;The best webpage ever.&lt;/a&gt;\n&lt;a rev=\"vote-against\" href=\"http://example.com/\"&gt;\nA shameless ripoff of www.example.com&lt;/a&gt;</pre>\n  </dd>\n  <dt>\n   <span class=\"term\">XFN</span>\n  </dt>\n  <dd>\n   <p>Stands for <a id=\"I_indexterm9_tt811\" class=\"indexterm\"></a>XHTML Friends Network. A new set of values for the <code class=\"literal\">rel</code> attribute, for capturing the relationships between people. An XFN value for the <code class=\"literal\">rel</code> attribute captures the relationship between this “person” resource and another such resource. To bring back the “Alice” and “Bob” resources from <a class=\"xref\" href=\"ch08.html#relationships-between-resources\" title=\"Relationships Between Resources\">Relationships Between Resources</a>” in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, an XHTML representation of Alice might include this link: </p>\n   <pre class=\"screen\">&lt;a rel=\"spouse\" href=\"Bob\"&gt;Bob&lt;/a&gt;</pre>\n  </dd>\n  <dt>\n   <span class=\"term\">XMDP</span>\n  </dt>\n  <dd>\n   <p>Stands for<a id=\"I_indexterm9_tt812\" class=\"indexterm\"></a> XHTML Meta Data Profiles. A way of describing your custom values for XHTML attributes, using the XHTML tags for definition lists: <code class=\"literal\">DL</code>, <code class=\"literal\">DD</code>, and <code class=\"literal\">DT</code>. This is a kind of meta-microformat: a microformat like <code class=\"literal\">rel-tag</code> could itself be described with an XMDP document.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">XOXO</span>\n  </dt>\n  <dd>\n   <p>Stands (sort of)<a id=\"I_indexterm9_tt813\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt814\" class=\"indexterm\"></a> for Extensible Open XHTML Outlines. Uses XHTML’s list tags to represent outlines. There’s nothing in XOXO that’s not already in the XHTML standard, but declaring a document (or a list in a document) to be XOXO signals that a list is an outline, not just a random list.</p>\n  </dd>\n </dl>\n</div>\n<p>Those are the official microformat standards; they should give you an idea of what microformats are for. As of the time of writing there were also about 10 microformat drafts and more than 50 discussions about possible new microformats. Here are some of the more interesting drafts:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">geo</span>\n  </dt>\n  <dd>\n   <p>A way of <a id=\"I_indexterm9_tt815\" class=\"indexterm\"></a>marking up latitude and longitude on Earth. This would be useful in the mapping application I designed in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>. I didn’t use it there because there’s still a debate about how to represent latitude and longitude on other planetary bodies: extend geo or define different microformats for each body?</p>\n  </dd>\n  <dt>\n   <span class=\"term\">hAtom</span>\n  </dt>\n  <dd>\n   <p>A way of<a id=\"I_indexterm9_tt816\" class=\"indexterm\"></a> representing in XHTML the data Atom represents in XML.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">hResume</span>\n  </dt>\n  <dd>\n   <p>A way of <a id=\"I_indexterm9_tt817\" class=\"indexterm\"></a>representing resumés.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">hReview</span>\n  </dt>\n  <dd>\n   <p>A way of <a id=\"I_indexterm9_tt818\" class=\"indexterm\"></a>representing reviews, such as product reviews or restaurant reviews.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">xFolk</span>\n  </dt>\n  <dd>\n   <p>A way of <a id=\"I_indexterm9_tt819\" class=\"indexterm\"></a>representing bookmarks. This would make an excellent representation format for the social bookmarking application in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>. I chose to use Atom instead because it was less code to show you.</p>\n  </dd>\n </dl>\n</div>\n<p>You get the idea. The power of microformats is that they’re based on HTML, the most widely-deployed markup format in existence. Because they’re HTML, they can be embedded in web pages. Because they’re also XML, they can be embedded in XML documents. They can be understood at various levels by human beings, specialized microformat processors, dumb HTML processors, and even dumber XML processors.</p>\n<p>Even if the <a class=\"ulink\" href=\"http://microformats.org/wiki/Main_Page\" target=\"_top\">microformats wiki</a> shows no microformat standard or draft for your problem space, you might find an open discussion on the topic that helps you clarify your data structures. You can also create your own microformat (see <a class=\"xref\" href=\"ch09.html#ad-hoc-xhtml\" title=\"Ad Hoc XHTML\">Ad Hoc XHTML</a>” later in this chapter).<a id=\"I_indexterm9_tt820\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt821\" class=\"indexterm\"></a></p>\n<h2>Atom</h2>\n<p>Media type: <code class=\"literal\">application/atom+xml</code></p>\n<p>Atom is an XML<a id=\"I_indexterm9_tt822\" class=\"indexterm\"></a><a id=\"ch09_atom\" class=\"indexterm\"></a> vocabulary for describing lists of timestamped entries. The entries can be anything, but they usually contain pieces of human-authored text like you’d see on a weblog or a news site. Why should you use an Atom list instead of a regular XHTML list? Because Atom provides special tags for conveying the semantics of publishing: authors, contributors, languages, copyright information, titles, categories, and so on. (Of course, as I mentioned earlier, there’s a microformat called hAtom that brings all of these semantics into XHTML.) Atom is a useful XML vocabulary because so many web services are, in the broad sense, ways of publishing information. What’s more, there are a lot of web service clients that understand the semantics of Atom documents. If your web service is addressable and your resources expose Atom representations, you’ve immediately got a huge audience.</p>\n<p>Atom lists are called<a id=\"I_indexterm9_tt823\" class=\"indexterm\"></a> <em class=\"firstterm\">feeds</em>, and the items in the lists<a id=\"I_indexterm9_tt824\" class=\"indexterm\"></a> are called <em class=\"firstterm\">entries</em>.</p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>Some feeds are written in some version of RSS, a different XML vocabulary with similar semantics. All versions of RSS have the same basic structure as Atom: a feed that contains a number of entries. There are a number of variants of RSS but you shouldn’t have to worry about it at all. Today, every major tool for consuming feeds understands Atom.</p>\n</div>\n<p>These days, most weblogs and news sites expose a special resource whose representation is an Atom feed. The entries in the feed describe and link to other resources: weblog entries or news stories published on the site. You, the client, can consume these resources with a feed reader or some other external program. In <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, I represented lists of bookmarks as Atom feeds. <a class=\"xref\" href=\"ch09.html#sample-atom\" title=\"Example&nbsp;9-2.&nbsp;A simple Atom feed containing one entry\">Example&nbsp;9-2</a> shows a simple Atom feed document.</p>\n<div class=\"example\">\n <a id=\"sample-atom\"></a>\n <div class=\"example-title\">\n  Example&nbsp;9-2.&nbsp;A simple Atom feed containing one entry\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\"> &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n   &lt;feed xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n     &lt;title&gt;RESTful News&lt;/title&gt;\n     &lt;link rel=\"alternate\" href=\"http://example.com/RestfulNews\" /&gt;\n     &lt;updated&gt;2007-04-14T20:00:39Z&lt;/updated&gt;\n     &lt;author&gt;&lt;name&gt;Leonard Richardson&lt;/name&gt;&lt;/author&gt;\n     &lt;contributor&gt;&lt;name&gt;Sam Ruby&lt;/name&gt;&lt;/contributor&gt;\n     &lt;id&gt;urn:1c6627a0-8e3f-0129-b1a6-003065546f18&lt;/id&gt;\n\n     &lt;entry&gt;\n       &lt;title&gt;New Resource Will Respond to PUT, City Says&lt;/title&gt;\n       &lt;link rel=\"edit\" href=\"http://example.com/RestfulNews/104\" /&gt;\n       &lt;id&gt;urn:239b2f40-8e3f-0129-b1a6-003065546f18&lt;/id&gt;\n       &lt;updated&gt;2007-04-14T20:00:39Z&lt;/updated&gt;\n\n       &lt;summary&gt; \n        After long negotiations, city officials say the new resource\n        being built in the town square will respond to PUT. Earlier\n        criticism of the proposal focused on the city's plan to modify\n        the resource through overloaded POST.\n       &lt;/summary&gt;\n       &lt;category scheme=\"http://www.example.com/categories/RestfulNews\" \n                 term=\"local\" label=\"Local news\" /&gt;\n     &lt;/entry&gt;\n   &lt;/feed&gt;</pre>\n </div>\n</div>\n<p>In that example you can see some of the tags that convey the semantics of publishing: <code class=\"literal\">author</code>, <code class=\"literal\">title</code>, <code class=\"literal\">link</code>, <code class=\"literal\">summary</code>, <code class=\"literal\">updated</code>, and so on. The feed as a whole is a joint project: it has an <code class=\"literal\">author</code> tag and a <code class=\"literal\">contributor</code> tag. It’s also got a <code class=\"literal\">link</code> tag that points to an alternate URI for the underlying “feed” resource: the news site. The single entry has no <code class=\"literal\">author</code> tag, so it inherits author information from the feed. The entry does have its own <code class=\"literal\">link</code> tag, which points to <span class=\"emphasis\"><em>http://www.example.com/RestfulNews/104</em></span>. That URI identifies the entry as a resource in its own right. The entry also has a textual summary of the story. To get the remainder, the client must presumably GET the entry’s URI.</p>\n<p>An Atom document is basically a directory of published resources. You can use Atom to represent photo galleries, albums of music (maybe a link to the cover art plus one to each track on the album), or lists of search results. Or you can omit the <code class=\"literal\">LINK</code> tags and use Atom as a container for original content like status reports or incoming emails. Remember: the two reasons to use Atom are that it represents the semantics of publishing, and that a lot of existing clients can consume it.</p>\n<p>If your application <span class=\"emphasis\"><em>almost</em></span> fits in with the Atom schema, but needs an extra tag or two, there’s no problem. You can embed XML tags from other namespaces in an Atom feed. You can even define a custom namespace and embed its tags in your Atom feeds. This is the Atom equivalent of XHTML microformats: your Atom feeds can use conventions not defined in Atom, without becoming invalid. Clients that don’t understand your tag will see a normal Atom feed with some extra mysterious data in it.</p>\n<div class=\"sect3\" title=\"OpenSearch\">\n <p><a class=\"ulink\" href=\"http://www.opensearch.org/\" target=\"_top\">OpenSearch</a> is one XML<a id=\"I_indexterm9_tt825\" class=\"indexterm\"></a> vocabulary that’s commonly embedded in Atom documents. It’s designed for representing lists of search results. The idea is that a service returns the results of a query as an Atom feed, with the individual results represented as Atom entries. But some aspects of a list of search results can’t be represented in a stock Atom feed: the total number of results, for instance. So OpenSearch defines three new elements, in the <code class=\"literal\">opensearch</code> namespace:<sup>[<a id=\"id368815\" href=\"#ftn.id368815\" epub:type=\"noteref\" class=\"footnote\">28</a>]</sup></p>\n <div class=\"variablelist\">\n  <dl>\n   <dt>\n    <span class=\"term\"><code class=\"literal\">totalResults</code></span>\n   </dt>\n   <dd>\n    <p>The total number of <a id=\"I_indexterm9_tt826\" class=\"indexterm\"></a>results that matched the query.</p>\n   </dd>\n   <dt>\n    <span class=\"term\"><code class=\"literal\">itemsPerPage</code></span>\n   </dt>\n   <dd>\n    <p>How many items <a id=\"I_indexterm9_tt827\" class=\"indexterm\"></a>are returned in a single “page” of search results.</p>\n   </dd>\n   <dt>\n    <span class=\"term\"><code class=\"literal\">startindex</code></span>\n   </dt>\n   <dd>\n    <p>If all the <a id=\"I_indexterm9_tt828\" class=\"indexterm\"></a>search results are numbered from zero to <code class=\"literal\">totalResults</code>, then the first result in this feed document is entry number <code class=\"literal\">startindex</code>. When combined with <code class=\"literal\">itemsPerPage</code> you can use this to figure out what “page” of results you’re on.<a id=\"I_indexterm9_tt829\" class=\"indexterm\"></a></p>\n   </dd>\n  </dl>\n </div>\n</div>\n<h2>SVG</h2>\n<p>Media type: <code class=\"literal\">image/svg+xml</code></p>\n<p>Most graphic<a id=\"I_indexterm9_tt830\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt831\" class=\"indexterm\"></a> formats are just ways of laying pixels out on the screen. The underlying content is opaque to a computer: it takes a skilled human to modify a graphic or reuse part of one in another. Scalable Vector Graphics is an XML vocabulary that makes it possible for programs to understand and manipulate graphics. It describes graphics in terms of primitives like shapes, text, colors, and effects.</p>\n<p>It would be a waste of time to represent a photograph in SVG, but using it to represent a graph, a diagram, or a set of relationships gives a lot of power to the client. SVG images can be scaled to arbitrary size without losing any detail. SVG diagrams can be edited or rearranged, and bits of them can be seamlessly snipped out and incorporated into other graphics. In short, SVG makes graphic documents work like other sorts of documents. Web browsers are starting to get support for SVG: newer versions of Firefox support it natively.</p>\n<h2>Form-Encoded Key-Value Pairs</h2>\n<p>Media type: <code class=\"literal\">application/x-www-form-urlencoded</code></p>\n<p>I <a id=\"I_indexterm9_tt832\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt833\" class=\"indexterm\"></a>covered this simple format in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>. This format is mainly used in representations <a id=\"I_indexterm9_tt834\" class=\"indexterm\"></a>the client sends to the server. A filled-out <a id=\"I_indexterm9_tt835\" class=\"indexterm\"></a>HTML form is represented in this format by default, and it’s an easy format for an Ajax application to construct. But a service can also use this format in the representations it sends. If you’re thinking of serving comma-separated values or RFC 822-style key-value pairs, try form-encoded values instead. Form-encoding takes care of the tricky cases, and your clients are more likely to have a library that can decode the document.</p>\n<h2>JSON</h2>\n<p>Media type: <code class=\"literal\">application/json</code></p>\n<p>JavaScript<a id=\"I_indexterm9_tt836\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt837\" class=\"indexterm\"></a> Object Notation is a serialization format for general data structures. It’s much more lightweight and readable than an equivalent XML document, so I recommend it for most cases when you’re transporting a serialized data structure rather than a hypermedia document.</p>\n<p>I introduced JSON in <a class=\"xref\" href=\"ch02.html#json-introduction\" title=\"JSON Parsers: Handling Serialized Data\">JSON Parsers: Handling Serialized Data</a>” in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, and showed a simple JSON document in <a class=\"xref\" href=\"ch02.html#simple-json-example\" title=\"Example&nbsp;2-11.&nbsp;A mixed-type array in JSON format\">Example&nbsp;2-11</a>. <a class=\"xref\" href=\"ch09.html#complex-json-example\" title=\"Example&nbsp;9-3.&nbsp;A complex data type in JSON format\">Example&nbsp;9-3</a> shows a more complex JSON document: a hash of lists.</p>\n<div class=\"example\">\n <a id=\"complex-json-example\"></a>\n <div class=\"example-title\">\n  Example&nbsp;9-3.&nbsp;A complex data type in JSON format\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">{\"a\":[\"b\",\"c\"], \"1\":[2,3]}</pre>\n </div>\n</div>\n<p>As I show in <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>, JSON has special advantages when it comes to Ajax applications. It’s useful for any kind of application, though. If your data structures are more complex than key-value pairs, or you’re thinking of defining an ad hoc XML format, you might find it easier to define a JSON structure of nested hashes and arrays.</p>\n<h2>RDF and RDFa</h2>\n<p>The <a class=\"ulink\" href=\"http://www.w3.org/RDF/\" target=\"_top\">Resource Description Framework</a> is<a id=\"I_indexterm9_tt838\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt839\" class=\"indexterm\"></a> a way of representing knowledge about resources. Resource here means the same thing as in Resource-Oriented-Architecture: a resource is anything important enough to have a URI. In RDF, though, the URIs might not be <code class=\"literal\">http:</code> URIs. Abstract URI schemas like <code class=\"literal\">isbn:</code> (for books) and <code class=\"literal\">urn:</code> (for just about anything) are common. <a class=\"xref\" href=\"ch09.html#rdfa\" title=\"Example&nbsp;9-4.&nbsp;An RDF assertion\">Example&nbsp;9-4</a> is a simple RDF assertion, which claims that the title of this book is <em class=\"citetitle\">RESTful Web Services</em>.</p>\n<div class=\"example\">\n <a id=\"rdfa\"></a>\n <div class=\"example-title\">\n  Example&nbsp;9-4.&nbsp;An RDF assertion\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;span about=\"isbn:9780596529260\" property=\"dc:title\"&gt;\n RESTful Web Services\n&lt;/span&gt;</pre>\n </div>\n</div>\n<p>There are three parts to an RDF assertion, <a id=\"I_indexterm9_tt840\" class=\"indexterm\"></a>or <em class=\"firstterm\">triple</em>, as they’re called. There’s the<a id=\"I_indexterm9_tt841\" class=\"indexterm\"></a> <em class=\"firstterm\">subject</em>, a resource identifier: in this case, <code class=\"literal\">isbn:9780596529260</code>. There’s the <em class=\"firstterm\">predicate</em>, which identifies a property of the resource: in this case, <code class=\"literal\">dc:title</code>. Finally there’s<a id=\"I_indexterm9_tt842\" class=\"indexterm\"></a> the <em class=\"firstterm\">object</em>, which is the value of the property: in this case, “RESTful Web Services.” The assertion as a whole reads: “The book with ISBN 9780596529260 has a title of ‘RESTful Web Services.’”</p>\n<p>I didn’t make up the <code class=\"literal\">isbn:</code> URI space: it’s a standard way of addressing books as resources. I didn’t make up the <code class=\"literal\">dc:title</code> predicate, either. That comes from<a id=\"I_indexterm9_tt843\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt844\" class=\"indexterm\"></a> the <a class=\"ulink\" href=\"http://www.dublincore.org/documents/dcmi-terms/\" target=\"_top\">Dublin Core Metadata Initiative</a>. DCMI defines a set of useful predicates that apply to published works like books and weblogs. An automated client that understands the Dublin Core can scan RDF documents that use those terms, evaluate the assertions they contain, and even make logical deductions about the data.</p>\n<p><a class=\"xref\" href=\"ch09.html#rdfa\" title=\"Example&nbsp;9-4.&nbsp;An RDF assertion\">Example&nbsp;9-4</a> looks a lot like an XHTML snippet, because that’s what it is. There are a couple ways of representing RDF assertions, and I’ve chosen to show you <a class=\"ulink\" href=\"http://rdfa.info/about\" target=\"_top\">RDFa</a>, a microformat-like standard for embedding RDF in XHTML. RDF/XML is a more popular RDF representation format, but I think it makes RDF look more complicated than it is, and it’s difficult to integrate RDF/XML documents into the web. RDF/A documents can go into XHTML files, just like microformat documents. However, since RDFa takes some ideas from the unreleased XHTML 2 standard, a document that includes it won’t be valid XHTML for a while. A third way of representing RDF<a id=\"I_indexterm9_tt845\" class=\"indexterm\"></a> assertions is <a class=\"ulink\" href=\"http://research.talis.com/2005/erdf/wiki\" target=\"_top\">eRDF</a>, which results in valid XHTML.</p>\n<p>RDF in its generic form is the basis for the W3C’s Semantic Web project. On the human web, there are no standards for how we talk about the resources we link to. We describe resources in human language that’s difficult or impossible for machines to understand. RDF is a way of constraining human speech so that we talk about resources using a standard vocabulary—not one that machines “understand” natively, but one they can be programmed to understand. A computer program doesn’t understand the Dublin Core’s “dc:title” any more than it understands “title.” But if everyone agrees to use “dc:title,” we can program standard clients to reason about the Dublin Core in consistent ways.</p>\n<p class=\"keep-together\">Here’s the thing: I think microformats do a good job of adding semantics to the web we already have, and they add less complexity than RDF’s general subject-predicate-object form. I recommend using RDF only when you want interoperability with existing RDF processors, or are treating RDF as a general-purpose microformat for representing assertions about resources.</p>\n<p>One very popular use<a id=\"I_indexterm9_tt846\" class=\"indexterm\"></a> of RDF is <a class=\"ulink\" href=\"http://www.foaf-project.org/\" target=\"_top\">FOAF</a>, a way of representing information about human beings and the relationships between them.</p>\n<h2>Framework-Specific Serialization Formats</h2>\n<p>Media type: <code class=\"literal\">application/xml</code></p>\n<p>I’m talking<a id=\"I_indexterm9_tt847\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt848\" class=\"indexterm\"></a> here about informal XML vocabularies used by frameworks like Ruby’s ActiveRecord and Python’s Django to serialize database objects as XML. I gave an example back in <a class=\"xref\" href=\"ch07.html#user-xml\" title=\"Example&nbsp;7-4.&nbsp;An XML representation of a user account\">Example&nbsp;7-4</a>. It’s a simple data structure: a hash or a list of hashes.</p>\n<p>These representation formats are very convenient if you happen to be writing a service that gives you access to one. In Rails, you can just call <code class=\"function\">to_xml</code> <a id=\"I_indexterm9_tt849\" class=\"indexterm\"></a>on an ActiveRecord object or a list of such objects. The Rails serialization format is also useful if you’re not using Rails, but you want your service to be usable by ActiveResource clients. Otherwise, I don’t really recommend these formats, unless you’re just trying to get something up and running quickly (as I am in Chapters <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">7</a> and <a class=\"xref\" href=\"ch12.html\" title=\"Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services\">12</a>). The major downside of these formats is that they look like documents, but they’re really just serialized data structures. They never contain hypermedia links or forms.</p>\n<h2>Ad Hoc XHTML</h2>\n<p>Media type: <code class=\"literal\">application/xhtml+xml</code></p>\n<p>If none<a id=\"I_indexterm9_tt850\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt851\" class=\"indexterm\"></a> of the work that’s already been done fits your problem space... well, first,<a id=\"I_indexterm9_tt852\" class=\"indexterm\"></a> think again. Just as you should think again before deciding you can’t fit your resources into HTTP’s uniform interface. If you think your resources can’t be represented by stock HTML or Atom or RDF or JSON, there’s a good chance you haven’t looked at the problem in the right way.</p>\n<p>But it’s quite possible that your resources won’t fit any of the representation formats I’ve mentioned so far. Or maybe you can represent most of your resource state with XHTML plus some well-chosen microformats, but there’s still something missing. The next step is to consider creating your own microformat.</p>\n<p>The high-impact way of creating a microformat is to <a class=\"ulink\" href=\"http://microformats.org/wiki/process\" target=\"_top\">go through the microformat process</a>, hammer it out with other microformat enthusiasts, and get it published as an official microformat. This is most appropriate when lots of people are trying to represent the same kind of data. Ideally, you’re in a situation where the human web is littered with ad hoc HTML representations of the data, and where there are already a couple of big standards that can serve as a model for a more agile microformat. This is how the hCard <a id=\"I_indexterm9_tt853\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt854\" class=\"indexterm\"></a>and hCalendar microformats were developed. There were many people trying to put contact information and upcoming events on the human web, and preexisting standards<a id=\"I_indexterm9_tt855\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt856\" class=\"indexterm\"></a> (vCard and iCalendar) to steal ideas from. The representation of “places on a map” that I devised in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> might be a starting point for an official microformat. There are lots of mapping sites on the human web, and lots of heavyweight standards for representing GIS data. If I wanted to build a microformat, I’d have a lot of ideas to work from.</p>\n<p>The low-impact way of creating a microformat is to add semantic content to the XHTML you were going to write anyway. This is suitable for representation formats that no one else is likely to use, or as a starting point so you can get a real web service running while you’re going through the microformat process. The representation of the list of planets from <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> works better as an ad hoc set of semantics than as an official microformat. All it’s doing is saying that one particular list is a list of planets.</p>\n<p>The <a class=\"ulink\" href=\"http://microformats.org/wiki/Main_Page#Design_Patterns\" target=\"_top\">microformat design patterns</a> and <a class=\"ulink\" href=\"http://microformats.org/wiki/naming-principles\" target=\"_top\">naming principles</a> give a set of sensible general rules for adding semantics to HTML. Their advice is useful even if you’re not trying to create an official microformat. The semantics you choose for your “micromicroformat” won’t be standardized, but you can present them in a standard way: the way microformats do it. Here are some of the more useful patterns.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>If there’s an HTML tag that conveys the semantics you want, use it. To represent a set of key-value pairs, use the <code class=\"literal\">dl</code> tag. To represent a list, use one of the list tags. If nothing fits, use the <code class=\"literal\">span</code> or <code class=\"literal\">div</code> tag.</p></li>\n  <li class=\"listitem\"><p>Give a tag additional semantics by specifying its <code class=\"literal\">class</code> attribute. This is especially important for <code class=\"literal\">span</code> and <code class=\"literal\">div</code>, which have no real meaning on their own.</p></li>\n  <li class=\"listitem\"><p>Use the <code class=\"literal\">rel</code> attribute in a link to specify another resource’s relationship to this one. Use the <code class=\"literal\">rev</code> attribute to specify this page’s relationship to another one. If the relationship is symmetric, use <code class=\"literal\">rel</code>. See <a class=\"xref\" href=\"ch09.html#hypermedia\" title=\"Hypermedia Technologies\">Hypermedia Technologies</a>” later in this chapter for more on this.</p></li>\n  <li class=\"listitem\"><p>Consider providing an XMDP file that describes your custom values for <code class=\"literal\">class</code>, <code class=\"literal\">rel</code>, and <code class=\"literal\">rev</code>.</p></li>\n </ul>\n</div>\n<h2>Other XML Standards and Ad Hoc Vocabularies</h2>\n<p>Media type: <code class=\"literal\">application/xml</code></p>\n<p>In addition<a id=\"I_indexterm9_tt857\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt858\" class=\"indexterm\"></a> to XHTML, Atom, and SVG, there are a lot of specialized XML vocabularies I haven’t covered: MathML, OpenDocument, Chemical Markup Language, and so on. There are also specialized vocabularies you can use in RDF assertions, like Dublin Core and FOAF. A web service might serve any of these vocabularies as standalone representations, embed them into Atom feeds, or even wrap them in SOAP envelopes. If none of these work for you, you can define a custom XML vocabulary to represent your resource state, or maybe the parts that Atom doesn’t cover.</p>\n<p>Although I’ve presented this as the last resort, that’s certainly not the common view. People come up with custom XML vocabularies all the time: that’s how there got to be so many of them. Almost every real web service mentioned in this book exposes its representations in a custom XML vocabulary. Amazon S3, Yahoo!’s search APs, and the del.icio.us API all serve representations that use custom XML vocabularies, even though they could easily serve Atom or XHTML and reuse an existing vocabulary.</p>\n<p>Part of this is tech culture. The microformats idea is fairly new, and a custom XML vocabulary still looks more “official.” But this is an illusion. Unless you provide a schema definition for your vocabulary, your custom tags have exactly the same status as a custom value for the HTML “class” attribute. Even a definition does nothing but codify the vocabulary you made up: it doesn’t confer any legitimacy. Legitimacy can only come “from the consent of the governed”: from other people adopting your vocabulary.</p>\n<p>That said, there is a space for custom XML vocabularies. It’s usually easy to use XHTML instead of creating your own XML tags, but it’s not so easy when you need tags with a lot of custom attributes. In that situation, a custom XML vocabulary makes sense. All I ask is that you seriously think about whether you really need to define a new XML vocabulary for a given problem. It’s possible that in the future, people will err in the opposite direction, and create ad hoc microformats when they shouldn’t. Then I’ll urge caution before creating a microformat. But right now, the problem is too many ad hoc XML vocabularies.</p>\n<h2>Encoding Issues</h2>\n<p>It’s a global <a id=\"I_indexterm9_tt859\" class=\"indexterm\"></a>world (I actually heard someone say that once), and any service you expose must deal with the products of people who speak different languages from you and use different writing systems. You don’t have to understand all of these languages, but to handle multilingual data without mangling it, you do need to know something about character encodings: the conventions that let us represent human-readable text as strings of bytes.</p>\n<p>Every text file you’ve ever created has some <a id=\"I_indexterm9_tt860\" class=\"indexterm\"></a>character encoding, even though you probably never made a decision about which encoding to use (it’s usually a system property). In the United States the encoding is usually<a id=\"I_indexterm9_tt861\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt862\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt863\" class=\"indexterm\"></a> UTF-8, US-ASCII, or Windows-1252. In western Europe it might also be<a id=\"I_indexterm9_tt864\" class=\"indexterm\"></a> ISO 8859-1. The default for HTML on the web is ISO 8859-1, which is almost but not quite the same as Windows-1252. Japanese documents are commonly encoded with EUC-JP, Shift_JIS, or UTF-8. If you’re curious about what character encodings are used in different places, most web browsers list the encodings they understand. My web browser supports five different encodings for simplified Chinese, five for Hebrew, nine for the Cyrillic alphabet, and so on. Most of these encodings are mutually incompatible, even when they encode the same language. It’s insane!</p>\n<p>Fortunately there is a way out of this confusion. We as a species have come up with Unicode, a way of representing every human writing system. <a id=\"I_indexterm9_tt865\" class=\"indexterm\"></a>Unicode isn’t a character encoding, but there are two good encodings for it: UTF-8 (more efficient for alphabetic languages like English) and UTF-16 (more efficient for logographic languages like Japanese). Either of these encodings can handle text written in any combination of human languages. The best single decision you can make when handling multilingual data is to <span class=\"emphasis\"><em>keep all of your data in one of these encodings</em></span>: probably UTF-8 unless you live or do a lot of business in east Asia, then maybe UTF-16 with a byte-order mark.</p>\n<p>This might be as simple as making a decision when you start the project, or you may have to convert an existing database. You might have to install an encoding converter to work on incoming data, or write encoding detection code. (The <a class=\"ulink\" href=\"http://chardet.feedparser.org/\" target=\"_top\">Universal Encoding Detector</a> is<a id=\"I_indexterm9_tt866\" class=\"indexterm\"></a> an excellent autodetection library for Python.) It’s got a Ruby port, available as the <code class=\"literal\">chardet</code> gem. It might be easy or difficult. But once you’re keeping all of this data in one of the Unicode encodings, most of your problems will be over. When your clients send you data in a weird encoding, you’ll be able to convert it to your chosen UTF-* encoding. If they send data that specifies no format at all, you’ll be able to guess its encoding and convert it, or reject it as unintelligible.</p>\n<p>The other half of the equation is communicating with your clients: how do you tell them which encoding you’re using in your outgoing representations? Well, XML lets you specify a character encoding on the very first line:</p>\n<pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</pre>\n<p>All but one of my recommended representation formats is based on XML, so that solves most of the problem. But there is an encoding problem with that one outlier, and there’s a further problem in the relationship between XML and HTTP.</p>\n<div class=\"sect3\" title=\"XML and HTTP: Battle of the encodings\">\n <p>An XML <a id=\"I_indexterm9_tt867\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt868\" class=\"indexterm\"></a>document can and should define a character encoding in its first line, so that the client will know how to interpret the document. An HTTP response can and should specify a value for the <code class=\"literal\">Content-Type</code> response header, so that the client knows it’s being given an XML document and not some other kind. But the <code class=\"literal\">Content-type</code> can also specify a document character encoding with “charset,” and this encoding might conflict with what it actually says in the document.</p>\n <pre class=\"screen\">Content-Type: application/xml; charset=\"ebcdic-fr-297+euro\"\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</pre>\n <p>Who wins? Surprisingly, HTTP’s character encoding takes precedence over the encoding in the document itself.<sup>[<a id=\"id392066\" href=\"#ftn.id392066\" epub:type=\"noteref\" class=\"footnote\">29</a>]</sup>If the document says “UTF-8” and<a id=\"I_indexterm9_tt869\" class=\"indexterm\"></a> <code class=\"literal\">Content-Type</code> says “ebcdic-fr-297+euro,” then extended French EBCDIC it is. Almost no one expects this kind of surprise, and most programmers write code first and check the RFCs later. The result is that the character encoding, as specified in <code class=\"literal\">Content-Type</code>, tends to be unreliable. Some servers claim everything they serve is UTF-8, even though the actual documents say otherwise.</p>\n <p>When serving XML documents, I don’t recommend going out of your way to send a character encoding as part of <code class=\"literal\">Content-type</code>. You can do it if you’re absolutely sure you’ve got the right encoding, but it won’t do much good. What’s really important is that you specify a document encoding. (Technically you can do without a document encoding if you’re using UTF-8, or UTF-16 with a byte-order mark. But if you have that much control over the data, you should be able to specify a document encoding.) If you’re writing a web service client, be aware that any character encoding specified in <code class=\"literal\">Content-Type</code> may be incorrect. Use common sense to decide which encoding declaration to believe, rather than relying on a counterintuitive rule from an RFC a lot of people haven’t read.</p>\n <p>Another note: when you serve XML documents, you should serve them with a media type of <code class=\"literal\">application/xml</code>, not <code class=\"literal\">text/xml</code>. If you serve a document as<a id=\"I_indexterm9_tt870\" class=\"indexterm\"></a> <code class=\"literal\">text/xml</code> with no <code class=\"literal\">charset</code>, the correct client behavior is to totally ignore the encoding specified in the XML document and interpret the XML document as US-ASCII.<sup>[<a id=\"id392192\" href=\"#ftn.id392192\" class=\"footnote\">30</a>]</sup>Avoid these complications altogether by always serving XML as <code class=\"literal\">application/xml</code>, and always specifying an encoding in the first line of the XML documents you generate.</p>\n</div>\n<div class=\"sect3\" title=\"The character encoding of a JSON document\">\n <p>I didn’t mention plain text in my list of recommended <a id=\"I_indexterm9_tt871\" class=\"indexterm\"></a>representation formats, mostly because plain text is not a structured format, but also because the lack of structure means there’s no way to specify the character encoding of “plain text.” JSON is a way of structuring plain text, but it doesn’t solve the character encoding problem. Fortunately, you don’t have to solve it yourself: just follow the standard convention.</p>\n <p>RFC 4627 states that a JSON file must contain Unicode characters, encoded in one of the UTF-* encodings. Practically, this means either UTF-8, or UTF-16 with a byte-order mark. Plain US-ASCII will also work, since ASCII text happens to be valid UTF-8. Given this restriction, a client can determine the character encoding of a JSON document by looking at the first four bytes (the details are in RFC 4627), and there’s no need to specify an explicit encoding. You should follow this convention whenever you serve plain text, not just JSON.<a id=\"I_indexterm9_tt872\" class=\"indexterm\"></a></p>\n</div>",
      "slug" : "representation-formats"
    }, {
      "title" : "Prepackaged Control Flows",
      "type" : "page",
      "htmlContent" : "<p>Not only does <a id=\"ch09_prepackagedcontrolflows\" class=\"indexterm\"></a><a id=\"ch09_controlflows\" class=\"indexterm\"></a>HTTP have a uniform interface, it has a standard set of response codes—possible ways a request can turn out. Though resources can be anything at all, they usually fall into a few broad categories: database tables and their rows, publications and the articles they publish, and so on. When you know what sort of resource a service exposes, you can often anticipate the possible responses to an HTTP request without knowing too much about the resource.</p>\n<p>In one sense the standard HTTP response codes (see <a class=\"xref\" href=\"apb.html\" title=\"Appendix&nbsp;B.&nbsp;The HTTP Response Code Top 42\">Appendix&nbsp;B</a>) are just a suggested control flow: a set of instructions about what to do when you get certain kinds of requests. But that’s pretty vague advice, and we can do better. Here I present several prepackaged control flows: patterns that bring together advice about resource design, representation formats, and response codes to help you design real-world services.</p>\n<h2>General Rules</h2>\n<p>These snippets of control flow can be applied to almost any service. I can make very general statements about them because they have nothing to do with the actual nature of your resources. All I’m doing here is picking out a few important HTTP status codes and telling you when to use them.</p>\n<p>You should be able to implement these rules as common code that runs before your normal request handling. In <a class=\"xref\" href=\"ch07.html#application-rb-filters\" title=\"Example&nbsp;7-11.&nbsp;application.rb continued: filters\">Example&nbsp;7-11</a> I implemented most of them as Rails filters that run before certain actions, or as Ruby methods that short-circuit a request unless a certain condition is met.</p>\n<p>If the client tries to do something without providing the correct authorization, send a response code of 401 (“Unauthorized”) along with instructions for correctly formatting the <code class=\"literal\">Authorization</code> header.</p>\n<p>If the client tries to access a URI that doesn’t correspond to any existing resource, send a response code of 404 (“Not Found”). The only possible exception is when the client is trying to PUT a new resource to that URI.</p>\n<p>If the client tries to use a part of the uniform interface that a resource doesn’t support, send a response code of 405 (“Method Not Allowed”). This is the proper response when the client tries to DELETE a read-only resource.</p>\n<h2>Database-Backed Control Flow</h2>\n<p>In many web <a id=\"ch09_databasescontrol\" class=\"indexterm\"></a>services there’s a strong connection between a resource and something in a <a id=\"I_indexterm9_tt874\" class=\"indexterm\"></a>SQL database: a row in the database, a table, or the database as a whole. These services are so common that entire frameworks like Rails are oriented to making them easy to write. Since these services are similar in design, it makes sense that their control flows should also be similar.</p>\n<p>For instance, if an incoming request contains a nonsensical representation, the proper response is almost certainly<a id=\"I_indexterm9_tt875\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt876\" class=\"indexterm\"></a> <a id=\"I_indexterm9_tt877\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt878\" class=\"indexterm\"></a>415 (“Unsupported Media Type”) or 400 (“Bad Request”). It’s up to the application to decide which representations make sense, but the HTTP standard is pretty strict about the possible responses to “nonsensical representation.”</p>\n<p>With this in mind, I’ve devised a standard control flow for the uniform interface in a database-backed application. It runs on top of the general rules I mentioned in the previous section. I used this control flow in the controller code throughout <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>. Indeed, if you look at the code in that chapter you’ll see that I implemented the same ideas multiple times. There’s space in the REST ecosystem for a higher-level framework that implements this control flow, or some improved version of it.</p>\n<div class=\"sect3\" title=\"GET\">\n <p>If the resource<a id=\"I_indexterm9_tt879\" class=\"indexterm\"></a> can be identified, send a representation along with a response code of 200 (“OK”). Be sure to support conditional GET!</p>\n</div>\n<div class=\"sect3\" title=\"PUT\">\n <p>If the resource<a id=\"I_indexterm9_tt880\" class=\"indexterm\"></a> already exists, parse the representation and turn it into a series of changes to the state of this resource. If the changes would leave the resource in an incomplete or inconsistent state, send a response code of 400 (“Bad Request”).</p>\n <p>If the changes would cause the resource state to conflict with some other resource, send a response code of <a id=\"I_indexterm9_tt881\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt882\" class=\"indexterm\"></a>409 (“Conflict”). My social bookmarking service sends a response code of 409 if you try to change your username to a name that’s already taken.</p>\n <p>If there are no problems with the proposed changes, apply them to the existing resource. If the changes in resource state mean that the resource is now available at a different URI, send a response code of <a id=\"I_indexterm9_tt883\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt884\" class=\"indexterm\"></a>301 (“Moved Permanently”) and include the new URI in the <code class=\"literal\">Location</code> header. Otherwise, send a response code of<a id=\"I_indexterm9_tt885\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt886\" class=\"indexterm\"></a> 200 (“OK”). Requests to the old URI should now result in a response code of 301 (“Moved Permanently”), <a id=\"I_indexterm9_tt887\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt888\" class=\"indexterm\"></a>404 (“Not Found”), or<a id=\"I_indexterm9_tt889\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt890\" class=\"indexterm\"></a> 410 (“Gone”).<a id=\"I_indexterm9_tt891\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt892\" class=\"indexterm\"></a></p>\n <p>There are two ways to handle a PUT request to a URI that doesn’t correspond to any resource. You can return a status code of 404 (“Not Found”), or you can create a resource at that URI. If you want to create a new resource, parse the representation and use it to form the initial resource state. Send a response code of <a id=\"I_indexterm9_tt893\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt894\" class=\"indexterm\"></a>201 (“Created”). If there’s not enough information to create a new resource, send a response code of 400 (“Bad Request”).</p>\n</div>\n<div class=\"sect3\" title=\"POST for creating a new resource\">\n <p>Parse the representation, <a id=\"I_indexterm9_tt895\" class=\"indexterm\"></a>pick an appropriate URI, and create a new resource there. Send a response code of 201 (“Created”) and include the URI of the new resource in the <code class=\"literal\">Location</code> header. If there’s not enough information provided to create the resource, send a response code of 400 (“Bad Request”). If the provided resource state would conflict with some existing resource, send a response code of 409 (“Conflict”), and include a <code class=\"literal\">Location</code> header that points to the problematic resource.</p>\n</div>\n<div class=\"sect3\" title=\"POST for appending to a resource\">\n <p>Parse the representation. If it doesn’t make sense, send a response code of 400 (“Bad Request”). Otherwise, modify the resource state so that it incorporates the information in the representation. Send a response code of 200 (“OK”).</p>\n</div>\n<div class=\"sect3\" title=\"DELETE\">\n <p>Send a response code of 200 (“OK”).<a id=\"I_indexterm9_tt896\" class=\"indexterm\"></a></p>\n</div>\n<h2>The Atom Publishing Protocol</h2>\n<p>Earlier I <a id=\"ch09_hahaha\" class=\"indexterm\"></a>described Atom as an XML vocabulary that describes the semantics of publishing: authors, summaries, categories, and so on. The <a class=\"ulink\" href=\"http://tools.ietf.org/wg/atompub/\" target=\"_top\">Atom Publishing Protocol</a> (APP) defines a set of resources that capture the <span class=\"emphasis\"><em>process</em></span> of publishing: posting a story to a site, editing it, assigning it to a category, deleting it, and so on.</p>\n<p>The obvious applications for the APP are those for Atom and online publishing in general: weblogs, photo albums, content management systems, and the like. The APP defines four kinds of resources, specifies some of their behavior under the uniform interface, and defines the representation documents they should accept and serve. It says nothing about URI design or what data should go into the documents: that’s up to the individual application.</p>\n<p>The APP takes HTTP’s uniform interface and puts a higher-level uniform interface on top of it. Many kinds of applications can conform to the APP, and a generic APP client should be able to access all of them. Specific applications can extend the APP by exposing additional resources, or making the APP resources expose more of HTTP’s uniform interface, but they should all support the minimal features mentioned in the APP standard.</p>\n<p>The ultimate end of the APP is to serve Atom documents to the end user. Of course, the Atom documents are just the representations of underlying resources. The APP defines what those resources are. It defines two resources that correspond to Atom documents, and two that help the client find and modify APP resources.</p>\n<div class=\"sect3\" title=\"Collections\">\n <p>An APP<a id=\"I_indexterm9_tt897\" class=\"indexterm\"></a> <em class=\"firstterm\">collection</em> is a resource whose representation is an Atom feed. The document in <a class=\"xref\" href=\"ch09.html#sample-atom\" title=\"Example&nbsp;9-2.&nbsp;A simple Atom feed containing one entry\">Example&nbsp;9-2</a> has everything it takes to be a representation of an Atom collection. There’s no necessary difference between an Atom feed you subscribe to in your feed reader, and an Atom feed that you manipulate with an APP client. A collection is just a list or grouping of pieces of data: what the APP <a id=\"I_indexterm9_tt898\" class=\"indexterm\"></a>calls <em class=\"firstterm\">members</em>. The APP is heavily oriented toward manipulating “collection” type resources.</p>\n <p>The APP defines a collection’s response to GET and POST requests. GET returns a representation: the Atom feed. POST adds a new member to the collection, which (usually) shows up as a new entry in the feed. Maybe you can also DELETE a collection, or modify its settings with a PUT request. The APP doesn’t cover that part: it’s up to your application.</p>\n</div>\n<div class=\"sect3\" title=\"Members\">\n <p>An APP collection is a collection <span class=\"emphasis\"><em>of</em></span> members. A member corresponds roughly to an entry in an Atom feed: a weblog entry, a news article, or a bookmark. But a member can also be a picture, song, movie, or Word document: a binary format that can’t be represented in XML as part of an Atom document.</p>\n <p>A client creates a member inside a collection by POSTing a representation of the member to the collection URI. This pattern should be familiar to you by now: the member is created as a subordinate resource of the collection. The server assigns the new member a URI. The response to the POST request has a response code of 201 (“Created”), and a <code class=\"literal\">Location</code> header that lets the client know where to find the new resource.</p>\n <p><a class=\"xref\" href=\"ch09.html#sample-atom-entry\" title=\"Example&nbsp;9-5.&nbsp;A sample Atom entry document, suitable for POSTing to a collection\">Example&nbsp;9-5</a> shows an Atom entry document: a representation of a member. This is the same sort of <code class=\"literal\">entry</code> tag I showed you in <a class=\"xref\" href=\"ch09.html#sample-atom\" title=\"Example&nbsp;9-2.&nbsp;A simple Atom feed containing one entry\">Example&nbsp;9-2</a>, presented as a standalone XML document. POSTing this document to a collection creates a new member, which starts showing up as a child of the collection’s <code class=\"literal\">feed</code> tag. A document like this one might be how the <code class=\"literal\">entry</code> tag in <a class=\"xref\" href=\"ch09.html#sample-atom\" title=\"Example&nbsp;9-2.&nbsp;A simple Atom feed containing one entry\">Example&nbsp;9-2</a> got where it is today.</p>\n <div class=\"example\">\n  <a id=\"sample-atom-entry\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;9-5.&nbsp;A sample Atom entry document, suitable for POSTing to a collection\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;entry&gt;\n &lt;title&gt;New Resource Will Respond to PUT, City Says&lt;/title&gt;\n &lt;summary&gt;\n   After long negotiations, city officials say the new resource\n   being built in the town square will respond to PUT. Earlier\n   criticism of the proposal focused on the city's plan to modify the \n   resource through overloaded POST.\n &lt;/summary&gt;\n &lt;category scheme=\"http://www.example.com/categories/RestfulNews\" \n           term=\"local\" label=\"Local news\" /&gt;\n&lt;/entry&gt;</pre>\n  </div>\n </div>\n</div>\n<div class=\"sect3\" title=\"Service document\">\n <p>This vaguely-named type of resource<a id=\"I_indexterm9_tt899\" class=\"indexterm\"></a> is just a grouping of collections. A typical move is to serve a single service document, listing all of your collections, as your service’s “home page.” A service document is an XML document written using a particular vocabulary, and its media type is <code class=\"literal\">application/atomserv+xml</code> (see <a class=\"xref\" href=\"ch09.html#sample-service-document\" title=\"Example&nbsp;9-6.&nbsp;A representation of a service document that describes three collections\">Example&nbsp;9-6</a>).</p>\n <p><a class=\"xref\" href=\"ch09.html#sample-service-document\" title=\"Example&nbsp;9-6.&nbsp;A representation of a service document that describes three collections\">Example&nbsp;9-6</a> shows a representation of a typical service document. It describes three collections. One of them is a weblog called “RESTful news,” which accepts a POST request if the representation is an Atom entry document like the one in <a class=\"xref\" href=\"ch09.html#sample-atom-entry\" title=\"Example&nbsp;9-5.&nbsp;A sample Atom entry document, suitable for POSTing to a collection\">Example&nbsp;9-5</a>. The other two are personal photo albums, which accept a POST request if the representation is an image file.</p>\n <div class=\"example\">\n  <a id=\"sample-service-document\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;9-6.&nbsp;A representation of a service document that describes three collections\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"screen\">&lt;?xml version=\"1.0\" encoding='utf-8'?&gt;\n&lt;service xmlns=\"http://purl.org/atom/app#\"\n         xmlns:atom=\"http://www.w3.org/2005/Atom\"&gt;\n  &lt;workspace&gt;\n    &lt;atom:title&gt;Weblogs&lt;/atom:title&gt;\n    &lt;collection href=\"http://www.example.com/RestfulNews\"&gt;\n      &lt;atom:title&gt;RESTful News&lt;/atom:title&gt;\n      &lt;categories href=\"http://www.example.com/categories/RestfulNews\" /&gt;\n    &lt;/collection&gt;\n  &lt;/workspace&gt;\n\n  &lt;workspace&gt;\n    &lt;atom:title&gt;Photo galleries&lt;/atom:title&gt;\n    &lt;collection\n        href=\"http://www.example.com/samruby/photos\" &gt;\n      &lt;atom:title&gt;Sam's photos&lt;/atom:title&gt;\n      &lt;accept&gt;image/*&lt;/accept&gt;\n      &lt;categories href=\"http://www.example.com/categories/samruby-photo\" /&gt;\n    &lt;/collection&gt;\n\n    &lt;collection\n        href=\"http://www.example.com/leonardr/photos\" &gt;\n      &lt;atom:title&gt;Leonard's photos&lt;/atom:title&gt;\n      &lt;accept&gt;image/*&lt;/accept&gt;\n      &lt;categories href=\"http://www.example.com/categories/leonardr-photo\" /&gt;\n    &lt;/collection&gt;\n  &lt;/workspace&gt;\n&lt;/service&gt;</pre>\n  </div>\n </div>\n <p>How do I know what kind of POST requests a collection will accept? From the <code class=\"literal\">accept</code> tags. The <code class=\"literal\">accept</code> tag works something like the HTTP <code class=\"literal\">Accept</code> header, only in reverse. The <code class=\"literal\">Accept</code> header is usually sent by the client with a GET request, to tell the server which representation formats the client understands. The <code class=\"literal\">accept</code> tag is the APP server’s way of telling the client which incoming representations a collection will accept as part of a POST request that creates a new member.</p>\n <p>My two photo gallery collections specify an <code class=\"literal\">accept</code> of <code class=\"literal\">image/*</code>. Those collections will only accept POST requests where the representation is an image. On the other hand, the RESTful News weblog doesn’t specify an <code class=\"literal\">accept</code> tag at all. The APP default is to assume that a collection only accepts POST requests when the representation is an Atom entry document (like the one in <a class=\"xref\" href=\"ch09.html#sample-atom-entry\" title=\"Example&nbsp;9-5.&nbsp;A sample Atom entry document, suitable for POSTing to a collection\">Example&nbsp;9-5</a>). The <code class=\"literal\">accept</code> tag defines what the collections are for: the weblog is for textual data, and the photo collections are for images.</p>\n <p>The other important thing about a service document is the <code class=\"literal\">categories</code> tag, which links to a “category document” resource. The category document says what categories are allowed.</p>\n <p>The APP doesn’t say much about service documents. It specifies their representation format, and says that they must serve a representation in response to GET. It doesn’t specify how service documents get on the server in the first place. If you write an APP application you can hardcode your service documents in advance, or you can make it possible to create new ones by POSTing to some new resource not covered by the APP. You can expose them as static files, or you can make them respond to PUT and DELETE. It’s up to you.</p>\n <div class=\"tip\" title=\"Tip\">\n  <h3 class=\"title\">Tip</h3>\n  <p>As you can see from <a class=\"xref\" href=\"ch09.html#sample-service-document\" title=\"Example&nbsp;9-6.&nbsp;A representation of a service document that describes three collections\">Example&nbsp;9-6</a>, a service document’s representation doesn’t just describe collections: it groups collections into <em class=\"firstterm\">workspaces</em>. When I wrote that representation I put the weblog in a workspace of its own, and grouped the photo galleries into a second workspace. The APP standard devotes some time to workspaces, but I’m going to pass over them, because the APP doesn’t define workspaces <span class=\"emphasis\"><em>as resources</em></span>. They don’t have their own URIs, and they only exist as elements in the representation of a service document. You can expose workspaces as resources if you want. The APP doesn’t prohibit it, but it doesn’t tell you how to do it, either.</p>\n </div>\n</div>\n<div class=\"sect3\" title=\"Category documents\">\n <p>APP members (which correspond to Atom elements) can be put <a id=\"I_indexterm9_tt900\" class=\"indexterm\"></a>into categories. In <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, I represented a bookmark’s tags with Atom categories. The Atom entry described in <a class=\"xref\" href=\"ch09.html#sample-atom-entry\" title=\"Example&nbsp;9-5.&nbsp;A sample Atom entry document, suitable for POSTing to a collection\">Example&nbsp;9-5</a> put the entry into a category called “local.” Where did that category come from? Who says which categories exist for a given collection? This is the last big question the APP answers.</p>\n <p>The Atom entry document in <a class=\"xref\" href=\"ch09.html#sample-atom-entry\" title=\"Example&nbsp;9-5.&nbsp;A sample Atom entry document, suitable for POSTing to a collection\">Example&nbsp;9-5</a> gave its category a “scheme” of <span class=\"emphasis\"><em>http://www.example.com/categories/RestfulNews</em></span>. The representation of the RESTful News collection, in the service document, gave that same URI in its <code class=\"literal\">categories</code> tag. That URI points to the final APP resource: a category document (see <a class=\"xref\" href=\"ch09.html#sample-category-document\" title=\"Example&nbsp;9-7.&nbsp;A representation of a category document\">Example&nbsp;9-7</a>). A category document lists the category vocabulary for a particular APP collection. Its media type is <code class=\"literal\">application/atomcat+xml</code>.</p>\n <p class=\"keep-together\"><a class=\"xref\" href=\"ch09.html#sample-category-document\" title=\"Example&nbsp;9-7.&nbsp;A representation of a category document\">Example&nbsp;9-7</a> shows a representation of the category document for the collection “RESTful News.” This category document defines three categories: “local,” “international,” and “lighterside,” which can be referenced in Atom <code class=\"literal\">entry</code> entities like the one in <a class=\"xref\" href=\"ch09.html#sample-atom-entry\" title=\"Example&nbsp;9-5.&nbsp;A sample Atom entry document, suitable for POSTing to a collection\">Example&nbsp;9-5</a>.</p>\n <div class=\"example\">\n  <a id=\"sample-category-document\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;9-7.&nbsp;A representation of a category document\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"screen\">&lt;?xml version=\"1.0\" ?&gt;\n&lt;app:categories\n     xmlns:app=\"http://purl.org/atom/app#\"\n     xmlns=\"http://www.w3.org/2005/Atom\"\n     scheme=\"http://www.example.com/categories/RestfulNews\"\n     fixed=\"no\"&gt;\n &lt;category term=\"local\" label=\"Local news\"/&gt;\n &lt;category term=\"international\" label=\"International news\"/&gt;\n &lt;category term=\"lighterside\" label=\"The lighter side of REST\"/&gt;\n&lt;/app:categories&gt;</pre>\n  </div>\n </div>\n <p>The scheme is not fixed, meaning that it’s OK to publish members to the collection even if they belong to categories not listed in this document. This document might be used in an end-user application to show a selectable list of categories for a new “RESTful news” story.</p>\n <p>As with service documents, the APP defines the representation format for a category document, but says nothing about how category documents are created, modified, or destroyed. It only defines GET on the category document resource. Any other operations (like automatically modifying the category document when someone files an entry under a new category) are up to you to define.</p>\n</div>\n<div class=\"sect3\" title=\"Binary documents as APP members\">\n <p>There’s one important wrinkle<a id=\"I_indexterm9_tt901\" class=\"indexterm\"></a> I’ve glossed over. It has to do with the “photo gallery” collections I described in <a class=\"xref\" href=\"ch09.html#sample-service-document\" title=\"Example&nbsp;9-6.&nbsp;A representation of a service document that describes three collections\">Example&nbsp;9-6</a>. I said earlier that a client can create a new member in a photo gallery by POSTing an image file to the collection. But an image file can’t go into an Atom feed: it’s a binary document. What exactly happens when a client POSTs a binary document to an APP collection? What’s in those photo galleries, really?</p>\n <p>Remember that a resource can have more than one representation. Each photo I upload to a photo collection has two representations. One representation is the binary photo, and the other is an XML document containing metadata. The XML document is an Atom entry, the same as the news item in <a class=\"xref\" href=\"ch09.html#sample-atom-entry\" title=\"Example&nbsp;9-5.&nbsp;A sample Atom entry document, suitable for POSTing to a collection\">Example&nbsp;9-5</a>, and that’s the data that shows up in the Atom feed.</p>\n <p>Here’s an example. I POST a JPEG file to my “photo gallery” collection, like so:</p>\n <pre class=\"screen\">POST /leonardr/photos HTTP/1.1\nHost: www.example.com\nContent-type: image/jpeg\nContent-length: 62811\nSlug: A picture of my guinea pig\n\n[JPEG file goes here]</pre>\n <p>The <code class=\"literal\">Slug</code> is a custom HTTP header defined by the APP, which lets me specify a title for the picture while uploading it. The slug can show up in several pieces of resource state, as you’ll see in a bit.</p>\n <p>The HTTP response comes back as I described it in <a class=\"xref\" href=\"ch09.html#app-members\" title=\"Members\">Members</a>” earlier in this chapter. The response code is 201 and the <code class=\"literal\">Location</code> header gives me the URI of the newly created APP member.</p>\n <pre class=\"screen\">201 Created\nLocation: http://www.example.com/leonardr/photos/my-guinea-pig.atom</pre>\n <p>But what’s at the other end of the URI? Not the JPEG file I uploaded, but an Atom entry document describing and linking to that file:</p>\n <pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;entry&gt;\n &lt;title&gt;A picture of my guinea pig&lt;/title&gt;\n &lt;updated&gt;2007-01-24T11:52:29Z&lt;/updated&gt;\n &lt;id&gt;urn:f1ef2e50-8ec8-0129-b1a7-003065546f18&lt;/id&gt;\n &lt;summary&gt;&lt;/summary&gt;\n &lt;link rel=\"edit-media\" type=\"image/jpeg\"\n       href=\"http://www.example.com/leonardr/photos/my-guinea-pig.jpg\" /&gt;\n&lt;/entry&gt;</pre>\n <p>The actual JPEG I uploaded is at the other end of that <code class=\"literal\">link</code>. I can GET it, of course, and I can PUT to it to overwrite it with another image. My POST created a new “member” resource, and my JPEG is a representation of some of its resource state. But there’s also this other representation of resource state: the metadata. These other elements of resource state include:</p>\n <div class=\"itemizedlist\">\n  <ul class=\"itemizedlist\">\n   <li class=\"listitem\"><p>The title, which I chose (the server decided to use my <code class=\"literal\">Slug</code> as the title) and can change later.</p></li>\n   <li class=\"listitem\"><p>The summary, which starts out blank but I can change.</p></li>\n   <li class=\"listitem\"><p>The “last update” time, which I sort of chose but can’t change arbitrarily.</p></li>\n   <li class=\"listitem\"><p>The URI to the image representation, which the server chose for me based on my <code class=\"literal\">Slug</code>.</p></li>\n   <li class=\"listitem\"><p>The unique ID, which the server chose without consulting me at all.</p></li>\n  </ul>\n </div>\n <p>This metadata document can be included in an Atom feed: I’ll see it in the representation of the “photo gallery” collection. I can also modify this document and PUT it back to http://www.example.com/leonardr/photos/my-guinea-pig.atom to change the resource state. I can specify myself as the <code class=\"literal\">author</code>, add categories, change the title, and so on. If I get tired of having this member in the collection, I can delete it by sending a DELETE request to either of its URIs.</p>\n <p>That’s how the APP handles photos and other binary data as collection members. It splits the representation of the resource into two parts: the binary part that can’t go into an Atom feed and the metadata part that can. This works because the metadata of publishing (categories, summary, and so on) applies to photos and movies just as easily as to news articles and weblog entries.</p>\n <div class=\"tip\" title=\"Tip\">\n  <h3 class=\"title\">Tip</h3>\n  <p>If you read the APP standard (which you should, since this section doesn’t cover everything), you’ll see that it describes this behavior in terms of two different resources: a “Media Link Entry,” whose representation is an Atom document, and a “Media Resource,” whose representation is a binary file. I’ve described one resource that has two representations. The difference is purely philosophical and has no effect on the actual HTTP requests and responses.</p>\n </div>\n</div>\n<div class=\"sect3\" title=\"Summary\">\n <p>That’s a fairly involved workflow, and I haven’t even covered everything that the APP specifies, but the APP is just a well-thought-out way of handling a common web service problem: the list/feed/collection that keeps having items/elements/members added to it. If your problem fits this domain, it’s easier to use the APP design—and get the benefits of existing client support—than to reinvent something similar (see <a class=\"xref\" href=\"ch09.html#table_9_1\" title=\"Table&nbsp;9-1.&nbsp;APP resources and their methods\">Table&nbsp;9-1</a>).<a id=\"I_indexterm9_tt902\" class=\"indexterm\"></a></p>\n <div class=\"table\">\n  <a id=\"table_9_1\"></a>\n  <div class=\"table-title\">\n   Table&nbsp;9-1.&nbsp;APP resources and their methods\n  </div>\n  <div class=\"table-contents\">\n   <table style=\"border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; \">\n    <colgroup>\n     <col>\n     <col>\n     <col>\n     <col>\n     <col>\n    </colgroup>\n    <thead>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">&nbsp;</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">GET</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">POST</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">PUT</td>\n      <td style=\"border-bottom: 0.5pt solid ; \">DELETE</td>\n     </tr>\n    </thead>\n    <tbody>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Service document</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Return a<a id=\"I_indexterm9_tt903\" class=\"indexterm\"></a> representation (XML)</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Undefined<a id=\"I_indexterm9_tt904\" class=\"indexterm\"></a></td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Undefined<a id=\"I_indexterm9_tt905\" class=\"indexterm\"></a></td>\n      <td style=\"border-bottom: 0.5pt solid ; \">Undefined<a id=\"I_indexterm9_tt906\" class=\"indexterm\"></a></td>\n     </tr>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Category document</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Return a representation (XML)</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Undefined</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Undefined</td>\n      <td style=\"border-bottom: 0.5pt solid ; \">Undefined</td>\n     </tr>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Collection</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Return a representation (Atom feed)</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Create a new member</td>\n      <td style=\"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; \">Undefined</td>\n      <td style=\"border-bottom: 0.5pt solid ; \">Undefined</td>\n     </tr>\n     <tr>\n      <td style=\"border-right: 0.5pt solid ; \">Member</td>\n      <td style=\"border-right: 0.5pt solid ; \">Return the representation identified by this URI. (This is usually an Atom entry document, but it might be a binary file.)</td>\n      <td style=\"border-right: 0.5pt solid ; \">Undefined</td>\n      <td style=\"border-right: 0.5pt solid ; \">Update the representation identified by this URI</td>\n      <td>Delete the member</td>\n     </tr>\n    </tbody>\n   </table>\n  </div>\n </div>\n</div>\n<h2>GData</h2>\n<p>I said<a id=\"I_indexterm9_tt907\" class=\"indexterm\"></a> earlier that the Atom Publishing Protocol defines only a few resources and only a few operations on those resources. It leaves a lot of space open for extension. One extension is <a class=\"ulink\" href=\"http://code.google.com/apis/gdata\" target=\"_top\">Google’s GData</a>, which adds a new kind of resource and some extras like an authorization mechanism. As of the time of writing, the Google properties Blogger, Google Calendar,<a id=\"I_indexterm9_tt908\" class=\"indexterm\"></a> Google Code Search, and Google Spreadsheets all expose RESTful web service interfaces. In fact, all four expose the <span class=\"emphasis\"><em>same</em></span> interface: the Atom Publishing Protocol with the GData extensions.</p>\n<p>Unless you work for Google, you probably won’t create any services that expose the precise GData interface, but you may encounter GData from the client side. It’s also useful to see how the APP can be extended to handle common cases. See how Google used the APP as a building block, and you’ll see how you can do the same thing.</p>\n<div class=\"sect3\" title=\"Querying collections\">\n <p>The biggest change GData makes is to expose a new kind of resource: the list of search results. The APP says what happens when you send a GET request to a collection’s URI. You get a representation of some of the members in the collection. The APP doesn’t say anything about finding specific subsets of the collection: finding members older than a certain date, written by a certain author, or filed under a certain category. It doesn’t specify how to do full-text search of a member’s text fields. GData fills in these blanks.</p>\n <p>GData takes every APP collection and exposes an infinite number of additional resources that slice it in various ways. Think back to the “RESTful News” APP collection I showed in <a class=\"xref\" href=\"ch09.html#sample-atom\" title=\"Example&nbsp;9-2.&nbsp;A simple Atom feed containing one entry\">Example&nbsp;9-2</a>. The URI to that collection was <span class=\"emphasis\"><em>http://www.example.com/RestfulNews</em></span>. If that collection were exposed through a GData interface, rather than just an APP interface, the following URIs would also work:</p>\n <div class=\"itemizedlist\">\n  <ul class=\"itemizedlist\">\n   <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/RestfulNews?q=stadium</em></span>: A subcollection of the members where the content contains the word “stadium.”</p></li>\n   <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/RestfulNews/-/local</em></span>: A subcollection of the members categorized as “local.”</p></li>\n   <li class=\"listitem\"><p><span class=\"emphasis\"><em>http://www.example.com/RestfulNews?author=Tom%20Servo&amp;max-results=50</em></span>: At most 50 of the members where the author is “Tom Servo.”</p></li>\n  </ul>\n </div>\n <p>Those are just three of the search possibilities GData exposes. (For a complete list, see <a class=\"ulink\" href=\"http://code.google.com/apis/gdata/reference.html\" target=\"_top\">the GData developer’s guide</a>. Note that not all GData applications implement all query mechanisms.) Search results are usually represented as Atom feeds. The feed contains a <code class=\"literal\">entry</code> element for every member of the collection that matched the query. It also contains OpenSearch elements (q.v.) that specify how many members matched the query, and how many members fit on a page of search results.</p>\n</div>\n<div class=\"sect3\" title=\"Data extensions\">\n <p>I mentioned earlier that an Atom feed can contain markup from arbitrary other XML namespaces. In fact, I just said that GData search results include elements from the OpenSearch namespace. GData also defines a number of new XML entities in its own “gd” namespace, for representing domain-specific data from the Google web services.</p>\n <p>Consider an event in the Google Calendar service. The collection is someone’s calendar and the member is the event itself. This member probably has the typical Atom fields: an author, a summary, a “last updated” date. But it’s also going to have calendar-specific data. When does the event take place? Where will it happen? Is it a one-time event or does it recur?</p>\n <p>Google Calendar’s GData API puts this data in its Atom feeds, using tags like <code class=\"literal\">gd:when</code>, <code class=\"literal\">gd:who</code>, and <code class=\"literal\">gd:recurrence</code>. If the client understands Google Calendar’s extensions it can act as a calendar client. If it only understands the APP, it can act as a general APP client. If it only understands the basic Atom feed format, it can treat the list of events as an Atom feed.</p>\n</div>\n<h2>POST Once Exactly</h2>\n<p>POST <a id=\"ch09_POST\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt909\" class=\"indexterm\"></a>requests are the fly in the ointment that is reliable HTTP. GET, PUT, and DELETE requests can be resent if they didn’t go through the first time, because of the restrictions HTTP places on those methods. GET requests have no serious side effects, and PUT and DELETE have the same effect on resource state whether they’re sent once or many times. But a POST request can do anything at all, and sending a POST request twice will probably have a different effect from sending it once. Of course, if a service committed to accepting only POST requests whose actions were safe or idempotent, it would be easy to make reliable HTTP requests to that service.</p>\n<p>POST Once Exactly (POE) is a way of making HTTP POST idempotent, like PUT and DELETE. If a resource supports Post Once Exactly, then it will only respond successfully to POST once over its entire lifetime. All subsequent POST requests will give a response code of <a id=\"I_indexterm9_tt910\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt911\" class=\"indexterm\"></a>405 (“Method Not Allowed”). A POE resource is a one-off resource exposed for the purpose of handling a single POST request.</p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>POE was defined by <a id=\"I_indexterm9_tt912\" class=\"indexterm\"></a>Mark Nottingham in an IETF draft that expired in 2005. I think POE was a little ahead of its time, and if real services start implementing it, there could be another draft.</p>\n <p>You can see the original standard at <a class=\"ulink\" href=\"http://www.mnot.net/drafts/draft-nottingham-http-poe-00.txt\" target=\"_top\">http://www.mnot.net/drafts/draft-nottingham-http-poe-00.txt</a>.</p>\n</div>\n<p>Think of a “weblog” resource that responds to POST by creating a new weblog entry. How would we change this design so that no resource responds to POST more than once? Clearly the weblog can’t expose POST anymore, or there could only ever be one weblog entry. Here’s how POE does it. The client sends a GET or HEAD request to the “weblog” resource, and the response includes the special <code class=\"literal\">POE</code> header:</p>\n<pre class=\"screen\">HEAD /weblogs/myweblog HTTP/1.1\nHost: www.example.com\nPOE: 1</pre>\n<p>The response contains the URI to a POE resource that hasn’t yet been POSTed to. This URI is nothing more than a unique ID for a future POST request. It probably doesn’t even exist on the server. Remember that GET is a safe operation, so the original GET request couldn’t have changed any server state.</p>\n<pre class=\"screen\">200 OK\nPOE-Links: /weblogs/myweblog/entry-factory-104a4ed</pre>\n<p><code class=\"literal\">POE</code> and <code class=\"literal\">POE-Links</code> are custom HTTP headers defined by the POE draft. <code class=\"literal\">POE</code> just tells the server that the client is expecting a link to a POE resource. <code class=\"literal\">POE-Links</code> gives one or more links to POE resources. At this point the client can POST a representation of its new weblog entry to <code class=\"literal\">/weblogs/myweblog/entry-factory-104a4ed</code>. After the POST goes through, that URI will start responding to POST with a response code of 405 (“Operation Not Supported”). If the client isn’t sure whether or not the POST request went through, it can safely resend. There’s no possiblity that the second POST will create a second weblog entry. POST has been rendered idempotent.</p>\n<p>The nice thing about Post Once Exactly is that it works with overloaded POST. Even if you’re using POST in a way that totally violates the Resource-Oriented Architecture, your clients can use HTTP as a reliable protocol if you expose the overloaded POST operations through POE.</p>\n<p>An alternative to making POST idempotent is to get rid of POST altogether. Remember, POST is only necessary when the client doesn’t know which URI it should PUT to. POE works by generating a unique ID for each of the client’s POST operations. If you allow clients to generate their own unique IDs, they can use PUT instead. You can get the benefits of POE without exposing POST at all. You just need to make sure that two clients will never generate the same ID.<a id=\"I_indexterm9_tt913\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt914\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt915\" class=\"indexterm\"></a></p>",
      "slug" : "prepackaged-control-flows"
    }, {
      "title" : "Hypermedia Technologies",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>There are <a id=\"ch09_hypermedia\" class=\"indexterm\"></a>two kinds of hypermedia:<a id=\"I_indexterm9_tt916\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt917\" class=\"indexterm\"></a> links and forms. A link is a connection between the current resource and some target resource, identified by its URI. Less formally, a link is any URI found in the body of a representation. Even JSON and plain text are hypermedia formats of a sort, since they can contain URIs in their text. But throughout this book when I say “hypermedia format,” I mean a format with some kind of <span class=\"emphasis\"><em>structured</em></span> support for links and forms.</p> \n  <p>There are two kinds of forms. The simplest kind I’ll call<a id=\"I_indexterm9_tt918\" class=\"indexterm\"></a> <em class=\"firstterm\">application forms</em>, because they show the client how to manipulate application state. An application form is a way of handling resources whose names follow a pattern: it basically acts as a link with more than one destination. A search engine doesn’t link to every search you might possibly make: it gives you a form with a space for you to type in your search query. When you submit the form, your browser constructs a URI from what you typed into the form (say, <a class=\"ulink\" href=\"http://www.google.com/search?q=jellyfish\" target=\"_top\">http://www.google.com/search?q=jellyfish</a>), and makes a GET request to that URI. The application form lets one resource link to an infinite number of others, without requiring an infinitely large representation.</p> \n  <p>The second kind of form I’ll call<a id=\"I_indexterm9_tt919\" class=\"indexterm\"></a> <em class=\"firstterm\">resource forms</em>, because they show the client how to format a representation that modifies the state of a resource. GET and DELETE requests don’t need representations, of course, but POST and PUT requests often do. Resource forms say what the client’s POST and PUT representations should look like.</p> \n  <p>Links and application forms implement what I call connectedness, and what the Fielding thesis calls “hypermedia as the engine of application state.” The client is in charge of the application state, but the server can send links and forms that suggest possible next states. By contrast, a resource form is a guide to changing the <span class=\"emphasis\"><em>resource</em></span> state, which is ultimately kept on the server.</p> \n  <p>I cover four hypermedia technologies in this section. As of the time of writing, XHTML 4 is the only hypermedia technology in active use. But this is a time of rapid change, thanks in part to growing awareness of RESTful web services. XHTML 5 is certain to be widely used once it’s finally released. My guess is that URI Templates will also catch on, whether or not they’re incorporated into XHTML 5. <a id=\"I_indexterm9_tt920\" class=\"indexterm\"></a>WADL may catch on, or it may be supplanted by a combination of XHTML 5 and microformats.</p> \n  <h2>URI Templates</h2> \n  <p>URI Templates<a id=\"I_indexterm9_tt921\" class=\"indexterm\"></a> (currently <a class=\"ulink\" href=\"http://www.ietf.org/internet-drafts/draft-gregorio-uritemplate-00.txt\" target=\"_top\">an Internet Draft</a>) are a technology that makes simple resource forms look like links. I’ve used URI Template syntax whenever I want to show you an infinite variety of similar URIs. There was this example from <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>, when I was showing you the resources exposed by Amazon’s S3 service:</p> \n  <pre class=\"screen\">https://s3.amazonaws.com/<em class=\"replaceable\"><code>{name-of-bucket}</code></em>/{name-of-object}</pre> \n  <p>That string is not a valid URI, because curly brackets aren’t valid in URIs, but it is a valid URI Template. The substring <em class=\"replaceable\"><code>{name-of-bucket}</code></em> is a blank to be filled in, a placeholder to be replaced with the value of the variable <code class=\"literal\">name-of-bucket</code>. There are an infinite number of URIs lurking in that one template, including <a class=\"ulink\" href=\"https://s3.amazonaws.com/bucket1/object1\" target=\"_top\">https://s3.amazonaws.com/bucket1/object1</a>, <a class=\"ulink\" href=\"https://s3.amazonaws.com/my-other-bucket/subdir/SomeObject.avi\" target=\"_top\">https://s3.amazonaws.com/my-other-bucket/subdir/SomeObject.avi</a>, and so on.</p> \n  <p>URI templating gives us a precise way to play fill-in-the-blanks with URIs. Without URI Templates, a client must rely on preprogrammed URI construction rules based on English descriptions like “<code class=\"literal\">https://s3.amazonaws.com/</code>, and then the bucket name.”</p> \n  <p>URI Templates are not a data format, but any data format can improve its hypermedia capabilities by allowing them. There is currently a proposal to support URI Templates in XHTML 5, and WADL supports them already.</p> \n  <h2>XHTML 4</h2> \n  <p>HTML is the<a id=\"ch09_xhtml4\" class=\"indexterm\"></a> most successful hypermedia format of all time, but its success on the human web has typecast it as sloppy, and sent practitioners running for the more structured XML. The compromise standard is XHTML, an XML vocabulary for describing documents which uses the same tags and attributes found in HTML. Since it’s basically the same as HTML, XHTML has a powerful set of hypermedia features, though its forms are somewhat anemic.</p> \n  <div class=\"sect3\" title=\"XHTML 4 links\"> \n   <p>A number of HTML tags can be used to make<a id=\"I_indexterm9_tt922\" class=\"indexterm\"></a> hypertext links (consider <code class=\"literal\">img</code>, for example), but the two main ones are <code class=\"literal\">link</code> and <code class=\"literal\">a</code>. A <code class=\"literal\">link</code> tag shows up in the document’s <code class=\"literal\">head</code>, and connects the document to some resource. The <code class=\"literal\">link</code> tag contains no text or other tags: it applies to the entire document. An <code class=\"literal\">a</code> tag shows up in the document’s <code class=\"literal\">body</code>. It can contain text and other tags, and it links its contents (not the document as a whole) to another resource (see <a class=\"xref\" href=\"ch09.html#xhtml-4-links\" title=\"Example&nbsp;9-8.&nbsp;An XHTML 4 document with some links\">Example&nbsp;9-8</a>).</p> \n   <div class=\"example\"> \n    <a id=\"xhtml-4-links\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-8.&nbsp;An XHTML 4 document with some links \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"screen\">&lt;!DOCTYPE html\nPUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n &lt;head&gt;\n  &lt;link rel=\"alternate\" type=\"application/atom+xml\" href=\"atom.xml\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"display.css\"&gt;\n &lt;/head&gt;\n\n &lt;body&gt;\n  &lt;p&gt;\n   Have you read \n   &lt;a href=\"Great-Expectations.html\"&gt;&lt;i&gt;Great Expectations&lt;/i&gt;&lt;/a&gt;?\n  &lt;/p&gt;\n &lt;/body&gt;\n&lt;/html&gt;</pre> \n    </div> \n   </div> \n   <p><a class=\"xref\" href=\"ch09.html#xhtml-4-links\" title=\"Example&nbsp;9-8.&nbsp;An XHTML 4 document with some links\">Example&nbsp;9-8</a> shows a simple HTML document that contains both sorts of hyperlinks. There are two links that use<a id=\"I_indexterm9_tt923\" class=\"indexterm\"></a> <code class=\"literal\">link</code> to relate the document as a whole to other URIs, and there’s one link that uses <code class=\"literal\">a</code> to relate part of the document (the italicized phrase “Great Expectations”) to another URI.</p> \n   <p>The three important attributes of <code class=\"literal\">link</code> and <code class=\"literal\">a</code> tags are<a id=\"I_indexterm9_tt924\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt925\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt926\" class=\"indexterm\"></a> <code class=\"literal\">href</code>, <code class=\"literal\">rel</code>, and <code class=\"literal\">rev</code>. The <code class=\"literal\">href</code> attribute is the most important: it gives the URI of the resource that’s being linked to. If you don’t have an <code class=\"literal\">href</code> attribute, you don’t have a hyperlink.</p> \n   <p>The <code class=\"literal\">rel</code> attribute adds semantics that explain the foreign URI’s relationship to this document. I mentioned this attribute earlier when I was talking about microformats. In <a class=\"xref\" href=\"ch09.html#xhtml-4-links\" title=\"Example&nbsp;9-8.&nbsp;An XHTML 4 document with some links\">Example&nbsp;9-8</a>, the relationship of the URI <code class=\"literal\">atom.xml</code> to this document is “alternate”. The relationship of the URI <code class=\"literal\">display.css</code> to this document is “stylesheet”. These particular values for <code class=\"literal\">rel</code> are among the 15 defined in the HTML 4 standard. The value “alternate” means that the linked URI is an alternate representation of the resource this document represents. The value “stylesheet” means that the linked URI contains instructions on how to format this document for display. Microformats often define additional values for <code class=\"literal\">rel</code>. The <code class=\"literal\">rel-nofollow</code> microformat defines the relationship “nofollow”, to show that a document doesn’t trust the resource it’s linking to.</p> \n   <p>The <code class=\"literal\">rev</code> attribute is the exact opposite of <code class=\"literal\">rel</code>: it explains the relationship of this document to the foreign URI. The VoteLinks microformat lets you express your opinion of a URI by setting <code class=\"literal\">rev</code> to “vote-for” or “vote-against”. In this case, the foreign URI probably has no relationship to you, but you have a relationship to it.</p> \n   <p>A simple example illustrates the difference between <code class=\"literal\">rel</code> and <code class=\"literal\">rev</code>. Here’s an HTML snippet of a user’s home page, which contains two links to his father’s home page.</p> \n   <pre class=\"screen\">&lt;a rel=\"parent\" href=\"/Dad\"&gt;My father&lt;/a&gt;\n&lt;a rev=\"child\" href=\"/Dad\"&gt;My father&lt;/a&gt;</pre> \n  </div> \n  <div class=\"sect3\" title=\"XHTML 4 forms\"> \n   <p>These are the forms<a id=\"I_indexterm9_tt927\" class=\"indexterm\"></a> that drive the human web. You might not have known about the <code class=\"literal\">rel</code> and <code class=\"literal\">rev</code> attributes, but if you’ve done any web programming, you should be familiar with the hypermedia capabilities of XHTML forms.</p> \n   <p>To recap what you might already know: HTML forms are described with the <code class=\"literal\">form</code> tag. A <code class=\"literal\">form</code> tag has a <code class=\"literal\">method</code> attribute, which names the HTTP method the client should use when submitting the form. It has an <code class=\"literal\">action</code> attribute, which gives the (base) URI of the resource the form is accessing. It also has an <code class=\"literal\">enctype</code> attribute, which gives the media type of any representation the client is supposed to send along with the request.</p> \n   <p>A <code class=\"literal\">form</code> tag can contain form elements: children like <code class=\"literal\">input</code> and <code class=\"literal\">select</code> tags. These show up in web browsers as GUI elements: text inputs, checkboxes, buttons, and the like. In application forms, the values entered into the form elements are used to construct the ultimate destination of a GET request. Here’s an application form I just made up: an interface to a search engine.</p> \n   <pre class=\"screen\">&lt;form method=\"GET\" action=\"http://search.example.com/search\"&gt;\n &lt;input name=\"q\" type=\"text\"&gt;\n &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;</pre> \n   <p>Since this is an application form, it’s not designed to operate on any particular resource. The point of the form is to use the URI in the <code class=\"literal\">action</code> as a jumping-off point to an infinity of resources with user-generated URIs: <span class=\"emphasis\"><em>http://search.example.com/search?q=jellyfish</em></span>, <span class=\"emphasis\"><em>http://search.example.com/search?q=chocolate</em></span>, and so on.</p> \n   <p>A resource form in HTML 4 identifies one particular resource, and it specifies an action of POST. The form elements are used to build up a representation to be sent along with the POST request. Here’s a resource form I just made up: an interface to a file upload script.</p> \n   <pre class=\"screen\">&lt;form method=\"POST\" action=\"http://files.example.com/dir/subdir/\" \nenctype=\"multipart/form-data\"&gt;\n &lt;input type=\"text\" name=\"description\" /&gt;\n &lt;input type=\"file\" name=\"newfile\" /&gt;\n&lt;/form&gt;</pre> \n   <p>This form is designed to manipulate resource state, to create a new “file” resource as a subordinate resource of the “directory” resource at <span class=\"emphasis\"><em>http://files.example.com/dir/subdir/</em></span>. The representation format is a “multipart/form-data” document that contains a textual description and a (possibly binary) file.</p> \n  </div> \n  <div class=\"sect3\" title=\"Shortcomings of XHTML 4\"> \n   <p>HTML 4’s hypermedia features are obviously good enough to give us the human web we enjoy today, but they’re not good enough for web services. I have five major problems with HTML’s forms.</p> \n   <div class=\"orderedlist\"> \n    <ol class=\"orderedlist\" type=\"1\"> \n     <li class=\"listitem\"><p>Application forms are limited in the URIs they can express. You’re limited to URIs that take a base URI and then tack on some key-value pairs. With an HTML application form you can “link” to <span class=\"emphasis\"><em>http://search.example.com/search?q=jellyfish</em></span>, but not <span class=\"emphasis\"><em>http://search.example.com/search/jellyfish</em></span>. The variables must go into the URI’s query string as key-value pairs.</p></li> \n     <li class=\"listitem\"><p>Resource forms in HTML 4 are limited to using HTTP POST. There’s no way to use a form to tell a client to send a DELETE request, or to show a client what the representation of a PUT request should look like. The human web, which runs on HTML forms, has a different uniform interface from web services as a whole. It uses GET for safe operations, and overloaded POST for everything else. If you want to get HTTP’s uniform interface with HTML 4 forms, you’ll need to simulate PUT and DELETE with overloaded POST (see <a class=\"xref\" href=\"ch08.html#faking-put\" title=\"Faking PUT and DELETE\">Faking PUT and DELETE</a>” in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a> for the standard way).</p></li> \n     <li class=\"listitem\"><p>There’s no way to use an HTML form to describe the HTTP headers a client should send along with its request. You can’t define a form entity and say “the value of this entity goes into the HTTP request header <code class=\"literal\">X-My-Header</code>.” I generally don’t think services should require this of their clients, but sometimes it’s necessary. The Atom Publishing Protocol defines a special request header (<code class=\"literal\">Slug</code>, mentioned above) for POST requests that create a new member in a collection. The APP designers defined a new header, instead of requiring that this data go into the entity-body, because the entity-body might be a binary file.</p></li> \n     <li class=\"listitem\"><p>You can’t use an HTML form to specify a representation more complicated than a set of key-value pairs. All the form elements are designed to be turned into key-value pairs, except for the “file” element, which doesn’t help much. The HTML standard defines two content types for form representations: <code class=\"literal\">application/x-www-form-urlencoded</code>, which is for key-value pairs (I covered it in <a class=\"xref\" href=\"ch06.html#form-encoding\" title=\"Form-encoding\">Form-encoding</a>” in <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>); and <code class=\"literal\">multipart/form-data</code>, which is for a combination of key-value pairs and uploaded files.</p><p>You can specify any content type you want in <code class=\"literal\">enctype</code>, just as you can put anything you want in a tag’s <code class=\"literal\">class</code> and <code class=\"literal\">rel</code> attributes. So you can tell the client it should POST an XML file by setting a form’s <code class=\"literal\">enctype</code> to <code class=\"literal\">application/xml</code>. But there’s no way of conveying what should go into that XML file, unless it happens to be an XML representation of a bunch of key-value pairs. You can’t nest form elements, or define new ones that represent data structures more complex than key-value pairs. (You can do a little better if the XML vocabulary you’re using has its own media type, like <code class=\"literal\">application/atom+xml</code> or <code class=\"literal\">application/rdf+xml</code>.)</p></li> \n     <li class=\"listitem\"><p>As I mentioned in <a class=\"xref\" href=\"ch05.html#link-the-resources\" title=\"Link the Resources to Each Other\">Link the Resources to Each Other</a>” in <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a>, you can’t define a repeating field in an HTML form. You can define the same field twice, or ten times, but eventually you’ll have to stop. There’s no way to tell the client: “you can specify as many values as you want for this key-value pair.”<a id=\"I_indexterm9_tt928\" class=\"indexterm\"></a></p></li> \n    </ol> \n   </div> \n  </div> \n  <h2>XHTML 5</h2> \n  <p>HTML 5<a id=\"I_indexterm9_tt929\" class=\"indexterm\"></a> <a id=\"I_indexterm9_tt930\" class=\"indexterm\"></a>solves many of the problems that turn up when you try to use HTML on the programmable web. The main problem with HTML 5 is the timetable. The official estimate has HTML 5 being adopted as a W3C Proposed Recommendation in late 2008. More conservative estimates push that date all the way to 2022. Either way, HTML 5 won’t be a standard by the time this book is published. That’s not really the issue, though. The issue is when real clients will start supporting the HTML 5 features I describe below. Until they do, if you use the features of HTML 5, your clients will have to write custom code to interpret them.</p> \n  <p>HTML 5 forms support all four basic methods of HTTP’s uniform interface: GET, POST, PUT, and DELETE. I took advantage of this when designing my map application, if you’ll recall <a class=\"xref\" href=\"ch06.html#your-user-account-representation\" title=\"Example&nbsp;6-3.&nbsp;A representation of “your” user’s account\">Example&nbsp;6-3</a>. This is the easiest HTML 5 feature to support today, especially since (as I’ll show in <a class=\"xref\" href=\"ch11.html\" title=\"Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients\">Chapter&nbsp;11</a>) most web browsers can already make PUT and DELETE requests.</p> \n  <p>There’s a proposal (not yet incorporated into HTML 5; see <a class=\"ulink\" href=\"http://blog.welldesignedurls.org/2007/01/11/proposing-uri-templates-for-webforms-2/\" target=\"_top\">http://blog.welldesignedurls.org/2007/01/11/proposing-uri-templates-for-webforms-2/</a>) that would allow forms to use URI Templates. Under this proposal, an application form can have its <code class=\"literal\">template</code> attribute (<span class=\"emphasis\"><em>not</em></span> its <code class=\"literal\">action</code> attribute) be a URI Template like <code class=\"literal\">http://search.example.com/search/{q}</code>. It could then define <code class=\"literal\">q</code> as a text field within the form. This would let you use an application form to “link” to <code class=\"literal\">http://search.example.com/search/jellyfish</code>.</p> \n  <p>HTML 4 forms can specify more than one form element with the same name. This lets clients know they can submit the same key with 2 or 10 values: as many values as there are form elements. HTML 5 forms support the “repetition model,” a way of telling the client it’s allowed to submit the same key as many times as it wants. I used a simple repetition block in <a class=\"xref\" href=\"ch05.html#place-search-form\" title=\"Example&nbsp;5-11.&nbsp;An HTML form for searching a place\">Example&nbsp;5-11</a>.</p> \n  <p>Finally, HTML 5 defines two new ways of serializing key-value pairs into representations: as plain text, or using a newly defined XML vocabulary. The content type for the latter is <code class=\"literal\">application/x-www-form+xml</code>. This is not as big an advance as you might think. Form entities like <code class=\"literal\">input</code> are still ways of getting data in the form of key-value pairs. These new serialization formats are just new ways of representing those key-value pairs. There’s still no way to show the client how to format a more complicated representation, unless the client can figure out the format from just the content type.</p> \n  <div class=\"sidebar\"> \n   <a id=\"I_sidebar9_tt931\"></a> \n   <div class=\"sidebar-title\">\n     Where Am I Getting All This? \n   </div> \n   <p>The<a id=\"I_indexterm9_tt932\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt933\" class=\"indexterm\"></a> Web Hypertext Application Technology Working Group (WHATWG) is developing the standards that will become HTML 5. The overarching standard is the <a class=\"ulink\" href=\"http://www.whatwg.org/specs/web-apps/current-work/\" target=\"_top\">Web Applications 1.0 standard</a>, but all the changes to HTML’s hypermedia capabilities are in the <a class=\"ulink\" href=\"http://www.whatwg.org/specs/web-forms/current-work/\" target=\"_top\">Web Forms 2.0 standard</a>. That’s the document that describes all of these features.</p> \n  </div> \n  <h2>WADL</h2> \n  <p>The Web<a id=\"ch09_hw\" class=\"indexterm\"></a> <a id=\"ch09_wadl\" class=\"indexterm\"></a>Application Description Language is an XML vocabulary for expressing the behavior of HTTP resources (see <a class=\"ulink\" href=\"https://wadl.dev.java.net/\" target=\"_top\">the development site for the Java client</a>). It was named by analogy with the Web <span class=\"emphasis\"><em>Service</em></span> Description Language, a different XML vocabulary used to describe the SOAP-based RPC-style services that characterize Big Web Services.</p> \n  <p>Look back to <a class=\"xref\" href=\"ch09.html#app-service-document\" title=\"Service document\">Service document</a>” earlier in this chapter where I describe the Atom Publishing Protocol’s service documents. The representation of a service document is an XML document, written in a certain vocabulary, which describes a set of resources (APP collections) and the operations you’re allowed to perform on those resources. WADL is a standard vocabulary that can do for any resource at all what APP service documents do for APP collection resources.</p> \n  <p>You can provide a WADL file that describes every resource exposed by your service. This corresponds roughly to a WSDL file in a SOAP/WSDL service, and to the “site map” pages you see on the human web. Alternatively, you can embed a snippet of WADL in an XML representation of a particular resource, the way you might embed an HTML form in an HTML representation. The WADL snippet tells you how to manipulate the state of the resource.</p> \n  <p>As I said way back in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, WADL makes it easy to write clients for web services. A WADL description of a resource can stand in for any number of programming-language interfaces to that resource: all you need is a WADL client written in the appropriate language. WADL abstracts away the details of HTTP requests, and the building and parsing of representations, without hiding HTTP’s uniform interface.</p> \n  <p>As of the time of writing, WADL is more talked about than used. There’s a <a class=\"ulink\" href=\"http://wadl.dev.java.net/\" target=\"_top\">Java client implementation</a>, a <a class=\"ulink\" href=\"http://www.crummy.com/software/wadl.rb/\" target=\"_top\">rudimentary Ruby client</a>, and that’s about it. Most existing WADL files are bootleg descriptions of other peoples’ RESTful and REST-RPC services.</p> \n  <p>WADL does better than HTML 5 as a hypermedia format. It supports URI Templates and every HTTP method there is. A WADL file can also tell the client to populate certain HTTP headers when it makes a request. More importantly, WADL can describe representation formats that aren’t just key-value pairs. You can specify the format of an XML representation by pointing to a schema definition. Then you can point out which parts of the document are most important by specifying key-value pairs where the “keys” are XPath statements. This is a small step, but an important one. With HTML you can only specify the format of an XML representation by giving it a different content type.</p> \n  <p>Of course, the “small step” only applies to XML. You can use WADL to say that a certain resource serves or accepts a JSON document, but unless that JSON document happens to be a hash (key-value pairs again!), there’s no way to specify what the JSON document ought to look like. This is a general problem which was solved in the XML world with schema definitions. It hasn’t been solved for other formats.</p> \n  <div class=\"sect3\" title=\"Describing a del.icio.us resource\"> \n   <p><a class=\"xref\" href=\"ch09.html#delicious-wadl-ruby-2\" title=\"Example&nbsp;9-9.&nbsp;A Ruby/WADL client for del.icio.us\">Example&nbsp;9-9</a> shows a Ruby client for the del.icio.us web service based on Ruby’s WADL library. It’s a reprint of the code from <a class=\"xref\" href=\"ch02.html#wadl-intro\" title=\"Clients Made Easy with WADL\">Clients Made Easy with WADL</a>” in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>.</p> \n   <div class=\"example\"> \n    <a id=\"delicious-wadl-ruby-2\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-9.&nbsp;A Ruby/WADL client for del.icio.us \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">#!/usr/bin/ruby\n# delicious-wadl-ruby.rb\nrequire 'wadl'\n\nif ARGV.size != 2\n  puts \"Usage: #{$0} [username] [password]\"\n  exit\nend\nusername, password = ARGV\n\n# Load an application from the WADL file\ndelicious = WADL::Application.from_wadl(open(\"delicious.wadl\"))\n\n# Give authentication information to the application\nservice = delicious.v1.with_basic_auth(username, password)\n\nbegin\n  # Find the \"recent posts\" functionality\n  recent_posts = service.posts.recent\n\n  # For every recent post...\n  recent_posts.get.representation.each_by_param('post') do |post|\n    # Print its description and URI.\n    puts \"#{post.attributes['description']}: #{post.attributes['href']}\"\n  end\nrescue WADL::Faults::AuthorizationRequired\n  puts \"Invalid authentication information!\"\nend</pre> \n    </div> \n   </div> \n   <p>The code’s very short but you can see what’s happening, especially now that we’re past <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a> and I’ve shown you how resource-oriented services work. The del.icio.us web service exposes a resource that the WADL library identifies with <code class=\"literal\">v1</code>. That resource has a subresource identified by <code class=\"literal\">posts.recent</code>. If you recall the inner workings of del.icio.us from <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, you’ll recognize this as corresponding to the URI <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts/recent\" target=\"_top\">https://api.del.icio.us/v1/posts/recent</a>. When you tell the WADL library to make a GET request to that resource, you get back some kind of response object which includes an XML <code class=\"literal\">representation</code>. Certain parts of this representation, the <code class=\"literal\">post</code>s, are especially interesting, and I process them as XML elements, extracting their <code class=\"literal\">description</code>s and <code class=\"literal\">href</code>s.</p> \n   <p>Let’s look at the WADL file that makes this code possible. I’ve split it into three sections: resource definition, method definition, and representation definition. <a class=\"xref\" href=\"ch09.html#delicious-wadl-1\" title=\"Example&nbsp;9-10.&nbsp;WADL file for del.icio.us: the resource\">Example&nbsp;9-10</a> shows the resource definition. I’ve defined a nested set of WADL resources: <code class=\"literal\">recent</code> inside <code class=\"literal\">posts</code> inside <code class=\"literal\">v1</code>. The <code class=\"literal\">recent</code> WADL resource corresponds to the HTTP resource the del.icio.us API exposes at <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts/recent\" target=\"_top\">https://api.del.icio.us/v1/posts/recent</a>.</p> \n   <div class=\"example\"> \n    <a id=\"delicious-wadl-1\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-10.&nbsp;WADL file for del.icio.us: the resource \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">&lt;?xml version=\"1.0\"?&gt;\n&lt;!-- This is a partial bootleg WADL file for the del.icio.us API. --&gt;\n\n&lt;application xmlns=\"http://research.sun.com/wadl/2006/07\"&gt;\n \n  &lt;!-- The resource --&gt;\n  &lt;resources base=\"https://api.del.icio.us/\"&gt;\n    &lt;doc xml:lang=\"en\" title=\"The del.icio.us API v1\"&gt;\n      Post or retrieve your bookmarks from the social networking website.\n      Limit requests to one per second.\n    &lt;/doc&gt;\n    \n    &lt;resource path=\"v1\"&gt;\n      &lt;param name=\"Authorization\" style=\"header\" required=\"true\"&gt;\n\t&lt;doc xml:lang=\"en\"&gt;All del.icio.us API calls must be authenticated\n\tusing Basic HTTP auth.&lt;/doc&gt;\n      &lt;/param&gt;\n\n      &lt;resource path=\"posts\"&gt;\n\t&lt;resource path=\"recent\"&gt;\n\t  &lt;method href=\"#getRecentPosts\" /&gt;\n\t&lt;/resource&gt;\n      &lt;/resource&gt;     \n    &lt;/resource&gt;\n  &lt;/resources&gt;</pre> \n    </div> \n   </div> \n   <p>That HTTP resource exposes a single method of the uniform interface (GET), so I define a single WADL method inside the WADL resource. Rather than define the method inside the <code class=\"literal\">resource</code> tag and clutter up <a class=\"xref\" href=\"ch09.html#delicious-wadl-1\" title=\"Example&nbsp;9-10.&nbsp;WADL file for del.icio.us: the resource\">Example&nbsp;9-10</a>, I’ve defined it by reference. I’ll get to it next.</p> \n   <p>Every del.icio.us API request must include an <code class=\"literal\">Authorization</code> header that encodes your del.icio.us username and password using HTTP Basic Auth. I’ve represented this with a <code class=\"literal\">param</code> tag that tells the client it must provide an <code class=\"literal\">Authorization</code> header. The <code class=\"literal\">param</code> tag is the equivalent of an HTML form element: it tells the client about a blank to be filled in.<sup>[<a id=\"id422440\" href=\"#ftn.id422440\" epub:type=\"noteref\" class=\"footnote\">31</a>]</sup></p> \n   <p><a class=\"xref\" href=\"ch09.html#delicious-wadl-2\" title=\"Example&nbsp;9-11.&nbsp;WADL file for del.icio.us: the method\">Example&nbsp;9-11</a> shows the definition of the method <code class=\"literal\">getRecentPosts</code>. A WADL method corresponds to a request you might make using HTTP’s uniform interface. The <code class=\"literal\">id</code> of the method can be anything, but its <code class=\"literal\">name</code> is always the name of an HTTP method: here, “GET”. The method definition models both the HTTP <code class=\"literal\">request</code> and <code class=\"literal\">response</code>.</p> \n   <div class=\"example\"> \n    <a id=\"delicious-wadl-2\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-11.&nbsp;WADL file for del.icio.us: the method \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">  &lt;!-- The method --&gt;\n  &lt;method id=\"getRecentPosts\" name=\"GET\"&gt;\n\n    &lt;doc xml:lang=\"en\" title=\"Returns a list of the most recent posts.\" /&gt;\n    \n    &lt;request&gt;\n      &lt;param name=\"tag\" style=\"form\"&gt;\n\t&lt;doc xml:lang=\"en\" title=\"Filter by this tag.\" /&gt;\n      &lt;/param&gt;\n      \n      &lt;param name=\"count\" style=\"form\" default=\"15\"&gt;\n\t&lt;doc xml:lang=\"en\" title=\"Number of items to retrieve.\"&gt;\n\t  Maximum: 100\n\t&lt;/doc&gt;\n      &lt;/param&gt;\n    &lt;/request&gt;\n    \n    &lt;response&gt;\n      &lt;representation href=\"#postList\" /&gt;\n      &lt;fault id=\"AuthorizationRequired\" status=\"401\" /&gt;\n    &lt;/response&gt;\n  &lt;/method&gt;</pre> \n    </div> \n   </div> \n   <p>This particular <code class=\"literal\">request</code> defines two more <code class=\"literal\">param</code>s: two more blanks to be filled in by the client. These are “query” <code class=\"literal\">param</code>s, which in a GET request means they’ll be tacked onto the query string—just like elements in an HTML form would be. These <code class=\"literal\">param</code> definitions make it possible for the WADL client to access URIs like <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts/recent?count=100\" target=\"_top\">https://api.del.icio.us/v1/posts/recent?count=100</a> and <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts/recent?tag=rest&amp;count=20\" target=\"_top\">https://api.del.icio.us/v1/posts/recent?tag=rest&amp;count=20</a>.</p> \n   <p>This WADL <code class=\"literal\">method</code> defines an application form: not a way of manipulating resource state, but a pointer to possible new application states. This <code class=\"literal\">method</code> tag tells the client about an infinite number of GET requests they <span class=\"emphasis\"><em>can</em></span> make to a set of related resources, without having to list infinitely many URIs. If this method corresponded to a PUT or POST request, its <code class=\"literal\">request</code> might be a resource form, a way of manipulating resource state. Then it might describe a <code class=\"literal\">representation</code> for you to send along with your request.</p> \n   <p>The <code class=\"literal\">response</code> does describe a <code class=\"literal\">representation</code>: the response document you get back from del.icio.us when you make one of these GET requests. It also describes a possible fault condition: if you submit a bad <code class=\"literal\">Authorization</code> header, you’ll get a response code of 401 (“Unauthorized”) instead of a representation.</p> \n   <p>Take a look at <a class=\"xref\" href=\"ch09.html#delicious-wadl-3\" title=\"Example&nbsp;9-12.&nbsp;WADL file for del.icio.us: the representation\">Example&nbsp;9-12</a>, which defines the representation. This is WADL’s description of the XML document you receive when you GET <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts/recent\" target=\"_top\">https://api.del.icio.us/v1/posts/recent</a>: a document like the one in <a class=\"xref\" href=\"ch02.html#delicious-http-response\" title=\"Example&nbsp;2-3.&nbsp;A possible response from the del.icio.us web service\">Example&nbsp;2-3</a>.</p> \n   <div class=\"example\"> \n    <a id=\"delicious-wadl-3\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-12.&nbsp;WADL file for del.icio.us: the representation \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">  &lt;!-- The representation --&gt;\n  &lt;representation id=\"postList\" mediaType=\"text/xml\" element=\"posts\"&gt;\n    &lt;param name=\"post\" path=\"/posts/post\" repeating=\"true\" /&gt;\n  &lt;/representation&gt;\n  \n&lt;/application&gt;</pre> \n    </div> \n   </div> \n   <p>The WADL description gives the most important points about this document: its content type is <code class=\"literal\">text/xml</code>, and it’s rooted at the <code class=\"literal\">posts</code> tag. The <code class=\"literal\">param</code> tag points out that the the <code class=\"literal\">posts</code> tag has a number of interesting children: the <code class=\"literal\">post</code> tags. The <code class=\"literal\">param</code>’s <code class=\"literal\">path</code> attribute gives an XPath expression which the client can use on the XML document to fetch all the del.icio.us posts. My client’s call to <code class=\"literal\">each_by_param('post')</code> runs that XPath expression against the document, and lets me operate on each matching element without having to know anything about XPath or the structure of the representation.</p> \n   <p>There’s no schema definition for this kind of XML representation: it’s a very simple document and del.icio.us just assumes you can figure out the format. But for the sake of demonstration, let’s pretend this representation has an XML Schema Definition (XSD) file. The URI of this imaginary definition is <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts.xsd\" target=\"_top\">https://api.del.icio.us/v1/posts.xsd</a>, and it defines the schema for the <code class=\"literal\">posts</code> and <code class=\"literal\">post</code> tags. In that fantasy situation, <a class=\"xref\" href=\"ch09.html#delicious-wadl-imaginary\" title=\"Example&nbsp;9-13.&nbsp;WADL file for del.icious: the resource\">Example&nbsp;9-13</a> shows how I might define the <code class=\"literal\">representation</code> in terms of the schema file.</p> \n   <div class=\"example\"> \n    <a id=\"delicious-wadl-imaginary\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-13.&nbsp;WADL file for del.icious: the resource \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">&lt;?xml version=\"1.0\"?&gt;\n&lt;!-- This is a partial bootleg WADL file for the del.icio.us API. --&gt;\n\n&lt;application xmlns=\"http://research.sun.com/wadl/2006/07\"\n             xmlns:delicious=\"https://api.del.icio.us/v1/posts.xsd\"&gt;\n\n &lt;grammars&gt;\n  &lt;include \"https://api.del.icio.us/v1/posts.xsd\" /&gt;\n &lt;/grammars&gt;\n\n ...\n\n  &lt;representation id=\"postList\" mediaType=\"text/xml\" element=\"delicious:posts\" /&gt;\n ...\n\n&lt;/application&gt;</pre> \n    </div> \n   </div> \n   <p>I no longer need a <code class=\"literal\">param</code> to say that this document is full of <code class=\"literal\">post</code> tags. That information’s in the XSD file. I just have to define the representation in terms of that file. I do this by referencing the XSD file in this WADL file’s <code class=\"literal\">grammars</code>, assigning it to the <code class=\"literal\">delicious:</code> namespace, and scoping the representation’s <code class=\"literal\">element</code> attribute to that namespace. If the client is curious about what a <code class=\"literal\">delicious:posts</code> tag might contain, it can check the XSD. Even though the XSD completely describes the representation format, I might define some <code class=\"literal\">param</code> tags anyway to point out especially important parts of the document.</p> \n  </div> \n  <div class=\"sect3\" title=\"Describing an APP collection\"> \n   <p>That was <a id=\"I_indexterm9_tt935\" class=\"indexterm\"></a>a pretty simple example. I used an application form to describe an infinite set of related resources, each of which responds to GET by sending a simple XML document. But I can use WADL to describe the behavior of any resource that responds to the uniform interface. If a resource serves an XML representation, I can reach into that representation with <code class=\"literal\">param</code> tags: show where the interesting bits of data are, and where the links to other resources can be found.</p> \n   <p>Earlier I compared WADL files to the Atom Publishing Protocol’s service documents. Both are XML vocabularies for describing resources. Service documents describe APP collections, and WADL documents describe any resource at all. You’ve seen how a service document describes a collection (<a class=\"xref\" href=\"ch09.html#sample-service-document\" title=\"Example&nbsp;9-6.&nbsp;A representation of a service document that describes three collections\">Example&nbsp;9-6</a>). What would a WADL description of the same resources look like?</p> \n   <p>As it happens, the WADL standard gives just this example. Section A.2 of the standard shows an APP service document and then a WADL description of the same resources. I’ll present a simplified version of this idea here.</p> \n   <p>The service document in <a class=\"xref\" href=\"ch09.html#sample-service-document\" title=\"Example&nbsp;9-6.&nbsp;A representation of a service document that describes three collections\">Example&nbsp;9-6</a> describes three Atom collections. One accepts new Atom entries via POST, and the other two accept image files. These collections are pretty similar. In an object-oriented system I might factor out the differences by defining a class hierarchy. I can do something similar in WADL. Instead of defining all three resources from scratch, I’m going to define two <em class=\"firstterm\">resource types</em>. Then it’ll be simple to define individual resources in terms of the types (see <a class=\"xref\" href=\"ch09.html#example_9_14\" title=\"Example&nbsp;9-14.&nbsp;A WADL file for APP: resource types\">Example&nbsp;9-14</a>).</p> \n   <div class=\"example\"> \n    <a id=\"example_9_14\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-14.&nbsp;A WADL file for APP: resource types \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">&lt;?xml version=\"1.0\"?&gt;\n&lt;!-- This is a description of two common types of resources that respond\n     to the Atom Publishing Protocol. --&gt;\n\n&lt;application xmlns=\"http://research.sun.com/wadl/2006/07\"\n             xmlns:app=\"http://purl.org/atom/app\"&gt;\n\n  &lt;!-- An Atom collection accepts Atom entries via POST. --&gt;\n  &lt;resource_type id=\"atom_collection\"&gt;\n    &lt;method href=\"#getCollection\" /&gt;\n    &lt;method href=\"#postNewAtomMember\" /&gt;\n  &lt;/resource_type&gt;\n\n  &lt;!-- An image collection accepts image files via POST. --&gt;\n  &lt;resource_type id=\"image_collection\"&gt;\n    &lt;method href=\"#getCollection\" /&gt;\n    &lt;method href=\"#postNewImageMember\" /&gt;\n  &lt;/resource_type&gt;</pre> \n    </div> \n   </div> \n   <p>There are my two resource types: the Atom collection and the image collection. These don’t correspond to any specific resources: they’re equivalent to classes in an object-oriented design. Both “classes” support a method identified as <code class=\"literal\">getCollection</code>, but the Atom collection supports a method <code class=\"literal\">postNewAtomMember</code> where the image collection supports <code class=\"literal\">postNewImageMember</code>. <a class=\"xref\" href=\"ch09.html#example_9_15\" title=\"Example&nbsp;9-15.&nbsp;A WADL file for APP: methods\">Example&nbsp;9-15</a> shows those three methods:</p> \n   <div class=\"example\"> \n    <a id=\"example_9_15\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-15.&nbsp;A WADL file for APP: methods \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">  &lt;!-- Three possible operations on resources. --&gt;\n  &lt;method name=\"GET\" id=\"getCollection\"&gt;\n    &lt;response&gt;\n      &lt;representation href=\"#feed\" /&gt;\n    &lt;/response&gt;\n  &lt;/method&gt;\n\n  &lt;method name=\"POST\" id=\"postNewAtomMember\"&gt;\n    &lt;request&gt;\n      &lt;representation href=\"#entry\" /&gt;\n    &lt;/request&gt;\n  &lt;/method&gt;\n\n  &lt;method name=\"POST\" id=\"postNewImageMember\"&gt;\n    &lt;request&gt;\n      &lt;representation id=\"image\"  mediaType=\"image/*\" /&gt;\n      &lt;param name=\"Slug\" style=\"header\" /&gt;\n    &lt;/request&gt;\n  &lt;/method&gt;</pre> \n    </div> \n   </div> \n   <p>The <code class=\"literal\">getCollection</code> WADL method is revealed as a GET operation that expects an Atom feed (to be described) as its representation. The <code class=\"literal\">postNewAtomMember</code> method<a id=\"I_indexterm9_tt936\" class=\"indexterm\"></a> is a POST operation that sends an Atom entry (again, to be described) as its representation. The <code class=\"literal\">postNewImageMember</code> method is also a POST operation, but the representation it sends is an image file, and it knows how to specify a value for the HTTP header <code class=\"literal\">Slug</code>.</p> \n   <p>Finally, <a class=\"xref\" href=\"ch09.html#app-wadl-3\" title=\"Example&nbsp;9-16.&nbsp;A WADL file for APP: the representations\">Example&nbsp;9-16</a> describes the two representations: Atom feeds and atom entries. I don’t need to describe these representations in great detail because they’re already described in the XML Schema Document for Atom: I can just reference the XSD file. But I’m free to annotate the XSD by defining <code class=\"literal\">param</code> elements that tell a WADL client about the links between resources.</p> \n   <div class=\"example\"> \n    <a id=\"app-wadl-3\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-16.&nbsp;A WADL file for APP: the representations \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">  &lt;!-- Two possible XML representations. --&gt;\n  &lt;representation id=\"feed\" mediaType=\"application/atom+xml\"\n\t\t  element=\"atom:feed\" /&gt;\n\n  &lt;representation id=\"entry\" mediaType=\"application/atom+xml\"\n\t\t  element=\"atom:entry\" /&gt;\n\n&lt;/application&gt;</pre> \n    </div> \n   </div> \n   <p>I can make the file I just defined available on the Web: say, at <code class=\"literal\">http://www.example.com/app-resource-types.wadl</code>. Now it’s a resource. I can use it in my services by referencing its URI. So can anyone else. It’s now possible to define certain APP collections in terms of these resource types. My three collections are defined in just a few lines in <a class=\"xref\" href=\"ch09.html#example_9_17\" title=\"Example&nbsp;9-17.&nbsp;A WADL file for a set of APP collections\">Example&nbsp;9-17</a>.</p> \n   <div class=\"example\"> \n    <a id=\"example_9_17\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;9-17.&nbsp;A WADL file for a set of APP collections \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">&lt;?xml version=\"1.0\"?&gt;\n&lt;!-- This is a description of three \"collection\" resources that respond\n     to the Atom Publishing Protocol. --&gt;\n\n&lt;application xmlns=\"http://research.sun.com/wadl/2006/07\"\n             xmlns:app=\"http://purl.org/atom/app\"&gt;\n  &lt;resources base=\"http://www.example.com/\"&gt;\n    &lt;resource path=\"RESTfulNews\" \n     type=\"http://www.example.com/app-resource-types.wadl#atom_collection\" /&gt;\n    &lt;resource path=\"samruby/photos\" \n     type=\"http://www.example.com/app-resource-types.wadl#image_collection\" /&gt;\n    &lt;resource path=\"leonardr/photos\" \n     type=\"http://www.example.com/app-resource-types.wadl#image_collection\"/&gt;\n  &lt;/resources&gt;\n&lt;/application&gt;</pre> \n    </div> \n   </div> \n   <p>The Atom Publishing Protocol is popular because it’s such a general interface. The major differences between two APP services are described in the respective service documents. A generic APP client can read these documents and reprogram itself to act as a client for many different services. But there’s an even more general interface: the uniform interface of HTTP. An APP service document uses a domain-specific XML vocabulary, but hypermedia formats like HTML and WADL can be used to describe any web service at all. Their clients can be even more general than APP clients.</p> \n   <p>Hypermedia is how one service communicates the ways it differs from other services. If that intelligence is embedded in hypermedia, the programmer needs to hardwire less of it in code. More importantly, hypermedia gives you access to the link: the second most important web technology after the URI. The potential of REST will not be fully exploited until web services start serving their representations as link-rich hypermedia instead of plain media.</p> \n  </div> \n  <div class=\"sect3\" title=\"Is WADL evil?\"> \n   <p>In <a class=\"xref\" href=\"ch10.html\" title=\"Chapter&nbsp;10.&nbsp;The Resource-Oriented Architecture Versus Big Web Services\">Chapter&nbsp;10</a> I’ll talk about how WSDL turned SOAP from a simple XML envelope format to a name synonymous with the RPC style of web services. WSDL abstracts away the details of HTTP requests and responses, and replaces them with a model based on method calls in a programming language. Doesn’t WADL do the exact same thing? Should we worry that WADL will do to plain-HTTP web services what WSDL did to SOAP web services: tie them to the RPC style in the name of client convenience?</p> \n   <p>I think we’re safe. WADL abstracts away the details of HTTP requests and responses, but—this is the key point—it doesn’t add any new abstraction on top. Remember, REST isn’t tied to HTTP. When you abstract HTTP away from a RESTful service, you’ve still got REST. A resource-oriented web service exposes resources that respond to a uniform interface: that’s REST. A WADL document describes resources that respond to a uniform interface: that’s REST. A program that uses WADL creates objects that correspond to resources, and accesses them with method calls that embody a uniform interface: that’s REST. RESTfulness doesn’t live in the protocol. It lives in the interface.</p> \n   <p>About the worst you can do with WADL is hide the fact that a service responds to the uniform interface. I’ve deliberately not shown you how to do this, but you should be able to figure it out. You may need to do this if you’re writing a WADL file for a web application or REST-RPC hybrid service that doesn’t respect the uniform interface.</p> \n   <p>I’m fairly sure that WADL itself won’t tie HTTP to an RPC model, the way WSDL did to SOAP. But what about those push-button code generators, the ones that take your procedure-call-oriented code and turn it into a “web service” that only exposes one URI? WADL makes you define your resources, but what if tomorrow’s generator creates a WADL file that only exposes a single “resource”, the way an autogenerated WSDL file exposes a single “endpoint”?</p> \n   <p>This is a real worry. Fortunately, WADL’s history is different from WSDL’s. WSDL was introduced at a time when SOAP was still officially associated with the RPC style. But WADL is being introduced as people are becoming aware of the advantages of REST, and it’s marketed as a way to hide the details while keeping the RESTful interface. Hopefully, any tool developers who want to make their tools support WADL will also be interested in making their tools support RESTful design.<a id=\"I_indexterm9_tt937\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt938\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt939\" class=\"indexterm\"></a><a id=\"I_indexterm9_tt940\" class=\"indexterm\"></a></p> \n  </div>\n </body>\n</html>",
      "slug" : "hypermedia-technologies"
    } ]
  }, {
    "title" : "10. The Resource-Oriented Architecture Versus Big Web Services",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;10.&nbsp;The Resource-Oriented Architecture Versus Big Web Services</h2>\n  </div>\n </div>\n</div>\n<p>Throughout <a id=\"ch10_bigwebservice\" class=\"indexterm\"></a><a id=\"ch10_resource\" class=\"indexterm\"></a>this book I’ve focused on technologies and architectures that work with the grain of the Web. I’ve shown you how to arrange resources into services that are very powerful, but conceptually simple and accessible from a wide variety of standard clients. But I’ve hardly said a word about the technologies that most people think of when they think web services: SOAP, WSDL, and the WS-* stack. These technologies form a competing paradigm for web services: one that doesn’t really work like the Web. Rather than letting these technologies claim the entire field of web services for themselves, I’ve given them a not entirely kind, but fairly mild nickname: Big Web Services. In this chapter I’ll compare the two paradigms.</p>\n<p>The web is based on resources, but Big Web Services don’t expose resources. The Web is based on URIs and links, but a typical Big Web Service exposes one URI and zero links. The Web is based on HTTP, and Big Web Services hardly use HTTP’s features at all. This isn’t academic hair-splitting, because it means Big Web Services don’t get the benefits of resource-oriented web services. They’re not addressable, cacheable, or well connected, and they don’t respect any uniform interface. (Many of them are stateless, though.) They’re opaque, and understanding one doesn’t help you understand the next one. In practice, they also tend to have interoperability problems when serving a variety of clients.</p>\n<p>In this chapter I apply the same analytical tools to Big Web Services as I’ve been using to explain the REST architectural style and the Resource-Oriented Architecture. I’ll be covering a lot of ideas in just a few pages—there are already whole books about these technologies—but my goal is not to give you a complete introduction. I just want to show you how the two philosophies line up. I’ll examine technologies like SOAP on a technical level, and not in terms of how they’ve been hyped or demonized. I’ll focus on these specifications as they’re widely deployed, and less on the unrealized potential of newer versions.</p>\n<p>The vision of Big Web Services has evolved over time and not all practitioners are up to date on the latest concepts. To make sure I get everybody, I’m going to take a chronological approach to my analysis. I’ll start with the original “publish, find, and bind” vision, move on to “secure, reliable transactions,” and finally touch on more recent developments like the Enterprise Server Bus, Business Process Execution Language, and Service-Oriented Architecture.</p>",
    "textContent" : "Chapter 10. The Resource-Oriented Architecture Versus Big Web Services\r\n\r\nThroughout this book I’ve focused on technologies and architectures that work with the grain of the Web. I’ve shown you how to arrange resources into services that are very powerful, but conceptually simple and accessible from a wide variety of standard clients. But I’ve hardly said a word about the technologies that most people think of when they think web services: SOAP, WSDL, and the WS-* stack. These technologies form a competing paradigm for web services: one that doesn’t really work like the Web. Rather than letting these technologies claim the entire field of web services for themselves, I’ve given them a not entirely kind, but fairly mild nickname: Big Web Services. In this chapter I’ll compare the two paradigms.\r\n\r\nThe web is based on resources, but Big Web Services don’t expose resources. The Web is based on URIs and links, but a typical Big Web Service exposes one URI and zero links. The Web is based on HTTP, and Big Web Services hardly use HTTP’s features at all. This isn’t academic hair-splitting, because it means Big Web Services don’t get the benefits of resource-oriented web services. They’re not addressable, cacheable, or well connected, and they don’t respect any uniform interface. (Many of them are stateless, though.) They’re opaque, and understanding one doesn’t help you understand the next one. In practice, they also tend to have interoperability problems when serving a variety of clients.\r\n\r\nIn this chapter I apply the same analytical tools to Big Web Services as I’ve been using to explain the REST architectural style and the Resource-Oriented Architecture. I’ll be covering a lot of ideas in just a few pages—there are already whole books about these technologies—but my goal is not to give you a complete introduction. I just want to show you how the two philosophies line up. I’ll examine technologies like SOAP on a technical level, and not in terms of how they’ve been hyped or demonized. I’ll focus on these specifications as they’re widely deployed, and less on the unrealized potential of newer versions.\r\n\r\nThe vision of Big Web Services has evolved over time and not all practitioners are up to date on the latest concepts. To make sure I get everybody, I’m going to take a chronological approach to my analysis. I’ll start with the original “publish, find, and bind” vision, move on to “secure, reliable transactions,” and finally touch on more recent developments like the Enterprise Server Bus, Business Process Execution Language, and Service-Oriented Architecture.",
    "slug" : "10-the-resource-oriented-architecture-versus-big-web-services",
    "pages" : [ {
      "title" : "What Problems Are Big Web Services Trying to Solve?",
      "type" : "page",
      "htmlContent" : "<p>As I said, the Web is resource-oriented. To implement the RPC style atop it is to go against the grain of the Web. But the Web wasn’t designed to support general-purpose distributed programming. Sometimes your application has a natural grain of its own, and going against <span class=\"emphasis\"><em>that</em></span> is problematic.</p>\n<p>Here’s a concrete example that I’ll come back to throughout this chapter: a service that sets up travel reservations. Booking a trip might require booking a flight, a hotel, and a rental car. These tasks are interrelated: getting a rental car and a seat on a flight may be of little use to the client if you can’t find a hotel. Each task requires coordinating with external authorities to find the best deal: the airlines, the rental car companies, the hotels. Each of these external authorities may be a separate service, and dealing with them involves making commitments. You may be able to have the airline service hold a seat on a plane for five minutes while you try to line up the rest of the deal. You may need to make a hotel reservation that will bill the customer for the first night’s stay whether or not they show up. These time-limited commitments represent shared state.</p>\n<p>The resource-oriented approach I advocate in this book is Turing-complete. It can model any application, even a complex one like a travel broker. If I implemented this travel broker as a set of resource-oriented services, I’d expose resources like “a five-minute hold on seat 24C.” This would work, but there’s probably little value in that kind of resource. I don’t pretend to know what emergent properties might show up in a resource-oriented system like this, but it’s not likely that someone would want to bookmark that resource’s URI and pass it around.</p>\n<p>The travel agency service has a different grain than the rest of the Web. This doesn’t mean that it can’t be made into a successful web application. Nor does it imply that SOAP and related specifications are a better fit. But this is the main problem that Big Web Services are trying to solve: the design of process-oriented, brokered distributed services. For whatever reason, this kind of application tends to be more prevalent in businesses and government applications, and less prevalent in technical and academic areas.</p>",
      "slug" : "what-problems-are-big-web-services-trying-to-solve"
    }, {
      "title" : "SOAP",
      "type" : "page",
      "htmlContent" : "<p>SOAP <a id=\"ch10_soap\" class=\"indexterm\"></a>is the foundation<a id=\"ch10_xmlsoap\" class=\"indexterm\"></a> on which the plethora of WS-* specifications is built. Despite the hype and antihype it’s been subjected to, there’s amazingly little to this specification. You can take any XML document (so long as it doesn’t have a DOCTYPE or processing instructions), wrap it in two little XML elements, and you have a valid SOAP document. For best results, though, the document’s root element should be in a namespace.</p>\n<p>Here’s an XML document:</p>\n<a id=\"I_programlisting10_tt941\"></a>\n<pre class=\"programlisting\">&lt;hello-world xmns=\"http://example.com\"/&gt;</pre>\n<p>Here’s the same document, wrapped in a SOAP envelope:<a id=\"I_programlisting10_tt942\"></a></p>\n<pre class=\"programlisting\">&lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soap:Body&gt;\n   &lt;hello-world xmns=\"http://example.com\"/&gt;\n &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;</pre>\n<p>The only catch is that the SOAP <code class=\"literal\">Envelope</code> must have the same character encoding as the document it encloses. That’s pretty much all there is to it. Wrapping an XML document in two extra elements is certainly not an unreasonable or onerous task, but it doesn’t exactly solve all the world’s problems either.</p>\n<p>Seem too simple? Here’s a real-world example. In <a class=\"xref\" href=\"ch01.html#googlewebsearchexample\" title=\"Example&nbsp;1-8.&nbsp;Searching the Web with Google’s search service\">Example&nbsp;1-8</a> I showed you an elided version of a SOAP document you might submit to <a id=\"I_indexterm10_tt943\" class=\"indexterm\"></a>Google’s web search service. <a class=\"xref\" href=\"ch10.html#google-soap-envelope\" title=\"Example&nbsp;10-1.&nbsp;A SOAP envelope to be submitted to Google’s SOAP search service\">Example&nbsp;10-1</a> shows the whole document.</p>\n<div class=\"example\">\n <a id=\"google-soap-envelope\"></a>\n <div class=\"example-title\">\n  Example&nbsp;10-1.&nbsp;A SOAP envelope to be submitted to Google’s SOAP search service\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n  &lt;soap:Body&gt;\n    &lt;gs:doGoogleSearch xmlns:gs=\"urn:GoogleSearch\"&gt;\n      &lt;key&gt;00000000000000000000000000000000&lt;/key&gt;\n      &lt;q&gt;REST book&lt;/q&gt;\n      &lt;start&gt;0&lt;/start&gt;\n      &lt;maxResults&gt;10&lt;/maxResults&gt;\n      &lt;filter&gt;true&lt;/filter&gt;\n      &lt;restrict/&gt;\n      &lt;safeSearch&gt;false&lt;/safeSearch&gt;\n      &lt;lr/&gt;\n      &lt;ie&gt;latin1&lt;/ie&gt;\n      &lt;oe&gt;latin1&lt;/oe&gt;\n    &lt;/gs:doGoogleSearch&gt;\n   &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;</pre>\n </div>\n</div>\n<p>This document describes a Call to the Remote Procedure<a id=\"I_indexterm10_tt944\" class=\"indexterm\"></a> <code class=\"literal\">gs:doGoogleSearch</code>. All of the query parameters are neatly tucked into named elements. This example is fully functional, though if you POST it to Google you’ll get back a fault document saying that the <code class=\"literal\">key</code> is not valid.</p>\n<p>This style of encoding parameters to a remote function is sometimes called RPC/literal or Section 5 encoding. That’s the section in the SOAP 1.1 specification that shows how to use SOAP for RPC. But over time, fashions change. Later versions of the specification made support of this encoding optional, and so it’s now effectively deprecated. It was largely replaced by an encoding called document/literal, and then by wrapped document/literal. Wrapped document/literal looks largely the same as section 5 encoding, except that the parameters tend to be scoped to a namespace.</p>\n<p>One final note about body elements: the parameters may be annotated with data type information based on XML Schema Data Types. This annotation goes into attributes, and generally reduces the readability of the document. Instead of <code class=\"literal\">&lt;ie&gt;latin1&lt;/ie&gt;</code> you might see <code class=\"literal\">&lt;ie xsi:type=\"xsd:string\"&gt;latin1&lt;/ie&gt;</code>. Multiply that by the number of arguments in <a class=\"xref\" href=\"ch10.html#google-soap-envelope\" title=\"Example&nbsp;10-1.&nbsp;A SOAP envelope to be submitted to Google’s SOAP search service\">Example&nbsp;10-1</a> and you may start to see why many recoil in horror when they hear “SOAP.”</p>\n<p>In <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a> I said that HTTP and SOAP are just different ways of putting messages in envelopes. HTTP’s main moving parts are the entity-body and the headers. With a SOAP element named <code class=\"literal\">Body</code>, you might expect to also find a <code class=\"literal\">Header</code> element. You’d be right. Anything that can go into the <code class=\"literal\">Body</code> element—any namespaced document which has no DOCTYPE or processing instructions—can go into the <code class=\"literal\">Header</code>. But while you tend to only find a single element inside the <code class=\"literal\">Body</code>, the <code class=\"literal\">Header</code> can contain any number of elements. <code class=\"literal\">Header</code> elements also tend to be small.</p>\n<p>Recalling the terminology used in <a class=\"xref\" href=\"ch01.html#messagesinenvelopes\" title=\"HTTP: Documents in Envelopes\">HTTP: Documents in Envelopes</a>” in <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a>, headers are like “stickers” on an envelope. SOAP headers tend to contain information about the data in the body, such as security and routing information. The same is true of HTTP headers.</p>\n<p>SOAP defines two attributes for header entities: <code class=\"literal\">actor</code> and <code class=\"literal\">mustUnderstand</code>. If you know in advance that your message is going to pass through intermediaries on the way to its destination, you can identify (via a URI) the <code class=\"literal\">actor</code> that’s the target of any particular header. The <code class=\"literal\">mustUnderstand</code> attribute is used to impose restrictions on those intermediaries (or on the final destination). If the <code class=\"literal\">actor</code> doesn’t understand a header addressed to it, and <code class=\"literal\">mustUnderstand</code> is true, it must reject the message—even if it thinks it could handle the message otherwise. An example of this would be a header associated with a two-phase commit operation. If the destination doesn’t understand two-phase commit, you don’t want the operation to proceed.</p>\n<p>Beyond that, there isn’t much to SOAP. Requests and responses have the same format, similar to HTTP. There’s a separate format for a SOAP <code class=\"literal\">Fault</code>, used to signify an error condition. Right now the only thing that can go into a SOAP document is an XML document. There have been a few attempts to define mechanisms for attaching binary data to messages, but no clear winner has emerged.</p>\n<p>Given this fairly simple protocol, what’s the basis for the hype and controversy? SOAP is mainly infamous for the technologies built on top of it, and I’ll cover those next. It does have one alleged benefit of its own: transport independence. The headers are inside the message, which means they’re independent of the protocol used to transport the message. You don’t have to send a SOAP envelope inside an HTTP envelope. You can send it over email, instant messaging, raw TCP, or any other protocol. In practice, this feature is rarely used. There’s been some limited public use of SMTP transports, and some use of JMS transports behind the corporate firewall, but the overwhelming majority of SOAP traffic is over HTTP.</p>\n<h2>The Resource-Oriented Alternative</h2>\n<p>SOAP is almost always sent over HTTP, but SOAP toolkits make little use of HTTP status codes, and tend to coerce all operations into POST methods. This is not technically disallowed by the REST architectural style, but it’s a degenerate sort of RESTful architecture that doesn’t get any of the benefits REST is supposed to provide. Most SOAP services support multiple operations on diverse data, all mediated through POST on a single URI. This isn’t resource-oriented: it’s RPC-style.</p>\n<p>The single most important change you can make is to split your service into resources: identify every “thing” in your service with a separate URI. Pretty much every SOAP toolkit in existence provides access to this information, so use it! Put the object reference up front. Such usages may not feel idiomatic at first, but if you stop and think about it, this is what you’d expect to be doing if SOAP were really a Simple <span class=\"emphasis\"><em>Object</em></span> Access Protocol. It’s the difference between object-oriented programming in a function-oriented language like C:<a id=\"I_programlisting10_tt945\"></a></p>\n<pre class=\"programlisting\">my_function(object, argument);</pre>\n<p>and in an object-oriented language like C++:</p>\n<a id=\"I_programlisting10_tt946\"></a>\n<pre class=\"programlisting\">object-&gt;my_method(argument);</pre>\n<p>When you move the scoping information outside the parentheses (or, in this case, the <code class=\"literal\">Envelope</code>), you’ll soon find yourself identifying large numbers of resources with common functionality. You’ll want to refactor your logic to exploit these commonalities.</p>\n<p>The next most important change has to do with the object-oriented concept of polymorphism. You should try to make objects of different types respond to method calls with the same name. In the world of the Web, this means (at a minimum) supporting HTTP’s <code class=\"function\">GET</code> method. Why is this important? Think about a programming language’s standard library. Pretty much every object-oriented language defines a standard class hierarchy, and at its root you find an <code class=\"literal\">Object</code> class which defines a <code class=\"function\">toString</code> method. The details are different for every language, but the result is always the same: every object has a method that provides a canonical representation of the object. The <code class=\"function\">GET</code> method provides a similar function for HTTP resources.</p>\n<p>Once you do this, you’ll inevitably notice that the <code class=\"function\">GET</code> method is used more heavily than all the other methods you have provided. Combined. And by a wide margin. That’s where conditional GET and caching come in. Implement these standard features of HTTP, make your representations cacheable, and you make your application more scalable. That has direct and tangible economic benefits.</p>\n<p>Once you’ve done these three simple things, you may find yourself wanting more. <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a> is full of advice on these topics.<a id=\"I_indexterm10_tt947\" class=\"indexterm\"></a><a id=\"I_indexterm10_tt948\" class=\"indexterm\"></a></p>",
      "slug" : "soap"
    }, {
      "title" : "WSDL",
      "type" : "page",
      "htmlContent" : "<p>SOAP <a id=\"I_indexterm10_tt949\" class=\"indexterm\"></a>provides an envelope for your messages, but little else. Beyond section 5 (which is falling out of favor), SOAP doesn’t constrain the structure of the message one bit. Many environments, especially those that depend on static typing, need a bit more definition up front. That’s where WSDL comes in.</p>\n<p>I’m going to illustrate the concepts behind WSDL using the <a class=\"ulink\" href=\"http://www.soapware.org/weblogsCom\" target=\"_top\"><code class=\"literal\">weblogs.com</code> SOAP 1.1 interface</a>. I chose it because it’s pretty much the simplest deployed SOAP interface out there. Any service you encounter or write will undoubtedly be more complicated, but the basic steps are the same.</p>\n<p>The <code class=\"literal\">weblogs.com</code> interface exposes a single RPC-style function called <code class=\"literal\">ping</code>. The function takes two arguments, both strings, and returns a <code class=\"literal\">pingResult</code> structure. This custom structure contains two elements: <code class=\"literal\">flerror</code>, a Boolean, and <code class=\"literal\">message</code>, a string. Strings and Booleans are standard primitive data types, but to use a <code class=\"literal\">pingResult</code> I need to define it as an XML Schema <code class=\"literal\">complexType</code>. I’ll do this within the <code class=\"literal\">types</code> element of my WSDL file in <a class=\"xref\" href=\"ch10.html#example_10_2\" title=\"Example&nbsp;10-2.&nbsp;XML Schema definition of the pingResult struct\">Example&nbsp;10-2</a>.</p>\n<div class=\"example\">\n <a id=\"example_10_2\"></a>\n <div class=\"example-title\">\n  Example&nbsp;10-2.&nbsp;XML Schema definition of the pingResult struct\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;types&gt;\n  &lt;s:schema targetNamespace=\"uri:weblogscom\"&gt;\n    &lt;s:complexType name=\"pingResult\"&gt;\n      &lt;s:sequence&gt;\n        &lt;s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"flerror\" type=\"s:boolean\"/&gt;\n        &lt;s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"message\" type=\"s:string\" /&gt;\n      &lt;/s:sequence&gt;\n    &lt;/s:complexType&gt;\n  &lt;/s:schema&gt;\n&lt;/types&gt;</pre>\n </div>\n</div>\n<p>Now that I’ve defined the custom type, I’ll move on to defining the messages that can be sent between client and server. There are two messages here: the <code class=\"literal\">ping</code> request and the <code class=\"literal\">ping</code> response. The request has two parts, and the response has only one (see <a class=\"xref\" href=\"ch10.html#example_10_3\" title=\"Example&nbsp;10-3.&nbsp;WSDL definitions of the ping messages\">Example&nbsp;10-3</a>).</p>\n<div class=\"example\">\n <a id=\"example_10_3\"></a>\n <div class=\"example-title\">\n  Example&nbsp;10-3.&nbsp;WSDL definitions of the ping messages\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;message name=\"pingRequest\"&gt;\n  &lt;part name=\"weblogname\" type=\"s:string\"/&gt;\n  &lt;part name=\"weblogurl\" type=\"s:string\"/&gt;\n&lt;/message&gt;\n\n&lt;message name=\"pingResponse\"&gt;\n  &lt;part name=\"result\" type=\"tns:pingResult\"/&gt;\n&lt;/message&gt;</pre>\n </div>\n</div>\n<p>Now I can use these messages in the definition of an WSDL <em class=\"firstterm\">operation</em>, which is defined as a part of a <em class=\"firstterm\">port type</em>. A <em class=\"firstterm\">port</em> is simply a collection of operations. A programming language would refer to this as a library, a module, or a class. But this is the world of messaging, so the connection points are called ports, and an abstract definition of a port is called a port type. In this case, I’m defining a port type that supports a single operation: <code class=\"literal\">ping</code> (see <a class=\"xref\" href=\"ch10.html#example_10_4\" title=\"Example&nbsp;10-4.&nbsp;WSDL definition of the portType for the ping operation\">Example&nbsp;10-4</a>).</p>\n<div class=\"example\">\n <a id=\"example_10_4\"></a>\n <div class=\"example-title\">\n  Example&nbsp;10-4.&nbsp;WSDL definition of the portType for the ping operation\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;portType name=\"pingPort\"&gt;\n  &lt;operation name=\"ping\"&gt;\n    &lt;input message=\"tns:pingRequest\"/&gt;\n    &lt;output message=\"tns:pingResponse\"/&gt;\n  &lt;/operation&gt;\n&lt;/portType&gt;</pre>\n </div>\n</div>\n<p>At this point, the definition is still abstract. There are any number of ways to implement this <code class=\"function\">ping</code> operation that takes two strings and returns a struct. I haven’t specified that the message is going to be transported via SOAP, or even that the message is going to be XML. Vendors of WSDL implementations are free to support other transports, but in <a class=\"xref\" href=\"ch10.html#example_10_5\" title=\"Example&nbsp;10-5.&nbsp;Binding the ping portType to a SOAP/HTTP implementation\">Example&nbsp;10-5</a>, the intended <em class=\"firstterm\">binding</em> is to section 5 compliant SOAP messages, sent over HTTP. This is the SOAP/HTTP binding for the port type, which will be presented without commentary.</p>\n<div class=\"example\">\n <a id=\"example_10_5\"></a>\n <div class=\"example-title\">\n  Example&nbsp;10-5.&nbsp;Binding the ping portType to a SOAP/HTTP implementation\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;binding name=\"pingSoap\" type=\"tns:pingPort\"&gt;\n  &lt;soap:binding style=\"rpc\" transport=\"http://schemas.xmlsoap.org/soap/http\" /&gt;\n  &lt;operation name=\"ping\"&gt;\n    &lt;soap:operation soapAction=\"/weblogUpdates\" style=\"rpc\"/&gt;\n    &lt;input&gt;\n      &lt;soap:body use=\"encoded\" namespace=\"uri:weblogscom\"\n        encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"/&gt;\n    &lt;/input&gt;\n    &lt;output&gt;\n      &lt;soap:body use=\"encoded\" namespace=\"uri:weblogscom\"\n        encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"/&gt;\n    &lt;/output&gt;\n  &lt;/operation&gt;\n&lt;/binding&gt;</pre>\n </div>\n</div>\n<p>We’re still not done. The final piece to the puzzle is to define a service, which connects a portType with a binding and (since this is SOAP over HTTP) with an endpoint URI (see <a class=\"xref\" href=\"ch10.html#example_10_6\" title=\"Example&nbsp;10-6.&nbsp;Defining a SOAP service that exposes the ping port\">Example&nbsp;10-6</a>).</p>\n<div class=\"example\">\n <a id=\"example_10_6\"></a>\n <div class=\"example-title\">\n  Example&nbsp;10-6.&nbsp;Defining a SOAP service that exposes the ping port\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;service name=\"weblogscom\"&gt;\n  &lt;document&gt;\n    For a complete description of this service, go to the following URL:\n    http://www.soapware.org/weblogsCom\n  &lt;/document&gt;\n\n  &lt;port name=\"pingPort\" binding=\"tns:pingSoap\"&gt;\n    &lt;soap:address location=\"http://rpc.weblogs.com:80/\"/&gt;\n  &lt;/port&gt;\n&lt;/service&gt;</pre>\n </div>\n</div>\n<p>The full WSDL for this single-function service is shown in <a class=\"xref\" href=\"ch10.html#example_10_7\" title=\"Example&nbsp;10-7.&nbsp;The complete WSDL file\">Example&nbsp;10-7</a>.</p>\n<div class=\"example\">\n <a id=\"example_10_7\"></a>\n <div class=\"example-title\">\n  Example&nbsp;10-7.&nbsp;The complete WSDL file\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;definitions\n  xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\n  xmlns:s=\"http://www.w3.org/2001/XMLSchema\"\n  xmlns:tns=\"uri:weblogscom\"\n  targetNamespace=\"uri:weblogscom\"\n  xmlns=\"http://schemas.xmlsoap.org/wsdl/\"&gt;\n\n  &lt;types&gt;\n     &lt;s:schema targetNamespace=\"uri:weblogscom\"&gt;\n      &lt;s:complexType name=\"pingResult\"&gt;\n    &lt;s:sequence&gt;\n      &lt;s:element minOccurs=\"1\" maxOccurs=\"1\"\n        name=\"flerror\" type=\"s:boolean\"/&gt;\n      &lt;s:element minOccurs=\"1\" maxOccurs=\"1\"\n        name=\"message\" type=\"s:string\" /&gt;\n    &lt;/s:sequence&gt;\n      &lt;/s:complexType&gt;\n    &lt;/s:schema&gt;\n  &lt;/types&gt;\n\n  &lt;message name=\"pingRequest\"&gt;\n    &lt;part name=\"weblogname\" type=\"s:string\"/&gt;\n    &lt;part name=\"weblogurl\" type=\"s:string\"/&gt;\n  &lt;/message&gt;\n\n  &lt;message name=\"pingResponse\"&gt;\n    &lt;part name=\"result\" type=\"tns:pingResult\"/&gt;\n  &lt;/message&gt;\n\n  &lt;portType name=\"pingPort\"&gt;\n    &lt;operation name=\"ping\"&gt;\n      &lt;input message=\"tns:pingRequest\"/&gt;\n      &lt;output message=\"tns:pingResponse\"/&gt;\n    &lt;/operation&gt;\n  &lt;/portType&gt;\n\n  &lt;binding name=\"pingSoap\" type=\"tns:pingPort\"&gt;\n    &lt;soap:binding style=\"rpc\"\n      transport=\"http://schemas.xmlsoap.org/soap/http\"/&gt;\n    &lt;operation name=\"ping\"&gt;\n      &lt;soap:operation soapAction=\"/weblogUpdates\" style=\"rpc\"/&gt;\n      &lt;input&gt;\n    &lt;soap:body use=\"encoded\" namespace=\"uri:weblogscom\"\n      encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"/&gt;\n      &lt;/input&gt;\n      &lt;output&gt;\n    &lt;soap:body use=\"encoded\" namespace=\"uri:weblogscom\"\n      encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"/&gt;\n      &lt;/output&gt;\n    &lt;/operation&gt;\n  &lt;/binding&gt;\n\n  &lt;service name=\"weblogscom\"&gt;\n    &lt;document&gt;\n      For a complete description of this service, go to the following\n      URL: http://www.soapware.org/weblogsCom\n    &lt;/document&gt;\n\n    &lt;port name=\"pingPort\" binding=\"tns:pingSoap\"&gt;\n      &lt;soap:address location=\"http://rpc.weblogs.com:80/\"/&gt;\n    &lt;/port&gt;\n  &lt;/service&gt;\n\n&lt;/definitions&gt;</pre>\n </div>\n</div>\n<p>Frankly, that’s a lot of work for a single operation that accepts two string parameters and returns a Boolean and a string. I had to do all this work because WSDL makes no simplifying assumptions. I started off specifying the request and response in the abstract. Then I had to bind them together into an operation. I exposed the operation as a <code class=\"literal\">portType</code>, I defined a port of that type that accepted SOAP messages through HTTP, and then I had to expose that port at a specific URI. For this simple case, creating the WSDL by hand is possible (I just did it) but difficult. That’s why most WSDL is generated by automated tools. For simple services you can start from a generated WSDL file and tweak it slightly, but beyond that you’re at the mercy of your tools.</p>\n<p>The tools then become the real story. They abstract away the service, the binding, the <code class=\"literal\">portType</code>, the messages, the schema, and even the network itself. If you are coding in a statically typed language, like C# or Java, you can have all this WSDL generated for you at the push of a button. Generally all you have to do is select which methods in which classes you want exposed as a web service. Almost all WSDL today is generated by tools and can only be understood by tools. After some setup, the client’s tools can call your methods through a web service and it looks like they’re calling native-language methods.</p>\n<p>What’s not to like? How is this different from a compiler, which turns high-level concepts into machine code?</p>\n<p>What ought to concern you is that you’re moving further and further away from the Web. Machine code is no substitute for a high-level language, but the Web is already a perfectly good platform for distributed programming. That’s the whole point of this book. This way of exposing programming-language methods as web services encourages an RPC style that has the overhead of HTTP, but doesn’t get any of the benefits I’ve been talking about.</p>\n<p>Even new WSDL features like document/literal encoding (which I haven’t covered here) encourage the RPC style of web services: one where every method is a POST, and one where URIs are overloaded to support multiple operations. It’s theoretically possible to define a fully RESTful and resource-oriented web service in WSDL (something that’s even more possible with WSDL 2.0). It’s also theoretically possible to stand an egg on end on a flat surface. You can do it, but you’ll be fighting your environment the whole way.</p>\n<p>Generated SOAP/WSDL interfaces also tend to be brittle. Different Big Web Services stacks interpret the standards differently, generate slightly different WSDL files, and can’t understand each other’s messages. The result is that clients are tightly bound to servers that use the same stack. Web services ought to be loosely coupled and resilient: they’re being exposed across a network to clients who might be using a totally different set of software tools. The web has already proven its ability to meet this goal.</p>\n<p>Worst of all, none of the complexities of WSDL help address the travel broker scenario. Solving the travel broker problem requires solving a number of business problems, like getting “a five-minute hold on seat 24C.” Strong typing and protocol independence aren’t the solution to any of these problems. Sometimes these requirements can be justified on their own terms, but a lot of the time they go unnoticed and unchallenged, silently dragging on other requirements like simplicity and scalability.</p>\n<h2>The Resource-Oriented Alternative</h2>\n<p>WSDL serves two main purposes in real web services. It describes which interface (which RPC-style functions) the service exposes. It also describes the representation formats: the schemas for the XML documents the service accepts and sends. In resource-oriented services, these functions are often unnecessary or can be handled with much simpler standards.</p>\n<p>From a RESTful perspective, the biggest problem with WSDL is what kind of interface it’s good at describing. WSDL encourages service designers to group many custom operations into a single “endpoint” that doesn’t respond to any uniform interface. Since all this functionality is accessible through overloaded POST on a single endpoint URI, the resulting service isn’t addressable.<a id=\"I_indexterm10_tt950\" class=\"indexterm\"></a> WADL is an alternative service description language that’s more in line with the Web. Rather than describing RPC-style function calls, it describes resources that respond to HTTP’s uniform interface.</p>\n<p>WSDL also has no provisions for defining hypertext links, beyond the <em class=\"firstterm\">anyURI</em> data type built into XML Schema. SOAP services aren’t well connected. How could they be, when an entire service is hidden behind a single address? Again, WADL solves this problem, describing how one resource links to another.</p>\n<p>A lot of the time you don’t need to describe your representation formats at all. In many Ajax applications, the client and server ends are written by the same group of people. If all you’re doing is serializing a data structure for transport across the wire (as happens in the <code class=\"literal\">weblogs.com</code> ping service), consider JSON as your representation format. You can represent fairly complex data structures in JSON without defining a schema; you don’t even need to use XML.</p>\n<p>Even when you do need XML, you often find yourself not needing a formally defined schema. Sprinkled throughout this book are numerous examples of clients that use XPath expressions like “/posts/post” to extract a desired chunk out of a larger XML document. These short strings are often the only description of an XML document a client needs.</p>\n<p>There’s nothing unRESTful or un-resource-oriented about XML Schema definitions. A schema definition is often overkill, but if it’s the right tool for the job, use it. I just think it shouldn’t be required.</p>",
      "slug" : "wsdl"
    }, {
      "title" : "UDDI",
      "type" : "page",
      "htmlContent" : "<p>A full <a id=\"I_indexterm10_tt951\" class=\"indexterm\"></a>description of UDDI is way beyond the scope of this book. Think of it as a yellow pages for WSDL, a way for clients to look up a service that fits their needs. UDDI is even more complex than WSDL. The UDDI specification defines a four-tier hierarchical XML schema that provides metadata about web service descriptions. The data structure types you’ll find in a UDDI registry are a <em class=\"firstterm\">businessEntity</em>, a <em class=\"firstterm\">businessService</em>, a <em class=\"firstterm\">bindingTemplate</em>, and a <em class=\"firstterm\">tModel</em>.</p>\n<p>The vision of UDDI was one of multiple registries: a fully-replicated Internet-scale registry for businesses, and a private registry behind the firewall of every company that wanted to host one. In 2006, IBM and Microsoft shut down their public UDDI registry after publicly declaring it a success. The IBM/Microsoft registry was reported to describe 50,000 businesses, but privately it was recognized that not all of that data was properly vetted, which inhibited adoption.</p>\n<p>So sheer complexity is not the only reason why public adoption of UDDI never caught on. This is just speculation, but additional factors were probably the relatively small number of public SOAP services, successful companies’ general desire to not commoditize themselves, and WSDL’s tendency to promote a unique interface for every web service. Which is a shame, as UDDI could definitely have helped travel brokers find independently operated hotels. UDDI has seen greater success within companies, where it’s practical to impose quality controls and impose uniform interfaces.</p>\n<h2>The Resource-Oriented Alternative</h2>\n<p>There’s no magic bullet here. Any automated system that helps people find hotels has a built-in economic incentive for hotel chains to game the system. This doesn’t mean that computers can’t assist in the process, but it does mean that a human needs to make the ultimate decision.</p>\n<p>The closest RESTful equivalents to UDDI are the search engines, like Google, Yahoo!, and MSN. These help (human) clients find the resources they’re looking for. They take advantage of the uniform interface and common data formats promoted by REST. Even this isn’t perfect: spammers try to game the search engines, and sometimes they succeed. But think of the value of search engines and you’ll see the promise of UDDI, even if its complexity turns you off.</p>\n<p>As RESTful web services grow in popularity and become better-connected (both internally and to the Web at large), something like today’s search engines may fulfill the promise of the public UDDI registry. Instead of searching for services that expose certain APIs, we’ll search for resources that accept or serve representations with certain semantics. Again, this is speculation. Right now, the public directories of web services (I list a few in <a class=\"xref\" href=\"apa.html\" title=\"Appendix&nbsp;A.&nbsp;Some Resources for REST and Some RESTful Resources\">Appendix&nbsp;A</a>) are oriented toward use by human beings.</p>",
      "slug" : "uddi"
    }, {
      "title" : "Security",
      "type" : "page",
      "htmlContent" : "<p>“Security” evokes a<a id=\"I_indexterm10_tt952\" class=\"indexterm\"></a> lot of related concepts: signatures, encryption, keys, trust, federation, and identity. HTTP’s security techniques focus pretty much exclusively on authentication and the transfer of messages. The collection of WS-* specifications related to security (and they are numerous) attempt to cover a more complete picture.</p>\n<p>The simplest application of WS-Security is the UserName token profile. This is a<a id=\"I_indexterm10_tt953\" class=\"indexterm\"></a> SOAP “sticker” that goes on the envelope to give some context to the request: in this case, the sticker explains who’s making the request (see <a class=\"xref\" href=\"ch10.html#example_10_8\" title=\"Example&nbsp;10-8.&nbsp;The UserName token: a SOAP sticker\">Example&nbsp;10-8</a>).</p>\n<div class=\"example\">\n <a id=\"example_10_8\"></a>\n <div class=\"example-title\">\n  Example&nbsp;10-8.&nbsp;The UserName token: a SOAP sticker\n </div>\n <div class=\"example-contents\">\n  <pre class=\"screen\">&lt;Security wsse=\"http://schemas.xmlsoap.org/ws/2002/xx/secext\"&gt;\n   &lt;UsernameToken&gt;\n      &lt;Username&gt;Zoe&lt;/Username&gt;\n      &lt;Password&gt;ILoveDogs&lt;/Password&gt;\n   &lt;/UsernameToken&gt;\n&lt;/Security&gt;</pre>\n </div>\n</div>\n<p>When placed inside of the <code class=\"literal\">Header</code> section of a SOAP message, this conveys a set of authentication credentials. It has the same qualities as HTTP Basic authentication, an HTTP sticker which goes into the <code class=\"literal\">Authorization</code> HTTP header.</p>\n<p>Passing passwords in clear text is not exactly best practice, especially if the channel isn’t secure. WS-Security defines a number of alternatives. To oversimplify considerably, the WS-Security specification defines a consistent set of XML element names for conveying concepts defined in other standards: passwords, SAML tokens, X.509 tokens, Kerberos tokens, and the like. There’s no reason that a similar effort couldn’t be undertaken to map similar concepts to HTTP headers. HTTP authentication is extensible, and in the early days of the development of Atom, some WS-Security concepts were ported to HTTP as WSSE (again, see <a class=\"xref\" href=\"ch08.html#http-auth\" title=\"Authentication and Authorization\">Authentication and Authorization</a>” in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>).</p>\n<p class=\"keep-together\">But Big Web Services security involves more than the WS-Security standard. Two examples:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><em class=\"firstterm\">Signatures</em> <a id=\"I_indexterm10_tt954\" class=\"indexterm\"></a>can enable nonrepudiation. It’s possible to prove who the originator of a given message was long after it was sent, and that the message was not modified after it was sent. These concepts are important in contracts and checks.</p></li>\n  <li class=\"listitem\"><p><em class=\"firstterm\">Federation</em> enables a third<a id=\"I_indexterm10_tt955\" class=\"indexterm\"></a> party to broker trust of identities. This would allow a travel broker to verify that a given person works for one of the travel broker’s customers: this might affect billing and discounts.</p></li>\n </ul>\n</div>\n<p>More examples are well beyond the scope of this book. Suffice it to say that security concepts are much better specified and deployed in SOAP-based protocols than in native HTTP protocols. That doesn’t mean that this gap can’t be closed, that SOAP stickers can’t be ported to HTTP stickers, or that one-off solutions are not possible without SOAP. Right now, though, SOAP has many security-related stickers that HTTP doesn’t have, and these stickers <span class=\"emphasis\"><em>are</em></span> useful when implementing applications like the travel broker.</p>\n<p>As a caution, many of these areas are not areas where amateurs can productively dabble. Nobody should try to add new security concepts to HTTP all by themselves.</p>\n<h2>The Resource-Oriented Alternative</h2>\n<p>An application is only as secure as its weakest link. If you encrypt a credit card number for transport over the wire and then simply store it in a database, all you’ve done is ensure that attackers will target your database. Your view of security needs to encompass the entire system, not just the bits transmitted over the network.</p>\n<p>That said, the WS-Security family of specifications are not the only tools for securing those bits. HTTPS (a.k.a Transport Layer Security [TLS], <a id=\"I_indexterm10_tt956\" class=\"indexterm\"></a><a id=\"I_indexterm10_tt957\" class=\"indexterm\"></a>a.k.a. <a id=\"I_indexterm10_tt958\" class=\"indexterm\"></a><a id=\"I_indexterm10_tt959\" class=\"indexterm\"></a>Secure Sockets Layer [SSL]) has proven sufficient in practice for securing credit card information as it’s sent across the network. People trust their credit cards to SSL all the time, and the vast majority of attacks don’t involve breaking SSL. The use of XML signatures and encryption is also not limited to WS-*. Section 5 of the Atom Syndication Format standard shows how to use these features in Atom documents. You’ve also seen how S3 implements request signing and access control in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>. These aspects of security are possible, and have been deployed, in RESTful resource-oriented services. But no one’s done the work to make these features available in general.</p>\n<p class=\"keep-together\">When all is said and done, your best protection may be the fact that resource-oriented architectures promote simplicity and uniformity. When you’re trying to build a secure application, neither complexity nor a large number of interfaces turn out to be advantages.</p>",
      "slug" : "security"
    }, {
      "title" : "Reliable Messaging",
      "type" : "page",
      "htmlContent" : "<p>The WS-ReliableMessaging <a id=\"I_indexterm10_tt960\" class=\"indexterm\"></a><a id=\"I_indexterm10_tt961\" class=\"indexterm\"></a>standard tries to provide assurances to an application that a sequence of messages will be delivered AtMostOnce, AtLeastOnce, ExactlyOnce, or InOrder. It defines some new headers (that is, stickers on the envelope) that track sequence identifiers and message numbers, and some retry logic.</p>\n<h2>The Resource-Oriented Alternative</h2>\n<p>Again, these are areas where the specification and implementation for SOAP-based protocols are further advanced than those for native HTTP. In this case, there is an important difference. When used in a certain way, HTTP doesn’t need these stickers at all.</p>\n<p>As I said earlier, almost all of the HTTP methods are idempotent. If a GET, HEAD, PUT, or DELETE operation doesn’t go through, or you don’t know whether or not it went through, the appropriate course of action is to just retry the request. With idempotent operations, there’s no difference between AtMostOnce, AtLeastOnce, and ExactlyOnce. To get InOrder you just send the messages in order, making sure that each one goes through.</p>\n<p>The only nonidempotent method is POST, the one that SOAP uses. SOAP solves the reliable delivery problem from scratch, by defining extra stickers. In a RESTful application, if you want reliable messaging for all operations, I recommend implementing POST Once Exactly (covered back in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>) or getting rid of POST altogether. The WS-ReliableMessaging standard is motivated mainly by complex scenarios that RESTful web services don’t address at all. These might be situations where a message is routed through multiple protocols on the way to its destination, or where both source and destination are cell phones with intermittent access to the network.</p>",
      "slug" : "reliable-messaging"
    }, {
      "title" : "Transactions",
      "type" : "page",
      "htmlContent" : "<p>Transactions are simple <a id=\"I_indexterm10_tt962\" class=\"indexterm\"></a>to describe, but insanely difficult to implement, particularly in a distributed environment. The idea is that you have a set of operations: say, “transfer $50 from bank A to bank B,” and the entire operation must either succeed or fail. Bank A and bank B compete with each other and expose separate web services. You either want bank A to be debited and bank B to be credited, or you want nothing to happen at all. Neither debiting without crediting, or crediting without debiting are desirable outcomes.</p>\n<p>There are two basic approaches. The WS-AtomicTransaction standard specifies a common algorithm called a <em class=\"firstterm\">two-phase commit</em>. In general, this is only wise between parties that trust one another, but it’s the easiest to implement, it falls within the scope of existing products, and therefore it’s the one that is most widely deployed.</p>\n<p>The second approach is defined by WS-BusinessActivity, and it more closely follows how businesses actually work. If you deposit a check from a foreign bank, your bank may put a hold on it and seek confirmation from the foreign bank. If it hears about a problem before the hold expires, it rolls back the transaction. Otherwise, it accepts the check. If it happens to hear about a problem after it’s committed the transaction, it creates a compensating transaction to undo the deposit. The focus is on undoing mistakes in an auditable way, not just preventing them from happening.</p>\n<h2>The Resource-Oriented Alternative</h2>\n<p>Again, there’s not much that corresponds to this level of specification and deployment in native HTTP applications. It’s usually not necessary at all. In <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a> I implemented a transaction system by exposing the transactions as resources, but I didn’t need two-phase commit because there was only one party to the transaction. I was transferring money between accounts in a single bank. But if a number of web services supported this kind of transaction, I could stick a little bit of infrastructure on top and then orchestrate them with RESTful two-phase commit.</p>\n<p>Two-phase commit requires a level of control over and trust in the services you’re coordinating. This works well when all the services are yours, but not so well when you need to work with a competing bank. SOA architects think two-phase commit is inappropriate for web service-based interactions in general, and I think it’s usually inappropriate for RESTful web services. When you don’t control the services you’re coordinating, I recommend implementing the ideas behind WS-BusinessActivity with asynchronous operations (again, from <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>).</p>\n<p>To go back to the example of the check from a foreign bank: your bank might create a “job” resource on the foreign bank’s web service, asking if the check is valid. After a week with no updates to that resource, your bank might provisionally accept the check. If two days later the foreign bank updates the “job” resource saying that the check is bad, your bank can create a compensating transaction, possibly triggering an overdraft and other alerts. You probably won’t need to create a complex scenario like this, but you can see how patterns I’ve already demonstrated can be used to implement these new ideas.</p>",
      "slug" : "transactions"
    }, {
      "title" : "BPEL, ESB, and SOA",
      "type" : "page",
      "htmlContent" : "<p>Implemented on top of the foundation I just described are some concepts that are controversial even in the world of Big Web Services. I’ll cover them briefly here.</p>\n<p>Business Process Execution Language (BPEL)<a id=\"I_indexterm10_tt963\" class=\"indexterm\"></a><a id=\"I_indexterm10_tt964\" class=\"indexterm\"></a> is an XML grammar that makes it possible to describe business processes that span multiple parties. The processes can be orchestrated automatically via software and web services.</p>\n<p>The definition of an Enterprise Service Bus (ESB)<a id=\"I_indexterm10_tt965\" class=\"indexterm\"></a><a id=\"I_indexterm10_tt966\" class=\"indexterm\"></a> varies, but tends to include discovery, load balancing, routing, bridging, transformation, and management of web service requests. This often leads to a separation of operations from development, making each simpler and easier to run.</p>\n<p>The downside of BPEL and ESB is that they tend to increase coupling with, and reliance on, common third-party middleware. One upside is that you have a number of choices in middleware, varying from well-supported open source offerings to ones provided by established and recognized proprietary vendors.</p>\n<p>Service-Oriented Architecture (SOA)<a id=\"I_indexterm10_tt967\" class=\"indexterm\"></a><a id=\"I_indexterm10_tt968\" class=\"indexterm\"></a> is perhaps the least well-defined term of all, which is why I called it out in <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a> as a term I wasn’t going to use. I know of no litmus test which indicates whether a given implementation is SOA or not. Sometimes a discussion of SOA starts off saying that SOA encompasses all REST/HTTP applications, but inevitably the focus turns to the Big Web Services standards I described in this chapter.</p>\n<p>That said, one aspect of SOA is noteworthy. To date, many approaches to distributed programming focus on remote procedure calls, striving to make them as indistinguishable from local procedure calls as humanly possible. An example is a WSDL file generated from a preexisting application. The SOA idea at least returns the focus to interfaces: in particular, to interfaces that span machine boundaries. Machine boundaries tend to not happen by accident. They often correlate to trust boundaries, and they’re the places where message reliability tends to be an issue. Machine boundaries should be studied, not abstracted away</p>\n<p>Some other aspects of SOA are independent of the technical architecture of a service. They can be implemented in resource-oriented environments, environments full of Remote Procedure Call services, or heterogeneous environments. “Governance,” for example, has to do with auditing and conformance to policies. These “policies” can be anything from government regulations to architectural principles. One possible policy might be: “Don’t make RPC-style web service calls.”</p>",
      "slug" : "bpel-esb-and-soa"
    }, {
      "title" : "Conclusion",
      "type" : "page",
      "htmlContent" : "<p>Both REST and web services have become buzzwords. They are chic and fashionable. These terms are artfully woven into PowerPoint presentations by people who have no real understanding of the subject. This chapter, and indeed this book, is an attempt to dispel some of the confusion.</p>\n<p>In this chapter you’ve seen firsthand the value that SOAP brings (not so much), and the complexity that WSDL brings (way too much). You’ve also seen resource-oriented alternatives listed every step of the way. Hopefully this will help you make better choices. If you can see you’ll need some of the features described in this chapter which are only available as stickers on SOAP envelopes, getting started on the SOAP path from the beginning will provide a basis for you to build on.</p>\n<p>The alternative is to start lightweight and apply the <a id=\"I_indexterm10_tt969\" class=\"indexterm\"></a>YAGNI (You Aren’t Gonna Need It) principle, adding only the features that you know you actually need. If it turns out you need some of the stickers that only Big Web Services can provide, you can always wrap your XML representations in SOAP envelopes, or cherry-pick the stickers you need and port them to HTTP headers. Given the proven scalability of the Web, starting simple is usually a safe choice—safe enough, I think, to be the default.<a id=\"I_indexterm10_tt970\" class=\"indexterm\"></a><a id=\"I_indexterm10_tt971\" class=\"indexterm\"></a></p>",
      "slug" : "conclusion"
    } ]
  }, {
    "title" : "11. Ajax Applications as REST Clients",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;11.&nbsp;Ajax Applications as REST Clients</h2>\n  </div>\n </div>\n</div>\n<p>Ajax applications<a id=\"ch11_ajax\" class=\"indexterm\"></a> have become very hot during the past couple of years. Significantly hotter, in fact, than even knowing what Ajax applications are. Fortunately, once you understand the themes of this book it’s easy to explain Ajax in those terms. At the risk of seeming old-fashioned, I’d like to present a formal definition of Ajax:</p>\n<div class=\"blockquote\">\n <blockquote class=\"blockquote\">\n  <p>An Ajax application is a web service client that runs inside a web browser.</p>\n </blockquote>\n</div>\n<p>Does this make sense? Consider two examples widely accepted not to be Ajax applications: a JavaScript form validator and a Flash graphics demo. Both run inside the web browser, but they don’t make programmatic HTTP requests, so they’re not Ajax applications. On the flip side: the standalone clients I wrote in Chapters<a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">2</a> and <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">3</a> aren’t Ajax applications because they don’t run inside a web browser.</p>\n<p>Now consider Gmail,<a id=\"I_indexterm11_tt972\" class=\"indexterm\"></a> a site that everyone agrees uses Ajax. If you log into Gmail you can watch your browser make background requests to the web service at <code class=\"literal\">mail.google.com</code>, and update the web page you’re seeing with new data. That’s exactly what a web service client does. The Gmail web service has no public-facing name and is not intended for use by clients other than the Gmail web page, but it’s a web service nonetheless. Don’t believe it? There are libraries like <a class=\"ulink\" href=\"http://libgmail.sourceforge.net/\" target=\"_top\">libgmail</a> that<a id=\"I_indexterm11_tt973\" class=\"indexterm\"></a> act as unofficial, non-Ajax clients to the Gmail web service. Remember, if it’s on the Web, it’s a web service.</p>\n<p>This chapter covers client programming, and it picks up where <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a> left off. Here I’m focusing on the special powers and needs of web service clients that run in a browser environment. I cover<a id=\"I_indexterm11_tt974\" class=\"indexterm\"></a> JavaScript’s <code class=\"classname\">XMLHttpRequest</code> class and the browser’s DOM, and show how security settings affect which web service clients you can run in a browser.</p>",
    "textContent" : "Chapter 11. Ajax Applications as REST Clients\r\n\r\nAjax applications have become very hot during the past couple of years. Significantly hotter, in fact, than even knowing what Ajax applications are. Fortunately, once you understand the themes of this book it’s easy to explain Ajax in those terms. At the risk of seeming old-fashioned, I’d like to present a formal definition of Ajax:\r\n\r\n    An Ajax application is a web service client that runs inside a web browser.\r\n\r\nDoes this make sense? Consider two examples widely accepted not to be Ajax applications: a JavaScript form validator and a Flash graphics demo. Both run inside the web browser, but they don’t make programmatic HTTP requests, so they’re not Ajax applications. On the flip side: the standalone clients I wrote in Chapters2 and 3 aren’t Ajax applications because they don’t run inside a web browser.\r\n\r\nNow consider Gmail, a site that everyone agrees uses Ajax. If you log into Gmail you can watch your browser make background requests to the web service at mail.google.com, and update the web page you’re seeing with new data. That’s exactly what a web service client does. The Gmail web service has no public-facing name and is not intended for use by clients other than the Gmail web page, but it’s a web service nonetheless. Don’t believe it? There are libraries like libgmail <http://libgmail.sourceforge.net/> that act as unofficial, non-Ajax clients to the Gmail web service. Remember, if it’s on the Web, it’s a web service.\r\n\r\nThis chapter covers client programming, and it picks up where Chapter 2 left off. Here I’m focusing on the special powers and needs of web service clients that run in a browser environment. I cover JavaScript’s XMLHttpRequest class and the browser’s DOM, and show how security settings affect which web service clients you can run in a browser.",
    "slug" : "11-ajax-applications-as-rest-clients",
    "pages" : [ {
      "title" : "From AJAX to Ajax",
      "type" : "page",
      "htmlContent" : "<p>Every introduction to Ajax will tell you that it used to be AJAX, an acronym for <a id=\"I_indexterm11_tt976\" class=\"indexterm\"></a>Asynchronous JavaScript And XML. The acronym has been decommissioned and now Ajax is just a word. It’s worth spending a little time exploring why this happened. Programmers didn’t suddenly lose interest in acronyms. AJAX had to be abandoned because what it says isn’t necessarily true. Ajax is an architectural style that doesn’t need to involve JavaScript or XML.</p>\n<p>The JavaScript in AJAX<a id=\"I_indexterm11_tt977\" class=\"indexterm\"></a> actually means whatever browser-side language is making the HTTP requests. This is <span class=\"emphasis\"><em>usually</em></span> JavaScript, but it can be any language the browser knows how to interpret. Other possibilities are ActionScript<a id=\"I_indexterm11_tt978\" class=\"indexterm\"></a> (running within a Flash application),<a id=\"I_indexterm11_tt979\" class=\"indexterm\"></a> Java (running within an applet), and browser-specific languages like Internet Explorer’s<a id=\"I_indexterm11_tt980\" class=\"indexterm\"></a> VBScript.</p>\n<p>XML actually means whatever representation format the web service is sending. This can be any format, so long as the browser side can understand it. Again, this is <span class=\"emphasis\"><em>usually</em></span> XML, because it’s easy for browsers to parse, and because web services tend to serve XML representations. But JSON is also very common, and it can be also be HTML, plain text, or image files: anything the browser can handle or the browser-side script can parse.</p>\n<p>So AJAX hackers decided to become Ajax hackers, rather than always having to explain that JavaScript needn’t mean JavaScript and XML might not be XML, or becoming Client-Side Scripting And Representation Format hackers. When I talk about Ajax in this book I mostly talk in terms of JavaScript and XML, but I’m not talking <span class=\"emphasis\"><em>about</em></span> those technologies: I’m talking about an application architecture.</p>",
      "slug" : "from-ajax-to-ajax"
    }, {
      "title" : "The Ajax Architecture",
      "type" : "page",
      "htmlContent" : "<p>The Ajax architecture works something like this:</p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>A user,<a id=\"I_indexterm11_tt982\" class=\"indexterm\"></a> controlling a browser, makes a request for the main URI of an application.</p></li>\n  <li class=\"listitem\"><p>The server serves a web page that contains an embedded script.</p></li>\n  <li class=\"listitem\"><p>The browser renders the web page and either runs the script, or waits for the user to trigger one of the script’s actions with a keyboard or mouse operation.</p></li>\n  <li class=\"listitem\"><p>The script makes an asynchronous HTTP request to some URI on the server. The user can do other things while the request is being made, and is probably not even aware that the request is happening.</p></li>\n  <li class=\"listitem\"><p>The script parses the HTTP response and uses the data to modify the user’s view. This might mean using DOM methods to change the tag structure of the original HTML page. It might mean modifying what’s displayed inside a Flash application or Java applet.</p><p>From the user’s point of view, it looks like the GUI just modified itself.</p></li>\n </ol>\n</div>\n<p>This architecture looks a lot like that of a client-side GUI application. In fact, that’s what this is. The web browser provides the GUI elements (as described in your initial HTML file) and the event loop (through JavaScript events). The user triggers events, which get data from elsewhere and alter the GUI elements to fit. This is why Ajax applications are often praised as working like desktop applications: they have the same architecture.</p>\n<p>A standard web application has the same GUI elements but a simpler event loop. Every click or form submission causes a refresh of the entire view. The browser gets a new HTML page and constructs a whole new set of <a id=\"I_indexterm11_tt983\" class=\"indexterm\"></a>GUI elements. In an Ajax application, the GUI can change a little bit at a time. This saves bandwidth and reduces the psychological effects on the end user. The application appears to change incrementally instead of in sudden jerks.</p>\n<p>The downside is that every application state has the same URI: the first one the end user visited. Addressability and statelessness are destroyed. The underlying web service may be addressable and stateless, but the end user can no longer bookmark a particular state, and the browser’s “Back” button stops working the way it should. The application is no longer on the Web, any more than a SOAP+WSDL web service that only exposes a single URI is on the Web. I discuss what to do about this later.</p>",
      "slug" : "the-ajax-architecture"
    }, {
      "title" : "A del.icio.us Example",
      "type" : "page",
      "htmlContent" : "<p>Back in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a> I showed clients in various languages for a REST-RPC hybrid service: the API for the del.icio.us social bookmarking application. Though I implemented my own, fully RESTful version of that service in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, I’m going to bring the original service out one more time to demonstrate a client written in JavaScript. Like most JavaScript programs, this one runs in a web browser, and since it’s a web service client, that makes it an Ajax application. Although simple, this program brings up almost all of the advantages of and problems with Ajax that I discuss in this chapter.</p>\n<p>The first part of the application is the user interface, implemented in plain HTML. This is quite different from my other del.icio.us clients, which ran on the command line and wrote their data to standard output (see <a class=\"xref\" href=\"ch11.html#ajaxdeliciousform\" title=\"Example&nbsp;11-1.&nbsp;An Ajax client to the del.icio.us web service\">Example&nbsp;11-1</a>).</p>\n<div class=\"example\">\n <a id=\"ajaxdeliciousform\"></a>\n <div class=\"example-title\">\n  Example&nbsp;11-1.&nbsp;An Ajax client to the del.icio.us web service\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0\n Transitional//EN\" \"http://www.w3.org/TR/REC-html40/transitional.dtd\"&gt;\n&lt;!--delicious-ajax.html--&gt;\n&lt;!--An Ajax application that uses the del.icio.us web service. This\n     application will probably only work when saved as a local\n     file. Even then, your browser's security policy might prevent it\n     from running.--&gt;\n\n&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;JavaScript del.icio.us&lt;/title&gt;\n &lt;/head&gt; \n &lt;body&gt;\n  &lt;h1&gt;JavaScript del.icio.us example&lt;/h1&gt;\n\n  &lt;p&gt;Enter your del.icio.us account information, and I'll fetch and\n  display your most recent bookmarks.&lt;/p&gt;\n\n  &lt;form onsubmit=\"callDelicious(); return false;\"&gt; \n    Username: &lt;input id=\"username\" type=\"text\" /&gt;&lt;br /&gt; \n    Password: &lt;input id=\"password\" type=\"password\" /&gt;&lt;br /&gt; \n    &lt;input type=\"submit\" value=\"Fetch del.icio.us bookmarks\"/&gt;\n  &lt;/form&gt;\n\n  &lt;div id=\"message\"&gt;&lt;/div&gt;\n  \n  &lt;ul id=\"links\"&gt;&lt;/ul&gt;</pre>\n </div>\n</div>\n<p>My user interface is an HTML form that doesn’t point anywhere, and some tags (<code class=\"literal\">div</code> and <code class=\"literal\">ul</code>) that don’t contain anything. I’m going to manipulate these tags with JavaScript functions. The first is <code class=\"function\">setMessage</code>, which puts a given string into the <code class=\"literal\">div</code> tag (see <a class=\"xref\" href=\"ch11.html#example_11_2\" title=\"Example&nbsp;11-2.&nbsp;Ajax client continued: definition of setMessage\">Example&nbsp;11-2</a>).</p>\n<div class=\"example\">\n <a id=\"example_11_2\"></a>\n <div class=\"example-title\">\n  Example&nbsp;11-2.&nbsp;Ajax client continued: definition of setMessage\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">  &lt;script type=\"text/javascript\"&gt;      \n   function setMessage(newValue) { \n     message = document.getElementById(\"message\"); \n     message.firstChild.textContent = newValue;\n   }</pre>\n </div>\n</div>\n<p>And it’s not quite fair to say that the HTML form doesn’t point anywhere. Sure, it doesn’t have an “action” attribute like a normal HTML form, but it does have an <code class=\"function\">onsubmit</code> event handler. This means the web browser will call the JavaScript function <code class=\"function\">callDelicious</code> whenever the end user clicks the submit button. Instead of going through the page request loop of a web browser, I’m using the GUI-like event loop of a JavaScript program.</p>\n<p>The <code class=\"function\">callDelicious</code> function uses the JavaScript library <code class=\"classname\">XMLHttpRequest</code> to fetch data from <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts/recent/\" target=\"_top\">https://api.del.icio.us/v1/posts/recent/</a>. This is the URI used throughout <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a> to fetch a user’s most recent del.icio.us bookmarks. First we need to do some housekeeping: get permission from the browser to send the request, and gather whatever data the user entered into the HTML form (see <a class=\"xref\" href=\"ch11.html#ajaxcalldelicious\" title=\"Example&nbsp;11-3.&nbsp;Ajax client continued: definition of callDelicious\">Example&nbsp;11-3</a>).</p>\n<div class=\"example\">\n <a id=\"ajaxcalldelicious\"></a>\n <div class=\"example-title\">\n  Example&nbsp;11-3.&nbsp;Ajax client continued: definition of callDelicious\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">   function callDelicious() { // Get permission from the browser to send the request. \n     try {\n       if (netscape.security.PrivilegeManager.enablePrivilege)\n         netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserRead\");\n     } catch (e) { \n       alert(\"Sorry, browser security settings won't let this program run.\"); \n       return; \n     }\n\n     // Fetch the user-entered account information \n     var username = document.getElementById(\"username\").value; \n     var password = document.getElementById(\"password\").value;\n\n     // Remove any old links from the list. \n     var links = document.getElementById(\"links\"); \n     while (links.firstChild) \n       links.removeChild(links.firstChild) \n     setMessage(\"Please wait...\");</pre>\n </div>\n</div>\n<p>Now we’re ready to send the HTTP request, as shown in <a class=\"xref\" href=\"ch11.html#calldeliciouscontinued\" title=\"Example&nbsp;11-4.&nbsp;callDelicious definition continued\">Example&nbsp;11-4</a>.</p>\n<div class=\"example\">\n <a id=\"calldeliciouscontinued\"></a>\n <div class=\"example-title\">\n  Example&nbsp;11-4.&nbsp;callDelicious definition continued\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">     // Send the request. \n     // See \"Working Around the Corner Cases\" for a cross-browser \n     // \"createXMLHttpRequest\" implementation. \n     request = new XMLHttpRequest(); \n     request.open(\"GET\", \"https://api.del.icio.us/v1/posts/recent\", true, \n                  username, password);\n     request.onreadystatechange = populateLinkList; \n     request.send(null);</pre>\n </div>\n</div>\n<p>The third JavaScript function I’ll define is <code class=\"function\">populateLinkList</code>. I’ve already referenced this function, in the line <code class=\"literal\">request.onreadystatechange = populateLinkList</code>. That line sets up <code class=\"function\">populateLinkList</code> as a callback function. The idea is that while <code class=\"literal\">api.del.icio.us</code> is processing the request, the user can go about her business, surfing the web in another browser window. Once the request completes, the browser calls <code class=\"function\">populateLinkList</code>, which handles the response. You can do JavaScript programming without these callback functions, but it’s a bad idea. Without callbacks, the web browser will go nonresponsive while the <code class=\"classname\">XMLHttpRequest</code> object is making an HTTP request. Not very asynchronous.</p>\n<p>The job of <code class=\"function\">populateLinkList</code> is to parse the XML document from the del.icio.us web service. The representation in <a class=\"xref\" href=\"ch11.html#populatelinklistcontinued\" title=\"Example&nbsp;11-5.&nbsp;Ajax client concluded: definition of populateLinkList\">Example&nbsp;11-5</a> represents a list of bookmarks, and <code class=\"literal\">populateLinkList</code> turns each bookmark into a list item of the formerly empty <code class=\"literal\">ul</code> list tag.</p>\n<div class=\"example\">\n <a id=\"populatelinklistcontinued\"></a>\n <div class=\"example-title\">\n  Example&nbsp;11-5.&nbsp;Ajax client concluded: definition of populateLinkList\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">     // Called when the HTTP request has completed. \n     function populateLinkList() { \n       if (request.readyState != 4) // Request has not yet completed\n         return;\n\n      setMessage(\"Request complete.\"); \n      if (netscape.security.PrivilegeManager.enablePrivilege) \n        netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserRead\");\n      // Find the \"post\" tags in the representation\n      posts = request.responseXML.getElementsByTagName(\"post\");\n\n      setMessage(posts.length + \" link(s) found:\"); \n      // For every \"post\" tag in the XML document...\n      for (var i = 0; i &lt; posts.length; i++) { \n        post = posts[i]; \n        // ...create a link that links to the appropriate URI.\n        var link = document.createElement(\"a\"); \n        var description = post.getAttribute('description'); \n        link.setAttribute(\"href\", post.getAttribute('href'));\n        link.appendChild(document.createTextNode(description));\n\n        // Stick the link in an \"li\" tag...\n        var listItem = document.createElement(\"li\");\n        // ...and make the \"li\" tag a child of the \"ul\" tag.\n        listItem.appendChild(link); links.appendChild(listItem)\n      }\n    }\n  }\n  &lt;/script&gt; \n &lt;/body&gt;\n&lt;/html&gt;</pre>\n </div>\n</div>",
      "slug" : "a-del-icio-us-example"
    }, {
      "title" : "The Advantages of Ajax",
      "type" : "page",
      "htmlContent" : "<p>If you try out the del.icio.us client you’ll notice <a id=\"I_indexterm11_tt986\" class=\"indexterm\"></a>some nice features that come from the web browser environment. Most obviously: unlike the examples in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, this application has a GUI. And as GUI programming goes, this is pretty easy. Method calls that seem to do nothing but manipulate a mysterious document data structure, actually change the end user’s view of the application. The document is just the thing the user sees rendered in the browser. Since the browser knows how to turn changes to the document into GUI layout changes, there’s no widget creation and layout specification, as you’d see in conventional GUI programs.</p>\n<p class=\"keep-together\">This client also never explicitly parses the XML response from the del.icio.us web service. A web browser has an XML parser built in, and <code class=\"classname\">XMLHttpRequest</code> automatically parses into a DOM object any XML document that comes in on a web service response. You access the DOM object through the <code class=\"function\">XMLHttpRequest.responseXML</code> member. The DOM standard for web browsers defines the API for this object: you can iterate over its children, search it with methods like <code class=\"function\">getElementsByTagName</code>, or hit it with XPath expressions.</p>\n<p>More subtly: try loading this HTML file and clicking the submit button without providing a username and password. You’ll get a dialog box asking you for a del.icio.us username and password: the same dialog box you get whenever your browser accesses a page that requires HTTP basic auth. This is exactly what you’re doing: visiting <a class=\"ulink\" href=\"https://api.del.icio.us/v1/posts/recent\" target=\"_top\">https://api.del.icio.us/v1/posts/recent</a>, which requires HTTP basic auth, in your web browser. But now you’re doing it by triggering an action in an Ajax application, rather than clicking on a link to the URI.</p>\n<p class=\"keep-together\">Web browsers are by far the most popular HTTP clients out there, and they’ve been written to handle the corner cases of HTTP. You could remove both text fields from the HTML form in <a class=\"xref\" href=\"ch11.html#ajaxdeliciousform\" title=\"Example&nbsp;11-1.&nbsp;An Ajax client to the del.icio.us web service\">Example&nbsp;11-1</a>, and the Ajax application would still work, because real web browsers have their own user interface for gathering basic HTTP auth information.</p>",
      "slug" : "the-advantages-of-ajax"
    }, {
      "title" : "The Disadvantages of Ajax",
      "type" : "page",
      "htmlContent" : "<p>Unfortunately, thanks to the wide variety of web browsers in use, you’ll need to deal with a whole new set of corner cases if you want your application to work in all browsers. Later on I’ll show you code libraries and code snippets that work around the corner cases.</p>\n<p>If you try out this program, you’ll also run into the problem I talked about at the end of <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>: why should the end user trust the web service client? You’d trust your browser with your del.icio.us username and password, but this isn’t your browser. It’s a web service client that uses your browser to make HTTP requests, and it could be doing anything in those requests. If this was an official web page that was itself served from <code class=\"literal\">api.del.icio.us</code>, then your browser would trust it to make web service calls to the server it came from. But it’s a web page that comes from a file on your hard drive, and wants to call out to the Web at large. To a web browser, this is very suspicious behavior.</p>\n<p>From a security standpoint, this is no different from the standalone del.icio.us clients I wrote in other programming languages. But there’s no real reason why you should trust a standalone web service client, either. We just tend to assume they’re safe. A web browser is constantly loading untrusted web pages, so it has a security model that restricts what those pages can do in JavaScript. If strangers were always dumping executables into your home directory, you’d probably think twice before running them.</p>\n<p>Which is why I called <code class=\"function\">netscape.security.PrivilegeManager.enablePrivilege</code>, asking the browser if it won’t let me make an HTTP request to a foreign domain (“UniversalBrowserRead”), and won’t it also let me use the browser’s XML parser on some data from a foreign domain (“UniversalBrowserRead” again, but in a different JavaScript function). Even with these calls in place, you’re likely to get browser security messages asking you if you want to accept this risky behavior. (These are not like the browser messages you might get when you do something innocuous like submit an HTML form, messages that Justin Mason once characterized as <span class=\"quote\">“<span class=\"quote\">are you sure you want to <span class=\"emphasis\"><em>send stuff on the intarweb?</em></span></span>”</span>. These are more serious.) And that’s with this file sitting on your (presumably trusted) filesystem. If I tried to serve this Ajax application from <code class=\"literal\">oreilly.com</code>, there’s no way your browser would let it make an HTTP request to <code class=\"literal\">api.del.icio.us</code>.</p>\n<p>So why don’t we see these problems all the time in Ajax applications? Because right now, most Ajax applications are served from the same domain names as the web services they access. This is the fundamental difference between JavaScript web service clients and clients written in other languages: the client and the server are usually written by the same people and served from the same domain.</p>\n<p>The browser’s security model doesn’t totally prevent you from writing an <code class=\"classname\">XMLHttpRequest</code> application against someone else’s web service, but it does make it difficult. According to the web browser, the only Ajax application safe enough to run without a warning is one that only makes requests against the domain it was served from. At the end of this chapter I’ll show you ways of writing Ajax clients that can consume foreign web services. Note, though, that these techniques rely heavily on cheating.</p>",
      "slug" : "the-disadvantages-of-ajax"
    }, {
      "title" : "REST Goes Better",
      "type" : "page",
      "htmlContent" : "<p>Ajax applications are web service clients, but why should they be clients of RESTful web services in particular? Most Ajax applications consume a web service written by the same people who wrote the application, mainly because the browser security model makes it difficult to do anything else. Why should it matter whether a service used by one client is fully RESTful or just a resource-oriented/RPC hybrid? There are even programs that turn a WSDL file into a JavaScript library for making RPC SOAP calls through <code class=\"classname\">XMLHttpRequest</code>. What’s wrong with that?</p>\n<p>Well, in general, the interface between two parts of an application matters. If RESTful architectures yield better web services, then you’ll benefit from using them, even if you’re the only one consuming the service. What’s more, if your application does something useful, people <span class=\"emphasis\"><em>will</em></span> figure out your web service and write their own clients—just as if your web site exposes useful information, people will screen-scrape it. Unless you want to obfuscate your web service so only you can use it, I think the Resource-Oriented Architecture is the best design.</p>\n<p>The web services that Ajax applications consume should be RESTful for the same reasons almost all web services should be RESTful: addressability, statelessness, and the rest. The only twist here is that Ajax clients are embedded inside a web browser. And in general, the web browser environment strengthens the argument for REST. You probably don’t need me to reiterate my opinion of Big Web Services in this chapter, but SOAP, WSDL, and the rest of the gang look even more unwieldy inside a web browser. Maybe you’re a skeptic and you think the REST paradigm isn’t suitable as a general platform for distributed programming—but it should at least be suitable for the communication between a web browser and a web server!</p>\n<p>Outside of a web browser, you might decide to limit yourself to the human web’s interface of GET and POST. Many client libraries support only the basic features of HTTP. But every Ajax application runs inside a capable HTTP client. Almost every web browser gives <code class=\"classname\">XMLHttpRequest</code> access to the five basic HTTP methods, and they all let you customize the request headers and body.</p>\n<p>What’s more, Ajax calls take place in the same environment as the end user’s other web browsing. If the client needs to make HTTP requests through a proxy, you can assume they’ve already configured it. An Ajax request sends the same cookies and Basic auth headers as do other browser requests to your domain. You can usually use the same authentication mechanisms and user accounts for your web site and your Ajax services.</p>\n<p class=\"keep-together\">Look back at steps 4 and 5 of the Ajax architecture—basically “GET a URI” and “use data from the URI to modify the view.” That fits in quite well with the Resource-Oriented Architecture. An Ajax application can aggregate information about a large number of resources, and incrementally change the GUI as the resource state changes. The architectural advantages of REST apply to Ajax clients just as they do to other clients. One example: you don’t need to coordinate the browser’s application state with the server if the server never keeps any application state.</p>",
      "slug" : "rest-goes-better"
    }, {
      "title" : "Making the Request",
      "type" : "page",
      "htmlContent" : "<p>Now I’d like<a id=\"I_indexterm11_tt990\" class=\"indexterm\"></a> to look at the technical details underlying the most common client language for Ajax: JavaScript. The major web browsers all implement a JavaScript HTTP client library called<a id=\"I_indexterm11_tt991\" class=\"indexterm\"></a> <code class=\"classname\">XMLHttpRequest</code>. Its interface is simple because the browser environment handles the hairy edge cases (proxies, HTTPS, redirects, and so on). Because <code class=\"classname\">XMLHttpRequest</code> is so simple, and because I want to drive home the point that it’s fundamentally no different from (say) Ruby’s <code class=\"classname\">open-uri</code>, I’m going to cover almost the whole interface in this section and the next. If you’re already familiar with <code class=\"classname\">XMLHttpRequest</code>, feel free to skim this section, or skip to the end where there’s a nice chart.</p>\n<p>To build an HTTP request you need to create an <code class=\"classname\">XMLHttpRequest</code> object. This seemingly simple task is actually one of the major points of difference between the web browsers. This simple constructor works in Mozilla-family browsers like Firefox:</p>\n<p><a id=\"I_programlisting11_tt992\"></a></p>\n<pre class=\"programlisting\">request = new XMLHttpRequest();</pre>\n<p>The second step is to call the <code class=\"function\">XMLHttpRequest.open</code> method with information about the request. All but the first two arguments in this sample call are optional:</p>\n<p><a id=\"I_programlisting11_tt993\"></a></p>\n<pre class=\"programlisting\">request.open(<em class=\"parameter\"><code>[HTTP method]</code></em>, <em class=\"parameter\"><code>[URI]</code></em>, true, <em class=\"parameter\"><code>[Basic auth username]</code></em>, <em class=\"parameter\"><code>[Basic auth password]</code></em>);</pre>\n<p>Pretty self-explanatory, except for the third argument, which I’ve hard-coded to <code class=\"literal\">true</code>. This argument controls whether the browser carries out the request asynchronously (letting the user do other things while it’s going on) or synchronously (locking up the whole browser until it gets and parses the server response). Locking up the browser never creates a good user experience, so I never recommend it, even in simple applications. This does mean you have to set up a handler function to be called when the request completes:</p>\n<p><a id=\"I_programlisting11_tt994\"></a></p>\n<pre class=\"programlisting\">request.onReadyStateChange = <em class=\"parameter\"><code>[Name of handler function]</code></em>;</pre>\n<p>If you want to set any HTTP request headers, you use <code class=\"function\">setrequestHeader</code>:</p>\n<p><a id=\"I_programlisting11_tt995\"></a></p>\n<pre class=\"programlisting\">request.setRequestHeader(<em class=\"parameter\"><code>[Header name]</code></em>, <em class=\"parameter\"><code>[Header value]</code></em>);</pre>\n<p>Then you send the request to the HTTP server by calling <code class=\"function\">send</code>. If the request is a POST or PUT request, you should pass the entity-body you want to send as an argument to <code class=\"function\">send</code>. For all other requests, it should be <code class=\"literal\">null</code>.</p>\n<p><a id=\"I_programlisting11_tt996\"></a></p>\n<pre class=\"programlisting\">request.send(<em class=\"parameter\"><code>[Entity-body]</code></em>);</pre>\n<p>If all goes well, your handler function (the one you set to <code class=\"function\">request.onReadyStateChange</code>) will be called four times over the lifetime of the HTTP request, and the value of <code class=\"varname\">request.readyState</code> will be different every time. The value you’re looking for is the last one, 4, which means that the request has completed and it’s time to manipulate the response. If <code class=\"function\">request.readyState</code> doesn’t equal 4, you’ll just <code class=\"literal\">return</code> from the handler function.</p>\n<p><code class=\"classname\">XMLHttpRequest</code> uses the underlying web browser code to make its requests. Since the major web browsers are among the most complete HTTP client implementations around, this means that <code class=\"classname\">XMLHttpRequest</code> does pretty well on the feature matrix I introduced for HTTP clients back in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>. Cookies, proxies, and authentication tend to work in Ajax applications as they do in normal web access.</p>",
      "slug" : "making-the-request"
    }, {
      "title" : "Handling the Response",
      "type" : "page",
      "htmlContent" : "<p>Eventually the request<a id=\"I_indexterm11_tt998\" class=\"indexterm\"></a><a id=\"I_indexterm11_tt999\" class=\"indexterm\"></a> will complete and the browser will call your handler function for the last time. At this point your <code class=\"classname\">XMLHttpRequest</code> instance gains some new and interesting abilities:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The <code class=\"function\">status</code> property contains the numeric status code for the request.</p></li>\n  <li class=\"listitem\"><p>The <code class=\"function\">responseXML</code> property contains a preparsed DOM object representing the response document—assuming it was served as XML and the browser can parse it. HTML, even XHTML, will <span class=\"emphasis\"><em>not</em></span> be parsed into <code class=\"function\">responseXML</code>, unless the document was served as an XML media type like <code class=\"literal\">application/xml</code> or <code class=\"literal\">application/xhtml+xml</code>.</p></li>\n  <li class=\"listitem\"><p>The <code class=\"function\">responseText</code> property contains the response document as a raw string—useful when it’s JSON or some other non-XML format.</p></li>\n  <li class=\"listitem\"><p>Passing the name of an HTTP header into the <code class=\"function\">getResponseHeader</code> method looks up the value of that header.</p></li>\n </ul>\n</div>\n<p>Web browsers epitomize the tree-style parsing strategy that turns a document into a data structure. When you make a web service request from within JavaScript, the <code class=\"function\">responseXML</code> property gives you your response document as a tree. You can access the representation with a standardized set of DOM manipulation methods.</p>\n<div class=\"tip\" title=\"Tip\">\n <h3 class=\"title\">Tip</h3>\n <p>Unlike the <code class=\"classname\">XMLHttpRequest</code> interface, the DOM interface is extremely complex and I won’t even think about covering it all here. See <a class=\"ulink\" href=\"http://www.w3.org/DOM\" target=\"_top\">the official standard</a>, the <a class=\"ulink\" href=\"http://www.mozilla.org/docs/dom/\" target=\"_top\">Mozilla DOM reference</a>, or a book like <em class=\"citetitle\">Dynamic HTML: The Definitive Reference</em> by Danny Goodman (O’Reilly).</p>\n</div>\n<p>You can navigate the tree with methods like <code class=\"function\">getElementByID</code>, and run XPath queries against it with <code class=\"function\">evaluate</code>.</p>\n<p>But there’s another treelike data structure in town: the HTML document being displayed in the end user’s web browser. In an Ajax application, this document is your user interface. You manipulate it with the same DOM methods you use to extract data from an XML web service representation. An Ajax application acts as glue between the raw data the web service sends, and the HTML GUI the end user sees. Useful DOM methods here are <code class=\"function\">createTextNode</code> and <code class=\"function\">createElement</code>, both of which I used in <a class=\"xref\" href=\"ch11.html#populatelinklistcontinued\" title=\"Example&nbsp;11-5.&nbsp;Ajax client concluded: definition of populateLinkList\">Example&nbsp;11-5</a>.</p>",
      "slug" : "handling-the-response"
    }, {
      "title" : "JSON",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>I covered JSON<a id=\"I_indexterm11_tt1001\" class=\"indexterm\"></a> briefly in <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>. I brought it up again in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> as one of my recommended representation formats. But since it comes from JavaScript, I want to show it in action in the Ajax chapter.</p> \n  <p><a class=\"xref\" href=\"ch11.html#jsonelephants\" title=\"Example&nbsp;11-6.&nbsp;An Ajax client that calls out to a service that serves JSON representations\">Example&nbsp;11-6</a> shows of an Ajax client for Yahoo!’s image search web service.</p> \n  <div class=\"example\"> \n   <a id=\"jsonelephants\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;11-6.&nbsp;An Ajax client that calls out to a service that serves JSON representations \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"programlisting\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n\"http://www.w3.org/TR/REC-html40/transitional.dtd\"&gt;\n&lt;!--yahoo-ajax.html--&gt;\n&lt;!--An Ajax application that uses the JSON output feature of Yahoo!\n    Web Services--&gt;\n\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Javascript Yahoo! JSN&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Javascript Yahoo! JSON example&lt;/h1&gt;\n\n&lt;p id=\"message\"&gt;Loading pictures of baby elephants!&lt;/p&gt;\n\n&lt;div id=\"images\"&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nfunction formatImages(result)\n{\n  var images = document.getElementById(\"images\");\n  items = result[\"ResultSet\"][\"Result\"];\n  document.getElementById(\"message\").firstChild.textContent =\n    items.length + \" baby elephant pictures:\";\n  for (var i = 0; i &lt; items.length; i++)\n  {\n    image = items[i];\n\n    // Create a link\n    var link = document.createElement(\"a\");\n    link.setAttribute(\"href\", image[\"ClickUrl\"]);\n\n    // Put a thumbnail image in the link.\n    var img = document.createElement(\"img\");\n    var thumbnail = image[\"Thumbnail\"];\n    img.setAttribute(\"src\", thumbnail[\"Url\"]);\n    img.setAttribute(\"width\", thumbnail[\"Width\"]);\n    img.setAttribute(\"height\", thumbnail[\"Height\"]);\n    img.setAttribute(\"title\", image[\"Height\"]);\n    link.appendChild(img);    \n    images.appendChild(link);\n  }\n}\n&lt;/script&gt;\n\n&lt;script type=\"text/javascript\" \n src=\"http://api.search.yahoo.com/ImageSearchService/V1/imageSearch\n?appid=restbook&amp;query=baby+elephant&amp;output=json&amp;callback=formatImages\" /&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n   </div> \n  </div> \n  <p>If you load this HTML file in your web browser you’ll see some cute pictures of baby elephants, courtesy of Yahoo! Image Search. What you won’t see is a browser security warning. The del.icio.us example had to ask the browser if it was OK to make an <code class=\"classname\">XMLHttpRequest</code> to another domain, and even then the browser imposes strict rules about when it is OK. But this Ajax client just makes the web service call. That’s because it doesn’t make the call through <code class=\"classname\">XMLHttpRequest</code>. It uses a technique described as JavaScript on Demand (JoD). JoD bypasses the browser’s security policy by fetching custom-generated JavaScript from a web service. Because any JSON data structure is a valid JavaScript program, this works especially well with web services that serve JSON representations.</p>\n </body>\n</html>",
      "slug" : "json"
    }, {
      "title" : "Don’t Bogart the Benefits of REST",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>It’s easy for an Ajax <a id=\"I_indexterm11_tt1002\" class=\"indexterm\"></a>application to take all the advantages of REST for itself, and leave none of them for the end user. Gmail is a good example of this. The Gmail Ajax application benefits greatly from its use of an addressable, stateless web service. But in terms of user experience, all the end user sees is one constantly changing HTML page. No addressability for you! If you want to bookmark a search or a particular email message, you need to start off at <a class=\"ulink\" href=\"https://mail.google.com/mail/?ui=html\" target=\"_top\">Gmail’s plain HTML interface</a>.</p> \n  <p>Ordinarily, your browser’s back and forward buttons move you back and forth through application state. This works because the Web is stateless. But if you start using a typical Ajax application, your back button breaks. Clicking it doesn’t take you backward in application state: it takes you to the page you were on before you started using the Ajax application. No statelessness for you!</p> \n  <p>The underlying cause is the same thing that gives Ajax applications their polished look. Ajax applications disconnect the end user from the HTTP request-response cycle. When you visit the URI of an Ajax application, you leave the Web. From that point on you’re using a GUI application that makes HTTP requests for you, behind the scenes, and folds the data back into the GUI. The GUI application just happens to be running in the same piece of software you use to browse the Web. But even an Ajax application can give its users the benefits of REST, by incorporating them into the user interface. I’m basically asking you to reinvent some of the features of the web browser within your application.</p> \n  <p>The best example of this is Google Maps, the application that started the Ajax craze. At first glimpse, Google Maps looks about as addressable as Gmail. You visit <a class=\"ulink\" href=\"http://maps.google.com/\" target=\"_top\">http://maps.google.com/</a> and are presented with a large-scale map. You can use Ajax to zoom in and navigate to any point on the globe, but the URI in your browser’s address bar never changes.</p> \n  <p>But Google Maps also uses Ajax to maintain a “permalink” for whatever point on the globe you’re currently at. This URI is kept not in your browser’s address bar but in an <code class=\"literal\">a</code> tag in the HTML document (see <a class=\"xref\" href=\"ch11.html#figure_11_1\" title=\"Figure&nbsp;11-1.&nbsp;An entry point into a web service (that is, a URI), maintained through Ajax\">Figure&nbsp;11-1</a>). It represents all the information Google Maps needs to identify a section of the globe: latitude, longitude, and map scale. It’s a new entry point into the Ajax application. This link is the Google Maps equivalent of your browser’s address bar.</p> \n  <div class=\"figure\"> \n   <a id=\"figure_11_1\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"screenshot\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject11_tt1003\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24586.png.jpg\" alt=\"An entry point into a web service (that is, a URI), maintained through Ajax\"> \n     </div> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;11-1.&nbsp;An entry point into a web service (that is, a URI), maintained through Ajax \n   </div> \n  </div> \n  <p>Thanks to the extra DOM work that keeps this <code class=\"literal\">a</code> tag up to date as you navigate the map, every point on every map is on the Web. Any point can be bookmarked, blogged about, and emailed around. Anyone who visits one of these URIs enters the Google Maps Ajax application at the right point, instead of getting a view centered on the continental US (as would happen if you navigated to a place on a map and then reloaded <a class=\"ulink\" href=\"http://maps.google.com/\" target=\"_top\">http://maps.google.com/</a>). Addressability, destroyed by Ajax but added back by good application design, has allowed communities like <a class=\"ulink\" href=\"http://googlesightseeing.com/\" target=\"_top\">Google Sightseeing</a> to grow up around the Google Maps application.</p> \n  <p>Your Ajax applications can give statelessness back by reproducing the functionality of the browser’s back and forward buttons. You don’t have to reproduce the browser’s behavior slavishly. The point is to let the end user move back and forth in his application state, instead of having to start from the beginning of a complex operation if he makes a mistake or gets lost.</p>\n </body>\n</html>",
      "slug" : "dont-bogart-the-benefits-of-rest"
    }, {
      "title" : "Cross-Browser Issues and Ajax Libraries",
      "type" : "page",
      "htmlContent" : "<p>As always<a id=\"I_indexterm11_tt1004\" class=\"indexterm\"></a><a id=\"I_indexterm11_tt1005\" class=\"indexterm\"></a><a id=\"I_indexterm11_tt1006\" class=\"indexterm\"></a> when web browsers are involved, different clients have different levels of support for<a id=\"I_indexterm11_tt1007\" class=\"indexterm\"></a> <code class=\"classname\">XMLHttpRequest</code>. And as always seems to happen, Internet Explorer is the major outlier. This isn’t quite fair, because <code class=\"classname\">XMLHttpRequest</code> was a Microsoft invention and Internet Explorer was the first browser to support Ajax at all. But until the release of Internet Explorer 7, Ajax was implemented as Windows-specific technology: an ActiveX control called <code class=\"classname\">XMLHttp</code>.</p>\n<p>The cross-platform Mozilla project adopted the API of the <code class=\"classname\">XMLHttp</code> control, but implemented it as a class you could instantiate directly from JavaScript. Other browsers followed this lead, and all current browsers now use the <code class=\"classname\">XMLHttpRequest</code> name (including the new Internet Explorer). But old versions of Internet Explorer still make up a big portion of the user base, so cross-browser issues are still a problem.</p>\n<p><a class=\"xref\" href=\"ch11.html#createxmlhttprequest\" title=\"Example&nbsp;11-7.&nbsp;A cross-browser wrapper for XMLHttpRequest\">Example&nbsp;11-7</a> is a JavaScript function that always creates an object that acts like an <code class=\"classname\">XMLHttpRequest</code>, even though under the covers it may be an ActiveX control. It was written by Bret Taylor and comes from his site at <a class=\"ulink\" href=\"http://ajaxcookbook.org/\" target=\"_top\">http://ajaxcookbook.org/</a>.</p>\n<div class=\"example\">\n <a id=\"createxmlhttprequest\"></a>\n <div class=\"example-title\">\n  Example&nbsp;11-7.&nbsp;A cross-browser wrapper for XMLHttpRequest\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">function createXMLHttpRequest() { \n  if (typeof XMLHttpRequest != \"undefined\") { \n    return new XMLHttpRequest();\n  } else if (typeof ActiveXObject != \"undefined\") { \n    return new ActiveXObject(\"Microsoft.XMLHTTP\"); \n  } else { \n    throw new Error(\"XMLHttpRequest not supported\");\n  }\n}</pre>\n </div>\n</div>\n<p>This function is a drop-in replacement for the <code class=\"classname\">XMLHttpRequest</code> constructor in <a class=\"xref\" href=\"ch11.html#ajaxcalldelicious\" title=\"Example&nbsp;11-3.&nbsp;Ajax client continued: definition of callDelicious\">Example&nbsp;11-3</a>, instead of this:</p>\n<p><a id=\"I_programlisting11_tt1008\"></a></p>\n<pre class=\"programlisting\">request = new XMLHttpRequest();</pre>\n<p>you might write this:</p>\n<p><a id=\"I_programlisting11_tt1009\"></a></p>\n<pre class=\"programlisting\">request = createXMLHttpRequest();</pre>\n<p>I know of two other major cross-browser issues. First, the Safari browser doesn’t support the PUT and DELETE methods. If you want your service to be accessible from Safari, you’ll need to allow your clients to simulate PUT and DELETE requests with overloaded POST. Second, Microsoft Internet Explorer caches successful responses indefinitely. This makes it look to the user like your resources haven’t changed, even when they have. The best way to get around this is to send proper <code class=\"literal\">ETag</code> response headers with your representations, or to disable caching altogether with <code class=\"literal\">Cache-Control</code>. You can use the <a class=\"ulink\" href=\"http://www.mnot.net/javascript/xmlhttprequest/\" target=\"_top\"><code class=\"classname\">XMLHttpRequest</code> test suite</a> to find out about more minor cross-browser quirks.</p>\n<p>Because Ajax is a very important niche for JavaScript applications, some JavaScript libraries include wrappers for hiding the differences between browsers. I’m not going to cover these frameworks in detail, because they act more as standard libraries for JavaScript than tools for building web service clients. I will show how to make simple HTTP requests with two popular libraries, Prototype and Dojo. Another popular library, <a class=\"ulink\" href=\"http://script.aculo.us/\" target=\"_top\">script.aculo.us</a>, is based on Prototype.</p>\n<h2>Prototype</h2>\n<p><a class=\"ulink\" href=\"http://prototype.conio.net/\" target=\"_top\">Prototype</a> introduces<a id=\"I_indexterm11_tt1010\" class=\"indexterm\"></a> three classes for making HTTP requests:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><code class=\"classname\">Ajax.Request</code>: a wrapper around <code class=\"classname\">XMLHttpRequest</code> that takes care of cross-browser issues and can call different JavaScript functions on the request’s success or failure. The actual <code class=\"classname\">XMLHttpRequest</code> object is available as the <code class=\"function\">transport</code> member of the <code class=\"classname\">Request</code> object, so <code class=\"function\">responseXML</code> will be through <code class=\"function\">request.transport.responseXML</code>.</p></li>\n  <li class=\"listitem\"><p><code class=\"classname\">Ajax.Updater</code>: a subclass of <code class=\"classname\">Request</code> that makes an HTTP request and inserts the response document into a specified element of the DOM.</p></li>\n  <li class=\"listitem\"><p><code class=\"classname\">Ajax.PeriodicalUpdater</code>, which makes the same HTTP request at intervals, refreshing a DOM element each time.</p></li>\n </ul>\n</div>\n<p>I’ve implemented the del.icio.us Ajax client in Prototype, and it was mostly the same as the client I showed you starting in <a class=\"xref\" href=\"ch11.html#ajaxdeliciousform\" title=\"Example&nbsp;11-1.&nbsp;An Ajax client to the del.icio.us web service\">Example&nbsp;11-1</a>. The code snippet below mostly replaces the code in <a class=\"xref\" href=\"ch11.html#ajaxcalldelicious\" title=\"Example&nbsp;11-3.&nbsp;Ajax client continued: definition of callDelicious\">Example&nbsp;11-3</a> where the <code class=\"classname\">XMLHttpRequest</code> constructor used to be. Note the new <code class=\"literal\">script</code> tag, the use of <code class=\"function\">request.transport</code> instead of <code class=\"function\">request</code>, and the use of Prototype’s <code class=\"function\">onFailure</code> hook to signal a failure (such as an authorization failure) to the user.</p>\n<div class=\"example\">\n <a id=\"I_example11_tt1011\"></a>\n <div class=\"example-title\">\n  Example&nbsp;11-8.&nbsp;A portion of \n  <em class=\"filename\">ajax-delicious-prototype.html</em>\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">...\n&lt;script src=\"prototype.js\"&gt;&lt;/script&gt; \n&lt;script type=\"text/javascript\"&gt;\n  ... \n  var request = new Ajax.Request(\"https://api.del.icio.us/v1/posts/recent\", \n                                 {method: 'get', onSuccess: populateLinkList, \n                                 onFailure: reportFailure});\n  function reportFailure() { \n    setMessage(\"An error occured: \" + request.transport.status);\n  }\n\n  // Called when the HTTP request has completed. \n  function populateLinkList() { \n    setMessage(\"Request complete.\"); \n    if (netscape.security.PrivilegeManager.enablePrivilege) {\n      netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserRead\");\n    }\n\n    posts = request.transport.responseXML.getElementsByTagName(\"post\");\n    ...</pre>\n </div>\n</div>\n<p class=\"keep-together\">In its quest to simplify <code class=\"classname\">XMLHttpRequest</code>, Prototype hides some of the features. You can’t set request headers, or specify a username and password for basic HTTP auth. So even if you’re using Prototype, you might want to keep around a snippet of code like the one in <a class=\"xref\" href=\"ch11.html#createxmlhttprequest\" title=\"Example&nbsp;11-7.&nbsp;A cross-browser wrapper for XMLHttpRequest\">Example&nbsp;11-7</a>. On the other hand, the Prototype implementation of the del.icio.us client doesn’t need the username and password text fields at all: it just needs a button. The end user’s browser will prompt her anyway for her del.icio.us username and password.</p>\n<h2>Dojo</h2>\n<p>The <a class=\"ulink\" href=\"http://dojotoolkit.org/\" target=\"_top\">Dojo library</a> provides a<a id=\"I_indexterm11_tt1012\" class=\"indexterm\"></a> uniform API that not only hides the differences between browsers when it comes to <code class=\"classname\">XMLHttpRequest</code>, it hides the difference between <code class=\"classname\">XMLHttpRequest</code> and other ways of getting the browser to send an HTTP request. These “transports” include tricks that use HTML tags, such as JoD. All the variants on <code class=\"classname\">XMLHttpRequest</code> are kept in the <code class=\"classname\">dojo.io.XMLHttp</code> transport class. For all transports, the <code class=\"function\">bind</code> method is the one that makes the HTTP request.</p>\n<p>As with Prototype, I’ve implemented the del.icio.us Ajax client with Dojo, and it’s mostly the same as the original, except for the section in <a class=\"xref\" href=\"ch11.html#ajaxcalldelicious\" title=\"Example&nbsp;11-3.&nbsp;Ajax client continued: definition of callDelicious\">Example&nbsp;11-3</a> where the <code class=\"classname\">XMLHttpRequest</code> constructor used to be. <a class=\"xref\" href=\"ch11.html#example_11_9\" title=\"Example&nbsp;11-9.&nbsp;Some portions of ajax-delicious-dojo.html\">Example&nbsp;11-9</a> shows the relevant portions of <em class=\"filename\">ajax-delicious-dojo.html</em>.</p>\n<div class=\"example\">\n <a id=\"example_11_9\"></a>\n <div class=\"example-title\">\n  Example&nbsp;11-9.&nbsp;Some portions of ajax-delicious-dojo.html\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">...\n  &lt;script src=\"dojo/dojo.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    ...\n    dojo.require(\"dojo.io.*\");\n    dojo.io.bind({ url: \"https://api.del.icio.us/v1/posts/recent\", load:\n                   populateLinkList, error: reportFailure });\n\n    function reportFailure(type, error) { \n      setMessage(\"An error occured: \" + error.message); \n    }\n\n    // Called when the HTTP request has completed. \n    function populateLinkList(type, data, request) { \n      setMessage(\"Request complete.\");\n      if (netscape.security.PrivilegeManager.enablePrivilege) {\n        netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserRead\");\n      }\n\n      posts = request.responseXML.getElementsByTagName(\"post\");\n    ...</pre>\n </div>\n</div>\n<p>The error-handling function is passed a <code class=\"classname\">dojo.io.Error</code> object with members called <code class=\"function\">number</code> and <code class=\"function\">message</code>. You can ignore the first argument: it’s always “error.” You can also ignore the first argument to the <span class=\"emphasis\"><em>success</em></span>-handling function (it’s always “load”). The second argument, called <code class=\"varname\">data</code> above, is an interface to use Dojo’s DOM manipulation interface. If you want to use the <code class=\"classname\">XMLHttpRequest</code> interface instead, you can ignore that argument too.</p>",
      "slug" : "cross-browser-issues-and-ajax-libraries"
    }, {
      "title" : "Subverting the Browser Security Model",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>That’s a provocative title but I stand by it. A web browser enforces a general rule that’s supposed to prevent it from using code found on domain A to make an HTTP request to domain B. I think this rule is too strict, so I’m going to show you two ways around it: request proxying and JoD. I’m also going to show how these tricks put you at risk by making you, the Ajax programmer, accept responsibility for what some foreign server does. These tricks deserve to be regarded as cheats, because they subvert rather than fulfill the web browser’s intentions. They often make the end user <span class=\"emphasis\"><em>less</em></span> secure than if his browser had simply allowed domain A’s JavaScript to make an HTTP request to domain B.</p> \n  <p>There is a secure method of getting permission to make foreign web service calls in your JavaScript applications, which is to <span class=\"emphasis\"><em>ask</em></span> for the permission by calling:</p> \n  <a id=\"I_programlisting11_tt1013\"></a> \n  <pre class=\"programlisting\">netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserRead\");</pre> \n  <p>(There’s also an insecure method, which is to have your users use Internet Explorer with the security settings turned way down.)</p> \n  <p>If your script is digitally signed, the client’s browser shows your credentials to the end user. The end user makes a decision whether or not to trust you, and if he trusts you he gives you permission to make the web service calls you need to make. This is similar to the technique I mentioned in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, where an untrusted web service client was trying to gain the end user’s trust. The difference here is that the untrusted web service client is running <span class=\"emphasis\"><em>inside</em></span> the end user’s trusted web browser.</p> \n  <p>There are two problems with the secure method. The first is that, as you might have guessed from the name <code class=\"literal\">netscape.security.PrivilegeManager</code>, it only works in Mozilla, Firefox, and Netscape-like browsers. The second is that it’s quite painful to actually get a signed script set up. Once you do get one set up, you find you’ve stored your HTML files in a signed Java archive file, and that your application is off the Web! Search engines won’t pick up your HTML pages, and you’ll only be able to address them through a weird <code class=\"literal\">jar:</code> URI like <code class=\"literal\">jar:http://www.example.com/ajax-app.jar!/index.html</code>.</p> \n  <p>And that’s the <span class=\"emphasis\"><em>right</em></span> solution. As you can tell, this is an immature field. Until recently, web services weren’t popular enough for people to seriously think about these problems. Though the hacks described below are potentially dangerous, their inventors meant no harm. They were motivated only by zeal for the enormous possibilities of in-browser web service clients. The challenge is to come up with ways of getting the same functionality without sacrificing security, adding too much complexity, or moving Ajax applications out of view of the Web. The W3C is working on this problem (see “Enabling Read Access for Web Resources” at <a class=\"ulink\" href=\"http://www.w3.org/TR/access-control/\" target=\"_top\">http://www.w3.org/TR/access-control/</a>.)</p> \n  <p>Although I’m focusing again on JavaScript applications, Java applets and Flash also run under security models that prevent them from sending data to foreign servers. The request proxying trick, described below, works for any kind of Ajax application, because it involves work on the server side. As its name implies, the JoD trick is JavaScript-specific.</p> \n  <h2>Request Proxying</h2> \n  <p>You’re running a site, <code class=\"literal\">example.com</code>, serving<a id=\"I_indexterm11_tt1014\" class=\"indexterm\"></a> up Ajax applications that try to make <code class=\"classname\">XMLHttpRequest</code> requests against <code class=\"literal\">yahoo.com</code>. Naturally your clients’ web browsers will complain. But what if they never made a request to <code class=\"literal\">yahoo.com</code>? What if they made requests to <code class=\"literal\">example.com</code>, which you handled by making your own, identical requests to <code class=\"literal\">yahoo.com</code> without telling the client?</p> \n  <p>Welcome to the request proxy trick, well described in Yahoo’s document <a class=\"ulink\" href=\"http://developer.yahoo.com/javascript/howto-proxy.html\" target=\"_top\">“Use a Web Proxy for Cross-Domain XMLHttpRequest Calls”</a>. In this trick, you set aside part of the URI space on your server to simulate the URI space on some other server. When you get a request to a URI in that space, you send it along without alteration to the foreign server, and then pipe the response right back to the client. From the client’s point of view, it looks like you’re providing someone else’s web service. Really, you’re just filing the domain names off their HTTP responses and replacing them with your own.</p> \n  <p>If you’re using Apache and have <span class=\"application\">mod_proxy</span> installed, the simplest way to set up a proxy is in the Apache configuration. If you also have <span class=\"application\">mod_ssl</span> installed, you can enable <code class=\"literal\">SSLProxyEngine</code> and proxy HTTPS requests. So long as you have mod_ssl installed, you can even proxy HTTPS requests from an HTTP server: perhaps <span class=\"emphasis\"><em>http://example.com/service/</em></span> is proxied to <span class=\"emphasis\"><em>https://service.com/</em></span>. Of course, this destroys the security of the connection. Data is secure between the proxy and your site, but not between your site and the end user. If you do this you’d better tell the end user what you’re doing.</p> \n  <p>Let’s say you want to make the del.icio.us Ajax application, given above, work from your site at <code class=\"literal\">example.com</code>. You can set up a proxy so that all URIs beneath <span class=\"emphasis\"><em>https://example.com/apis/delicious/v1/</em></span> are transparently forwarded to <a class=\"ulink\" href=\"https://api.del.icio.us/v1/\" target=\"_top\">https://api.del.icio.us/v1/</a>. The simplest way to set up a proxy is with the <code class=\"literal\">ProxyPass</code> directive, which maps part of your URI space onto a foreign site’s URI space<a id=\"I_indexterm11_tt1015\" class=\"indexterm\"></a> (see <a class=\"xref\" href=\"ch11.html#example_1_10\" title=\"Example&nbsp;11-10.&nbsp;Apache configuration with ProxyPass\">Example&nbsp;11-10</a>).</p> \n  <div class=\"example\"> \n   <a id=\"example_1_10\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;11-10.&nbsp;Apache configuration with ProxyPass \n   </div> \n   <div class=\"example-contents\"> \n    <div class=\"literallayout\"> \n     <p>SSLProxyEngine&nbsp;On<br> ProxyRequests&nbsp;Off&nbsp;#&nbsp;Don’t&nbsp;act&nbsp;as&nbsp;an&nbsp;open&nbsp;proxy.<br> ProxyPass&nbsp;/apis/delicious/v1&nbsp;https://api.del.icio.us/v1/</p> \n    </div> \n   </div> \n  </div> \n  <p>A more flexible solution is to use a rewrite rule with the [P] flag. This gives you the full power of regular expressions to map your URI-space onto the foreign site’s. <a class=\"xref\" href=\"ch11.html#example_11_11\" title=\"Example&nbsp;11-11.&nbsp;Apache configuration with rewrite rules\">Example&nbsp;11-11</a> shows a rewrite rule version of the del.icio.us API proxy:</p> \n  <div class=\"example\"> \n   <a id=\"example_11_11\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;11-11.&nbsp;Apache configuration with rewrite rules \n   </div> \n   <div class=\"example-contents\"> \n    <div class=\"literallayout\"> \n     <p>SSLProxyEngine&nbsp;On&nbsp;<br> ProxyRequests&nbsp;Off&nbsp;#&nbsp;Don’t&nbsp;act&nbsp;as&nbsp;an&nbsp;open&nbsp;proxy.&nbsp;<br> RewriteEngine&nbsp;On&nbsp;RewriteRule&nbsp;^apis/delicious/v1/(.*)$&nbsp;https://api.del.icio.us/v1/$1&nbsp;[P]</p> \n    </div> \n   </div> \n  </div> \n  <p>With a setup like one of those two, you can serve the Ajax application defined in <a class=\"xref\" href=\"ch11.html#ajaxdeliciousform\" title=\"Example&nbsp;11-1.&nbsp;An Ajax client to the del.icio.us web service\">Example&nbsp;11-1</a> through <a class=\"xref\" href=\"ch11.html#populatelinklistcontinued\" title=\"Example&nbsp;11-5.&nbsp;Ajax client concluded: definition of populateLinkList\">Example&nbsp;11-5</a> from your own domain, without triggering browser security warnings. All you have to do is change this (from <a class=\"xref\" href=\"ch11.html#calldeliciouscontinued\" title=\"Example&nbsp;11-4.&nbsp;callDelicious definition continued\">Example&nbsp;11-4</a>):</p> \n  <p><a id=\"I_programlisting11_tt1016\"></a></p> \n  <pre class=\"programlisting\">request.open(\"GET\", \"https://api.del.icio.us/v1/posts/recent\",\n             true, username, password);</pre> \n  <p>to this:</p> \n  <p><a id=\"I_programlisting11_tt1017\"></a></p> \n  <pre class=\"programlisting\">request.open(\"GET\", \"https://example.com/apis/delicious/v1/posts/recent\", \n             true, username, password);</pre> \n  <p>Most Apache installations don’t have <span class=\"application\">mod_proxy</span> installed, because an open HTTP proxy is a favorite tool for spammers and other lowlife who want to hide their tracks online. If your web server doesn’t have built-in proxy support, you can write a tiny web service that acts as a transparent proxy, and run it on your server. To proxy del.icio.us API requests, this web service might be rooted at <code class=\"literal\">apis/delicious/v1</code>. It would pass any and all HTTP requests it received—HTTP headers and all—to the corresponding URI beneath <a class=\"ulink\" href=\"https://api.del.icio.us/v1/\" target=\"_top\">https://api.del.icio.us/v1/</a>. Yahoo! provides <a class=\"ulink\" href=\"http://developer.yahoo.com/javascript/howto-proxy.html\" target=\"_top\">a sample proxy service, written in PHP, hardcoded to access the <code class=\"literal\">yahoo.com</code> web services</a>. You can model your own proxy service after that one.</p> \n  <p>Even when your proxy is properly configured, when it only proxies requests for a very small subset of the Web, there is danger for you and your end users. When you set up a proxy for Ajax clients, you’re taking responsibility in your users’ eyes for what the other web site does. The proxy trick sets you up as the fall guy for anything bad that happens on the other site. You’re pretending what the other site is serving comes from you. If the web service crashes, cheats the end user, or misuses his personal data, guess what: it looks like <span class=\"emphasis\"><em>you</em></span> did those things. Remember, in an Ajax application the end user only sees your GUI interface. He doesn’t necessarily know his browser is making HTTP requests in the background, and he certainly doesn’t know that his requests to your domain are being proxied to another domain. If his web browser knew that was going on, it would step in and put a stop to it.</p> \n  <p>The proxy trick also sets you up as the fall guy for the requests your clients make. Your clients can make any web service request they like and it’ll look like you’re the cause. Depending on the nature of the web service this may cause you embarrassment or legal exposure. This is less of a problem for web services that require separate authorization.</p> \n  <h2>JavaScript on Demand</h2> \n  <p>It’s rare for a human being to demand <a id=\"I_indexterm11_tt1018\" class=\"indexterm\"></a>JavaScript, except in certain design meetings, but it’s not uncommon among web browsers. The basis of this trick is that the HTML <code class=\"literal\">script</code> tag doesn’t have to contain hardcoded JavaScript code. It might just have a <code class=\"literal\">src</code> attribute that references code at another URI. A web browser knows, when it encounters a <code class=\"literal\">script</code> tag, to load the URI in the <code class=\"literal\">src</code> attribute and run its contents as code. We saw this in <a class=\"xref\" href=\"ch11.html#jsonelephants\" title=\"Example&nbsp;11-6.&nbsp;An Ajax client that calls out to a service that serves JSON representations\">Example&nbsp;11-6</a>, the JSON example that does a Yahoo! image search for pictures of elephants.</p> \n  <p>The <code class=\"literal\">src</code> attribute is traditionally used like C’s <code class=\"literal\">#include</code> or Ruby’s <code class=\"literal\">require</code>: to load in a JavaScript library from another URI. <a class=\"xref\" href=\"ch11.html#example_11_12\" title=\"Example&nbsp;11-12.&nbsp;Including a JavaScript file by reference\">Example&nbsp;11-12</a>, reprinted from <a class=\"xref\" href=\"ch02.html\" title=\"Chapter&nbsp;2.&nbsp;Writing Web Service Clients\">Chapter&nbsp;2</a>, shows this.</p> \n  <div class=\"example\"> \n   <a id=\"example_11_12\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;11-12.&nbsp;Including a JavaScript file by reference \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"programlisting\">&lt;!-- In a real application, you would save json.js locally\n     instead of fetching it from json.org every time. --&gt; \n&lt;script type=\"text/javascript\" src=\"http://www.json.org/json.js\"&gt;&lt;/script&gt;</pre> \n   </div> \n  </div> \n  <p>As you can see, the URI in the <code class=\"literal\">src</code> attribute doesn’t have to be on the same server as the original HTML file. The browser security model doesn’t consider this insecure because... well, near as I can figure, because the <code class=\"literal\">src</code> attribute was already in wide use before anyone started seriously thinking about the security implications.</p> \n  <p>Now cast your mind back to the elephant example in <a class=\"xref\" href=\"ch11.html#jsonelephants\" title=\"Example&nbsp;11-6.&nbsp;An Ajax client that calls out to a service that serves JSON representations\">Example&nbsp;11-6</a>. It includes this line:</p> \n  <p><a id=\"I_programlisting11_tt1019\"></a></p> \n  <pre class=\"programlisting\">&lt;script type=\"text/javascript\"\nsrc=\"http://api.search.yahoo.com/ImageSearchService/V1/imageSearch\n?appid=restbook&amp;query=baby+elephant&amp;output=json&amp;callback=formatImages\" /&gt;</pre> \n  <p>That big long URI doesn’t resolve to a standalone JavaScript library, the way <a class=\"ulink\" href=\"http://www.json.org/json.js\" target=\"_top\">http://www.json.org/json.js</a> does. If you visit it in your web browser you’ll see that URI’s representation is a <span class=\"emphasis\"><em>custom-generated</em></span> bit of JavaScript. In <a class=\"ulink\" href=\"http://developer.yahoo.com/common/json.html\" target=\"_top\">its developer documentation</a>, Yahoo! promises that the representation of a resource like this one is a snippet of JavaScript code. Specifically, a snippet of JavaScript code that passes a data structure as the only argument into a callback function named in the URI (here, it’s <code class=\"function\">formatImages</code>). The resulting JavaScript representation looks something like this:</p> \n  <a id=\"I_programlisting11_tt1020\"></a> \n  <pre class=\"programlisting\">formatImage({\"ResultSet\":{\"totalResultsAvailable\":\"27170\",...}})</pre> \n  <p>When the client loads the HTML page, it fetches that URI and run its body as JavaScript, incidentally calling the <code class=\"function\">formatImage</code> method. Great for our application; not so great for the web browser. From a security perspective this is just like JavaScript code that uses <code class=\"classname\">XMLHttpRequest</code> to get data from the Yahoo! web service, and then calls <code class=\"function\">formatImage</code> on the result. It bypasses the browser security model by making the HTTP request happen as a side effect of the browser’s handling of an HTML tag.</p> \n  <p>JoD switches the traditional roles of a script embedded in an HTML page and a script included via <code class=\"literal\">&lt;script src=\"...\"&gt;</code>. Your web browser requests a web service URI, thinking it’s just a JavaScript library that application code in the HTML page will eventually call. But the library function is the one defined locally (it’s <code class=\"function\">formatImage</code>), and the application code that calls that function is coming from a foreign site.</p> \n  <p>If you specify no callback in the URI when calling the Yahoo! web service, you get a “JavaScript” file containing nothing but a JSON data structure. Including this file in a <code class=\"literal\">script</code> tag won’t do anything, but you can fetch it with a programmable HTTP client (like <code class=\"classname\">XMLHttpRequest</code>, or the Ruby client from way back in <a class=\"xref\" href=\"ch02.html#yahoo-web-search-json\" title=\"Example&nbsp;2-15.&nbsp;Searching the Web with Yahoo!’s web service (JSON edition)\">Example&nbsp;2-15</a>) and parse it as data:</p> \n  <a id=\"I_programlisting11_tt1021\"></a> \n  <pre class=\"programlisting\">{\"ResultSet\":{\"totalResultsAvailable\":\"27170\",...}}</pre> \n  <div class=\"sect3\" title=\"Dynamically writing the script tag\"> \n   <p>The only example of JoD I’ve given so far has a<a id=\"I_indexterm11_tt1022\" class=\"indexterm\"></a> hardcoded <code class=\"literal\">script</code> tag. The URI to the web service resource is fixed in stone, and if the end user wants to see baby penguins instead of baby elephants he’s just out of luck.</p> \n   <p>But one of the things you can do with JavaScript is add brand new tags to the DOM object representing the current HTML page. And <code class=\"literal\">script</code> is just another HTML tag. You can use JavaScript to write a customized <code class=\"literal\">script</code> tag into the document, and get the browser to load the URI mentioned in its <code class=\"literal\">src</code> attribute as a side effect of the <code class=\"literal\">script</code> processing. The browser allows this even if the <code class=\"literal\">src</code> URI points to a foreign domain. That means you can use JavaScript to make requests to any URI that serves more JavaScript, and run it.</p> \n   <p>This works, but it’s a hack on top of a hack, and a security problem on top of a security problem. In fact, from a security perspective this is <span class=\"emphasis\"><em>worse</em></span> than using <code class=\"classname\">XMLHttpRequest</code> to get data from a foreign site. The worst <code class=\"classname\">XMLHttpRequest</code> will do is make an HTTP request and parse some XML into a tree-like data structure. With JoD you make an HTTP request and run previously unseen JavaScript code as though it was part of your original program.</p> \n   <p>You and your end user are completely at the mercy of the service you’re calling. Instead of JavaScript that does what you want, a malicious web service might decide to serve JavaScript that steals whatever cookies your domain set for this user. It might serve code that runs code as promised but also creates pop-up windows full of obnoxious ads. It might do anything at all. And since Ajax hides the HTTP request-response cycle from the end user, it looks like <span class=\"emphasis\"><em>your</em></span> site is responsible!</p> \n   <p>Now, maybe you trust a brand-name site like Yahoo! (unless it gets cracked), but you probably don’t trust Mallory’s House of Web Services. And that in itself is a problem. One of the nice things about the Web is that you can safely link to Mallory even if you don’t trust her, don’t have her permission, and think she’s wrong about everything. A normal web service client can make calls to Mallory’s web service, and examine the representation before acting on it in case she tries any trickery. But when the client is serving executable code, and the web service requested it through a hack that runs the code automatically, you’re reduced to operating on blind trust.</p> \n   <p>JoD is not only sketchy from a security standpoint, it’s a lousy tactic from a REST standpoint, because it forces you to use a crippled client. <code class=\"classname\">XMLHttpRequest</code> supports all the features of HTTP, but with JoD you can only make GET requests. You can’t send request headers, see the response code or headers, or handle representation formats other than JavaScript code. Any representation you receive is immediately executed as JavaScript.</p> \n   <p>The underlying technique, of referencing a new object in a <code class=\"literal\">src</code> attribute, is safer when you use it to grab resources other than custom-generated JavaScript. <code class=\"literal\">script</code> isn’t the only HTML tag that makes the browser load a representation. Other useful tags include <code class=\"literal\">img</code> and <code class=\"literal\">frame</code>. Google Maps uses <code class=\"literal\">img</code> tags rather than <code class=\"classname\">XMLHttpRequest</code> calls to fetch its map tile images. Google’s JavaScript code doesn’t make the HTTP requests. It just creates the <code class=\"literal\">img</code> tags and lets the browser make requests for the images as a side effect.</p> \n  </div> \n  <div class=\"sect3\" title=\"Library support\"> \n   <p>Jason Levitt has written a JavaScript class called <code class=\"classname\">JSONscriptRequest</code> that makes JoD easy (<a class=\"ulink\" href=\"http://www.xml.com/pub/a/2005/12/21/json-dynamic-script-tag.html\" target=\"_top\">http://www.xml.com/pub/a/2005/12/21/json-dynamic-script-tag.html</a>). This class works sort of like <code class=\"classname\">XMLHttpRequest</code>, except it supports fewer of HTTP’s features, and instead of expecting the server to send an XML representation, it expects a snippet of JavaScript.</p> \n   <p><a class=\"xref\" href=\"ch11.html#example_11_13\" title=\"Example&nbsp;11-13.&nbsp;Dynamic Yahoo! image search Ajax application\">Example&nbsp;11-13</a> shows a dynamic implementation of the image search Ajax application. The first part should be familiar if you’ve looked at the other Ajax applications in this chapter.</p> \n   <div class=\"example\"> \n    <a id=\"example_11_13\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;11-13.&nbsp;Dynamic Yahoo! image search Ajax application \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n\"http://www.w3.org/TR/REC-html40/transitional.dtd\"&gt;\n&lt;!--yahoo-ajax-dynamic.html--&gt;\n&lt;!--An Ajax application that uses dynamic SCRIPT tags to interactively\n    fetch data from Yahoo! Web Services and call predefined functions\n    on that data.--&gt;\n\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Javascript Yahoo! JSON - Dynamic&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Javascript Yahoo! JSON example with dynamic SCRIPT tags&lt;/h1&gt;\n\n&lt;form onsubmit=\"callYahoo(); return false;\"&gt;\n What would you like to see? &lt;input id=\"query\" type=\"text\" /&gt;&lt;br /&gt;\n &lt;input type=\"submit\" value=\"Fetch pictures from Yahoo! Image Search\"/&gt;\n&lt;/form&gt;\n\n&lt;div id=\"images\"&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nfunction formatImages(result)\n{\n  // First clear out any old images.\n  var images = document.getElementById(\"images\");\n  while (images.firstChild) \n  {\n    images.removeChild(images.firstChild);\n  }\n\n  items = result[\"ResultSet\"][\"Result\"];\n  for (var i = 0; i &lt; items.length; i++)\n  {\n    image = items[i];\n\n    // Create a link\n    var link = document.createElement(\"a\");\n    link.setAttribute(\"href\", image[\"ClickUrl\"]);\n\n    // Put a thumbnail image in the link.\n    var img = document.createElement(\"img\");\n    var thumbnail = image[\"Thumbnail\"];\n    img.setAttribute(\"src\", thumbnail[\"Url\"]);\n    img.setAttribute(\"width\", thumbnail[\"Width\"]);\n    img.setAttribute(\"height\", thumbnail[\"Height\"]);\n    img.setAttribute(\"title\", image[\"Title\"])\n    link.appendChild(img);    \n    images.appendChild(link);\n  }\n}\n&lt;/script&gt;</pre> \n    </div> \n   </div> \n   <p>Here’s where this application diverges from others. I include Jason Levitt’s <em class=\"filename\">jsr_class.js</em> file, and then define the <code class=\"function\">callYahoo</code> function to use it (see <a class=\"xref\" href=\"ch11.html#example_11_14\" title=\"Example&nbsp;11-14.&nbsp;Dynamic Yahoo! image search Ajax application continued\">Example&nbsp;11-14</a>). This is the function triggered when the end user clicks the submit button in the HTML form above.</p> \n   <div class=\"example\"> \n    <a id=\"example_11_14\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;11-14.&nbsp;Dynamic Yahoo! image search Ajax application continued \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">&lt;script type=\"text/javascript\" src=\"jsr_class.js\"&gt;&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nfunction callYahoo()\n{\n  var query = document.getElementById(\"query\").value;\n  var uri = \"http://api.search.yahoo.com/ImageSearchService/V1/imageSearch\" +\n            \"?query=\" + escape(query) + \n\t    \"&amp;appid=restbook&amp;output=json&amp;callback=formatImages\";\n  alert(uri);\n  var request = new JSONscriptRequest(uri);\n  request.buildScriptTag();\n  request.addScriptTag();\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n    </div> \n   </div> \n   <p>To make a web service request I pass the URI of a resource into a <code class=\"classname\">JSONscriptRequest</code> object. The <code class=\"function\">addScriptTag</code> method sticks a new <code class=\"literal\">script</code> tag into the DOM. When the browser processes its new tag, it makes a GET request to the foreign URI, and runs the JavaScript that’s served as a representation. I specified “callback=formatImages” in the URI’s query string, so Yahoo! serves some JavaScript that calls my <code class=\"function\">formatImages</code> function on a complex data structure. You can serve this Ajax application from anywhere, and use it to search for anything on Yahoo!’s image search, without triggering any browser warnings.</p> \n   <p>The Dojo library makes the <code class=\"literal\">script</code> trick easy by providing a <code class=\"classname\">dojo.io.SrcScript</code> transport class that uses it. It also provides a <code class=\"classname\">dojo.io.IframeIO</code> class which uses a similar trick involving the <code class=\"literal\">iframe</code> tag. This trick also requires cooperation from the server, but it does have the advantage that it doesn’t automatically execute the response document as code.<a id=\"I_indexterm11_tt1023\" class=\"indexterm\"></a></p> \n  </div>\n </body>\n</html>",
      "slug" : "subverting-the-browser-security-model"
    } ]
  }, {
    "title" : "12. Frameworks for RESTful Services",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Chapter&nbsp;12.&nbsp;Frameworks for RESTful Services</h2>\n  </div>\n </div>\n</div>\n<p>As the REST<a id=\"ch12_frameworks\" class=\"indexterm\"></a> design philosophy becomes more popular, new frameworks are springing up to make RESTful design easy. Existing frameworks are acquiring RESTful modes and features. This, in turn, drives additional interest in REST. In this chapter, I and a few knowledgeable contributors show you how to write resource-oriented services in three popular frameworks: Ruby on Rails,<a id=\"I_indexterm12_tt1024\" class=\"indexterm\"></a> Restlet (for Java), and Django (for Python).<a id=\"I_indexterm12_tt1025\" class=\"indexterm\"></a></p>\n<p>Back in <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a> I said that REST isn’t an architecture, but a way of judging architectures. The Resource-Oriented Architecture is an architecture: it imposes constraints on your thinking that make it easy for you to break a problem down into RESTful resources. But these resources still only exist on an abstract level. They aren’t real until you expose them through specific web services.</p>\n<p>If you’re writing a service from scratch (say, as a CGI script), you can translate your resources into code however you like. But most services aren’t written from scratch: they’re written using a web framework. A REST-aware web framework imposes constraints on your programming that make it easy for you to implement RESTful resources in a specific programming language. In this chapter I’ll show you how to integrate the lessons of this book with real frameworks.</p>",
    "textContent" : "Chapter 12. Frameworks for RESTful Services\r\n\r\nAs the REST design philosophy becomes more popular, new frameworks are springing up to make RESTful design easy. Existing frameworks are acquiring RESTful modes and features. This, in turn, drives additional interest in REST. In this chapter, I and a few knowledgeable contributors show you how to write resource-oriented services in three popular frameworks: Ruby on Rails, Restlet (for Java), and Django (for Python).\r\n\r\nBack in Chapter 1 I said that REST isn’t an architecture, but a way of judging architectures. The Resource-Oriented Architecture is an architecture: it imposes constraints on your thinking that make it easy for you to break a problem down into RESTful resources. But these resources still only exist on an abstract level. They aren’t real until you expose them through specific web services.\r\n\r\nIf you’re writing a service from scratch (say, as a CGI script), you can translate your resources into code however you like. But most services aren’t written from scratch: they’re written using a web framework. A REST-aware web framework imposes constraints on your programming that make it easy for you to implement RESTful resources in a specific programming language. In this chapter I’ll show you how to integrate the lessons of this book with real frameworks.",
    "slug" : "12-frameworks-for-restful-services",
    "pages" : [ {
      "title" : "Ruby on Rails",
      "type" : "page",
      "htmlContent" : "<p class=\"keep-together\">The simplifying assumption<a id=\"ch12_rubyonrails\" class=\"indexterm\"></a><a id=\"ch12_rails\" class=\"indexterm\"></a> is the main driver of the success of Ruby on Rails. Rather than give you a large number of tools for accomplishing any task you can think of, Rails gives you one way to accomplish a wide variety of common tasks. You can create a Rails application very quickly <span class=\"emphasis\"><em>if</em></span> you’re trying to expose data from a relational database, <span class=\"emphasis\"><em>if</em></span> your database tables have certain names and structure, <span class=\"emphasis\"><em>if</em></span> you care to work with a Model-View-Controller architecture, and so on. Because so many problems in the web application domain fit these assumptions, the effect is rarely onerous and often liberating.</p>\n<p>Earlier versions of Rails exposed a textbook REST-RPC hybrid architecture, but Rails 1.2 focuses on a more RESTful design. Perhaps this was inevitable: HTTP’s uniform interface is just another simplifying assumption. I’ve already shown in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> how Rails can be used to make sophisticated RESTful services in very little code. In this section, I take a step back and describe the RESTful architecture of Rails in more general terms.</p>\n<h2>Routing</h2>\n<p>When an HTTP request comes in, Rails analyzes the requested URI<a id=\"I_indexterm12_tt1027\" class=\"indexterm\"></a> and routes the request to the appropriate controller class. As shown in <a class=\"xref\" href=\"ch12.html#simple-routes-rb\" title=\"Example&nbsp;12-1.&nbsp;A simple routes.rb file\">Example&nbsp;12-1</a>, the file <em class=\"filename\">config/routes.rb</em> tells Rails how to handle certain requests.</p>\n<div class=\"example\">\n <a id=\"simple-routes-rb\"></a>\n <div class=\"example-title\">\n  Example&nbsp;12-1.&nbsp;A simple \n  <em class=\"filename\">routes.rb</em> file\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\"># routes.rb\nActionController::Routing::Routes.draw do |map|\n  map.resources :weblogs do |weblog|\n    weblog.resources :entries\n  end\nend</pre>\n </div>\n</div>\n<p>A <em class=\"filename\">config/routes.rb</em> file can get fairly sophisticated. The one in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> is relatively complex: I had a lot of resources, and I had to fight the simplifying assumptions a little bit to get the URI structure I wanted. <a class=\"xref\" href=\"ch12.html#simple-routes-rb\" title=\"Example&nbsp;12-1.&nbsp;A simple routes.rb file\">Example&nbsp;12-1</a> shows a simpler <em class=\"filename\">routes.rb</em> file that buys into the simplifying assumptions.</p>\n<p>That file declares the existence of two controller <a id=\"I_indexterm12_tt1028\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1029\" class=\"indexterm\"></a>classes (<code class=\"classname\">WeblogsController</code> and <code class=\"classname\">EntriesController</code>), and tells Rails how to route incoming requests to those classes. <code class=\"classname\">WeblogsController</code> handles requests for the URI <code class=\"literal\">/weblogs</code>, and for all URIs of the form <code class=\"literal\">/weblogs/{id}</code>. When present, the path variable <code class=\"literal\">{id}</code> is made available as <code class=\"varname\">params[:id]</code>.</p>\n<p><code class=\"classname\">EntriesController</code> handles requests for the URI <code class=\"literal\">/weblogs/{weblog_id}/entries</code>, and all URIs of the form <code class=\"literal\">/weblogs/{weblog_id}/entries/{id}</code>. The path variable <code class=\"literal\">{weblog_id}</code> is made available as <code class=\"varname\">params[:weblog_id]</code>, and <code class=\"literal\">{id}</code>, if present, is made available as <code class=\"varname\">params[:id]</code>.</p>\n<p>Variables like <code class=\"varname\">{id}</code> and <code class=\"varname\">{weblog_id}</code> are typically used to associate a resource with a particular object in the system. They often correspond to database IDs, and get plugged into the ActiveRecord <code class=\"function\">find</code> method. In my del.icio.us clone I tried to give them descriptive names like <code class=\"varname\">{username}</code>, and used them as identifying names rather than IDs.</p>\n<h2>Resources, Controllers, and Views</h2>\n<p>As I showed in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, every Rails controller might <a id=\"I_indexterm12_tt1030\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1031\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1032\" class=\"indexterm\"></a>expose two kinds of resources. You can have a single “list” or “factory” resource, which responds to GET and/or POST requests, and you can have a large number of “object” resources, which respond to GET, PUT, and/or DELETE. The list resource often corresponds to a database table, and the object resources to the rows in the table.</p>\n<p>Each controller is a Ruby class, so “sending” an HTTP request to a class means calling some particular method. Rails defines five standard methods per controller, as well as exposing two special view templates through HTTP GET. For illustration’s sake, here are the seven HTTP requests made possible by my call to <code class=\"function\">map.resources :weblogs</code> back in <a class=\"xref\" href=\"ch12.html#simple-routes-rb\" title=\"Example&nbsp;12-1.&nbsp;A simple routes.rb file\">Example&nbsp;12-1</a>:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p class=\"keep-together\"><code class=\"literal\">GET /weblogs</code>: A<a id=\"I_indexterm12_tt1033\" class=\"indexterm\"></a> list of the weblogs. Rails calls the <code class=\"function\">WeblogsController#index</code> method.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">GET /weblogs/new</code>: The form for creating a new weblog. Rails renders the view in <em class=\"filename\">app/view/welogs/new.rhtml</em>. This view is a hypermedia file describing what sort of HTTP request the client must make to create a new weblog.</p><p>In other words, this is an HTML form (though it could also be a small WADL file). The form says that to create a new weblog, the client should send a POST request to <code class=\"literal\">/weblogs</code> (see below). It also tells the client how to format its representation of the new weblog, so that the server can understand it.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">POST /weblogs</code>: Create<a id=\"I_indexterm12_tt1034\" class=\"indexterm\"></a> a new weblog. Rails calls the <code class=\"function\">WeblogsController#create</code> method.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">GET /weblogs/{id}</code>: A weblog. Rails calls <code class=\"function\">WeblogsController#show</code>.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">GET /weblogs/{id};edit</code>: The form for editing a weblog’s state. Rails renders the view in <em class=\"filename\">app/view/welogs/edit.rhtml</em>. This view is a hypermedia file describing what sort of HTTP request the client must make if it wants to edit a weblog’s state.</p><p>In practice, this means the view is an HTML form, or short WADL file. The hypermedia file tells the client how to send or simulate a <code class=\"literal\">PUT</code> request to <code class=\"literal\">/weblogs/{id}</code>.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">PUT /weblogs/{id}</code>: Change a <a id=\"I_indexterm12_tt1035\" class=\"indexterm\"></a>weblog’s state. Rails calls <code class=\"function\">WeblogsController#update</code>. The “state” here is the state associated with this particular resource: things like the weblog’s name and the author’s contact information. Individual entries are exposed as separate resources.</p></li>\n  <li class=\"listitem\"><p><code class=\"literal\">DELETE /weblogs/{id}</code>: Delete a weblog. Rails calls <code class=\"function\">WeblogsController#delete</code>.</p></li>\n </ul>\n</div>\n<p>You probably won’t expose all seven access points in every controller you create. In particular, you probably won’t use the special views unless you’re running your web service as a web site. This is no problem: just don’t implement the methods or view files you don’t intend to expose.</p>\n<h2>Outgoing Representations</h2>\n<p>Rails<a id=\"I_indexterm12_tt1036\" class=\"indexterm\"></a> makes it easy to send different representations of a resource based on the client’s request. <a class=\"xref\" href=\"ch12.html#respond-to\" title=\"Example&nbsp;12-2.&nbsp;Serving one of several representations\">Example&nbsp;12-2</a> shows some hypothetical Ruby code that renders three different representations of a weblog. Which representation is sent depends on the URI the client accessed, or on the value it provided in the <code class=\"literal\">Accept</code> header. A client will get the HTML rendition if it accesses <code class=\"literal\">/weblogs/1.html</code>, but if the client accesses <code class=\"literal\">/weblogs/1.png</code> instead, the service will send a graphical PNG rendition. The <code class=\"function\">respond_to</code> function takes care of interpreting the client’s capabilities and desires. All you have to do is implement the supported options, in order of precedence.</p>\n<div class=\"example\">\n <a id=\"respond-to\"></a>\n <div class=\"example-title\">\n  Example&nbsp;12-2.&nbsp;Serving one of several representations\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">respond_to do |format|\n  format.html { render :template =&gt; 'weblogs/show' }\n  format.xml  { render :xml =&gt; weblog.to_xml }\n  format.png  { render :text =&gt; weblog.generate_image, \n                       :content_type =&gt; \"image/png\" }\nend</pre>\n </div>\n</div>\n<p>Two especially common representation formats are HTML and the ActiveResource XML serialization format. HTML representations are expressed using Rails views, as they would be in a human-oriented web application. To expose an ActiveRecord object as an XML document, you can just call <code class=\"function\">to_xml</code> on an object or a list of objects.</p>\n<p>Rails plugins make it easy to expose data in other representation formats. In <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, I installed the <code class=\"literal\">atom-tools</code> Ruby gem so that I could render lists of bookmarks as Atom feeds. In <a class=\"xref\" href=\"ch07.html#render-bookmarks\" title=\"Example&nbsp;7-8.&nbsp;application.rb continued: render_bookmarks\">Example&nbsp;7-8</a> I have a <code class=\"function\">respond_to</code> code block, containing clauses which distinguish between requests for Atom and generic XML representations.</p>\n<h2>Incoming Representations</h2>\n<p>Rails sees its job as<a id=\"I_indexterm12_tt1037\" class=\"indexterm\"></a> turning an incoming representation into a bunch of key-value pairs, and making those key-value pairs available through the <code class=\"varname\">params</code> hash. By default, it knows how to parse form-encoded documents of the sort sent by web browsers, and simple XML documents like the ones generated by <code class=\"function\">to_xml</code>.</p>\n<p>If you want to get this kind of action for your own incoming representations, you can add a new <code class=\"classname\">Proc</code> object to <code class=\"varname\">ActionController::Base.param_parsers</code> hash. The <code class=\"classname\">Proc</code> object is a block of code whose job is to process an incoming representation of a certain media type. For details, see the Rails documentation for the <code class=\"varname\">param_parsers</code> hash.</p>\n<h2>Web Applications as Web Services</h2>\n<p>Rails 1.2 does an excellent job of merging the human web and the programmable web. As I showed in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>, Rails comes with a code generator called <code class=\"literal\">scaffold</code> which exposes a database table as a set of resources. You can access the resources with a web browser, or with a web service client like ActiveResource.</p>\n<p>If you use a web browser to access a <code class=\"literal\">scaffold</code> service, you’re served HTML representations of the database objects, and HTML forms for manipulating them (generated by the <em class=\"filename\">new.rhtml</em> and <em class=\"filename\">edit.rhtml</em> I mentioned earlier). You can create, modify, and delete the resources by sending new representations in form-encoded format.<a id=\"I_indexterm12_tt1038\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1039\" class=\"indexterm\"></a> PUT and DELETE requests are simulated through overloaded POST.</p>\n<p>If you use a web service client to access a <code class=\"literal\">scaffold</code> service, you’re served XML representations of the database objects. You manipulate objects by modifying the XML documents and sending then back with PUT. Non-overloaded POST<a id=\"I_indexterm12_tt1040\" class=\"indexterm\"></a> and DELETE work like you’d expect.</p>\n<p>There’s no more compelling example of the human web’s basic similarity to the programmable web. In <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> I largely ignored this aspect of Rails for space reasons, but it makes a compelling argument for using Rails if you’re designing a web site and a web service to do the same thing. Rails makes it easy to expose them both as aspects of the same underlying code.</p>\n<h2>The Rails/ROA Design Procedure</h2>\n<p>The following list is a modified version of the generic design procedure from <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a>. It’s what I used, unofficially, to design the service in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>. The main difference is that you divide the dataset into controllers and the controllers into resources, rather than dividing the dataset into resources. This reduces the chance that you’ll end up with resources that don’t fit Rails’s controller system.<a id=\"I_indexterm12_tt1041\" class=\"indexterm\"></a></p>\n<div class=\"orderedlist\">\n <ol class=\"orderedlist\" type=\"1\">\n  <li class=\"listitem\"><p>Figure out the dataset.</p></li>\n  <li class=\"listitem\"><p>Assign the dataset to controllers.</p><p>For each controller:</p>\n   <div class=\"orderedlist\">\n    <ol class=\"orderedlist\" type=\"a\">\n     <li class=\"listitem\"><p>Does this controller expose a list or factory resource?</p></li>\n     <li class=\"listitem\"><p>Does this controller expose a set of object resources?</p></li>\n     <li class=\"listitem\"><p>Does this controller expose a creation form or editing form resource?</p><p>For the list and object resources:</p>\n      <div class=\"itemizedlist\">\n       <ul class=\"itemizedlist\">\n        <li class=\"listitem\"><p>Design the representation(s) accepted from the client, if different from the Rails standard.</p></li>\n        <li class=\"listitem\"><p>Design the representation(s) served to the client.</p></li>\n        <li class=\"listitem\"><p>Connect this resource to existing resources.</p></li>\n        <li class=\"listitem\"><p>Consider the typical course of events: what’s supposed to happen? The database-backed control flow from <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> should help here.</p></li>\n        <li class=\"listitem\"><p>Consider error conditions: what might go wrong? Again, you can often use the database-backed control flow.</p></li>\n       </ul>\n      </div></li>\n    </ol>\n   </div></li>\n </ol>\n</div>",
      "slug" : "ruby-on-rails"
    }, {
      "title" : "Restlet",
      "type" : "page",
      "htmlContent" : "<html>\n <head></head>\n <body>\n  <p>by <span class=\"author\"><span class=\"firstname\">Jerome</span> <span class=\"surname\">Louvel</span></span> and <span class=\"author\"><span class=\"firstname\">Dave</span> <span class=\"surname\">Pawson</span></span></p> \n  <p>The <a class=\"ulink\" href=\"http://www.restlet.org\" target=\"_top\">Restlet project</a> provides<a id=\"ch12_restlet\" class=\"indexterm\"></a> a lightweight but comprehensive framework for mapping REST concepts to Java classes. It can be used to implement any kind of RESTful system, not just RESTful web services, and it’s proven a reliable piece of software since its inception in 2005.</p> \n  <p>The Restlet project was influenced by the other major Java technologies for developing Web applications: the Servlet API, Java Server Pages, <code class=\"classname\">HttpURLConnection</code>, and Struts. The primary goal of the project is to provide the same level of functionality while sticking closer to the goals of REST as expounded in the Fielding thesis. Another key goal is to present a unified view of the Web, suitable for use in both client- and server-side applications.</p> \n  <p>The Restlet philosophy is that the distinction between HTTP client and HTTP server is architecturally unimportant. A single piece of software should be able to act as a web client, then as a web server, without using two completely different APIs.<sup>[<a id=\"id656668\" href=\"#ftn.id656668\" class=\"footnote\">32</a>]</sup></p> \n  <p>An early development was the split of the software into the Restlet API and<a id=\"I_indexterm12_tt1043\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1044\" class=\"indexterm\"></a> Noelios Restlet Engine (NRE), a reference implementation. This separation allows other implementations to be compatible with the same API. The NRE includes several HTTP server connectors based on popular HTTP open source Java projects: Mortbay’s Jetty,<a id=\"I_indexterm12_tt1045\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1046\" class=\"indexterm\"></a> Codehaus’s AsyncWeb, and the Simple framework. There’s even an adapter that lets you deploy a Restlet application inside standard Servlet containers like<a id=\"I_indexterm12_tt1047\" class=\"indexterm\"></a> Apache Tomcat.</p> \n  <p>Restlet also provides two HTTP client connectors, one based on the <a id=\"I_indexterm12_tt1048\" class=\"indexterm\"></a>official <code class=\"classname\">HttpURLConnection</code> class and the other on Apache’s popular HTTP client library. Another connector allows you to easily manipulate a JDBC source via XML documents in a RESTful way, while an SMTP connector, based on the JavaMail API, lets you send email with an XML document.</p> \n  <p>The Restlet API includes classes that can build representations based on strings, files, streams, channels, and XML documents: it supports SAX and DOM for parsing, and XSLT for transformation. It’s easy to build JSP-style template-based representations, using the FreeMarker or Apache Velocity template engines. You can even serve static files and directories, like an ordinary web server, using a <code class=\"classname\">Directory</code> class, which supports content negotiation.</p> \n  <p>Throughout the framework, the design principles are simplicity and flexibility. The API aims to abstract the concepts of HTTP, URIs, and REST into a consistent set of classes, without fully hiding low-level information such as the raw HTTP headers.</p> \n  <h2>Basic Concepts</h2> \n  <p>The Restlet terminology matches the terminology of REST as described in the Fielding thesis: resource, representation, connector, component, media type, language, and so on. A lot of this terminology should be familiar to you from elsewhere in the book. Restlet adds some specialized classes like <code class=\"classname\">Application</code>, <code class=\"classname\">Filter</code>, <code class=\"classname\">Finder</code>, <code class=\"classname\">Router</code>, and <code class=\"classname\">Route</code>, to make it easier to combine restlets with each other, and to map incoming requests to the resources that ought to handle them.</p> \n  <p>The central concept of Restlet is the <a id=\"I_indexterm12_tt1049\" class=\"indexterm\"></a>abstract <code class=\"classname\">Uniform</code> class, and its concrete subclass <code class=\"classname\">Restlet</code>. As the name implies, <code class=\"classname\">Uniform</code> exposes a uniform interface as defined by REST. This interface is inspired by HTTP’s uniform interface but can be used with other protocols like FTP and SMTP.</p> \n  <p>The main method is <code class=\"function\">handle</code>, which takes two arguments: <code class=\"classname\">Request</code> and <code class=\"classname\">Response</code>. As you can see from <a class=\"xref\" href=\"ch12.html#fig13.1\" title=\"Figure&nbsp;12-1.&nbsp;The Restlet class hierarchy\">Figure&nbsp;12-1</a>, every call handler that is exposed over the network (whether as client or server) is a subclass of <code class=\"classname\">Restlet</code>—is a restlet—and respects this uniform interface. Because of this uniform interface, restlets can be combined in very sophisticated ways.</p> \n  <div class=\"figure\"> \n   <a id=\"fig13.1\"></a> \n   <div class=\"figure-contents\"> \n    <div class=\"mediaobject\"> \n     <a id=\"I_mediaobject12_tt1050\"></a> \n     <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24588.png\" alt=\"The Restlet class hierarchy\"> \n    </div> \n   </div> \n   <div class=\"figure-title\">\n     Figure&nbsp;12-1.&nbsp;The Restlet class hierarchy \n   </div> \n  </div> \n  <p>Every protocol that Restlet supports is exposed through the <code class=\"function\">handle</code> method. This means HTTP (server and client), HTTPS, and SMTP, as well as JDBC, the file system, and even the class loaders all go through <code class=\"function\">handle</code>. This reduces the number of APIs the developer must learn.</p> \n  <p>Filtering, security, data transformation, and routing are handled by chaining together subclasses of <code class=\"classname\">Restlet</code>. <code class=\"classname\">Filter</code>s can provide processing before or after the handling of a call by the next restlet. <code class=\"classname\">Filter</code> instances work like Rails filters, but they respond to the same <code class=\"function\">handle</code> method as the other Restlet classes, not to a filter-specific API.</p> \n  <p>A <code class=\"classname\">Router</code> restlet has a number of <code class=\"classname\">Restlet</code> objects attached to it, and routes each incoming protocol call to the appropriate <code class=\"classname\">Restlet</code> handler. Routing is typically done on some aspect of the target URI, as in Rails. Unlike Rails, Restlet imposes no URI conventions on your resource hierarchies. You can set up your URIs however you want, so long as you program your <code class=\"classname\">Router</code>s appropriately.</p> \n  <p><code class=\"classname\">Router</code>s can stretch beyond this common usage. You can use a <code class=\"classname\">Router</code> to proxy calls with dynamic load balancing between several remote machines! Even a setup as complex as this still responds to Restlet’s uniform interface, and can be used as a component in a larger routing system. <a id=\"I_indexterm12_tt1051\" class=\"indexterm\"></a>The <code class=\"classname\">VirtualHost</code> class (a subclass of <code class=\"classname\">Router</code>) makes it possible to host several applications under several domain names on the same physical machine. Traditionally, to get this kind of feature you’ve had to bring in a front-end web server like Apache’s <span class=\"application\">httpd</span>. With Restlet, it’s just another <code class=\"classname\">Router</code> that responds to the uniform interface.</p> \n  <p>An <code class=\"classname\">Application</code> object can manage a portable set of restlets and provide common services. A “service” might be the transparent decoding of compressed requests, or tunnelling methods like PUT and DELETE over overloaded POST using the <code class=\"varname\">method</code> query parameter. Finally, <code class=\"classname\">Component</code> objects can contain and orchestrate a set of <code class=\"classname\">Connector</code>s, <code class=\"classname\">VirtualHost</code>s, and <code class=\"classname\">Application</code>s that can be run as a standalone Java application, or embedded in a larger system such as a J2EE environment.</p> \n  <p>In <a class=\"xref\" href=\"ch06.html\" title=\"Chapter&nbsp;6.&nbsp;Designing Read/Write Resource-Oriented Services\">Chapter&nbsp;6</a> you saw a sequence of steps for breaking a problem down into a set of resources that respond to HTTP’s uniform interface. This procedure was modified in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> to deal with the simplifying assumptions imposed by Ruby on Rails. There’s no need to modify the procedure when working with Restlet, because Restlet makes no simplifying assumptions. It can implement any RESTful system. If you happen to be implementing a RESTful resource-oriented web service, you can arrange and implement the resources however you like. Restlet does provide some classes that make it easy to create resource-oriented applications. Most notably, there’s a <code class=\"classname\">Resource</code> class that can be used as the basis for all of your application resources.</p> \n  <p>Throughout this book, URI Templates are used as shorthand to designate whole classes of URIs (see <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>”). Restlet uses URI Templates to map URIs onto resources. A Restlet implementation of the <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> social bookmarking application might specify the path to a particular bookmark like so:</p> \n  <a id=\"I_programlisting12_tt1052\"></a> \n  <pre class=\"programlisting\">/users/{username}/bookmarks/{URI}\n</pre> \n  <p>You can use this exact syntax when attaching a <code class=\"classname\">Resource</code> subclass to a <code class=\"classname\">Router</code>. If it sounds too good to be true, just wait for the next section where I actually implement part of the bookmarking service covered in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>.</p> \n  <h2>Writing Restlet Clients</h2> \n  <p>In <a class=\"xref\" href=\"ch02.html#yahoowebsearch\" title=\"Example&nbsp;2-1.&nbsp;Searching the Web with Yahoo!’s web service\">Example&nbsp;2-1</a> you saw a <a id=\"ch12_writingclients\" class=\"indexterm\"></a>Ruby client that retrieved XML search results from Yahoo!’s web search service. The code in <a class=\"xref\" href=\"ch12.html#yahoo-restlet\" title=\"Example&nbsp;12-3.&nbsp;A Restlet client for Yahoo!’s search service\">Example&nbsp;12-3</a> is a Java implementation of the same client, written against version 1.0 of Restlet. In order to compile and run the upcoming examples, you’ll need to make sure that the following JARs are in your classpath:</p> \n  <div class=\"itemizedlist\"> \n   <ul class=\"itemizedlist\"> \n    <li class=\"listitem\"><p><span class=\"emphasis\"><em>org.restlet.jar</em></span> (Restlet API)</p></li> \n    <li class=\"listitem\"><p><span class=\"emphasis\"><em>com.noelios.restlet.jar</em></span> (Noelios Restlet Engine core)</p></li> \n    <li class=\"listitem\"><p><span class=\"emphasis\"><em>com.noelios.restlet.ext.net.jar</em></span> (HTTP client connector based on JDK’s <code class=\"classname\">HttpURLConnection</code>)</p></li> \n   </ul> \n  </div> \n  <p>All these are available in the <em class=\"filename\">lib</em> directory of the Restlet distribution. Make sure that your Java environment supports Java SE version 5.0 or higher. If you really need to, you can easily backport the Restlet code to Java SE version 4.0 with <a class=\"ulink\" href=\"http://retrotranslator.sourceforge.net/\" target=\"_top\">Retrotranslator</a>.</p> \n  <div class=\"example\"> \n   <a id=\"yahoo-restlet\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;12-3.&nbsp;A Restlet client for Yahoo!’s search service \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"programlisting\">// YahooSearch.java\nimport org.restlet.Client;\nimport org.restlet.data.Protocol;\nimport org.restlet.data.Reference;\nimport org.restlet.data.Response;\nimport org.restlet.resource.DomRepresentation;\nimport org.w3c.dom.Node;\n\n/**\n * Searching the web with Yahoo!'s web service using XML.\n */\npublic class YahooSearch {\n    static final String BASE_URI = \n\t\"http://api.search.yahoo.com/WebSearchService/V1/webSearch\";\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 1) {\n            System.err.println(\"You need to pass a term to search\");\n        } else {\n            // Fetch a resource: an XML document full of search results\n            String term = Reference.encode(args[0]);\n            String uri = BASE_URI + \"?appid=restbook&amp;query=\" + term;\n            Response response = new Client(Protocol.HTTP).get(uri);\n            DomRepresentation document = response.getEntityAsDom();\n\n            // Use XPath to find the interesting parts of the data structure\n            String expr = \"/ResultSet/Result/Title\";\n            for (Node node : document.getNodes(expr)) {\n                System.out.println(node.getTextContent());\n            }\n        }\n    }\n}</pre> \n   </div> \n  </div> \n  <p>You can run this class by passing a search term as a command-line argument, just like with the Ruby example in <a class=\"xref\" href=\"ch02.html#yahoowebsearch\" title=\"Example&nbsp;2-1.&nbsp;Searching the Web with Yahoo!’s web service\">Example&nbsp;2-1</a>. Here’s a sample run:</p> \n  <a id=\"I_programlisting12_tt1053\"></a> \n  <pre class=\"programlisting\">$ <strong class=\"userinput\"><code>java YahooSearch xslt</code></strong>\n\tXSL Transformations (XSLT)\n\tThe Extensible Stylesheet Language Family (XSL)\n\tXSLT Tutorial\n        ...</pre> \n  <p>This example demonstrates how easy it is with Restlet to retrieve XML data from a web service and process it with standard tools. The URI to the Yahoo! resource is built from a constant and the user-provided search term. A client connector is instantiated using the HTTP protocol. The XML document is retrieved with a method (<code class=\"function\">get</code>) whose name mirrors the method of HTTP’s uniform interface. When the call returns, the program has the response entity as a DOM representation. As in the Ruby example, XPath <a id=\"I_indexterm12_tt1054\" class=\"indexterm\"></a>is the simplest way to search the XML I retrieved.</p> \n  <p>Also as in the earlier Ruby example, this program ignores the XML namespaces used in the result document. Yahoo! puts the entire document into the namespace <code class=\"literal\">urn:yahoo:srch</code>, but I access the tags as, say, <code class=\"literal\">ResultSet</code> instead of <code class=\"literal\">urn:yahoo:srch:ResultSet</code>. The Ruby example ignores namespaces because Ruby’s default XML parsers aren’t namespace-aware. Java’s XML parsers are namespace-aware, and the Restlet API makes it easy to deal with namespaces correctly. It doesn’t make much difference in a simple case like this, but you can avoid some subtle problems by handling documents in a namespace-aware way.</p> \n  <p>Of course, saying <code class=\"literal\">urn:yahoo.srch:ResultSet</code> all the time would get old pretty fast. The Restlet API makes it easy to associate a short prefix with a namespace, and then use the prefix in an XPath expression instead of the full name. <a class=\"xref\" href=\"ch12.html#yahoo-restlet-namespaces\" title=\"Example&nbsp;12-4.&nbsp;Namespace-aware version of the document handling code from Example&nbsp;12-3\">Example&nbsp;12-4</a> shows a variant of the document-handling code from the end of <a class=\"xref\" href=\"ch12.html#yahoo-restlet\" title=\"Example&nbsp;12-3.&nbsp;A Restlet client for Yahoo!’s search service\">Example&nbsp;12-3</a>. This version uses namespace-aware XPath, so that Yahoo’s <code class=\"literal\">ResultSet</code> tag will never be confused with the <code class=\"literal\">ResultSet</code> tag from some other namespace.</p> \n  <div class=\"example\"> \n   <a id=\"yahoo-restlet-namespaces\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;12-4.&nbsp;Namespace-aware version of the document handling code from \n    <a class=\"xref\" href=\"ch12.html#yahoo-restlet\" title=\"Example&nbsp;12-3.&nbsp;A Restlet client for Yahoo!’s search service\">Example&nbsp;12-3</a> \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"programlisting\">            DomRepresentation document = response.getEntityAsDom();\n\n            // Associate the namespace with the prefix 'y'\n            document.setNamespaceAware(true);\n            document.putNamespace(\"y\", \"urn:yahoo:srch\");\n\n            // Use XPath to find the interesting parts of the data structure\n            String expr = \"/y:ResultSet/y:Result/y:Title/text()\";\n            for (Node node : document.getNodes(expr)) {\n                System.out.println(node.getTextContent());\n            }</pre> \n   </div> \n  </div> \n  <p><a class=\"xref\" href=\"ch02.html#yahoo-web-search-json\" title=\"Example&nbsp;2-15.&nbsp;Searching the Web with Yahoo!’s web service (JSON edition)\">Example&nbsp;2-15</a> showed a second Ruby client for Yahoo!’s search service. That one requested a JSON representation of the search data, instead of an XML representation. <a class=\"xref\" href=\"ch12.html#yahoo-restlet-json\" title=\"Example&nbsp;12-5.&nbsp;A Restlet client for Yahoo!’s JSON search service\">Example&nbsp;12-5</a> is the equivalent program for Restlet. It gets its JSON support from two additional JAR files, both included with Restlet:</p> \n  <div class=\"itemizedlist\"> \n   <ul class=\"itemizedlist\"> \n    <li class=\"listitem\"><p><span class=\"emphasis\"><em>org.restlet.ext.json_2.0.jar</em></span> (Restlet extension for JSON)</p></li> \n    <li class=\"listitem\"><p><span class=\"emphasis\"><em>org.json_2.0/org.json.jar</em></span> (JSON official library)</p></li> \n   </ul> \n  </div> \n  <div class=\"example\"> \n   <a id=\"yahoo-restlet-json\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;12-5.&nbsp;A Restlet client for Yahoo!’s JSON search service \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"programlisting\">// YahooSearchJSON.java\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.restlet.Client;\nimport org.restlet.data.Protocol;\nimport org.restlet.data.Reference;\nimport org.restlet.data.Response;\nimport org.restlet.ext.json.JsonRepresentation;\n\n/**\n * Searching the web with Yahoo!'s web service using JSON.\n */\npublic class YahooSearchJSON {\n    static final String BASE_URI =\n\t\"http://api.search.yahoo.com/WebSearchService/V1/webSearch\";\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 1) {\n            System.err.println(\"You need to pass a term to search\");\n        } else {\n            // Fetch a resource: a JSON document full of search results\n            String term = Reference.encode(args[0]);\n            String uri = BASE_URI + \"?appid=restbook&amp;output=json&amp;query=\" + term;\n            Response response = new Client(Protocol.HTTP).get(uri);\n            JSONObject json = new JsonRepresentation(response.getEntity())\n                    .toJsonObject();\n\n            // Navigate within the JSON document to display the titles\n            JSONObject resultSet = json.getJSONObject(\"ResultSet\");\n            JSONArray results = resultSet.getJSONArray(\"Result\");\n            for (int i = 0; i &lt; results.length(); i++) {\n                System.out.println(results.getJSONObject(i).getString(\"Title\"));\n            }\n        }\n    }\n}</pre> \n   </div> \n  </div> \n  <p>When you write a client against Yahoo!’s service, you can choose the representation. Restlet supports both XML in the core API and JSON with an extension. As you’d expect, the only difference between the two programs is in processing the response. The <code class=\"classname\">JsonRepresentation</code> class allows you to convert the response entity-body into an instance of <code class=\"classname\">JSONObject</code> (contrast with Ruby’s JSON library, which converted the JSON data structure into a native data structure). The data structure is navigated manually, since there’s not yet any XPath-like query language for JSON.<a id=\"I_indexterm12_tt1055\" class=\"indexterm\"></a></p> \n  <h2>Writing Restlet Services</h2> \n  <p>The next set of <a id=\"ch12_restletwriting\" class=\"indexterm\"></a>examples <a id=\"ch12_services\" class=\"indexterm\"></a>is a little more complex. I’ll show you how to design and implement a server-side application. I’ve implemented a subset of the bookmark management application originally implemented with Ruby on Rails in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>. To keep things relatively simple, the only features this application supports are the secure manipulation of users and their bookmarks.</p> \n  <p>The Java package structure looks like this:</p> \n  <p><a id=\"I_programlisting12_tt1056\"></a></p> \n  <pre class=\"programlisting\">org\n restlet\n  example\n   book\n    rest\n     ch7\n    \t-Application\n    \t-ApplicationTest\n    \t-Bookmark\n    \t-BookmarkResource\n\t \t-BookmarksResource\n\t \t-User\n\t \t-UserResource</pre> \n  <p>That is, the class <code class=\"classname\">Bookmark</code> is in the package <code class=\"literal\">org.restlet.example.book.rest.ch7</code>, and so on.</p> \n  <p>Rather than include all the code here, I’d like you to download it from the archive (<a class=\"ulink\" href=\"http://www.oreilly.com/catalog/9780596529260\" target=\"_top\">http://www.oreilly.com/catalog/9780596529260</a>), which contains all examples from this book. It’s also available on <a class=\"ulink\" href=\"http://www.restlet.org\" target=\"_top\">restlet.org</a>. If you’ve already downloaded Restlet, you don’t have to do anything, since the examples for this section are shipped with Restlet, see <em class=\"filename\">src/org.restlet.example/org/restlet/example/book/rest</em>.</p> \n  <p>I’ll start you off with some simple code in <a class=\"xref\" href=\"ch12.html#application-main\" title=\"Example&nbsp;12-6.&nbsp;The Application.main method: setting up the application\">Example&nbsp;12-6</a>: the <code class=\"function\">Application.main</code>, which sets up the web server and starts serving requests.</p> \n  <div class=\"example\"> \n   <a id=\"application-main\"></a> \n   <div class=\"example-title\">\n     Example&nbsp;12-6.&nbsp;The Application.main method: setting up the application \n   </div> \n   <div class=\"example-contents\"> \n    <pre class=\"programlisting\">public static void main(String... args) throws Exception {\n    // Create a component with an HTTP server connector\n    Component comp = new Component();\n    comp.getServers().add(Protocol.HTTP, 3000);\n\n    // Attach the application to the default host and start it\n    comp.getDefaultHost().attach(\"/v1\", new Application());\n    comp.start();\n}</pre> \n   </div> \n  </div> \n  <div class=\"sect3\" title=\"Resource and URI design\"> \n   <p>Since Restlets impose no restrictions on resource design, the resource classes and the URIs they expose flow naturally from considerations of ROA design. There’s no need to design around the Restlet architecture, the way the resources in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> were designed around Rails’s controller-based architecture. <a class=\"xref\" href=\"ch12.html#restlet-bookmark-mapping\" title=\"Figure&nbsp;12-2.&nbsp;Restlet architecture of the social bookmarking application\">Figure&nbsp;12-2</a> shows how incoming URIs are mapped to resources with a <code class=\"classname\">Router</code>, and how resources are mapped onto the underlying restlet classes.</p> \n   <div class=\"figure\"> \n    <a id=\"restlet-bookmark-mapping\"></a> \n    <div class=\"figure-contents\"> \n     <div class=\"mediaobject\"> \n      <a id=\"I_mediaobject12_tt1057\"></a> \n      <img src=\"/book_res/restful-web-services/httpatomoreillycomsourceoreillyimages24590.png\" alt=\"Restlet architecture of the social bookmarking application\"> \n     </div> \n    </div> \n    <div class=\"figure-title\">\n      Figure&nbsp;12-2.&nbsp;Restlet architecture of the social bookmarking application \n    </div> \n   </div> \n   <p>To understand how these mappings are coded in Java, let’s take a look at the <code class=\"classname\">Application</code> class and its <code class=\"function\">createRoot</code> method (see <a class=\"xref\" href=\"ch12.html#application-createroot\" title=\"Example&nbsp;12-7.&nbsp;The Application.createRoot method: mapping URI Templates to restlets\">Example&nbsp;12-7</a>). This is the equivalent of the Rails <em class=\"filename\">routes.rb</em> file shown in <a class=\"xref\" href=\"ch07.html#routes-rb\" title=\"Example&nbsp;7-3.&nbsp;The routes.rb file\">Example&nbsp;7-3</a>.</p> \n   <div class=\"example\"> \n    <a id=\"application-createroot\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;12-7.&nbsp;The Application.createRoot method: mapping URI Templates to restlets \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">public Restlet createRoot() {\n    Router router = new Router(getContext());\n\n    // Add a route for user resources\n    router.attach(\"/users/{username}\", UserResource.class);\n\n    // Add a route for user's bookmarks resources\n    router.attach(\"/users/{username}/bookmarks\", BookmarksResource.class);\n\n    // Add a route for bookmark resources\n    Route uriRoute = router.attach(\"/users/{username}/bookmarks/{URI}\",\n                                   BookmarkResource.class);\n    uriRoute.getTemplate().getVariables()\n      .put(\"URI\", new Variable(Variable.TYPE_URI_ALL));\n}</pre> \n    </div> \n   </div> \n   <p>This code runs when I create an <code class=\"classname\">Application</code> object, as I do back in <a class=\"xref\" href=\"ch12.html#application-main\" title=\"Example&nbsp;12-6.&nbsp;The Application.main method: setting up the application\">Example&nbsp;12-6</a>. It creates a clean and intuitive relationship between the resource class <code class=\"classname\">UserResource</code> and the URI Template <code class=\"literal\">\"/users/{username}\"</code>. The <code class=\"classname\">Router</code> matches incoming URIs against the templates, and forwards each request to a new instance of the appropriate resource class. The value of the template variables are stored in the request’s attributes map (similar to the <code class=\"literal\">params</code> map in the Rails example), for easy usage in the <code class=\"classname\">Resource</code> code. This is both powerful and simple to understand, which is very helpful when you haven’t seen the code for a few months!</p> \n  </div> \n  <div class=\"sect3\" title=\"Request handling and representations\"> \n   <p>Suppose a client makes a GET request for the URI <code class=\"literal\">http://localhost:3000/v1/users/jerome</code>. I’ve got a <code class=\"classname\">Component</code> listening on port 3000 of <code class=\"literal\">localhost</code>, and an <code class=\"classname\">Application</code> object attached to <code class=\"literal\">/v1</code>. The <code class=\"classname\">Application</code> has a <code class=\"classname\">Router</code> and a bunch of <code class=\"classname\">Route</code> objects waiting for requests that match various URI Templates. The URI path fragment <code class=\"literal\">\"/users/jerome\"</code> matches the template <code class=\"literal\">\"/users/{username}\"</code>, and that template’s <code class=\"classname\">Route</code> is associated with the <code class=\"classname\">UserResource</code> class: a rough equivalent to the Rails <code class=\"classname\">UsersController</code> class.</p> \n   <p>Restlet handles the request by instantiating a new <code class=\"classname\">UserResource</code> object and calling its <code class=\"function\">handleGet</code> method. The <code class=\"classname\">UserResource</code> constructor is reproduced in <a class=\"xref\" href=\"ch12.html#example_12_8\" title=\"Example&nbsp;12-8.&nbsp;The UserResource constructor\">Example&nbsp;12-8</a>.</p> \n   <div class=\"example\"> \n    <a id=\"example_12_8\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;12-8.&nbsp;The UserResource constructor \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">/**\n * Constructor.\n *\n * @param context\n *            The parent context.\n * @param request\n *            The request to handle.\n * @param response\n *            The response to return.\n */\n public UserResource(Context context, Request request, Response response) {\n    super(context, request, response);\n    this.userName = (String) request.getAttributes().get(\"username\");\n    ChallengeResponse cr = request.getChallengeResponse();\n    this.login = (cr != null) ? cr.getIdentifier() : null;\n    this.password = (cr != null) ? cr.getSecret() : null;\n    this.user = findUser();\n\n    if (user != null) {\n        getVariants().add(new Variant(MediaType.TEXT_PLAIN));\n    }\n}</pre> \n    </div> \n   </div> \n   <p>By this time, the framework has set up a <code class=\"classname\">Request</code> object, which contains all the information I need about the request. The <code class=\"varname\">username</code> attribute comes from the URI, and the authentication credentials from the request’s <code class=\"literal\">Authorization</code> header. I also call <code class=\"function\">findUser</code> to look up a user in the database based on the authentication credentials (to save space, I won’t show the <code class=\"function\">findUser</code> method here). These are the jobs done by Rails filters in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>.</p> \n   <p>After the framework instantiates a <code class=\"classname\">UserResource</code>, it invokes the appropriate <code class=\"function\">handle</code> method on the resource object. There’s one <code class=\"function\">handle</code> method for every method of HTTP’s uniform interface. In this case, the last act of the Restlet framework is to call <code class=\"function\">UserResource.handleGet</code>.</p> \n   <p>I don’t actually define <code class=\"function\">UserResource.handleGet</code>, so the inherited behavior (defined in Restlet’s <code class=\"function\">Resource.handleGet</code>) takes over. The default behavior of <code class=\"function\">handleGet</code> is to find the representation of the resource that best fits the client’s needs. The client expresses its needs through content-negotiation. Restlet looks at the values of the <code class=\"literal\">Accept</code> headers and figures out which “variant” representation is the most appropriate. In this case, there’s only one representation format, so it doesn’t matter what the client asks for. This is handled by the <code class=\"function\">getVariants</code> and <code class=\"function\">getRepresentation</code> methods. Back in the constructor, I defined <code class=\"literal\">text/plain</code> as the only supported representation format, so my implementation of the <code class=\"function\">getRepresentation</code> method is pretty simple (see <a class=\"xref\" href=\"ch12.html#example_12_9\" title=\"Example&nbsp;12-9.&nbsp;UserResource.getRepresentation: building a representation of a user\">Example&nbsp;12-9</a>).</p> \n   <div class=\"example\"> \n    <a id=\"example_12_9\"></a> \n    <div class=\"example-title\">\n      Example&nbsp;12-9.&nbsp;UserResource.getRepresentation: building a representation of a user \n    </div> \n    <div class=\"example-contents\"> \n     <pre class=\"programlisting\">@Override\npublic Representation getRepresentation(Variant variant) {\n    Representation result = null;\n\n    if (variant.getMediaType().equals(MediaType.TEXT_PLAIN)) {\n        // Creates a text representation\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"------------\\n\");\n\t       sb.append(\"User details\\n\");\n\t       sb.append(\"------------\\n\\n\");\n\t       sb.append(\"Name:  \").append(this.user.getFullName()).append('\\n');\n\t       sb.append(\"Email: \").append(this.user.getEmail()).append('\\n');\n\t       result = new StringRepresentation(sb);\n    }\n\n    return result;\n}</pre> \n    </div> \n   </div> \n   <p>That’s just one method of one resource, but the other resources, and the other HTTP methods of <code class=\"classname\">UserResource</code>, work the same way. A PUT request for a user gets routed to <code class=\"classname\">UserResource.handlePut</code>, and so on. As I mentioned earlier, this code is part of a complete bookmarking application, so there’s much more example code available if you’re interested in learning more.</p> \n   <p>You should now understand how the Restlet framework routes incoming HTTP requests to specific <code class=\"classname\">Resource</code> classes, and to specific methods on those classes. You should also see how representations are built up from resource state. You’ll probably only have to worry about the <code class=\"classname\">Application</code> and the <code class=\"classname\">Router</code> code once, since a single router can work for all of your resources.</p> \n  </div> \n  <div class=\"sect3\" title=\"Compiling, running, and testing\"> \n   <p>The <code class=\"classname\">Application</code> class implements the HTTP server that runs the social bookmarking service. It requires a classpath that contains the following JAR files:</p> \n   <div class=\"itemizedlist\"> \n    <ul class=\"itemizedlist\"> \n     <li class=\"listitem\"><p><span class=\"emphasis\"><em>org.restlet.jar</em></span></p></li> \n     <li class=\"listitem\"><p><span class=\"emphasis\"><em>com.noelios.restlet.jar</em></span></p></li> \n     <li class=\"listitem\"><p><span class=\"emphasis\"><em>com.noelios.restlet.ext.net.jar</em></span></p></li> \n     <li class=\"listitem\"><p><span class=\"emphasis\"><em>org.simpleframework_3.1/org.simpleframework.jar</em></span></p></li> \n     <li class=\"listitem\"><p><span class=\"emphasis\"><em>com.noelios.restlet.ext.simple_3.1.jar</em></span></p></li> \n     <li class=\"listitem\"><p><span class=\"emphasis\"><em>com.db4o_6.1/com.db4o.jar</em></span></p></li> \n    </ul> \n   </div> \n   <p class=\"keep-together\">All of these<a id=\"I_indexterm12_tt1058\" class=\"indexterm\"></a> JAR files are included with the Restlet distribution, and we’ve listed them relative to the <em class=\"filename\">lib</em> directory in your Restlet installation. Two things to notice: the actual web server work is handled by a very compact HTTP server connector based on the Simple Framework. Second, instead of making you set up a relational database, we persist our domain objects (users and bookmarks) with the powerful <span class=\"application\">db4o</span> object database. Once all the example files have been compiled, run <code class=\"classname\">org.restlet.example.book.rest.ch7.Application</code>, which acts as the server endpoint.</p> \n   <p>The <code class=\"classname\">ApplicationTest</code> class provides a client interface to the service. It uses the Restlet client classes described in the previous section to add and delete users and bookmarks. It does this through HTTP’s uniform interface: users and bookmarks are created with PUT and deleted with DELETE.</p> \n   <p>Run <code class=\"classname\">ApplicationTest.class</code> from the command line and you’ll get a message like this:</p> \n   <a id=\"I_programlisting12_tt1059\"></a> \n   <pre class=\"programlisting\">  Usage depends on the number of arguments:\n - Deletes a user     : userName, password\n - Deletes a bookmark : userName, password, URI\n - Adds a new user    : userName, password, \"full name\", email\n - Adds a new bookmark: userName, password, URI, shortDescription, \n                        longDescription, restrict[true / false]</pre> \n   <p>You can use this program to add some users and give them bookmarks. Then you can view an HTML representation of the users’ bookmarks by visiting the appropriate URIs in a standard web browser, such as <em class=\"filename\">http://localhost:3000/v1/users/jerome</em> and so on.<a id=\"I_indexterm12_tt1060\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1061\" class=\"indexterm\"></a></p> \n  </div> \n  <h2>Conclusion</h2> \n  <p>The Restlet project delivered its final 1.0 version in early 2007. It took just more than 12 months to develop, and the project now has a thriving development and user community. The mailing list is friendly and welcoming to both new and experienced developers. Noelios Consulting, the founder and main developing force behind the project, offers professional support plans and training.</p> \n  <p>As of the time of writing, the 1.0 release is under maintenance, and a new 1.1 branch has been started. Future plans include submission of the Restlet API to the Java Community Process (JCP) for standardization. There’s also a higher-level API for RESTful web services in development, submitted by Sun Microsystems to the JCP and known as JSR 311. This higher-level API should make it easy to expose Java domain objects as RESTful resources. This will nicely complement the Restlet API, especially its <code class=\"classname\">Resource</code> class. Noelios Consulting is part of the initial expert group and will directly support the future annotations in its Restlet engine.<a id=\"I_indexterm12_tt1062\" class=\"indexterm\"></a></p>\n </body>\n</html>",
      "slug" : "restlet"
    }, {
      "title" : "Django",
      "type" : "page",
      "htmlContent" : "<p>by <span class=\"author\"><span class=\"firstname\">Jacob</span> <span class=\"surname\">Kaplan-Moss</span></span></p>\n<p><a class=\"ulink\" href=\"http://www.djangoproject.com/\" target=\"_top\">Django</a> is<a id=\"ch12_django\" class=\"indexterm\"></a> a framework that makes it easy to develop web applications and web services in Python. Its design is very similar to Rails, though it makes fewer simplifying assumptions. You can apply the generic ROA design procedure to turn a dataset into a set of RESTful resources and implement those resources directly in Django.</p>\n<p>I’ll show you how I implemented a social bookmarking service in Django, along the lines of the Rails implementation in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>. Since this book isn’t intended to be a Django tutorial, I’m leaving out most of the intermediary steps of Django development so I can focus on the parts that specifically apply to RESTful web services. If you’re interested in learning more about Django, you should check out the free online <span class=\"emphasis\"><em><a class=\"ulink\" href=\"http://www.djangobook.com/\" target=\"_top\">Django Book</a></em></span> and the official <a class=\"ulink\" href=\"http://www.djangoproject.com/documentation/\" target=\"_top\">Django documentation</a>.</p>\n<h2>Create the Data Model</h2>\n<p>Most Django developers start by designing the data model. This corresponds to the first step of the generic ROA procedure, “Figure out the data set.” The model is usually stored in a relational database using Django’s<a id=\"I_indexterm12_tt1064\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1065\" class=\"indexterm\"></a> object-relational mapping (ORM) tools. It’s certainly possible to write RESTful services that don’t use a database, but for the social bookmarking application a database makes the most sense. It’s fairly straightforward to translate the Rails migration from <a class=\"xref\" href=\"ch07.html#bookmark-schema\" title=\"Example&nbsp;7-1.&nbsp;The bookmark database schema as a Rails migration\">Example&nbsp;7-1</a> into a Django model, as seen in <a class=\"xref\" href=\"ch12.html#example_12_10\" title=\"Example&nbsp;12-10.&nbsp;The Django model (models.py)\">Example&nbsp;12-10</a>.</p>\n<div class=\"example\">\n <a id=\"example_12_10\"></a>\n <div class=\"example-title\">\n  Example&nbsp;12-10.&nbsp;The Django model (\n  <em class=\"filename\">models.py</em>)\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">from datetime import datetime\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Tag(models.Model):\n    name = models.SlugField(maxlength=100, primary_key=True)\n\nclass Bookmark(models.Model):\n    user                = models.ForeignKey(User)\n    url                 = models.URLField(db_index=True)\n    short_description   = models.CharField(maxlength=255)\n    long_description    = models.TextField(blank=True)\n    timestamp           = models.DateTimeField(default=datetime.now)\n    public              = models.BooleanField()\n    tags                = models.ManyToManyField(Tag)</pre>\n </div>\n</div>\n<p>There’s a few subtleties and a lot of power squeezed into these few lines of code:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>I chose to use the built-in Django <code class=\"classname\">User</code> model, rather than create my own <code class=\"literal\">users</code> table as the Rails example does. This has a few advantages, the biggest being that the built-in <code class=\"classname\">User</code> model will handle much of the authentication and authorization. For more information on this, see <a class=\"ulink\" href=\"http://www.djangobook.com/en/beta/chapter12/\" target=\"_top\">Chapter 12 of the Django Book</a>.</p></li>\n  <li class=\"listitem\"><p>Django has no direct analog to the Rails <code class=\"literal\">acts_as_taggable</code> plugin, so in the last line of the <code class=\"classname\">Bookmark</code> definition I just define a many-to-many relation between <code class=\"classname\">Bookmark</code> and <code class=\"classname\">Tag</code>.</p></li>\n  <li class=\"listitem\"><p>I’m defining the tag’s <code class=\"literal\">name</code> as a <code class=\"literal\">SlugField</code> rather than a string. This is a Django class that automatically restricts tag names to those that can show up in a URI. This makes it easy to prohibit tags that contain spaces or other non-alphanumeric characters.</p></li>\n  <li class=\"listitem\"><p>Most of the database indexes created explicitly in the Rails schema are automatically added by Django. In particular, slug fields and foreign keys automatically are given indexes. Notice, however, that I’ve had to explicitly specify <code class=\"literal\">db_index=True</code> on the <code class=\"literal\">url</code> field. That field won’t get an index by default, but I want to search it.</p></li>\n </ul>\n</div>\n<h2>Define Resources and Give Them URIs</h2>\n<p>The Rails implementation<a id=\"I_indexterm12_tt1066\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1067\" class=\"indexterm\"></a> of the social bookmarking application exposes 11 resources. To keep the size of this section down, I’m only going to implement 4 of the 11:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>A single bookmark</p></li>\n  <li class=\"listitem\"><p>The list of a user’s bookmarks</p></li>\n  <li class=\"listitem\"><p>The list of bookmarks a user has tagged with a particular tag</p></li>\n  <li class=\"listitem\"><p>The list of tags a user has used</p></li>\n </ul>\n</div>\n<p>In particular, notice that I’m not exposing user accounts as resources. To use this service you’ll need to pre-create some sample user accounts in the database.</p>\n<p>Ruby on Rails imposes simplifying assumptions that affect your URI design. Instead of defining resources, you define Rails controllers that expose resources at certain URIs. Django makes you design your URIs from scratch. Django’s philosophy is that the URI is an important part of a web application’s user interface, and should not be automatically generated. This fits in with the ROA philosophy, since a resource’s <span class=\"emphasis\"><em>only</em></span> interface elements are its URI and the uniform interface of HTTP.</p>\n<p>Since Django forces you to design URLs explicitly, there’s no “path of least resistance” as there is in Rails, so I’m able to make my Django URIs a little more compact and readable than the Rails URIs were. I’ll modify the URI structure given for the Rails application in three ways:</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>The Django “house style” (as it were) is to always end URIs with a trailing slash. It’s possible to go either way, of course, but to fit more with what Django developers expect I’ll make all URIs include the trailing <a id=\"I_indexterm12_tt1068\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1069\" class=\"indexterm\"></a>slash. That is, I’ll use URLs like <code class=\"literal\">/users/{username}/</code> instead of <code class=\"literal\">/users/{username}</code>.</p></li>\n  <li class=\"listitem\"><p>Rails’s controller-based architecture make it convenient to expose bookmarks as <code class=\"literal\">/users/{username}/bookmarks/{URL}/</code>. In Django it’s just as convenient to use the more compact <code class=\"literal\">/users/{username}/{URL}/</code>, so that’s what I’ll use.</p></li>\n  <li class=\"listitem\"><p>Since I’m not exposing user accounts as resources, I can use URIs of the form <code class=\"literal\">/users/{username}/</code> for a different purpose. I’m going to expose my “bookmark list” resources there.</p></li>\n  <li class=\"listitem\"><p>The Rails implementation uses POST to create a new bookmark as a subordinate resource of a bookmark list. I’ll create new bookmarks using the other technique: by sending a PUT to <code class=\"literal\">/users/{username}/{URI}/</code>, bypassing the bookmark list altogether. Rails had a problem with embedding a URI in another URI, so back then I exposed URIs like <code class=\"literal\">/users/{username}/bookmarks/{URI-MD5}</code>. Here I can use the actual URIs themselves.</p></li>\n </ul>\n</div>\n<p>I can easily use a Django URI configuration file to map these URIs to resources (<a class=\"xref\" href=\"ch12.html#django-uris\" title=\"Example&nbsp;12-11.&nbsp;A Django URI configuration: urls.py\">Example&nbsp;12-11</a>). This is the equivalent of the <code class=\"literal\">routes.rb</code> file in <a class=\"xref\" href=\"ch07.html#routes-rb\" title=\"Example&nbsp;7-3.&nbsp;The routes.rb file\">Example&nbsp;7-3</a>. It’s a lot simpler, though, because Django doesn’t try to make decisions about URI format for me.</p>\n<div class=\"example\">\n <a id=\"django-uris\"></a>\n <div class=\"example-title\">\n  Example&nbsp;12-11.&nbsp;A Django URI configuration: \n  <em class=\"filename\">urls.py</em>\n </div>\n <div class=\"example-contents\">\n  <pre class=\"programlisting\">from django.conf.urls.defaults import *\nfrom bookmarks.views import *\n\nurlpatterns = patterns('',\n    (r'^users/([\\w-]+)/$',              bookmark_list),\n    (r'^users/([\\w-]+)/tags/$',         tag_list),\n    (r'^users/([\\w-]+)/tags/([\\w-]+)/', tag_detail),\n    (r'^users/([\\w-]+)/(.*)',           BookmarkDetail()),\n)</pre>\n </div>\n</div>\n<p>The <em class=\"filename\">urls.py</em> file is a small Python module that maps incoming URIs (represented as regular expressions) to the functions that handle the requests. Any groups in the regular expression are passed as arguments to the function. So if a request comes in for <code class=\"literal\">users/jacobian/tags/python</code>, Django will match it against the third regular expression, and call the <code class=\"function\">tag_detail</code> function with two arguments: “jacobian” and “python”.</p>\n<p>Since Django evaluates the URI patterns in order, I have to put the tag URIs <span class=\"emphasis\"><em>before</em></span> the bookmark URLs: otherwise, Django would interpret <code class=\"literal\">/users/jacobian/tags/</code> as a request for a bookmark of the (invalid) URI <code class=\"literal\">tags</code>.</p>\n<p>Of course, now I’m committed to writing four functions in a module called <code class=\"literal\">bookmarks.views</code>. I won’t leave you hanging, so let’s move onto those functions.</p>\n<h2>Implement Resources as Django Views</h2>\n<p>Django interprets the<a id=\"ch12_Dresources\" class=\"indexterm\"></a><a id=\"ch12_impleme\" class=\"indexterm\"></a><a id=\"ch12_views\" class=\"indexterm\"></a> Model-View-Controller pattern differently than Rails does. In Rails, to implement a resource’s behavior under the uniform interface, you put code in a controller class. In Django, that code goes into the view. The <a class=\"ulink\" href=\"http://www.djangoproject.com/documentation/faq/\" target=\"_top\">Django FAQ</a> has more on this distinction, but I’ll show you the implementation of two views: the read-only view function for the “bookmark list” resource and the read/write view class for the “bookmark” resource.</p>\n<div class=\"sect3\" title=\"The bookmark list view\">\n <p>The bookmark list view function is a nice simple one to start with, because the “bookmark list” resource only responds to GET (see <a class=\"xref\" href=\"ch12.html#django-bookmark-list-1\" title=\"Example&nbsp;12-12.&nbsp;First try at the bookmark list view\">Example&nbsp;12-12</a>). Remember, I’m exposing bookmark creation through PUT, not through POST on the bookmark list the way the Rails implementation does.</p>\n <div class=\"example\">\n  <a id=\"django-bookmark-list-1\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;12-12.&nbsp;First try at the bookmark list view\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">from bookmarks.models import Bookmark\nfrom django.contrib.auth.models import User\nfrom django.core import serializers\nfrom django.http import HttpResponse\nfrom django.shortcuts import get_object_or_404\n\ndef bookmark_list(request, username):\n    u = get_object_or_404(User, username=username)\n    marks = Bookmark.objects.filter(user=u, public=True)\n    json = serializers.serialize(\"json\", marks)\n    return HttpResponse(json, mimetype=\"application/json\")</pre>\n  </div>\n </div>\n <p>The first step is to turn the argument <code class=\"varname\">username</code> into a Django <code class=\"classname\">User</code> object. The <code class=\"varname\">username</code> variable comes from the capture group in the<a id=\"I_indexterm12_tt1070\" class=\"indexterm\"></a> regular expression from <a class=\"xref\" href=\"ch12.html#django-uris\" title=\"Example&nbsp;12-11.&nbsp;A Django URI configuration: urls.py\">Example&nbsp;12-11</a>. It’s everything between the parentheses in <code class=\"literal\">^users/([\\w-]+)/$</code>. Since a request for a non-existent user’s bookmarks should return an HTTP response code of 404 (“Not Found”), I look up a user with Django’s <code class=\"function\">get_object_or_404()</code> shortcut function. This will automatically raise a <code class=\"literal\">Http404</code> exception if the user doesn’t exist, which Django will turn into an HTTP response code of 404. This serves the same purpose as the <code class=\"function\">if_found</code> method defined in the Rails application, way back in <a class=\"xref\" href=\"ch07.html#render-not-modified-or\" title=\"Example&nbsp;7-9.&nbsp;application.rb continued: render_not_modified_or\">Example&nbsp;7-9</a>.</p>\n <p>In <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a> I kept the implementation short by using ActiveRecord’s <code class=\"function\">to_xml</code> function to convert objects from the database (such as user accounts) into XML representations. I’ve used a similar trick here. Rather than represent lists of bookmarks as Atom feeds, I use Django’s serialization API to turn database rows into JSON data structures (see <a class=\"ulink\" href=\"http://www.djangoproject.com/documentation/serialization/\" target=\"_top\">http://www.djangoproject.com/documentation/serialization/</a>).</p>\n <p>Django can also serialize database rows into a JSON data structure or an ActiveRecord-like XML representation: switching to the XML representation would be as easy as changing the serializer type in the third line of the view, and the <code class=\"literal\">mimetype</code> in the last line. Django’s default JSON output is relatively straightforward. <a class=\"xref\" href=\"ch12.html#django-json\" title=\"Example&nbsp;12-13.&nbsp;A JSON representation of a bookmark\">Example&nbsp;12-13</a> shows what it does to a row from my <code class=\"literal\">bookmarks</code> table.</p>\n <div class=\"example\">\n  <a id=\"django-json\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;12-13.&nbsp;A JSON representation of a bookmark\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">[{\n    \"pk\": \"1\",\n    \"model\": \"bookmarks.bookmark\",\n    \"fields\": {\n        \"tags\": [\"example\"],\n        \"url\": \"http:\\/\\/example.com\\/\",\n        \"timestamp\": \"2007-01-30 21:35:23\",\n        \"long_description\": \"\",\n        \"user\": 1,\n        \"short_description\": \"Example\",\n        \"public\": true\n    }\n}]</pre>\n  </div>\n </div>\n <p>The <code class=\"function\">bookmark_list</code> implementation from <a class=\"xref\" href=\"ch12.html#django-bookmark-list-1\" title=\"Example&nbsp;12-12.&nbsp;First try at the bookmark list view\">Example&nbsp;12-12</a> will work, but it’s a bit naive. It returns <span class=\"emphasis\"><em>all</em></span> of a user’s bookmarks every time it’s called, and that will chew up both database resources and bandwidth. <a class=\"xref\" href=\"ch12.html#django-bookmark-list-2\" title=\"Example&nbsp;12-14.&nbsp;Second try at the bookmark list view\">Example&nbsp;12-14</a> shows an implementation that adds support for conditional GET (see <a class=\"xref\" href=\"ch08.html#conditional-get\" title=\"Conditional GET\">Conditional GET</a>” in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>). Adding handling for <code class=\"literal\">Last-Modified</code> and <code class=\"literal\">If-Modified-Since</code> does make this view more complex, but the bandwidth savings will make it worth the effort.</p>\n <div class=\"example\">\n  <a id=\"django-bookmark-list-2\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;12-14.&nbsp;Second try at the bookmark list view\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">import datetime\nfrom bookmarks.models import Bookmark\nfrom django.contrib.auth.models import User\nfrom django.core import serializers\nfrom django.http import *\nfrom django.shortcuts import get_object_or_404\n\n# Use the excellent python-dateutil module to simplify date handling.\n# See http://labix.org/python-dateutil\nimport dateutil.parser\nfrom dateutil.tz import tzlocal, tzutc\n\ndef bookmark_list(request, username):\n    u = get_object_or_404(User, username=username)\n\n    # If the If-Modified-Since header was provided, \n    # build a lookup table that filters out bookmarks\n    # modified before the date in If-Modified-Since.\n    lookup = dict(user=u, public=True)\n    lm = request.META.get(\"HTTP_IF_MODIFIED_SINCE\", None)\n    if lm:\n        try:\n            lm = dateutil.parser.parse(lm)\n        except ValueError:\n            lm = None # Ignore invalid dates\n        else:\n            lookup['timestamp__gt'] = lm.astimezone(tzlocal())\n\n    # Apply the filter to the list of bookmarks.\n    marks = Bookmark.objects.filter(**lookup)\n\n    # If we got If-Modified-Since but there aren't any bookmarks,\n    # return a 304 (\"Not Modified\") response.\n    if lm and marks.count() == 0:\n        return HttpResponseNotModified()\n\n    # Otherwise return the serialized data...\n    json = serializers.serialize(\"json\", marks)\n    response = HttpResponse(json, mimetype=\"application/json\")\n\n    # ... with the appropriate Last-Modified header.\n    now = datetime.datetime.now(tzutc())\n    response[\"Last-Modified\"] = now.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n    return response</pre>\n  </div>\n </div>\n <p>There’s a number of other improvements that could be made here—most notably the ability to show private bookmarks to authenticated users—but you’ve already seen these features in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>. I’ll leave porting them to Django as exercises, and forge ahead.</p>\n</div>\n<div class=\"sect3\" title=\"The bookmark detail view\">\n <p>The second view I’ll show you has more moving parts. A “bookmark list” resource only responds to GET, but a “bookmark” resource must handle three HTTP methods. GET on a bookmark retrieves a representation of the bookmark, PUT creates or updates a bookmark, and DELETE removes a bookmark. Since we don’t want users modifying each others’ bookmarks, the bookmark resource needs to take authentication into account.</p>\n <p>The most obvious way to sketch out the <code class=\"literal\">bookmark_detail</code> view is with a series of <code class=\"literal\">if</code> clauses:</p>\n <a id=\"I_programlisting12_tt1071\"></a>\n <pre class=\"programlisting\">def bookmark_detail(request, username, bookmark_url):\n    if request.method == \"GET\":\n        # Handle GET\n    elif request.method == \"POST\":\n        # Handle POST\n    elif request.method == \"PUT\":\n        # Handle PUT\n    elif request.method == \"DELETE\":\n        # Handle DELETE</pre>\n <p>However, this is unelegant and will quickly lead to an unwieldy view. Instead, I’ll take advantage of Python’s “duck typing” and implement the bookmark detail view as a callable object. In Python, functions are first-class objects, and the syntax of a function call (<code class=\"literal\">object(argument)</code>) is transformed into a method call on the object (<code class=\"literal\">object.__call__(argument)</code>). This means that <span class=\"emphasis\"><em>any</em></span> object can be called like a function, if it defines the <code class=\"function\">__call__</code> method. I’m going to take advantage of this trick by implementing the bookmark detail as a class with<a id=\"I_indexterm12_tt1072\" class=\"indexterm\"></a> a <code class=\"literal\">__call__</code> method.</p>\n <p>This is why the last line of <a class=\"xref\" href=\"ch12.html#django-uris\" title=\"Example&nbsp;12-11.&nbsp;A Django URI configuration: urls.py\">Example&nbsp;12-11</a> looks different from the other three. The first three tie regular expressions to Python function objects: <code class=\"function\">bookmark_list</code> and the like. The last one ties a regular expression to a custom object that happens to implement <code class=\"function\">__call__</code>. The <code class=\"function\">__call__</code> implementation will do some preliminary work, check the HTTP method of the incoming request, and dispatch to an appropriate action function (see <a class=\"xref\" href=\"ch12.html#django-bookmark-detail-1\" title=\"Example&nbsp;12-15.&nbsp;The bookmark detail view, part 1: dispatch code\">Example&nbsp;12-15</a>).</p>\n <div class=\"example\">\n  <a id=\"django-bookmark-detail-1\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;12-15.&nbsp;The bookmark detail view, part 1: dispatch code\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">class BookmarkDetail:\n\n    def __call__(self, request, username, bookmark_url):\n        self.request = request\n        self.bookmark_url = bookmark_url\n\n        # Look up the user and throw a 404 if it doesn't exist\n        self.user = get_object_or_404(User, username=username)\n\n        # Try to locate a handler method.\n        try:\n            callback = getattr(self, \"do_%s\" % request.method)\n        except AttributeError:\n            # This class doesn't implement this HTTP method, so return\n            # a 405 (\"Method Not Allowed\") response and list the\n\t    #allowed methods.\n            allowed_methods = [m.lstrip(\"do_\") for m in dir(self)\n                                               if m.startswith(\"do_\")]\n            return HttpResponseNotAllowed(allowed_methods)\n\n        # Check and store HTTP basic authentication, even for methods that\n        # don't require authorization.\n        self.authenticate()\n\n        # Call the looked-up method\n        return callback()</pre>\n  </div>\n </div>\n <p>The <code class=\"function\">BookmarkDetail.__call__</code> method checks the HTTP method of the incoming requests, and dispatches each one to an appropriate method of the form <code class=\"literal\">do_&lt;METHOD&gt;</code>. For instance, a GET request is dispatched to <code class=\"function\">do_GET</code>. Rails does something similar behind the scenes, turning a <code class=\"literal\">GET</code> request into a call to <code class=\"classname\">MyController#show</code>.</p>\n <p>The <code class=\"classname\">BookmarkDetail</code> class also needs to handle HTTP basic authentication, so let’s take a look at that now. In a real application, these functions would go into a superclass to be used by every view that required authentication. Think back to <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, and the way I put the <code class=\"function\">must_authenticate</code> Rails filter into the base <code class=\"classname\">ApplicationController</code> class (see <a class=\"xref\" href=\"ch12.html#django-authentication\" title=\"Example&nbsp;12-16.&nbsp;The bookmark detail view, part 2: authentication code\">Example&nbsp;12-16</a>).</p>\n <div class=\"example\">\n  <a id=\"django-authentication\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;12-16.&nbsp;The bookmark detail view, part 2: authentication code\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">from django.contrib.auth import authenticate\n\nclass BookmarkDetail:\n\n    # ...\n\n    def authenticate(self):\n        # Pull the auth info out of the Authorization header\n        auth_info = self.request.META.get(\"HTTP_AUTHORIZATION\", None)\n        if auth_info and auth_info.startswith(\"Basic \"):\n            basic_info = auth_info[len(\"Basic \"):]\n            u, p = auth_info.decode(\"base64\").split(\":\")\n\n            # Authenticate against the User database. This will set\n            # authenticated_user to None if authentication fails.\n            self.authenticated_user = authenticate(username=u, password=p)\n        else:\n            self.authenticated_user = None\n\n    def forbidden(self):\n        response = HttpResponseForbidden()\n        response[\"WWW-Authenticate\"] = 'Basic realm=\"Bookmarks\"'\n        return response</pre>\n  </div>\n </div>\n <p>Now we can check <code class=\"literal\">self.authenticated_user</code> within the individual <code class=\"function\">do_{METHOD}</code> methods. I’ve also written a <code class=\"literal\">forbidden()</code> helper that sends an HTTP 401 (Forbidden) response with the correct <code class=\"literal\">WWW-Authenticate</code> header.</p>\n <p>Now I’ll implement the “bookmark” resource’s response to each HTTP method it exposes. GET is the simplest, so let’s start there. <a class=\"xref\" href=\"ch12.html#django-bookmark-get\" title=\"Example&nbsp;12-17.&nbsp;The bookmark detail view, part 3: GET\">Example&nbsp;12-17</a> shows the implementation of <code class=\"function\">do_GET</code>. It illustrates the same concepts as the bookmark list’s response to GET, back in <a class=\"xref\" href=\"ch12.html#django-bookmark-list-2\" title=\"Example&nbsp;12-14.&nbsp;Second try at the bookmark list view\">Example&nbsp;12-14</a>. The only major difference is that we enforce the privacy of private bookmarks.</p>\n <div class=\"example\">\n  <a id=\"django-bookmark-get\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;12-17.&nbsp;The bookmark detail view, part 3: GET\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">def do_GET(self):\n    # Look up the bookmark (possibly throwing a 404)\n    bookmark = get_object_or_404(Bookmark,\n        user=self.user,\n        url=self.bookmark_url\n    )\n\n    # Check privacy\n    if bookmark.public == False and self.user != self.authenticated_user:\n        return self.forbidden()\n\n    json = serializers.serialize(\"json\", [bookmark])\n    return HttpResponse(json, mimetype=\"application/json\")</pre>\n  </div>\n </div>\n <p>Next up is PUT (see <a class=\"xref\" href=\"ch12.html#django-bookmark-put\" title=\"Example&nbsp;12-18.&nbsp;The bookmark detail view, part 4: PUT\">Example&nbsp;12-18</a>). This method needs to take an incoming representation of a bookmark’s state, and use it to either create a new bookmark or update an existing one. The incoming representation is available as <code class=\"literal\">self.request.raw_post_data</code>, and I use the Django serialization library to turn it from a JSON data structure to a Django database object.</p>\n <div class=\"example\">\n  <a id=\"django-bookmark-put\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;12-18.&nbsp;The bookmark detail view, part 4: PUT\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">def do_PUT(self):\n    # Check that the user whose bookmark it is matches the authorization\n    if self.user != self.authenticated_user:\n        return self.forbidden()\n\n    # Deserialize the representation from the request. Serializers\n    # work the lists, but we're only expecting one here. Any errors\n    # and we send 400 (\"Bad Request\").\n    try:\n        deserialized = serializers.deserialize(\"json\",\n                                               self.request.raw_post_data)\n        put_bookmark = list(deserialized)[0].object\n    except (ValueError, TypeError, IndexError):\n        response = HttpResponse()\n        response.status_code = 400\n        return response\n\n    # Look up or create a bookmark, then update it\n    bookmark, created = Bookmark.objects.get_or_create(\n        user = self.user,\n        url = self.bookmark_url,\n    )\n    for field in [\"short_description\", \"long_description\",\n                  \"public\", \"timestamp\"]:\n        new_val = getattr(put_bookmark, field, None)\n        if new_val:\n            setattr(bookmark, field, new_val)\n    bookmark.save()\n\n    # Return the serialized object, with either a 200 (\"OK\") or a 201\n    # (\"Created\") status code.\n    json = serializers.serialize(\"json\", [bookmark])\n    response = HttpResponse(json, mimetype=\"application/json\")\n    if created:\n        response.status_code = 201\n        response[\"Location\"] = \"/users/%s/%s\" % \\\n                                    (self.user.username, bookmark.url)\n    return response</pre>\n  </div>\n </div>\n <p>After all that, DELETE (<a class=\"xref\" href=\"ch12.html#django-bookmark-delete\" title=\"Example&nbsp;12-19.&nbsp;The bookmark detail view, part 5: DELETE\">Example&nbsp;12-19</a>) looks very simple.</p>\n <div class=\"example\">\n  <a id=\"django-bookmark-delete\"></a>\n  <div class=\"example-title\">\n   Example&nbsp;12-19.&nbsp;The bookmark detail view, part 5: DELETE\n  </div>\n  <div class=\"example-contents\">\n   <pre class=\"programlisting\">def do_DELETE(self):\n    # Check authorization\n    if self.user != self.authenticated_user:\n        return self.forbidden()\n\n    # Look up the bookmark...\n    bookmark = get_object_or_404(Bookmark,\n        user=self.user,\n        url=self.bookmark_url\n    )\n\n    # ... and delete it.\n    bookmark.delete()\n\n    # Return a 200 (\"OK\")\n    response = HttpResponse()\n    response.status_code = 200\n    return response</pre>\n  </div>\n </div>\n</div>\n<div class=\"sect3\" title=\"Further directions\">\n <p>The tag views (and all the other interesting features like bundles, etc.) will follow a similar pattern. In fact, with a little work, this <code class=\"literal\">BookmarkDetail</code> class could be refactored into a more general purpose resource class for handling many different types of objects.<a id=\"I_indexterm12_tt1073\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1074\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1075\" class=\"indexterm\"></a></p>\n</div>\n<h2>Conclusion</h2>\n<p>Django isn’t just a framework for handling HTTP requests. Like Rails, it contains a lot of sub-libraries that handle common problems in web application and web service design. You’ve seen the object-relational mapper that works like Rails’s ActiveRecord, the built-in <code class=\"classname\">User</code> model, and the serialization of model objects into JSON representations. Django has many other libraries, including a comment model and a tool for generating syndication feeds. Though it’s mostly used for web applications, Django makes an excellent base for Python implementations of RESTful web services.<a id=\"I_indexterm12_tt1076\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1077\" class=\"indexterm\"></a><a id=\"I_indexterm12_tt1078\" class=\"indexterm\"></a></p>",
      "slug" : "django"
    } ]
  }, {
    "title" : "A. Some Resources for REST and Some RESTful Resources",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Appendix&nbsp;A.&nbsp;Some Resources for REST and Some RESTful Resources</h2>\n  </div>\n </div>\n</div>\n<p>The World Wide Web is the largest distributed application ever created, consisting of billions of resources. I’ve spent this book showing you how to seamlessly integrate a few new resources into this global application. Now I’m going to create a few links of my own. This appendix is a bit of hypermedia that connects this book to other discussions of REST, and to real live web services.</p>",
    "textContent" : "Appendix A. Some Resources for REST and Some RESTful Resources\r\n\r\nThe World Wide Web is the largest distributed application ever created, consisting of billions of resources. I’ve spent this book showing you how to seamlessly integrate a few new resources into this global application. Now I’m going to create a few links of my own. This appendix is a bit of hypermedia that connects this book to other discussions of REST, and to real live web services.",
    "slug" : "a-some-resources-for-rest-and-some-restful-resources",
    "pages" : [ {
      "title" : "Standards and Guides",
      "type" : "page",
      "htmlContent" : "<p>These are just a few of the sites that have helped me make sense of the programmable web.</p>\n<h2>HTTP and URI</h2>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616.html\" target=\"_top\">The HTTP standard (RFC 2616)</a>.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.ietf.org/rfc/rfc3986.txt\" target=\"_top\">The URI standard (RFC 3986)</a>.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.webdav.org/specs/rfc2518.html\" target=\"_top\">The WEBDAV standard (RFC 2518)</a>, if you’re interested in extensions to HTTP’s uniform interface.</p></li>\n  <li class=\"listitem\"><p>The Architecture of the World Wide Web introduces concepts like resources, representations, and the idea of naming resources with URIs (<a class=\"ulink\" href=\"http://www.w3.org/2001/tag/webarch/\" target=\"_top\">http://www.w3.org/2001/tag/webarch/</a>).</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.w3.org/DesignIssues/Axioms\" target=\"_top\">Universal Resource Identifiers—Axioms of Web Architecture</a>.</p></li>\n </ul>\n</div>\n<h2>RESTful Architectures</h2>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm\" target=\"_top\">The Fielding dissertation: <em class=\"citetitle\">Architectural Styles and the Design of Network-Based Software Architectures</em></a>.</p></li>\n  <li class=\"listitem\"><p>The very active <a class=\"ulink\" href=\"http://tech.groups.yahoo.com/group/rest-discuss/\" target=\"_top\">rest-discuss mailing list</a>.</p></li>\n  <li class=\"listitem\"><p>The <a class=\"ulink\" href=\"http://rest.blueoxen.net/\" target=\"_top\">RESTwiki</a>.</p></li>\n  <li class=\"listitem\"><p>Joe Gregorio’s “<a class=\"ulink\" href=\"http://bitworking.org/news/125/REST-and-WS\" target=\"_top\">REST and WS</a>” compares the technologies of REST to those of the WS-* stack while showing how to create a RESTful web service interface; if you don’t care about the comparison part, try <a class=\"ulink\" href=\"http://bitworking.org/news/How_to_create_a_REST_Protocol\" target=\"_top\">“How to create a REST Protocol</a>” by the same author.</p></li>\n  <li class=\"listitem\"><p>Joe Gregorio has also written a series of articles on REST for <a class=\"ulink\" href=\"http://www.xml.com/pub/au/225\" target=\"_top\">XML.com</a>.</p></li>\n  <li class=\"listitem\"><p>Duncan Cragg’s <a class=\"ulink\" href=\"http://duncan-cragg.org/blog/post/getting-data-rest-dialogues/\" target=\"_top\">The REST Dialogues</a>: This series of weblog entries is a thought experiment that re-envisions an RPC-style application as a web of interconnected resources (though it doesn’t use those terms).</p></li>\n  <li class=\"listitem\"><p>Paul Prescod’s <a class=\"ulink\" href=\"http://www.prescod.net/rest/mistakes/\" target=\"_top\"><em class=\"citetitle\">Common REST Mistakes</em></a>.</p></li>\n </ul>\n</div>\n<h2>Hypermedia Formats</h2>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.w3.org/TR/xhtml1/\" target=\"_top\">The XHTML standard</a>, which is just a set of small changes on top of <a class=\"ulink\" href=\"http://www.w3.org/TR/html4\" target=\"_top\">the HTML standard</a>.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://microformats.org/\" target=\"_top\">The microformats web site</a> and <a class=\"ulink\" href=\"http://microformats.org/wiki/\" target=\"_top\">wiki</a>.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://bitworking.org/projects/URI-Templates/\" target=\"_top\">The URI Templates draft</a>.</p></li>\n  <li class=\"listitem\"><p class=\"keep-together\">The <a class=\"ulink\" href=\"http://www.whatwg.org/specs/web-apps/current-work/\" target=\"_top\">Web Applications 1.0 standard</a>, which forms the basis of the forthcoming HTML 5. I think the most interesting part of the standard is <a class=\"ulink\" href=\"http://www.whatwg.org/specs/web-forms/current-work/\" target=\"_top\">Web Forms 2.0</a>, which greatly improves HTML’s hypermedia capabilities.</p></li>\n  <li class=\"listitem\"><p>The WADL standard, maintained at the <a class=\"ulink\" href=\"http://wadl.dev.java.net/\" target=\"_top\">development site for the Java WADL client</a>.</p></li>\n </ul>\n</div>\n<h2>Frameworks for RESTful Development</h2>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>As I showed in <a class=\"xref\" href=\"ch07.html\" title=\"Chapter&nbsp;7.&nbsp;A Service Implementation\">Chapter&nbsp;7</a>, <a class=\"ulink\" href=\"http://rubyonrails.org/\" target=\"_top\">Ruby on Rails</a> makes it easy to expose RESTful resources. The second edition of <em class=\"citetitle\">Agile Web Development with Rails</em> by Dave Thomas et al. (Pragmatic Programmers) is the canonical reference for Rails.</p></li>\n  <li class=\"listitem\"><p>David Heinemeier Hansson’s <a class=\"ulink\" href=\"http://www.scribemedia.org/2006/07/09/dhh/\" target=\"_top\">keynote at Railsconf 2006</a> shows how Rails moved from a REST-RPC philosophy to one based on RESTful resources.</p></li>\n  <li class=\"listitem\"><p>The <a class=\"ulink\" href=\"http://www.restlet.org/\" target=\"_top\">Restlet framework for Java</a> can model any RESTful architecture, not just the resource-oriented web services covered in this book. As I write this, a Java standard for RESTful web services has just begun development as <a class=\"ulink\" href=\"http://jcp.org/en/jsr/detail?id=311\" target=\"_top\">JSR 311</a>.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.djangoproject.com/\" target=\"_top\">Django for Python</a>: As of the time of writing, <a class=\"ulink\" href=\"http://www.djangobook.com/\" target=\"_top\">a free Django book</a> was in development.</p></li>\n </ul>\n</div>\n<h2>Weblogs on REST</h2>\n<p>The REST community is full of eloquent practitioners who argue for and explain RESTful architectures on their weblogs. I’ll give out links to just a few. You can find more, in true REST fashion, by following links.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.markbaker.ca/blog/\" target=\"_top\">Mark Baker</a></p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.soundadvice.id.au/blog/\" target=\"_top\">Benjamin Carlyle</a></p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://bitworking.org/news/\" target=\"_top\">Joe Gregorio</a></p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://wanderingbarque.com/nonintersecting/\" target=\"_top\">Pete Lacey</a></p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.mnot.net/blog/\" target=\"_top\">Mark Nottingham</a></p></li>\n  <li class=\"listitem\"><p><em class=\"citetitle\">RESTful Web Services</em> co-author <a class=\"ulink\" href=\"http://www.intertwingly.net/blog/\" target=\"_top\">Sam Ruby</a></p></li>\n </ul>\n</div>",
      "slug" : "standards-and-guides"
    }, {
      "title" : "Services You Can Use",
      "type" : "page",
      "htmlContent" : "<p>The web is full of RESTful resources, but some are more technically interesting than others. Behind every RSS and Atom feed, behind every weblog and podcast, is a RESTful resource: an addressable, stateless “target of a hypertext link” that’s full of links to other resources. You might think it’s cheating to count these as RESTful web services. It’s not. The world is full of Big Web Services that could be, or have been, replaced with a set of syndication feeds.</p>\n<p>But you’re probably not looking in this appendix for a list of interesting syndication feeds. You’re probably interested in services that have more architectural meat to them. In this section I focus on RESTful web services that let the client create and modify resources. Read-only resource-oriented services are very common and fairly well understood. So are read/write REST-RPC hybrids. Read/write RESTful services are relatively rare, and those are the ones I want to showcase.</p>\n<h2>Service Directories</h2>\n<p>If you’re trying to write a client, and you want to see whether there’s a web service that does what you need, I refer you to one of these directories. You might find a RESTful resource-oriented service that works for you, or you might find an RPC-style or REST-RPC service you can use.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://programmableweb.com/\" target=\"_top\">ProgrammableWeb</a> is the most popular web service directory. It tracks both the APIs that make up the programmable web, and the mashups that combine them. Its terminology isn’t as exact as I’d like (it tends to classify REST-RPC hybrids as “REST” services), but you can’t beat it for variety.</p></li>\n  <li class=\"listitem\"><p>By contrast, <a class=\"ulink\" href=\"http://www.servicereg.com/\" target=\"_top\">servicereg.com</a> hardly has any services registered with it. But I think it’s got promise, because it’s not just a web service directory: it’s also a web service. The list of web services is exposed as a “collection” resource that speaks the Atom Publishing Protocol.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://microapps.org/\" target=\"_top\">MicroApps</a> focuses on RESTful applications which are designed to be used as components in other applications, like Amazon S3.</p></li>\n </ul>\n</div>\n<h2>Read-Only Services</h2>\n<p>As I said earlier, read-only RESTful services are very common and not very interesting architecturally. I’ll just give three examples of read-only services that do especially interesting things. You can find many more examples on ProgrammableWeb.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://irrepressible.info/api\" target=\"_top\">irrepressible.info</a> exposes a set of syndication feeds that help disseminate material censored by various governments.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.audioscrobbler.net/data/webservices/\" target=\"_top\">Audioscrobbler</a> exposes a large dataset about music and people who listen to it.</p></li>\n  <li class=\"listitem\"><p>The <a class=\"ulink\" href=\"http://www.coralcdn.org/\" target=\"_top\">Coral Content Distribution Network</a> offers a simple interface to a distributed cache of web resources. It would also have been RESTful to have implemented this service with the interface of an HTTP proxy cache, but resource-oriented designs are more popular.</p></li>\n </ul>\n</div>\n<h2>Read/Write Services</h2>\n<p>The Atom Publishing Protocol (covered in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>) is the most popular model for read/write RESTful services. There’s a partial list of APP service and client implementations at <a class=\"ulink\" href=\"http://www.intertwingly.net/wiki/pie/Implementations\" target=\"_top\">http://www.intertwingly.net/wiki/pie/Implementations</a>, which includes existing services and software that expose services when you install them. I’d like to call out some APP services explicitly so you can see the variety.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p>Many of Google’s web sites expose an APP extension called <a class=\"ulink\" href=\"http://code.google.com/apis/gdata/\" target=\"_top\">GData</a>. Blogger, Google Calendar, Google Notebook, and other web applications also expose resources that conform to the GData protocol.</p></li>\n  <li class=\"listitem\"><p>The applications hosted on <a class=\"ulink\" href=\"http://www.ning.com/\" target=\"_top\">Ning</a> expose the APP. See <a class=\"ulink\" href=\"http://documentation.ning.com/sections/rest.php\" target=\"_top\">http://documentation.ning.com/sections/rest.php</a> for details.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.43things.com/about/view/web_service_methods_atom\" target=\"_top\">43 Things</a> exposes a list of life goals as an APP collection. (It also exposes a REST-RPC hybrid service.)</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://dev.blogmarks.net/wiki/DeveloperDocs\" target=\"_top\">Blogmarks</a> is a del.icio.us-like social bookmarking service that exposes lists of bookmarks as APP collections.</p></li>\n  <li class=\"listitem\"><p>Lotus Connections and Lotus Quick expose resources that respond to the APP.</p></li>\n </ul>\n</div>\n<p>There are also many public read/write services that don’t use the APP. Rather, they expose some custom set of RESTful resources through a uniform interface.</p>\n<div class=\"itemizedlist\">\n <ul class=\"itemizedlist\">\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://aws.amazon.com/s3\" target=\"_top\">Amazon S3</a>, which I covered in detail in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>, lets you store data on Amazon’s server and have it serve it via HTTP or BitTorrent. Amazon charges you for storage space and bandwidth. S3 probably has the most robust business model of any web service out there: companies are using it, saving money, and making money for Amazon.</p></li>\n  <li class=\"listitem\"><p>Amazon does it again with another low-level service. Simple Queue Service lets you decouple two parts of a system by having one part put messages in a queue, and the other part read messages from the queue (<a class=\"ulink\" href=\"http://www.amazon.com/Simple-Queue-Service-home-page/b?ie=UTF8&amp;node=13584001&amp;me=A36L942TSJ2AJA\" target=\"_top\">http://www.amazon.com/Simple-Queue-Service-home-page/b?ie=UTF8&amp;node=13584001&amp;me=A36L942TSJ2AJA</a>). You get to choose the message formats.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.blinksale.com/api\" target=\"_top\">The BlinkSale API</a> exposes a set of RESTful resources for managing invoices.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://stikkit.com/api\" target=\"_top\">The Stikkit API</a> exposes read/write resources for short notes to yourself.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.couchdb.com/\" target=\"_top\">CouchDb</a> is a “document database” that you access through a RESTful web service.</p></li>\n  <li class=\"listitem\"><p>The <a class=\"ulink\" href=\"http://pythonpaste.org/ohm/\" target=\"_top\">Object HTTP Mapper</a> is a client and a server for exposing Python objects as RESTful resources.</p></li>\n  <li class=\"listitem\"><p>The <a class=\"ulink\" href=\"http://beast.caboo.se/\" target=\"_top\">Beast forum package</a> is a Rails application that exposes an ActiveResource-compatible web service. An enhanced version of Beast, geared toward project collaboration, is called <a class=\"ulink\" href=\"http://rubini.us/\" target=\"_top\">Dev’il</a>.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://www.linkagogo.com/rest_api.html\" target=\"_top\">linkaGoGo</a> is another social bookmarking site. Its resources are nested folders that contain bookmarks.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://openstreetmap.org/\" target=\"_top\">OpenStreetMap</a> is a project to build a freely available set of map data, and it provides <a class=\"ulink\" href=\"http://wiki.openstreetmap.org/index.php/REST\" target=\"_top\">a RESTful interface</a> to a road map of Earth. Its resources aren’t images or places: they’re the raw points and vectors that make up a map. If the fantasy map service from <a class=\"xref\" href=\"ch05.html\" title=\"Chapter&nbsp;5.&nbsp;Designing Read-Only Resource-Oriented Services\">Chapter&nbsp;5</a> piqued your interest, you might also be interested in this real-world service and the project behind it.</p></li>\n  <li class=\"listitem\"><p class=\"keep-together\"><a class=\"ulink\" href=\"http://numbler.com/apidoc\" target=\"_top\">The Numbler web service</a> exposes resources for spreadsheets, the cells inside them, and cell ranges. Its use of PUT could be a <span class=\"emphasis\"><em>little</em></span> more resource-oriented, but that’s just me being picky.</p></li>\n  <li class=\"listitem\"><p>The <a class=\"ulink\" href=\"http://it.nees.org/library/data/neescentral-web-services-api.php\" target=\"_top\">NEEScentral Web Services API</a> is a rather ominous-sounding web service for earthquake engineers, hosted by the Network for Earthquake Engineering Simulation. It exposes resources for Experiments, Trials, SensorPools, SimilitudeLawGroups, and so on. I don’t know anything about earthquake engineering and I have no idea what those resources correspond to in the real world, but I understand the interface.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://microapps.sourceforge.net/fozzy/\" target=\"_top\">Fozzy</a> is an installable application that exposes a RESTful interface to full-text search. You can set up a Fozzy installation and then integrate search into any other application or service.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://microapps.sourceforge.net/tasty/\" target=\"_top\">Tasty</a> does something similar for tagging.</p></li>\n  <li class=\"listitem\"><p><a class=\"ulink\" href=\"http://wiki.musicbrainz.org/XMLWebService\" target=\"_top\">The MusicBrainz web service</a> maintains metadata about albums of music, such as artist and track names. Unlike the other services in this section, it doesn’t use HTTP’s full uniform interface. It substitutes overloaded POST for PUT. It’s still resource-oriented, though. A client changes the state of a MusicBrainz resource by POSTing to the same URI it uses when GETting the state—not to some unrelated URI that designates an RPC-style operation.</p></li>\n  <li class=\"listitem\"><p>Many modern version control systems like Subversion and Arch operate through a resource-oriented HTTP interface. They go in the other direction from services like MusicBrainz, adopting extensions to the standard HTTP methods, defined by standards like WebDAV and DeltaV. These services have a richer uniform interface: up to 26 methods per resource (including COPY and CHECKOUT), as opposed to HTTP’s standard 8. The downside is that they’re on a different Web from the rest of us, because they don’t use the same methods. Note, though, that Arch can work using just the standard HTTP methods.</p></li>\n </ul>\n</div>",
      "slug" : "services-you-can-use"
    } ]
  }, {
    "title" : "B. The HTTP Response Code Top 42",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Appendix&nbsp;B.&nbsp;The HTTP Response Code Top 42</h2>\n  </div>\n </div>\n</div>\n<p>Many web services use<a id=\"I_indexterm_tt1081\" class=\"indexterm\"></a> HTTP status codes incorrectly. The human web hardly uses them at all. Human beings discover what a document means by reading it, not by looking at an attached numeric code. You’ll see “404” in an HTML page that talks about a missing document, but your attention is on the phrase “missing document,” not on the number. And even the “404” you see is part of the HTML page, put there for human convenience: your browser doesn’t show you the underlying 404 response code.</p>\n<p>So when there’s an error condition on the human web, most applications send a response code of 200 (“OK”), even though everything’s not OK. The error condition is described in an HTML entity-body, and a human being is supposed to figure out what to do about the error. The human never sees the response code in the first place, and the browser treats most response codes the same way, so why should the server bother picking the “right” code for a given situation?</p>\n<p>On the programmable web, there are no human beings guiding the behavior of clients. A computer program can’t reliably figure out what a document means just by looking at it. The same document might be an error message in one context, and the legitimate fulfillment of a GET request in another. We need some way of signalling which way of looking at the response is correct. This information can’t go into the entity-body document, because then getting it out would require an understanding of the document. So on the programmable web, HTTP response codes become very important. They tell a client how to deal with the document in the entity-body, or what to do if they can’t understand the document. A client—or an intermediary between server and client, like a firewall—can figure out how an HTTP request went, just by looking at the first three bytes of the response.</p>\n<p>The problem is that there are 41 official response codes, and standards like WebDAV add even more. Many of the codes are rarely used, two of them are <span class=\"emphasis\"><em>never</em></span> used, and some are only distinguishable from one another by careful hairsplitting. To someone used to the human web (that’s all of us), the variety of response codes can be bewildering.</p>\n<p>In this appendix I give a brief explanation of every standard status code, with tips on when to use each one in your RESTful services, and my personal opinion as to how important each one is in the context of this book. If a client has to do something specific to get a certain response code, I explain what that is. I also list which HTTP response headers, and what kind of entity-body, the server ought to send along with a response code. This is an appendix for the web service author, but it’s also for the client author, who’s received a strange response code and doesn’t know what it means.</p>\n<p>I cover all 41 codes from the HTTP standard, even though some of them (mainly the ones to do with proxies) are a little beyond the scope of this book. I also cover 207 (“Multi-Status”), a response code from the WebDAV extension which I mentioned back in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>. WebDAV defines five response codes besides 207, and some web servers define the nonstandard code 509 (“Bandwidth Limit Exceeded”). Though not part of HTTP, these status codes are fairly well established, and you can use them if you like. I don’t cover them because they’re more explicit versions of standard response codes. You can always send 503 (“Service Not Available”) instead of the 509 response code, and 409 (“Conflict”) instead of WebDAV’s 423 (“Locked”). I cover 207 (“Multi-Status”), because no standard status code does anything similar.</p>",
    "textContent" : "Appendix B. The HTTP Response Code Top 42\r\n\r\nMany web services use HTTP status codes incorrectly. The human web hardly uses them at all. Human beings discover what a document means by reading it, not by looking at an attached numeric code. You’ll see “404” in an HTML page that talks about a missing document, but your attention is on the phrase “missing document,” not on the number. And even the “404” you see is part of the HTML page, put there for human convenience: your browser doesn’t show you the underlying 404 response code.\r\n\r\nSo when there’s an error condition on the human web, most applications send a response code of 200 (“OK”), even though everything’s not OK. The error condition is described in an HTML entity-body, and a human being is supposed to figure out what to do about the error. The human never sees the response code in the first place, and the browser treats most response codes the same way, so why should the server bother picking the “right” code for a given situation?\r\n\r\nOn the programmable web, there are no human beings guiding the behavior of clients. A computer program can’t reliably figure out what a document means just by looking at it. The same document might be an error message in one context, and the legitimate fulfillment of a GET request in another. We need some way of signalling which way of looking at the response is correct. This information can’t go into the entity-body document, because then getting it out would require an understanding of the document. So on the programmable web, HTTP response codes become very important. They tell a client how to deal with the document in the entity-body, or what to do if they can’t understand the document. A client—or an intermediary between server and client, like a firewall—can figure out how an HTTP request went, just by looking at the first three bytes of the response.\r\n\r\nThe problem is that there are 41 official response codes, and standards like WebDAV add even more. Many of the codes are rarely used, two of them are never used, and some are only distinguishable from one another by careful hairsplitting. To someone used to the human web (that’s all of us), the variety of response codes can be bewildering.\r\n\r\nIn this appendix I give a brief explanation of every standard status code, with tips on when to use each one in your RESTful services, and my personal opinion as to how important each one is in the context of this book. If a client has to do something specific to get a certain response code, I explain what that is. I also list which HTTP response headers, and what kind of entity-body, the server ought to send along with a response code. This is an appendix for the web service author, but it’s also for the client author, who’s received a strange response code and doesn’t know what it means.\r\n\r\nI cover all 41 codes from the HTTP standard, even though some of them (mainly the ones to do with proxies) are a little beyond the scope of this book. I also cover 207 (“Multi-Status”), a response code from the WebDAV extension which I mentioned back in Chapter 8. WebDAV defines five response codes besides 207, and some web servers define the nonstandard code 509 (“Bandwidth Limit Exceeded”). Though not part of HTTP, these status codes are fairly well established, and you can use them if you like. I don’t cover them because they’re more explicit versions of standard response codes. You can always send 503 (“Service Not Available”) instead of the 509 response code, and 409 (“Conflict”) instead of WebDAV’s 423 (“Locked”). I cover 207 (“Multi-Status”), because no standard status code does anything similar.",
    "slug" : "b-the-http-response-code-top-42",
    "pages" : [ {
      "title" : "Three to Seven Status Codes: The Bare Minimum",
      "type" : "page",
      "htmlContent" : "<p>If you don’t like the proliferation of status codes, you can serve just three and still convey the basic information a client needs to know to handle the response.</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">200 (“OK”)</span>\n  </dt>\n  <dd>\n   <p>Everything’s fine. The document in the entity-body, if any, is a representation of some resource.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">400 (“Bad Request”)</span>\n  </dt>\n  <dd>\n   <p>There’s a problem on the client side. The document in the entity-body, if any, is an error message. Hopefully the client can understand the error message and use it to fix the problem.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">500 (“Internal Server Error”)</span>\n  </dt>\n  <dd>\n   <p>There’s a <a id=\"I_indexterm_tt1083\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1084\" class=\"indexterm\"></a>problem on the server side. The document in the entity-body, if any, is an error message. The error message probably won’t do much good, since the client can’t fix a server problem.</p>\n  </dd>\n </dl>\n</div>\n<p>There are four more error codes that are especially common in web services:</p>\n<div class=\"variablelist\">\n <dl>\n  <dt>\n   <span class=\"term\">301 (“Moved Permanently”)</span>\n  </dt>\n  <dd>\n   <p>Sent when the client triggers<a id=\"I_indexterm_tt1085\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1086\" class=\"indexterm\"></a> some action that causes the URI of a resource to change. Also sent if a client requests the old URI.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">404 (“Not Found”) and 410 (“Gone”)</span>\n  </dt>\n  <dd>\n   <p>Sent when the client <a id=\"I_indexterm_tt1087\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1088\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1089\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1090\" class=\"indexterm\"></a>requests a URI that doesn’t map to any resource. 404 is used when the server has no clue what the client is asking for. 410 is used when the server knows there used to be a resource there, but there isn’t anymore.</p>\n  </dd>\n  <dt>\n   <span class=\"term\">409 (“Conflict”)</span>\n  </dt>\n  <dd>\n   <p>Sent when <a id=\"I_indexterm_tt1091\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1092\" class=\"indexterm\"></a>the client tries to perform an operation that would leave one or more resources in an inconsistent state.</p>\n  </dd>\n </dl>\n</div>\n<p>SOAP web services use only the status codes 200 (“OK”) and 500 (“Internal Server Error”). The 500 status code happens whether there’s a problem with the data you sent the SOAP server, a problem with processing the data, or an internal problem with the SOAP server itself. There’s no way to tell without looking at the body of the SOAP document, which contains a descriptive “fault.” To know what happened with the request you can’t just look at the first three bytes of the response: you have to parse an XML file and understand what it says. This is another example of how Big Web Services reimplement existing features of HTTP in opaque ways.</p>",
      "slug" : "three-to-seven-status-codes-the-bare-minimum"
    }, {
      "title" : "1xx: Meta",
      "type" : "page",
      "htmlContent" : "<p>The 1xx series of response codes are used only in negotiations with the HTTP server.</p>\n<h2>100 (“Continue”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium, but (as of time of writing) rarely used.</p>\n<p>This<a id=\"I_indexterm_tt1094\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1095\" class=\"indexterm\"></a> is one of the possible responses to an HTTP look-before-you-leap (LBYL) request, described in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>. This status code indicates that the client should resend its initial request, including the (possibly large or sensitive) representation that was omitted the first time. The client doesn’t need to worry about sending a representation only to have it rejected. The other possible response to a look-before-you-leap request is 417 (“Expectation Failed”).</p>\n<p><span class=\"emphasis\"><em>Request headers:</em></span> To make a LBYL request, the client must set the <code class=\"literal\">Expect</code> header to the literal value “100-continue.” The client must also set any other headers the server will need when determining whether to respond with 100 or 417.</p>\n<h2>101 (“Switching Protocols”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Very low.</p>\n<p>A client will <a id=\"I_indexterm_tt1096\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1097\" class=\"indexterm\"></a>only get this response code when its request uses the <code class=\"literal\">Upgrade</code> header to inform the server that the client would prefer to use some protocol other than HTTP. A response of 101 means “All right, now I’m speaking another protocol.” Ordinarily, an HTTP client would close the TCP connection once it read the response from the server. But a response code of 101 means it’s time for the client to stop being an HTTP client and start being some other kind of client.</p>\n<p>The <code class=\"literal\">Upgrade</code> header is hardly ever used, though it could be used to trade up from HTTP to HTTPS, or from HTTP 1.1 to a future version. It could also be used to switch from HTTP to a totally different protocol like IRC, but that would require the web server also to be an IRC server and the web client to also be an IRC client, because the server starts speaking the new protocol immediately, over the same TCP connection.</p>\n<p><span class=\"emphasis\"><em>Request headers:</em></span> The client sets <code class=\"literal\">Upgrade</code> to a list of protocols it’d rather be using than HTTP.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> If the server wants to upgrade, it sends back an <code class=\"literal\">Upgrade</code> header saying which protocol it’s switching to, and then a blank line. Instead of closing the TCP connection, the server begins speaking the new protocol, and continues speaking the new protocol until the connection is closed.</p>",
      "slug" : "1xx-meta"
    }, {
      "title" : "2xx: Success",
      "type" : "page",
      "htmlContent" : "<p>The 2xx error codes indicate that an operation was successful.</p>\n<h2>200 (“OK”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Very high.</p>\n<p>In most cases,<a id=\"I_indexterm_tt1099\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1100\" class=\"indexterm\"></a> this is the code the client hopes to see. It indicates that the server successfully carried out whatever action the client requested, and that no more specific code in the 2xx series is appropriate. My bookmarking service sends this code, along with a representation, when the client requests a list of bookmarks.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> For GET requests, a representation of the resource the client requested. For other requests, a representation of the current state of the selected resource, or a description of the action just performed.</p>\n<h2>201 (“Created”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>The server <a id=\"I_indexterm_tt1101\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1102\" class=\"indexterm\"></a>sends this status code when it creates a new resource at the client’s request. My bookmarking service sends this code in response to a POST request that creates a new user account or bookmark.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">Location</code> header should contain the canonical URI to the new resource.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Should describe and link to the newly created resource. A representation of that resource is acceptable, if you use the <code class=\"literal\">Location</code> header to tell the client where the resource actually lives.</p>\n<h2>202 (“Accepted”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p class=\"keep-together\">The client’s <a id=\"I_indexterm_tt1103\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1104\" class=\"indexterm\"></a>request can’t or won’t be handled in real time. It will be processed later. The request looks valid, but it might turn out to have problems when it’s finally processed.</p>\n<p>This is an appropriate response when a request triggers an asynchronous action, an action in the real world, or an action that would take so long that there’s no point making the web client wait around. It’s an important part of the RESTful system for asynchronous operations that I described in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The pending request should be exposed as a resource so the client can check up on it later. The <code class=\"literal\">Location</code> header can contain the URI to this resource.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> If there’s no way for the client to check up on the request later, at least give an estimate of when the request will be processed.</p>\n<h2>203 (“Non-Authoritative Information”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Very low.</p>\n<p>This status code is the <a id=\"I_indexterm_tt1105\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1106\" class=\"indexterm\"></a>same as 200 (“OK”), but the server wants the client to know that some of the response headers do not come from the server. They may be mirrored from a previous request of the client’s, or obtained from a third party.</p>\n<p><span class=\"emphasis\"><em>Response Headers:</em></span> The client should know that some headers may not be accurate, and others may be passed along without the server knowing what they mean.</p>\n<h2>204 (“No Content”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>This status code <a id=\"I_indexterm_tt1107\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1108\" class=\"indexterm\"></a>is usually sent out in response to a PUT, POST, or DELETE request, when the server declines to send back any status message or representation. The server may also send 204 in conjunction with a GET request: the resource requested exists, but has an empty representation. Compare 304 (“Not Modified”).</p>\n<p>204 is often used in Ajax applications. It lets the server tell the client that its input was accepted, but that the client shouldn’t change any UI elements.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Not allowed.</p>\n<h2>205 (“Reset Content”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>This is just like 204 (“No Content”), but it implies that the client should reset the view or data structure that was the source of the data. If you submit an HTML form in your web browser and the response is 204 (“No Content”), your data stays in the form and you can change it. If you get a 205, the form fields reset to their original values. In data entry terms: 204 is good for making a series of edits to a single record; 205 is good for entering a series of records in succession.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Not allowed.</p>\n<h2>206 (“Partial Content”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Very high for services that support partial GET, low otherwise.</p>\n<p>This is just like<a id=\"I_indexterm_tt1109\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1110\" class=\"indexterm\"></a> 200 (“OK”), but it designates a response to a partial GET request: that is, one that uses the <code class=\"literal\">Content-Range</code> request header. A client usually makes a partial GET request to resume an interrupted download of a large binary representation. I cover partial GET in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>.</p>\n<p><span class=\"emphasis\"><em>Request headers:</em></span> The client sends a value for the <code class=\"literal\">Content-Range</code> header.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">Date</code> header is required. The <code class=\"literal\">ETag</code> and <code class=\"literal\">Content-Location</code> headers should be set to the same values that would have been sent along with the representation as a whole.</p>\n<p>If the entity-body is a single byte range from the representation, the response as a whole must have a <code class=\"literal\">Content-Range</code> header explaining which bytes of the representation are being served. If the body is a multipart entity (that is, multiple byte ranges of the representation are being served), each part must have its own <code class=\"literal\">Content-Range</code> header.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Will not contain a full representation: just one or more sequences of bytes from the representation.</p>\n<h2>207 (“Multi-Status”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low to medium.</p>\n<p>This is a WebDAV<a id=\"I_indexterm_tt1111\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1112\" class=\"indexterm\"></a> extension to the HTTP standard which is useful in the response to a batch request. I showed a RESTful way of exposing batch operations in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, and I pointed out that when a request operates on more than one resource, some operations might succeed while others fail. A single response code won’t suffice to convey the status of the request.</p>\n<p>This response code tells the client to look in the entity-body for a <span class=\"emphasis\"><em>list</em></span> of HTTP status codes: one for each operation in the batch request. This violates the principle that the client should be able to figure out what happened to the request just by looking at the first three bytes, but when a single request carries out more than one operation, there’s no alternative.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Should contain an XML document that uses the WebDAV vocabulary to describe a number of HTTP responses. The WebDAV standard (RFC 2518) defines this XML vocabulary and gives several examples.</p>",
      "slug" : "2xx-success"
    }, {
      "title" : "3xx: Redirection",
      "type" : "page",
      "htmlContent" : "<p>The 3xx status<a id=\"appa_redirection\" class=\"indexterm\"></a> codes indicate that the client needs to do some extra work to get what it wants. They’re most commonly used with GET requests, and they usually tell the client that it can only get the representation it wants by sending a second GET request to some other URI. This secondary URI is sent in <a id=\"I_indexterm_tt1114\" class=\"indexterm\"></a>the <code class=\"literal\">Location</code> response header.</p>\n<p>This is the trickiest set of response codes, because 301 (“Moved Permanently”), 302 (“Found”), 303 (“See Other”), and 307 (“Temporary Redirect”) are all very similar. Many applications use these status codes indiscriminately as a way of bouncing the client around from URI to URI, with little regard for what this means in terms of the underlying resources. My main goal in this section is to clear up the confusion.</p>\n<h2>300 (“Multiple Choices”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>The server<a id=\"I_indexterm_tt1115\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1116\" class=\"indexterm\"></a> can send this status code when it has multiple representations of a requested resource, and it doesn’t know which representation the client wants. Either the client didn’t use the <code class=\"literal\">Accept-*</code> headers to specify a representation, or it asked for a representation that doesn’t exist.</p>\n<p>In this situation, the server can just pick its preferred representation, and send it along with a 200 (“OK”) status code. But it may decide instead to send a 300 along with a list of possible URIs to different representations.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> If the server has a preferred representation, it can put the URI to that representation in <code class=\"literal\">Location</code>. As with other 3xx status codes, the client may automatically follow the URI in <code class=\"literal\">Location</code>.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> A list of URIs to representations, annotated with any information necessary to let the user make a choice between them. An XHTML list of links is a good format for this.</p>\n<h2>301 (“Moved Permanently”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p>The server knows which<a id=\"I_indexterm_tt1117\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1118\" class=\"indexterm\"></a> resource the client is trying to access, but it doesn’t care for the URI it used to request the resource. It wants the client to take note of the new URI, and use it in future requests.</p>\n<p>You can use this status code to keep old URIs from breaking when your URIs change.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The server should put the canonical URI in <code class=\"literal\">Location</code>.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> The server should send a short XHTML file with a hyperlink to the new location, but it’s not necessary.</p>\n<h2>302 (“Found”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Very important<a id=\"I_indexterm_tt1119\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1120\" class=\"indexterm\"></a> to <span class=\"emphasis\"><em>know about</em></span>, especially when writing clients. I don’t recommend <span class=\"emphasis\"><em>using</em></span> it.</p>\n<p>This status code is the ultimate source of most redirection-related confusion. It’s <span class=\"emphasis\"><em>supposed</em></span> to be handled just like 307 (“Temporary Redirect”). In fact, in HTTP 1.0 its name was “Moved Temporarily.” Unfortunately, in real life most clients handle 302 just like 303 (“See Other”). The difference hinges on what the client is supposed to do when it gets a 302 in response to a PUT, POST, or DELETE request. See the entry for 307 below if you’re interested in the details.</p>\n<p>To resolve this ambiguity, in HTTP 1.1 this response code was renamed to “Found,” and response code 307 was created. This response code is still in wide use, but it’s ambiguous, and I recommend that your services send 303 and 307 instead. The only exception is if you know you’re dealing with an HTTP 1.0 client that doesn’t understand 303 or 307.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">Location</code> header contains the URI to which the client should resubmit the request.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Should contain a hypertext document linking to the new URI, as with 301.</p>\n<h2>303 (“See Other”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>The request has <a id=\"I_indexterm_tt1121\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1122\" class=\"indexterm\"></a>been processed, but instead of the server sending a response document, it’s sending the client the URI of a response document. This may be the URI to a static status message, or the URI to some more interesting resource. In the latter case, a 303 is a way for the server to send a representation of a resource without forcing the client to download all that data. The client is expected to send a GET request to the value of <code class=\"literal\">Location</code>, but it doesn’t have to.</p>\n<p>The 303 status code is a good way to canonicalize your resources. You can make them available through many URIs, but only have one “real” URI per representation. All the other URIs use a 303 to point to the canonical URI for that representation. For instance, a 303 might redirect a request for <span class=\"emphasis\"><em>http://www.example.com/software/current.tar.gz</em></span> to the URI <span class=\"emphasis\"><em>http://www.example.com/software/1.0.2.tar.gz</em></span>.</p>\n<p>Compare to 307 (“Temporary Redirect”).</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">Location</code> header contains the URI of the representation.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Should contain a hypertext document linking to the new URI, as with 301.</p>\n<h2>304 (“Not Modified”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>This status code is similar to<a id=\"I_indexterm_tt1123\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1124\" class=\"indexterm\"></a> 204 (“No Content”) in that the response body must be empty. But 204 is used when there is no body data to send, and 304 is used when there is data but the client already has it. There’s no point in sending it again.</p>\n<p>This status code is used in conjunction with conditional HTTP requests. If the client sends an <code class=\"literal\">If-Modified-Since</code> header with a date of Sunday, and the representation hasn’t changed since Sunday, then a 304 is appropriate. A 200 (“OK”) would also be appropriate, but sending the representation again would use bandwidth to no purpose. The client already has the representation.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">Date</code> header is required. The <code class=\"literal\">ETag</code> and <code class=\"literal\">Content-Location</code> headers should be set to the same values that would have been sent if the response code were 200 (“OK”).</p>\n<p>The caching headers <code class=\"literal\">Expires</code>, <code class=\"literal\">Cache-Control</code>, and <code class=\"literal\">Vary</code> are required if they’ve changed from those sent previously.</p>\n<p>There are complicated caching rules about this that I won’t cover here, but the server can send updated headers without sending a new body. This is useful when a representation’s metadata has changed, but the representation itself hasn’t.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Not allowed.</p>\n<h2>305 (“Use Proxy”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>This status code <a id=\"I_indexterm_tt1125\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1126\" class=\"indexterm\"></a>is used to tell the client that it should repeat its request, but go through an HTTP proxy instead of going to the server directly. This code is rarely used because it’s very rare for a server to care that the client use a specific proxy.</p>\n<p>This code would be used more frequently if there were proxy-based mirror sites. Today, a mirror site for <code class=\"literal\">http://www.example.com/</code> provides the same content but at a different URI, say <code class=\"literal\">http://www.example.com.mysite.com/</code>. The original site might use the 307 (“Temporary Redirect”) status code to send clients to an appropriate mirror site.</p>\n<p>If there were proxy-based mirror sites, then you would access the mirror with the same URI as the original (<code class=\"literal\">http://www.example.com/</code>), but set <code class=\"literal\">http://proxy.mysite.com/</code> as your proxy. Here, the original <code class=\"literal\">example.com</code> might use the 305 status code to route clients to a mirror proxy that’s geographically close to them.</p>\n<p>Web browsers typically don’t handle this status code correctly: another reason for its lack of popularity.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">Location</code> header contains the URI to the proxy.</p>\n<h2>306: Unused</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> None.</p>\n<p>The 306 status code<a id=\"I_indexterm_tt1127\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1128\" class=\"indexterm\"></a> never made it into an HTTP standard. It was described in the Internet Draft “HTTP/1.1 305 and 306 Response Codes” as “Switch Proxy,” a status code sent by a proxy server to get the client to start using a different proxy. Don’t worry about it.</p>\n<h2>307 (“Temporary Redirect”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>The request has not<a id=\"I_indexterm_tt1129\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1130\" class=\"indexterm\"></a> been processed, because the requested resource is not home: it’s located at some other URI. The client should resubmit the request to another URI.</p>\n<p>For GET requests, where the only thing being requested is that the server send a representation, this status code is identical to 303 (“See Other”). A typical case where 307 is a good response to a GET is when the server wants to send a client to a mirror site. But for POST, PUT, and DELETE requests, where the server is expected to take some action in response to the request, this status code is significantly different from 303.</p>\n<p>A 303 in response to a POST, PUT, or DELETE means that the operation has succeeded but that the response entity-body is not being sent along with this request. If the client wants the response entity-body, it needs to make a GET request to another URI.</p>\n<p>A 307 in response to a POST, PUT, or DELETE means that the server has not even tried to perform the operation. The client needs to resubmit the entire request to the URI in the <code class=\"literal\">Location</code> header.</p>\n<p>An analogy may help. You go to a pharmacy with a prescription to be filled. A 303 is the pharmacist saying “We’ve filled your prescription. Go to the next window to pick up your medicine.” A 307 is the pharmacist saying “We can’t fill that prescription. Go to the pharmacy next door.”</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">Location</code> header contains the URI to which the client should resubmit the request.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Should contain a hypertext document linking to the new URI, as with 301.<a id=\"I_indexterm_tt1131\" class=\"indexterm\"></a></p>",
      "slug" : "3xx-redirection"
    }, {
      "title" : "4xx: Client-Side Error",
      "type" : "page",
      "htmlContent" : "<p>These <a id=\"appb_client\" class=\"indexterm\"></a><a id=\"appb_errors\" class=\"indexterm\"></a>status codes indicate that something is wrong on the client side. There’s a problem with authentication, with the format of the representation, or with the HTTP library itself. The client needs to fix something on its end.</p>\n<h2>400 (“Bad Request”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>This is the generic<a id=\"I_indexterm_tt1133\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1134\" class=\"indexterm\"></a> client-side error status, used when no other 4xx error code is appropriate. It’s commonly used when the client submits a representation along with a PUT or POST request, and the representation is in the right format, but it doesn’t make any sense.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> May contain a document describing why the server thinks there’s a client-side error.</p>\n<h2>401 (“Unauthorized”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>The client <a id=\"I_indexterm_tt1135\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1136\" class=\"indexterm\"></a>tried to operate on a protected resource without providing the proper authentication credentials. It may have provided the wrong credentials, or none at all. The credentials may be a username and password, an API key, or an authentication token—whatever the service in question is expecting. It’s common for a client to make a request for a URI and accept a 401 just so it knows what kind of credentials to send and in what format. In fact, the HTTP Digest mode of authentication depends on this behavior.</p>\n<p>If the server doesn’t want to acknowledge the existence of the resource to unauthorized users, it may lie and send a 404 (“Not Found”) instead of a 401. The downside of this is that clients need to know, in advance, what kind of authentication the server expects for that resource: things like HTTP Digest won’t work.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">WWW-Authenticate</code> header describes what kind of authentication the server will accept.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> A document describing the failure: why the credentials (if any were provided) were rejected, and what credentials would be accepted. If the end user can get credentials by signing up on a web site, or creating a “user account” resource, a link to the sign up URI is useful.</p>\n<h2>402 (“Payment Required”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> None.</p>\n<p>Apart <a id=\"I_indexterm_tt1137\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1138\" class=\"indexterm\"></a>from its name, this status code is not defined in the HTTP standard: it’s “reserved for future use.” This is because there’s no micropayment system for HTTP. That said, if there ever <span class=\"emphasis\"><em>is</em></span> a micropayment system for HTTP, web services are among the first places that system will start showing up. If you want to charge your users by the web service request, and your relationship with them makes that possible, you might have a use for this status code. But note that Amazon S3 doesn’t use this status code, and it charges by the request just fine.</p>\n<h2>403 (“Forbidden”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p>The client’s request<a id=\"I_indexterm_tt1139\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1140\" class=\"indexterm\"></a> is formed correctly, but the server doesn’t want to carry it out. This is not merely a case of insufficient credentials: that would be 401 (“Unauthorized”). This is more like a resource that is only accessible at certain times, or from certain IP addresses.</p>\n<p>A response of 403 implies that the client requested a resource that really exists. As with 401 (“Unauthorized”), if the server doesn’t want to give out even this information, it can lie and send a 404 (“Not Found”) instead.</p>\n<p>If the client’s request is well-formed, why is this status code in the 4xx series (client-side error) instead of the 5xx series (server-side error)? Because the server made its decision based on some aspect of the request other than its form: say, the time of day the request was made.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Optionally, a document describing why the request was denied.</p>\n<h2>404 (“Not Found”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>Probably the most famous <a id=\"I_indexterm_tt1141\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1142\" class=\"indexterm\"></a>HTTP status code. 404 indicates that the server can’t map the client’s URI to a resource. Compare 410 (“Gone”), which is slightly more helpful. A web service may use a 404 response as a signal to the client that the URI is “free”; the client can then create a new resource by sending a PUT request to that URI.</p>\n<p>Remember that a 404 may be a lie to cover up a 403 or 401. It might be that the resource exists, but the server doesn’t want to let the client know about it.</p>\n<h2>405 (“Method Not Allowed”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p>The client <a id=\"I_indexterm_tt1143\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1144\" class=\"indexterm\"></a>tried to use an HTTP method that this resource doesn’t support. For instance, a read-only resource may support only GET and HEAD. Another resource may allow GET and POST, but not PUT or DELETE.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The <code class=\"literal\">Allow</code> header lists the HTTP methods that this resource does support. The following is a sample header:</p>\n<p><a id=\"I_programlisting_tt1145\"></a></p>\n<pre class=\"programlisting\">Allow: GET, POST</pre>\n<h2>406 (“Not Acceptable”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p>The server may<a id=\"I_indexterm_tt1146\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1147\" class=\"indexterm\"></a> send this response code when the client places so many restrictions on what it considers an acceptable representation (probably using the <code class=\"literal\">Accept-*</code> request headers) that the server can’t send any representation at all. The server may instead choose to ignore the client’s pickiness, and simply send its preferred representation along with a response code of 200 (“OK”). This is usually what happens on the human web.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> A list of links to acceptable representations, in a format similar to that described in 300 (“Multiple Choices”).</p>\n<h2>407 (“Proxy Authentication Required”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>You’ll only <a id=\"I_indexterm_tt1148\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1149\" class=\"indexterm\"></a>see this status code from an HTTP proxy. It’s just like 401 (“Unauthorized”), except the problem is not that you can’t use the web service without credentials: it’s that you can’t use the <span class=\"emphasis\"><em>proxy</em></span> without credentials. As with 401, the problem may be that the client provided no credentials, or that the credentials provided are bad or insufficient.</p>\n<p><span class=\"emphasis\"><em>Request headers:</em></span> To send credentials to the proxy, the client uses the <code class=\"literal\">Proxy-Authorization</code> header instead of the <code class=\"literal\">Authorization</code> header. The format is identical to that of <code class=\"literal\">Authorization</code>.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> Instead of the <code class=\"literal\">Authenticate</code> header, the proxy fills the <code class=\"literal\">Proxy-Authenticate</code> header with information about what kind of authentication it expects. The format is identical to that of <code class=\"literal\">Authenticate</code>.</p>\n<p>Note that both the proxy and the web service may require credentials, so the client may clear up a 407 only to be hit with a 401 (“Unauthorized”).</p>\n<h2>408 (“Request Timeout”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>If an HTTP client opens<a id=\"I_indexterm_tt1150\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1151\" class=\"indexterm\"></a> a connection to the server, but never sends a request (or never sends the blank line that signals the end of the request), the server should eventually send a 408 response code and close the connection.</p>\n<h2>409 (“Conflict”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>Getting this response<a id=\"I_indexterm_tt1152\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1153\" class=\"indexterm\"></a> code means that you tried to put the server’s resources into an impossible or inconsistent state. Amazon S3 gives this response code when you try to delete a bucket that’s not empty. My bookmarking service gives it when you try to change your username to a name that’s already taken.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> If the conflict is caused by the existence of some other resource (such as when you try to change your username to a name that’s taken), the <code class=\"literal\">Location</code> header should point to the URI of that resource: that is, the source of the conflict.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Should contain a document that describes the conflicts, so that the client can resolve them if possible.</p>\n<h2>410 (“Gone”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p>This response code<a id=\"I_indexterm_tt1154\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1155\" class=\"indexterm\"></a> is like 404 (“Not Found”), but it provides a little more information. It’s used when the server knows that the requested URI used to refer to a resource, but no longer does. The server doesn’t know any new URI for the resource; if it did, it would send a 301 (“Permanent Redirect”).</p>\n<p>Like the permanent redirect, a 410 response code has the implication that the client should remove the current URI from its vocabulary, and stop making requests for it. Unlike the permanent redirect, the 410 offers no replacement for the bad URI: It’s just gone. RFC 2616 suggests using a 410 response code “for limited-time, promotional services and for resources belonging to individuals no longer working at the server’s site.”</p>\n<p>You might be tempted to send this response code in response to a successful DELETE request, but that’s a little too cute. The client wouldn’t know whether it deleted the resource or whether it was gone before it made their request. The correct response to a successful DELETE request is 200 (“OK”).</p>\n<h2>411 (“Length Required”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low to medium.</p>\n<p>An HTTP request<a id=\"I_indexterm_tt1156\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1157\" class=\"indexterm\"></a> that includes a representation should set the <code class=\"literal\">Content-Length</code> request header to the length (in bytes) of the representation. Sometimes this is inconvenient for the client: for instance, when the representation is being streamed from some other source. So HTTP doesn’t require a client to send the <code class=\"literal\">Content-Length</code> header with each request. However, the HTTP server is within its rights to require it for any given request. The server is allowed to <span class=\"emphasis\"><em>interrupt</em></span> any request that starts sending a representation without having provided a <code class=\"literal\">Content-Length</code>, and demand that the client resubmit the request with a <code class=\"literal\">Content-Length</code> header. This is the response code that goes along with the interruption.</p>\n<p>If the client lies about the length, or otherwise sends too large a representation, the server may interrupt it and close the connection, but in that case the response code is 413 (“Request Entity Too Large”).</p>\n<h2>412 (“Precondition Failed”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p>The client<a id=\"I_indexterm_tt1158\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1159\" class=\"indexterm\"></a> specified one or more preconditions in its request headers, effectively telling the server to carry out its request only if certain conditions were met. Those conditions were in fact not met, so instead of carrying out the request the server sends this status code.</p>\n<p class=\"keep-together\">A common precondition is <code class=\"literal\">If-Unmodified-Since</code>. The client may PUT a request to modify a resource, but ask that the changes take effect only if no one else has modified the resource since the client last fetched it. Without the precondition, the client might overwrite someone else’s changes without realizing it, or might cause a 409 (“Conflict”).</p>\n<p><span class=\"emphasis\"><em>Request headers:</em></span> The client might get this response code by using any of the <code class=\"literal\">If-Match</code>, <code class=\"literal\">If-None-Match</code>, or <code class=\"literal\">If-Unmodified-Since</code> headers.</p>\n<p><code class=\"literal\">If-None-Match</code> is a bit special. If the client specifies <code class=\"literal\">If-None-Match</code> when making a GET or HEAD request, and the precondition fails, then the response code is not 412 but 304 (“Not Modified”). This is the basis of conditional HTTP GET. If a PUT, POST, or DELETE request uses <code class=\"literal\">If-None-Match</code>, and the precondition fails, then the response code is 412. The response code is also 412 when a precondition uses the <code class=\"literal\">If-Match</code> or <code class=\"literal\">If-Unmodified-Since</code> headers, no matter what the HTTP method is.</p>\n<h2>413 (“Request Entity Too Large”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low to medium.</p>\n<p>This is similar to 411 <a id=\"I_indexterm_tt1160\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1161\" class=\"indexterm\"></a>(“Length Required”) in that the server can interrupt the client’s request with this status code, and close the connection without waiting for the request to complete. The 411 status code was for requests that didn’t specify the length of their representation. This status code is for requests that send a representation that’s too large for the server to handle.</p>\n<p>A look-before-you-leap request (see <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>) is the best way for a client to avoid being interrupted with this error. If the LBYL request gets a response code of 100 (“Continue”), the client can go ahead and submit the full representation.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The problem may be temporary and on the server side (a lack of resources) rather than on the client side (the representation is just too damn big). If so, the server may set the <code class=\"literal\">Retry-After</code> header to a date or a number of seconds, and the client can retry its request later.</p>\n<h2>414 (“Request-URI Too Long”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>The HTTP standard imposes<a id=\"I_indexterm_tt1162\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1163\" class=\"indexterm\"></a> no official limit on the length of a URI (and, in my opinion, there shouldn’t be any). However, most existing web servers impose an upper limit on the length of a URI, and a web service may do the same. The most common cause is a client putting representation data in the URI, when it should be in the entity-body. Deeply-nested data structures can also cause very long URIs.</p>\n<h2>415 (“Unsupported Media Type”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p>The server sends<a id=\"I_indexterm_tt1164\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1165\" class=\"indexterm\"></a> this status code when the client sends a representation in a media type it doesn’t understand. The server might have been expecting XML and the client sent JSON.</p>\n<p>If the client sends a document that’s got the right media type but the wrong format (such as an XML document written in the wrong vocabulary), a better response is the more generic 400 (“Bad Request”). That’s what I use throughout my bookmark service. If you really want to treat that case specially, you can send the WebDAV extended response code 422 (“Unprocessable Entity”).</p>\n<h2>416 (“Requested Range Not Satisfiable”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>The server <a id=\"I_indexterm_tt1166\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1167\" class=\"indexterm\"></a>sends this status code when the client asks for a series of byte-ranges from a representation, but the representation is actually too small for any of the byte-ranges to apply. In other words, if you ask for byte 100 of a 99-byte representation, you’ll get this status code.</p>\n<p><span class=\"emphasis\"><em>Request headers:</em></span> This status code will only be sent when the original request included the <code class=\"literal\">Range</code> header request field. It will not be sent if the original request included the <code class=\"literal\">If-Range</code> header request field;</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The server should send a <code class=\"literal\">Content-Range</code> field that tells the client the actual size of the representation.</p>\n<h2>417 (“Expectation Failed”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium, but (as of time of writing) rarely used.</p>\n<p>This response<a id=\"I_indexterm_tt1168\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1169\" class=\"indexterm\"></a> code is the flip side of 100 (“Continue”). If you make a LBYL request to see whether the server will accept your representation, and the server decides it will, you get a response code 100 and you can go ahead. If the server decides it won’t accept your representation, you get a response code 417, and you shouldn’t bother sending your representation.<a id=\"I_indexterm_tt1170\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1171\" class=\"indexterm\"></a></p>",
      "slug" : "4xx-client-side-error"
    }, {
      "title" : "5xx: Server-Side Error",
      "type" : "page",
      "htmlContent" : "<p>The 5xx<a id=\"I_indexterm_tt1173\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1174\" class=\"indexterm\"></a> series of status codes is for representing problems on the server side. In most cases, these codes mean the server is not in a state to run the client’s request or even see whether it’s correct, and that the client should retry its request later. Sometimes the server can estimate <span class=\"emphasis\"><em>how much</em></span> later the client should retry its request, and put that information into the <code class=\"literal\">Retry-After</code> response header.</p>\n<p>There are fewer 5xx status codes than 4xx status codes, not because fewer things might go wrong on the server, but because there’s not much point in being specific: the client can’t do anything to fix a problem on the server.</p>\n<h2>500 (“Internal Server Error”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> High.</p>\n<p>This is the generic<a id=\"I_indexterm_tt1175\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1176\" class=\"indexterm\"></a> server error response. Most web frameworks send this status code if they run request handler code that raises an exception.</p>\n<h2>501 (“Not Implemented”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>The client tried <a id=\"I_indexterm_tt1177\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1178\" class=\"indexterm\"></a>to use a feature of HTTP (possibly an extended feature) which the server doesn’t support.</p>\n<p>The most common case is when a client tries to make a request that uses an extended HTTP method, like WebDAV’s COPY, which a plain web server doesn’t support. This is similar to the response code 405 (“Method Not Allowed”), but 405 implies that the client is using a recognized method on a resource that doesn’t support it. A response code of 501 means that the server doesn’t recognize the method at all.</p>\n<h2>502 (“Bad Gateway”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>You’ll only get<a id=\"I_indexterm_tt1179\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1180\" class=\"indexterm\"></a> this response code from an HTTP proxy. It indicates that there was a problem with the proxy, or between the proxy and the upstream server, rather than a problem on the upstream server.</p>\n<p>If the proxy can’t reach the upstream server at all, the response code will be 504 (“Gateway Timeout”) instead.</p>\n<h2>503 (“Service Unavailable”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium to high.</p>\n<p>This status code<a id=\"I_indexterm_tt1181\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1182\" class=\"indexterm\"></a> means that the HTTP server is up, but the underlying web service isn’t working properly. The most likely cause is resource starvation: too many requests are coming in at once for the service to handle them all.</p>\n<p>Since repeated client requests are probably what’s causing the problem, the HTTP server always has the option of refusing to accept a client request, rather than accepting it only to send a 503 response code.</p>\n<p><span class=\"emphasis\"><em>Response headers:</em></span> The server may send a <code class=\"literal\">Retry-After</code> header telling the client when they can try submitting their request again.</p>\n<h2>504 (“Gateway Timeout”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Low.</p>\n<p>Like 502 (“Bad Gateway”),<a id=\"I_indexterm_tt1183\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1184\" class=\"indexterm\"></a> you’ll only see this from an HTTP proxy. This status code signals that the proxy couldn’t connect to the upstream server.</p>\n<h2>505 (“HTTP Version Not Supported”)</h2>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Very low.</p>\n<p>This status code is sent by a server<a id=\"I_indexterm_tt1185\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1186\" class=\"indexterm\"></a> that doesn’t support the version of HTTP the client is trying to use. Since HTTP 1.1 is backward compatible with 0.9 and 1.0, you’re not likely to see this status code anytime soon. There are still some HTTP 1.0 servers around, and you might see it if you try to use features of HTTP 1.1 on them. Any HTTP 1.1 implementation that’s complete enough to support this status code is probably also complete enough to support HTTP 1.0 and 0.9.</p>\n<p><span class=\"emphasis\"><em>Entity-body:</em></span> Should contain a document describing which protocols the server does support.</p>",
      "slug" : "5xx-server-side-error"
    } ]
  }, {
    "title" : "C. The HTTP Header Top Infinity",
    "type" : "chapter",
    "htmlContent" : "<div class=\"titlepage\">\n <div>\n  <div>\n   <h2 class=\"title\">Appendix&nbsp;C.&nbsp;The HTTP Header Top Infinity</h2>\n  </div>\n </div>\n</div>\n<p>There are already two excellent guides to the standard<a id=\"appc_headers\" class=\"indexterm\"></a> HTTP headers. One’s in <a class=\"ulink\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616.html\" target=\"_top\">the HTTP standard itself</a>, and the other’s in print, in Appendix C of <span class=\"emphasis\"><em>HTTP: The Definitive Guide</em></span> by Brian Totty and David Gourley (O’Reilly). In this description I’m giving a somewhat perfunctory description of the standard HTTP headers. For each header, I’ll say whether it’s found in HTTP requests, responses, or both. I’ll give my opinion as to how useful the header is when building resource-oriented web services, as opposed to other HTTP-based software like web applications and HTTP proxies. I’ll give a short description of the header, which will get a little longer for tricky or especially important headers. I won’t go into detail on what the header values should look like. I figure you’re smart and you can look up more detailed information as needed.</p>\n<p>In <a class=\"xref\" href=\"ch01.html\" title=\"Chapter&nbsp;1.&nbsp;The Programmable Web and Its Inhabitants\">Chapter&nbsp;1</a> I compared an HTTP request or response to an envelope that contains a document (an entity-body). I compared HTTP headers to informational stickers on the envelope. It’s considered very bad form to come up with your own HTTP methods or response codes, but it’s fine to come up with your own stickers. After covering the standard HTTP headers I’ll mention a few custom headers that have become de facto parts of HTTP, like <code class=\"literal\">Cookie</code>; or that are used in important technologies, like WSSE’s <code class=\"literal\">X-WSSE</code> and the Atom Publishing Protocol’s <code class=\"literal\">Slug</code>.</p>\n<p>Custom headers are the most common way of extending HTTP. So long as client and server agree on what the headers mean, you can send any information you like along with a request or response. The guidelines are: don’t reinvent an existing header, don’t put things in headers that belong in the entity-body, and follow the naming convention. The names of custom headers should start with the string “X-,” meaning “extension.” The convention makes it clear that your headers are extension headers, and avoids any conflict with future official HTTP headers.</p>\n<p>Amazon’s S3, covered in <a class=\"xref\" href=\"ch03.html\" title=\"Chapter&nbsp;3.&nbsp;What Makes RESTful Services Different?\">Chapter&nbsp;3</a>, is a good example of a service that defines custom headers. Not only does it define headers like <code class=\"literal\">X-amz-acl</code> and <code class=\"literal\">X-amz-date</code>, it specifies that S3 clients can send any header whose name begins with “X-amz-meta-.” The header name and value are associated with an object as a key-value pair, letting you store arbitrary metadata with your buckets and objects. This is a naming convention inside a naming convention.</p>",
    "textContent" : "Appendix C. The HTTP Header Top Infinity\r\n\r\nThere are already two excellent guides to the standard HTTP headers. One’s in the HTTP standard itself <http://www.w3.org/Protocols/rfc2616/rfc2616.html> , and the other’s in print, in Appendix C of HTTP: The Definitive Guide by Brian Totty and David Gourley (O’Reilly). In this description I’m giving a somewhat perfunctory description of the standard HTTP headers. For each header, I’ll say whether it’s found in HTTP requests, responses, or both. I’ll give my opinion as to how useful the header is when building resource-oriented web services, as opposed to other HTTP-based software like web applications and HTTP proxies. I’ll give a short description of the header, which will get a little longer for tricky or especially important headers. I won’t go into detail on what the header values should look like. I figure you’re smart and you can look up more detailed information as needed.\r\n\r\nIn Chapter 1 I compared an HTTP request or response to an envelope that contains a document (an entity-body). I compared HTTP headers to informational stickers on the envelope. It’s considered very bad form to come up with your own HTTP methods or response codes, but it’s fine to come up with your own stickers. After covering the standard HTTP headers I’ll mention a few custom headers that have become de facto parts of HTTP, like Cookie; or that are used in important technologies, like WSSE’s X-WSSE and the Atom Publishing Protocol’s Slug.\r\n\r\nCustom headers are the most common way of extending HTTP. So long as client and server agree on what the headers mean, you can send any information you like along with a request or response. The guidelines are: don’t reinvent an existing header, don’t put things in headers that belong in the entity-body, and follow the naming convention. The names of custom headers should start with the string “X-,” meaning “extension.” The convention makes it clear that your headers are extension headers, and avoids any conflict with future official HTTP headers.\r\n\r\nAmazon’s S3, covered in Chapter 3, is a good example of a service that defines custom headers. Not only does it define headers like X-amz-acl and X-amz-date, it specifies that S3 clients can send any header whose name begins with “X-amz-meta-.” The header name and value are associated with an object as a key-value pair, letting you store arbitrary metadata with your buckets and objects. This is a naming convention inside a naming convention.",
    "slug" : "c-the-http-header-top-infinity",
    "pages" : [ {
      "title" : "Standard Headers",
      "type" : "page",
      "htmlContent" : "<p>These are the<a id=\"appc_standard\" class=\"indexterm\"></a> 46 headers listed in the HTTP standard.</p>\n<h2>Accept</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>The client sends <a id=\"I_indexterm_tt1188\" class=\"indexterm\"></a>an <code class=\"literal\">Accept</code> header to tell the server what data formats it would prefer the server use in its representations. One client might want a JSON representation; another might want an RDF representation of the same data.</p>\n<p>Hiding this information inside the HTTP headers is a good idea for web browsers, but it shouldn’t be the only solution for web service clients. I recommend exposing different representations using different URIs. This doesn’t mean you have to impose crude rules like appending <em class=\"filename\">.html</em> to the URI for an HTML representation (though that’s what Rails does). But I think the information should be in the URI somehow. If you want to support <code class=\"literal\">Accept</code> on top of this, that’s great (Rails does this too).</p>\n<h2>Accept-Charset</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>The <a id=\"I_indexterm_tt1189\" class=\"indexterm\"></a>client sends an <code class=\"literal\">Accept-Charset</code> header to tell the server what character set it would like the server to use in its representations. One client might want the representation of a resource containing Japanese text to be encoded in UTF-8; another might want a Shift-JIS encoding of the same data.</p>\n<p>As I said in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>, your headaches will be fewer if you pick a Unicode encoding (either UTF-8 or UTF-16) and stick with it. Any modern client should be able to handle these encodings.</p>\n<h2>Accept-Encoding</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium to high.</p>\n<p>The client sends<a id=\"I_indexterm_tt1190\" class=\"indexterm\"></a> an <code class=\"literal\">Accept-Encoding</code> header to tell the server that it can save some bandwidth by compressing the response entity-body with a well-known algorithm like compress or gzip. Despite the name, this has nothing to do with character set encoding; that’s <code class=\"literal\">Accept-Charset</code>.</p>\n<p>Technically, <code class=\"literal\">Accept-Encoding</code> could be used to apply some other kind of transform to the entity-body: applying rot13 encryption to all of its text, maybe. In practice, it’s only used to compress data.</p>\n<h2>Accept-Language</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>The client sends <a id=\"I_indexterm_tt1191\" class=\"indexterm\"></a>an <code class=\"literal\">Accept-Language</code> header to tell the server what human language it would like the server to use in its representations. For an example, see <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a> and its discussion of a press release that’s available in both English and Spanish.</p>\n<p>As with media types, I think that a web service should expose different-language representations of a given resource with different URIs. Supporting <code class=\"literal\">Accept-Language</code> on top of this is a bonus.</p>\n<h2>Accept-Ranges</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low to medium.</p>\n<p>The server sends <a id=\"I_indexterm_tt1192\" class=\"indexterm\"></a>this header to indicate that it supports partial HTTP GET (see <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>) for the requested URI. A client can make a HEAD request to a URI, parse the value of this response header, and then send a GET request to the same URI, providing an appropriate <code class=\"literal\">Range</code> header.</p>\n<h2>Age</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>If the response <a id=\"I_indexterm_tt1193\" class=\"indexterm\"></a>entity-body does not come fresh from the server, the <code class=\"literal\">Age</code> header is a measure of how long ago it left the server. This header is usually set by HTTP caches, so that the client knows it might be getting an old copy of a representation.</p>\n<h2>Allow</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Potentially high, currently low.</p>\n<p>I discuss this <a id=\"I_indexterm_tt1194\" class=\"indexterm\"></a>header in <a class=\"xref\" href=\"ch04.html#head-and-options\" title=\"HEAD and OPTIONS\">HEAD and OPTIONS</a>”, in <a class=\"xref\" href=\"ch04.html\" title=\"Chapter&nbsp;4.&nbsp;The Resource-Oriented Architecture\">Chapter&nbsp;4</a>. It’s sent in response to an OPTIONS request and tells the client which subset of the uniform interface a particular URI exposes. This header will become much more important if people ever start using OPTIONS.</p>\n<h2>Authorization</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very high.</p>\n<p>This request <a id=\"I_indexterm_tt1195\" class=\"indexterm\"></a>header contains authorization credentials, such as a username and password, which the client has encoded according to some agreed-upon scheme. The server decodes the credentials and decides whether or not to carry out the request.</p>\n<p>In theory, this is the only authorization header anyone should ever need (except for <code class=\"literal\">Proxy-Authorization</code>, which works on a different level), because it’s extensible. The most common schemes are HTTP Basic and HTTP Digest, but the scheme can be anything, so long as both client and server understand it. In practice, HTTP itself has been extended, with unofficial request headers like <code class=\"literal\">X-WSSE</code> that work on top of <code class=\"literal\">Authorization</code>. See the <code class=\"literal\">X-WSSE</code> entry below for the reason why.</p>\n<h2>Cache-Control</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request and response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>This header <a id=\"I_indexterm_tt1196\" class=\"indexterm\"></a>contains a directive to any caches between the client and the server (including any caches on the client or server themselves). It spells out the rules for how the data should be cached and when it should be dumped. I cover some simple caching rules and recipes in <a class=\"xref\" href=\"ch08.html#http-caching\" title=\"Caching\">Caching</a>” in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>.</p>\n<h2>Connection</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>Most of an HTTP response is a<a id=\"I_indexterm_tt1197\" class=\"indexterm\"></a> communication from the server to the client. Intermediaries like proxies can look at the response, but nothing in there is aimed at them. But a server can insert extra headers that are aimed at a proxy, and one proxy can insert headers that are aimed at the next proxy in a chain. When this happens, the special headers are named in the <code class=\"literal\">Connection</code> header. These headers apply to the TCP connection between one machine and another, not to the HTTP connection between server and client. Before passing on the response, the proxy is supposed to remove the special headers and the <code class=\"literal\">Connection</code> header itself. Of course, it may add its own special communications, and a new <code class=\"literal\">Connection</code> header, if it wants.</p>\n<p>Here’s a quick example, since this isn’t terribly relevant to this book. The server might send these three HTTP headers in a response that goes through a proxy:</p>\n<p><a id=\"I_programlisting_tt1198\"></a></p>\n<pre class=\"programlisting\">Content-Type: text/plain\nX-Proxy-Directive: Deliver this as fast as you can!\nConnection: X-Proxy-Directive</pre>\n<p>The proxy would remove <code class=\"literal\">X-Proxy-Directive</code> and <code class=\"literal\">Connection</code>, and send the one remaining header to the client:</p>\n<a id=\"I_programlisting_tt1199\"></a>\n<pre class=\"programlisting\">Content-Type: text/plain</pre>\n<p>If you’re writing a client and not using proxies, the only value you’re likely to see for <code class=\"literal\">Connection</code> is “close.” That just says that the server will close the TCP connection after completing this request, which is probably what you expected anyway.</p>\n<h2>Content-Encoding</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium to high.</p>\n<p>This response header<a id=\"I_indexterm_tt1200\" class=\"indexterm\"></a> is the counterpart to the request header <code class=\"literal\">Accept-Encoding</code>. The request header asks the server to compress the entity-body using a certain algorithm. This header tells the client which algorithm, if any, the server actually used.</p>\n<h2>Content-Language</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>This response header is<a id=\"I_indexterm_tt1201\" class=\"indexterm\"></a> the counterpart to the <code class=\"literal\">Accept-Language</code> request header, or to a corresponding variable set in a resource’s URI. It specifies the natural language a human must understand to get meaning out of the entity-body.</p>\n<p>There may be multiple languages listed here. If the entity-body is a movie in Mandarin with Japanese subtitles, the value for <code class=\"literal\">Content-Language</code> might be “zh-guoyu,jp.” If one English phrase shows up in the movie, “en” would probably <span class=\"emphasis\"><em>not</em></span> show up in the <code class=\"literal\">Content-Language</code> header.</p>\n<h2>Content-Length</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: High.</p>\n<p>This response header gives the size<a id=\"I_indexterm_tt1202\" class=\"indexterm\"></a> of the entity-body in bytes. This is important for two reasons: first, a client can read this and prepare for a small entity-body or a large one. Second, a client can make a HEAD request to find out how large the entity-body is, without actually requesting it. The value of <code class=\"literal\">Content-Length</code> might affect the client’s decision to fetch the entire entity-body, fetch part of it with <code class=\"literal\">Range</code>, or not fetch it at all.</p>\n<h2>Content-Location</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>This header tells the client<a id=\"I_indexterm_tt1203\" class=\"indexterm\"></a> the canonical URI of the resource it requested. Unlike with the value of the <code class=\"literal\">Location</code> header, this is purely informative. The client is not expected to start using the new URI.</p>\n<p>This is mainly useful for services that assign different URIs to different representations of the same resource. If the client wants to link to the specific representation obtained through content negotiation, it can use the URI given in <code class=\"literal\">Content-Location</code>. So if you request <code class=\"literal\">/releases/104</code>, and use the <code class=\"literal\">Accept</code> and <code class=\"literal\">Accept-Language</code> headers to specify an HTML representation written in English, you might get back a response that specifies <code class=\"literal\">/releases/104.html.en</code> as the value for <code class=\"literal\">Content-Location</code>.</p>\n<h2>Content-MD5</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low to medium.</p>\n<p>This is a cryptographic checksum of the<a id=\"I_indexterm_tt1204\" class=\"indexterm\"></a> entity-body. The client can use this to check whether or not the entity-body was corrupted in transit. An attacker (such as a man-in-the-middle) can change the entity-body and change the <code class=\"literal\">Content-MD5</code> header to match, so it’s no good for security, just error detection.</p>\n<h2>Content-Range</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low to medium.</p>\n<p>When the client makes a partial<a id=\"I_indexterm_tt1205\" class=\"indexterm\"></a> GET request with the <code class=\"literal\">Range</code> request header, this response header says what part of the representation the client is getting.</p>\n<h2>Content-Type</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very high.</p>\n<p>Definitely the most famous <a id=\"I_indexterm_tt1206\" class=\"indexterm\"></a>response header. This header tells the client what kind of thing the entity-body is. On the human web, a web browser uses this to decide if it can display the entity-body inline, and which external program it must run if not. On the programmable web, a web service client usually uses this to decide which parser to apply to the entity-body.</p>\n<h2>Date</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request and response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: High for request, <span class=\"emphasis\"><em>required</em></span> for response.</p>\n<p>As a request header,<a id=\"I_indexterm_tt1207\" class=\"indexterm\"></a> this represents the time on the client at the time the request was sent. As a response header, it represents the time on the server at the time the request was fulfilled. As a response header, <code class=\"literal\">Date</code> is used by caches.</p>\n<h2>ETag</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very high.</p>\n<p>The value of <code class=\"literal\">ETag</code> is an <a id=\"I_indexterm_tt1208\" class=\"indexterm\"></a>opaque string designating a specific version of a representation. Whenever the representation changes, the <code class=\"literal\">ETag</code> should also change.</p>\n<p>Whenever possible, this header ought to be sent in response to GET requests. Clients can use the value of <code class=\"literal\">ETag</code> in future conditional GET requests, as the value of <code class=\"literal\">If-None-Match</code>. If the representation hasn’t changed, the ETag hasn’t changed either, and the server can save time and bandwidth by not sending the representation again.</p>\n<p>The main driver of conditional GET requests is the simpler <code class=\"literal\">Last-Modified</code> response header, and its request counterpart <code class=\"literal\">If-Modified-Since</code>. The main purpose of <code class=\"literal\">ETag</code> is to provide a second line of defense. If a representation changes twice in one second, it will take on only one value for <code class=\"literal\">Last-Modified-Since</code>, but two different values for <code class=\"literal\">ETag</code>.</p>\n<h2>Expect</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium, but rarely used (as of time of writing).</p>\n<p>This header is used to<a id=\"I_indexterm_tt1209\" class=\"indexterm\"></a> signal a LBYL request (covered in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>). The server will send the response code 100 (“Continue”) if the client should “leap” ahead and make the real request. It will send the response code 417 (“Expectation Failed”) if the client should not “leap.”</p>\n<h2>Expires</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>This header tells the client,<a id=\"I_indexterm_tt1210\" class=\"indexterm\"></a> or a proxy between the server and client, that it may cache the response (not just the entity-body!) until a certain time. Even a conditional HTTP GET makes an HTTP connection and takes time and resources. By paying attention to <code class=\"literal\">Expires</code>, a client can avoid the need to make any HTTP requests at all—at least for a while. I cover caching briefly in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>.</p>\n<p>The client should take the value of <code class=\"literal\">Expires</code> as a rough guide, not as a promise that the entity-body won’t change until that time.</p>\n<h2>From</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very low.</p>\n<p>This header works <a id=\"I_indexterm_tt1211\" class=\"indexterm\"></a>just like the <code class=\"literal\">From</code> header in an email message. It gives an email address associated with the person making the request. This is never used on the human web because of privacy concerns, and it’s used even less on the programmable web, where the clients aren’t under the control of human beings. You might want to use it as an extension to <code class=\"literal\">User-Agent</code>.</p>\n<h2>Host</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: <span class=\"emphasis\"><em>Required.</em></span></p>\n<p>This header contains the<a id=\"I_indexterm_tt1212\" class=\"indexterm\"></a> domain name part of the URI. If a client makes a GET request for <span class=\"emphasis\"><em>http://www.example.com/page.html</em></span>, then the URI path is <code class=\"literal\">/page.html</code> and the value of the <code class=\"literal\">Host</code> header is “www.example.com” or “www.example.com:80.”</p>\n<p>From the client’s point of view, this may seem like a strange header to require. It’s required because an HTTP 1.1 server can host any number of domains on a single IP address. This feature is called “name-based virtual hosting,” and it saves someone who owns multiple domain names from having to buy a separate computer and/or network card for each one. The problem is that an HTTP client sends requests to an IP address, not to a domain name. Without the <code class=\"literal\">Host</code> header, the server has no idea which of its virtual hosts is the target of the client’s request.</p>\n<h2>If-Match</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>This header is best <a id=\"I_indexterm_tt1213\" class=\"indexterm\"></a>described in terms of other headers. It’s used like <code class=\"literal\">If-Unmodified-Since</code> (described later), to make HTTP actions other than GET conditional. But where <code class=\"literal\">If-Unmodified-Since</code> takes a time as its value, this header takes an <code class=\"literal\">ETag</code> as its value.</p>\n<p>Tersely, this header is to <code class=\"literal\">If-None-Match</code> and <code class=\"literal\">ETag</code> as <code class=\"literal\">If-Unmodified-Since</code> is to <code class=\"literal\">If-Modified-Since</code> and <code class=\"literal\">Last-Modified</code>.</p>\n<h2>If-Modified-Since</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very high.</p>\n<p>This request header is<a id=\"I_indexterm_tt1214\" class=\"indexterm\"></a> the backbone of conditional HTTP GET. Its value is a previous value of the <code class=\"literal\">Last-Modified</code> response header, obtained from a previous request to this URI. If the resource has changed since that last request, its new <code class=\"literal\">Last-Modified</code> date is more recent than the one. That means that the condition <code class=\"literal\">If-Modified-Since</code> is met, and the server sends the new entity-body. If the resource has not changed, the <code class=\"literal\">Last-Modified</code> date is the same as it was, and the condition <code class=\"literal\">If-Modified-Since</code> fails. The server sends a response code of 304 (“Not Modified”) and no entity-body. That is, conditional HTTP GET succeeds if this condition fails.</p>\n<p>Since <code class=\"literal\">Last-Modified</code> is only accurate to within one second, conditional HTTP GET can occasionally give the wrong result if it relies only on <code class=\"literal\">If-Modified-Since</code>. This is the main reason why we also use <code class=\"literal\">ETag</code> and <code class=\"literal\">If-None-Match</code>.</p>\n<h2>If-None-Match</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very high.</p>\n<p>This header is also used<a id=\"I_indexterm_tt1215\" class=\"indexterm\"></a> in conditional HTTP GET. Its value is a previous value of the <code class=\"literal\">ETag</code> response header, obtained from a previous request to this URI. If the ETag has changed since that last request, the condition <code class=\"literal\">If-None-Match</code> succeeds and the server sends the new entity-body. If the ETag is the same as before, the condition fails, and the server sends a response code of 304 (“Not Modified”) with no entity-body.</p>\n<h2>If-Range</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>This header is used to make<a id=\"I_indexterm_tt1216\" class=\"indexterm\"></a> a <span class=\"emphasis\"><em>conditional</em></span> partial GET request. The value of the header comes from the <code class=\"literal\">ETag</code> or <code class=\"literal\">Last-Modified</code> response header from a previous range request. The server sends the new range only if <span class=\"emphasis\"><em>that part</em></span> of the entity-body has changed. Otherwise the server sends a 304 (“Not Modified”), even if something changed elsewhere in the entity-body.</p>\n<p>Conditional partial GET is not used very often, because it’s very unlikely that a client will fetch a few bytes from a larger representation, and <span class=\"emphasis\"><em>then</em></span> try to fetch only those same bytes later.</p>\n<h2>If-Unmodified-Since</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>Normally a client uses the value of the response <a id=\"I_indexterm_tt1217\" class=\"indexterm\"></a>header <code class=\"literal\">Last-Modified</code> as the value of the request header <code class=\"literal\">If-Modified-Since</code> to perform a conditional GET request. This header also takes the value of <code class=\"literal\">Last-Modified</code>, but it’s usually used for making HTTP actions other than GET into conditional actions.</p>\n<p>Let’s say you and many other people are interested in modifying a particular resource. You fetch a representation, modify it, and send it back with a PUT request. But someone else has modified it in the meantime, and you either get a response code of 409 (“Conflict”), or you put the resource into a state you didn’t intend.</p>\n<p>If you make your PUT request conditional on <code class=\"literal\">If-Unmodified-Since</code>, then if someone else has changed the resource your request will always get a response code of 412 (“Precondition Failed”). You can refetch the representation and decide what to do with the new version that someone else modified.</p>\n<p>This header can be used with GET, too; see the <code class=\"literal\">Range</code> header for an example.</p>\n<h2>Last-Modified</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very high.</p>\n<p>This header makes <a id=\"I_indexterm_tt1218\" class=\"indexterm\"></a>conditional HTTP GET possible. It tells the client the last time the representation changed. The client can keep track of this date and use it in the <code class=\"literal\">If-Modified-Since</code> header of a future request.</p>\n<p>In web applications, <code class=\"literal\">Last-Modified</code> is usually the current time, which makes conditional HTTP GET useless. Web services should try to do a little better, since web service clients often besiege their servers with requests for the same URIs over and over again. See <a class=\"xref\" href=\"ch08.html#conditional-get\" title=\"Conditional GET\">Conditional GET</a>” in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a> for ideas.</p>\n<h2>Location</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very high.</p>\n<p>This is a versatile header with<a id=\"I_indexterm_tt1219\" class=\"indexterm\"></a> many related functions. It’s heavily associated with the 3xx (“Redirection”) response codes, and much of the confusion surrounding HTTP redirects has to do with how this header should be interpreted.</p>\n<p>This header usually tells the client which URI it should be using to access a resource; presumably the client doesn’t already know. This might be because the client’s request created the resource—response code 201 (“Created”)—or caused the resource to change URIs—301 (“Moved Permanently”). It may also be because the client used a URI that’s not quite right, though not so wrong that the server didn’t recognize it. In that case the response code might be 301 again, or 307 (“Temporary Redirect”) or 302 (“Found”).</p>\n<p>Sometimes the value of <code class=\"literal\">Location</code> is just a default URI: one of many possible resolutions to an ambiguous request, e.g., 300 (“Multiple Choices”). Sometimes the value of <code class=\"literal\">Location</code> points not to the resource the client tried to access, but to some other resource that provides supplemental information, e.g., 303 (“See Other”).</p>\n<p>As you can see, this header can only be understood in the context of a particular HTTP response code. Refer to the appropriate section of <a class=\"xref\" href=\"apb.html\" title=\"Appendix&nbsp;B.&nbsp;The HTTP Response Code Top 42\">Appendix&nbsp;B</a> for more details.</p>\n<h2>Max-Forwards</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very low.</p>\n<p>This header is mainly used with<a id=\"I_indexterm_tt1220\" class=\"indexterm\"></a> the TRACE method, which is used to track the proxies that handle a client’s HTTP request. I don’t cover TRACE in this book, but as part of a TRACE request, <code class=\"literal\">Max-Forwards</code> is used to limit how many proxies the request can be sent through.</p>\n<h2>Pragma</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request or response.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very low.</p>\n<p>The <code class=\"literal\">Pragma</code> header is<a id=\"I_indexterm_tt1221\" class=\"indexterm\"></a> a spot for special directives between the client, server, and intermediaries such as proxies. The only official pragma is “no-cache,” which is obsolete in HTTP 1.1: it’s the same as sending a value of “no-cache” for the <code class=\"literal\">Cache-Control</code> header. You may define your own HTTP pragmas, but it’s better to define your own HTTP headers instead. See, for instance, the <code class=\"literal\">X-Proxy-Directive</code> header I made up while explaining the <code class=\"literal\">Connection</code> header.</p>\n<h2>Proxy-Authenticate</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low to medium.</p>\n<p>Some clients (especially in corporate<a id=\"I_indexterm_tt1222\" class=\"indexterm\"></a> environments) can only get HTTP access through a proxy server. Some proxy servers require authentication. This header is a proxy’s way of demanding authentication. It’s sent along with a response code of 407 (“Proxy Authentication Required”), and it works just like <code class=\"literal\">WWW-Authenticate</code>, except it tells the client how to authenticate with the proxy, not with the web server on the other end. While the response to a <code class=\"literal\">WWW-Authenticate</code> challenge goes into <code class=\"literal\">Authorization</code>, the response to a <code class=\"literal\">Proxy-Authenticate</code> challenge goes into <code class=\"literal\">Proxy-Authorization</code> (see below). A single request may need to include both <code class=\"literal\">Authorization</code> and <code class=\"literal\">Proxy-Authorization</code> headers: one to authenticate with the web service, the other to authenticate with the proxy.</p>\n<p>Since most web services don’t include proxies in their architecture, this header is not terribly relevant to the kinds of services covered in this book. But it may be relevant to a client, if there’s a proxy between the client and the rest of the web.</p>\n<h2>Proxy-Authorization</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low to medium.</p>\n<p>This header is an attempt <a id=\"I_indexterm_tt1223\" class=\"indexterm\"></a>to get a request through a proxy that demands authentication. It works similarly to <code class=\"literal\">Authorization</code>. Its format depends on the scheme defined in <code class=\"literal\">Proxy-Authenticate</code>, just as the format of <code class=\"literal\">Authorization</code> depends on the scheme defined in <code class=\"literal\">WWW-Authenticate</code>.</p>\n<h2>Range</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>This header signifies the<a id=\"I_indexterm_tt1224\" class=\"indexterm\"></a> client’s attempt to request only part of a resource’s representation (see <a class=\"xref\" href=\"ch08.html#partial-get\" title=\"Partial GET\">Partial GET</a>” in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>). A client typically sends this header because it tried earlier to download a large representation and got cut off. Now it’s back for the rest of the representation. Because of this, this header is usually coupled with <code class=\"literal\">Unless-Modified-Since</code>. If the representation has changed since your last request, you probably need to GET it from the beginning.</p>\n<h2>Referer</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>When you click a link in<a id=\"I_indexterm_tt1225\" class=\"indexterm\"></a> your web browser, the browser sends an HTTP request in which the value of the <code class=\"literal\">Referer</code> header is the URI of the page you were just on. That’s the URI that “refered” your client to the URI you’re now requesting. Yes, it’s misspelled.</p>\n<p>Though common on the human web, this header is rarely found on the programmable web. It can be used to convey a bit of application state (the client’s recent path through the service) to the server.</p>\n<h2>Retry-After</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low to medium.</p>\n<p>This header usually comes with a<a id=\"I_indexterm_tt1226\" class=\"indexterm\"></a> response code that denotes failure: either 413 (“Request Entity Too Large”), or one of the 5xx series (“Server-side error”). It tells the client that while the server couldn’t fulfill the request right now, it might be able to fulfill the same request at a later time. The value of the header is the time when the client should try again, or the number of seconds it should wait.</p>\n<p>If a server chooses every client’s <code class=\"literal\">Retry-After</code> value using the same rules, that just guarantees the same clients will make the same requests in the same order a little later, possibly causing the problem all over again. The server should use some randomization technique to vary <code class=\"literal\">Retry-After</code>, similar to Ethernet’s backoff period.</p>\n<h2>TE</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>This is another “Accept”-type<a id=\"I_indexterm_tt1227\" class=\"indexterm\"></a> header, one that lets the client specify which transfer encodings it will accept (see <code class=\"literal\">Transfer-Encoding</code> below for an explanation of transfer encodings). <em class=\"citetitle\">HTTP: The Definitive Guide</em> by Brian Totty and David Gourley (O’Reilly) points out that a better name would have been “Accept-Transfer-Encoding.”</p>\n<p>In practice, the value of <code class=\"literal\">TE</code> only conveys whether or not the client understands chunked encoding and HTTP trailers, two topics I don’t really cover in this book.</p>\n<h2>Trailer</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>When a server sends an entity-body<a id=\"I_indexterm_tt1228\" class=\"indexterm\"></a> using chunked transfer encoding, it may choose to put certain HTTP headers at the end of the entity-body rather than before it (see below for details). This turns them from headers into trailers. The server signals that it’s going to send a header as a trailer by putting its name as the value of the header called <code class=\"literal\">Trailer</code>. Here’s one possible value for <code class=\"literal\">Trailer</code>:</p>\n<p><a id=\"I_programlisting_tt1229\"></a></p>\n<pre class=\"programlisting\">Trailer: Content-Length</pre>\n<p>The server will be providing a value for <code class=\"literal\">Content-Length</code> once it’s served the entity-body and it knows how many bytes it served.</p>\n<h2>Transfer-Encoding</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>Sometimes a server needs to send an<a id=\"I_indexterm_tt1230\" class=\"indexterm\"></a> entity-body without knowing important facts like how large it is. Rather than omitting HTTP headers like <code class=\"literal\">Content-Length</code> and <code class=\"literal\">Content-MD5</code>, the server may decide to send the entity-body in chunks, and put <code class=\"literal\">Content-Length</code> and the like at the <span class=\"emphasis\"><em>after</em></span> of the entity-body rather than before. The idea is that by the time all the chunks have been sent, the server knows the things it didn’t know before, and it can send <code class=\"literal\">Content-Length</code> and <code class=\"literal\">Content-MD5</code> as “trailers” instead of “headers.”</p>\n<p>It’s an HTTP 1.1 requirement that clients support chunked transfer-encoding, but I don’t know of any programmable clients (as opposed to web browsers) that do.</p>\n<h2>Upgrade</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very low.</p>\n<p>If you’d rather be using some protocol<a id=\"I_indexterm_tt1231\" class=\"indexterm\"></a> other than HTTP, you can tell the server that by sending a <code class=\"literal\">Upgrade</code> header. If the server happens to speak the protocol you’d rather be using, it will send back a response code of 101 (“Switching Protocols”) and immediately begin speaking the new protocol.</p>\n<p>There is no standard format for this list, but the sample <code class=\"literal\">Upgrade</code> header from RFC 2616 shows what the designers of HTTP had in mind:</p>\n<p><a id=\"I_programlisting_tt1232\"></a></p>\n<pre class=\"programlisting\">Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</pre>\n<h2>User-Agent</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: High.</p>\n<p>This header lets the server know<a id=\"I_indexterm_tt1233\" class=\"indexterm\"></a> what kind of software is making the HTTP request. On the human web this is a string that identifies the brand of web browser. On the programmable web it usually identifies the HTTP library or client library that was used to write the client. It may identify a specific client program instead.</p>\n<p>Soon after the human web became popular, servers started sniffing <code class=\"literal\">User-Agent</code> to determine what kind of browser was on the other end. They then sent different representations based on the value of <code class=\"literal\">User-Agent</code>. Elsewhere in this book I’ve voiced my opinion that it’s not a great idea to have request headers like <code class=\"literal\">Accept-Language</code> be the only way a client can distinguish between different representations of the same resource. Sending different representations based on the value of <code class=\"literal\">User-Agent</code> is an even worse idea. Not only has <code class=\"literal\">User-Agent</code> sniffing perpetuated incompatibilities between web browsers, it’s led to an arms race inside the <code class=\"literal\">User-Agent</code> header itself.</p>\n<p>Almost every browser these days pretends to be Mozilla, because that was the internal code-name of the first web browser to become popular (Netscape Navigator). A browser that doesn’t pretend to be Mozilla may not get the representation it needs. Some pretend to be both Mozilla and MSIE, so they can trigger code for the current most popular web browser (Internet Explorer). A few browsers even allow the user to select the <code class=\"literal\">User-Agent</code> for every request, to trick servers into sending the right representations.</p>\n<p>Don’t let this happen to the programmable web. A web service should only use <code class=\"literal\">User-Agent</code> to gather statistics and to deny access to poorly-programmed clients. It should not use <code class=\"literal\">User-Agent</code> to tailor its representations to specific clients.</p>\n<h2>Vary</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low to medium.</p>\n<p>The <code class=\"literal\">Vary</code> header tells the<a id=\"I_indexterm_tt1234\" class=\"indexterm\"></a> client which request headers it can vary to get different representations of a resource. Here’s a sample value:</p>\n<p><a id=\"I_programlisting_tt1235\"></a></p>\n<pre class=\"programlisting\">Vary: Accept Accept-Language</pre>\n<p>That value tells the client that it can ask for the representation in a different file format, by setting or changing the <code class=\"literal\">Accept</code> header. It can ask for the representation in a different language, by setting or changing <code class=\"literal\">Accept-Language</code>.</p>\n<p>That value also tells a cache to cache (say) the Japanese representation of the resource separately from the English representation. The Japanese representation isn’t a brand new byte stream that invalidates the cached English version. The two requests sent different values for a header that varies (<code class=\"literal\">Accept-Language</code>), so the responses should be cached separately. If the value of <code class=\"literal\">Vary</code> is “*”, that means that the response should not be cached.</p>\n<h2>Via</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request and response<a id=\"I_indexterm_tt1236\" class=\"indexterm\"></a> header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>When an HTTP request goes directly from the client to the server, or a response goes directly from server to client, there is no <code class=\"literal\">Via</code> header. When there are intermediaries (like proxies) in the way, each one slaps on a <code class=\"literal\">Via</code> header on the request or response message. The recipient of the message can look at the <code class=\"literal\">Via</code> headers to see the path the HTTP message took through the intermediaries.</p>\n<h2>Warning</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header <a id=\"I_indexterm_tt1237\" class=\"indexterm\"></a>(can technically be used with requests).</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low.</p>\n<p>The <code class=\"literal\">Warning</code> header is a supplement to the HTTP response code. It’s usually inserted by an intermediary like a caching proxy, to tell the user about possible problems that aren’t obvious from looking at the response.</p>\n<p>Like response codes, each HTTP warning has a three-digit numeric value: a “warn-code.” Most warnings have to do with cache behavior. This <code class=\"literal\">Warning</code> says that the caching proxy at <code class=\"literal\">localhost:9090</code> sent a cached response even though it knew the response to be stale:</p>\n<p><a id=\"I_programlisting_tt1238\"></a></p>\n<pre class=\"programlisting\">Warning: 110 localhost:9090 Response is stale</pre>\n<p>The warn-code 110 means “Response is stale” as surely as the HTTP response code 404 means “Not Found.” The HTTP standard defines seven warn-codes, which I won’t go into here.</p>\n<h2>WWW-Authenticate</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Very high.</p>\n<p>This header accompanies<a id=\"I_indexterm_tt1239\" class=\"indexterm\"></a> a response code of 401 (“Unauthorized”). It’s the server’s demand that the client send some authentication next time it requests the URI. It also tells the client what kind of authentication the server expects. This may be HTTP Basic auth, HTTP Digest auth, or something more exotic like WSSE.<a id=\"I_indexterm_tt1240\" class=\"indexterm\"></a></p>",
      "slug" : "standard-headers"
    }, {
      "title" : "Nonstandard Headers",
      "type" : "page",
      "htmlContent" : "<p>Many, many new <a id=\"appc_non\" class=\"indexterm\"></a>HTTP headers have been created over the years, most using the <code class=\"literal\">X-</code> extension. These have not gone through the process to be made official parts of HTTP, but in many cases they have gone through other standardization processes. I’m going to present just a few of the nonstandard headers that are most important to web services.</p>\n<h2>Cookie</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: High on the human web, low on the programmable web.</p>\n<p>This is probably the<a id=\"I_indexterm_tt1242\" class=\"indexterm\"></a> second-most-famous HTTP header, after <code class=\"literal\">Content-Type</code>, but it’s not in the HTTP standard; it’s a Netscape extension.</p>\n<p>A cookie is an agreement between the client and the server where the server gets to store some semipersistent state on the client side using the <code class=\"literal\">Set-Cookie</code> header (see below). Once the client gets a cookie, it’s expected to return it with every subsequent HTTP request to that server, by setting the <code class=\"literal\">Cookie</code> header once for each of its cookies. Since the data is sent invisibly in the HTTP headers with every request, it looks like the client and server are sharing state.</p>\n<p>Cookies have a bad reputation in REST circles for two reasons. First, the “state” they contain is often just a session ID: a short alphanumeric key that ties into a much larger data structure on the server. This destroys the principle of statelessness. More subtly, once a client accepts a cookie it’s supposed to submit it with all subsequent requests for a certain time. The server is telling the client that it can no longer make the requests it made precookie. This also violates the principle of statelessness.</p>\n<p>If you must use cookies, make sure you store <span class=\"emphasis\"><em>all</em></span> the state on the client side. Otherwise you’ll lose a lot of the scalability benefits of REST.</p>\n<h2>POE</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>The <code class=\"literal\">POE</code> header is sent by a <a id=\"I_indexterm_tt1243\" class=\"indexterm\"></a>client who wants a URI they can use in a Post Once Exactly request. I covered POE in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a>.</p>\n<h2>POE-Links</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Medium.</p>\n<p>The <code class=\"literal\">POE-Links</code> header <a id=\"I_indexterm_tt1244\" class=\"indexterm\"></a>is sent in response to a request that included a <code class=\"literal\">POE</code> header. It gives one or more URIs the client can POST to. Each listed URI will respond to POST exactly once.</p>\n<h2>Set-Cookie</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Response header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: High on the human web,<a id=\"I_indexterm_tt1245\" class=\"indexterm\"></a> low on the programmable web.</p>\n<p>This is an attempt on the server’s part to set some semipersistent state in a cookie on the client side. The client is supposed to send an appropriate <code class=\"literal\">Cookie</code> header with all future requests, until the cookie’s expiration date. The client may ignore this header (and on the human web, that’s often a good idea), but there’s no guarantee that future requests will get a good response unless they provide the <code class=\"literal\">Cookie</code> header. This violates the principle of statelessness.</p>\n<h2>Slug</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Fairly high, but only in APP<a id=\"I_indexterm_tt1246\" class=\"indexterm\"></a> applications.</p>\n<p>The <code class=\"literal\">Slug</code> header is defined by the Atom Publishing Protocol as a way for a client to specify a title for a binary document when it POSTs that document to a collection. See <a class=\"xref\" href=\"ch09.html#binary-app\" title=\"Binary documents as APP members\">Binary documents as APP members</a>” in <a class=\"xref\" href=\"ch09.html\" title=\"Chapter&nbsp;9.&nbsp;The Building Blocks of Services\">Chapter&nbsp;9</a> for an example.</p>\n<h2>X-HTTP-Method-Override</h2>\n<p><span class=\"emphasis\"><em>Type</em></span>: Request header.</p>\n<p><span class=\"emphasis\"><em>Importance</em></span>: Low to medium.</p>\n<p>Some web services<a id=\"I_indexterm_tt1247\" class=\"indexterm\"></a> support this header as a way of making PUT, DELETE, and other requests using overloaded POST. The idea is to accommodate clients that don’t support or can’t use the real HTTP methods. Such a client would use POST and put the “real” HTTP method in this header. If you’re designing a service and want to support this feature, I recommend putting the “real” HTTP method in the URI’s query string. See <a class=\"xref\" href=\"ch08.html#faking-put\" title=\"Faking PUT and DELETE\">Faking PUT and DELETE</a>” in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a> for more details.</p>\n<h2>X-WSSE</h2>\n<p><span class=\"emphasis\"><em>Type:</em></span> Request header.</p>\n<p><span class=\"emphasis\"><em>Importance:</em></span> Medium.</p>\n<p>This is a custom header defined <a id=\"I_indexterm_tt1248\" class=\"indexterm\"></a>by the WSSE Username Token standard I described in <a class=\"xref\" href=\"ch08.html\" title=\"Chapter&nbsp;8.&nbsp;REST and ROA Best Practices\">Chapter&nbsp;8</a>. It’s sent in conjunction with the <code class=\"literal\">Authorization</code> header, and it contains the actual WSSE credentials. Why did the WSSE designers create a separate header instead that goes along with <code class=\"literal\">Authorization</code>, instead of just using <code class=\"literal\">Authorization</code>? Because WSSE was designed to be processed by CGI programs rather than by web servers.</p>\n<p>When a web server invokes a CGI program, it doesn’t pass in the contents of the <code class=\"literal\">Authorization</code> header. Web servers think they’re in charge of HTTP authentication. They don’t understand <code class=\"literal\">Authorization: WSSE profile=\"UsernameToken\"</code>, so they ignore it, and assume there’s no authentication required. The <code class=\"literal\">Authorization</code> header never makes it into the CGI program. But the CGI standard requires that web servers pass on the values of any <code class=\"literal\">X-</code> headers. The <code class=\"literal\">X-WSSE</code> header is a way of smuggling authentication credentials through a web server that doesn’t understand what they mean.<a id=\"I_indexterm_tt1249\" class=\"indexterm\"></a><a id=\"I_indexterm_tt1250\" class=\"indexterm\"></a></p>",
      "slug" : "nonstandard-headers"
    } ]
  } ]
}